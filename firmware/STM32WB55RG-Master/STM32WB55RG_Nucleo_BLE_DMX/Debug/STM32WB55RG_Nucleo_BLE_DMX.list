
STM32WB55RG_Nucleo_BLE_DMX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f09c  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000017bc  0800f1dc  0800f1dc  000101dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010998  08010998  00011998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080109a0  080109a0  000119a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080109a4  080109a4  000119a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000008c  20000008  080109a8  00012008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  20000094  08010a34  00012094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  200000cc  08010a69  000120cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e58  200000e0  08010a7a  000120e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000f38  08010a7a  00012f38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00012a67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00013000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  00013000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  08010a7a  000121e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .debug_info   00037754  00000000  00000000  00012a97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000076ac  00000000  00000000  0004a1eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00003228  00000000  00000000  00051898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000026c5  00000000  00000000  00054ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00030521  00000000  00000000  00057185  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   000405a2  00000000  00000000  000876a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    001077f8  00000000  00000000  000c7c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  001cf440  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000dc00  00000000  00000000  001cf484  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000006f  00000000  00000000  001dd084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200000e0 	.word	0x200000e0
 800015c:	00000000 	.word	0x00000000
 8000160:	0800f1c4 	.word	0x0800f1c4

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200000e4 	.word	0x200000e4
 800017c:	0800f1c4 	.word	0x0800f1c4

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_dmul>:
 8000230:	b570      	push	{r4, r5, r6, lr}
 8000232:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000236:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800023a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800023e:	bf1d      	ittte	ne
 8000240:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000244:	ea94 0f0c 	teqne	r4, ip
 8000248:	ea95 0f0c 	teqne	r5, ip
 800024c:	f000 f8de 	bleq	800040c <__aeabi_dmul+0x1dc>
 8000250:	442c      	add	r4, r5
 8000252:	ea81 0603 	eor.w	r6, r1, r3
 8000256:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800025a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800025e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000262:	bf18      	it	ne
 8000264:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000268:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800026c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000270:	d038      	beq.n	80002e4 <__aeabi_dmul+0xb4>
 8000272:	fba0 ce02 	umull	ip, lr, r0, r2
 8000276:	f04f 0500 	mov.w	r5, #0
 800027a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800027e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000282:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000286:	f04f 0600 	mov.w	r6, #0
 800028a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800028e:	f09c 0f00 	teq	ip, #0
 8000292:	bf18      	it	ne
 8000294:	f04e 0e01 	orrne.w	lr, lr, #1
 8000298:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800029c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002a0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002a4:	d204      	bcs.n	80002b0 <__aeabi_dmul+0x80>
 80002a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002aa:	416d      	adcs	r5, r5
 80002ac:	eb46 0606 	adc.w	r6, r6, r6
 80002b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002c4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80002c8:	bf88      	it	hi
 80002ca:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80002ce:	d81e      	bhi.n	800030e <__aeabi_dmul+0xde>
 80002d0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80002d4:	bf08      	it	eq
 80002d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002da:	f150 0000 	adcs.w	r0, r0, #0
 80002de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002e2:	bd70      	pop	{r4, r5, r6, pc}
 80002e4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002e8:	ea46 0101 	orr.w	r1, r6, r1
 80002ec:	ea40 0002 	orr.w	r0, r0, r2
 80002f0:	ea81 0103 	eor.w	r1, r1, r3
 80002f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002f8:	bfc2      	ittt	gt
 80002fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000302:	bd70      	popgt	{r4, r5, r6, pc}
 8000304:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000308:	f04f 0e00 	mov.w	lr, #0
 800030c:	3c01      	subs	r4, #1
 800030e:	f300 80ab 	bgt.w	8000468 <__aeabi_dmul+0x238>
 8000312:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000316:	bfde      	ittt	le
 8000318:	2000      	movle	r0, #0
 800031a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800031e:	bd70      	pople	{r4, r5, r6, pc}
 8000320:	f1c4 0400 	rsb	r4, r4, #0
 8000324:	3c20      	subs	r4, #32
 8000326:	da35      	bge.n	8000394 <__aeabi_dmul+0x164>
 8000328:	340c      	adds	r4, #12
 800032a:	dc1b      	bgt.n	8000364 <__aeabi_dmul+0x134>
 800032c:	f104 0414 	add.w	r4, r4, #20
 8000330:	f1c4 0520 	rsb	r5, r4, #32
 8000334:	fa00 f305 	lsl.w	r3, r0, r5
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea40 0002 	orr.w	r0, r0, r2
 8000344:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000348:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800034c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000350:	fa21 f604 	lsr.w	r6, r1, r4
 8000354:	eb42 0106 	adc.w	r1, r2, r6
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f1c4 040c 	rsb	r4, r4, #12
 8000368:	f1c4 0520 	rsb	r5, r4, #32
 800036c:	fa00 f304 	lsl.w	r3, r0, r4
 8000370:	fa20 f005 	lsr.w	r0, r0, r5
 8000374:	fa01 f204 	lsl.w	r2, r1, r4
 8000378:	ea40 0002 	orr.w	r0, r0, r2
 800037c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000380:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000384:	f141 0100 	adc.w	r1, r1, #0
 8000388:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800038c:	bf08      	it	eq
 800038e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000392:	bd70      	pop	{r4, r5, r6, pc}
 8000394:	f1c4 0520 	rsb	r5, r4, #32
 8000398:	fa00 f205 	lsl.w	r2, r0, r5
 800039c:	ea4e 0e02 	orr.w	lr, lr, r2
 80003a0:	fa20 f304 	lsr.w	r3, r0, r4
 80003a4:	fa01 f205 	lsl.w	r2, r1, r5
 80003a8:	ea43 0302 	orr.w	r3, r3, r2
 80003ac:	fa21 f004 	lsr.w	r0, r1, r4
 80003b0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003b4:	fa21 f204 	lsr.w	r2, r1, r4
 80003b8:	ea20 0002 	bic.w	r0, r0, r2
 80003bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003c4:	bf08      	it	eq
 80003c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003ca:	bd70      	pop	{r4, r5, r6, pc}
 80003cc:	f094 0f00 	teq	r4, #0
 80003d0:	d10f      	bne.n	80003f2 <__aeabi_dmul+0x1c2>
 80003d2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80003d6:	0040      	lsls	r0, r0, #1
 80003d8:	eb41 0101 	adc.w	r1, r1, r1
 80003dc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003e0:	bf08      	it	eq
 80003e2:	3c01      	subeq	r4, #1
 80003e4:	d0f7      	beq.n	80003d6 <__aeabi_dmul+0x1a6>
 80003e6:	ea41 0106 	orr.w	r1, r1, r6
 80003ea:	f095 0f00 	teq	r5, #0
 80003ee:	bf18      	it	ne
 80003f0:	4770      	bxne	lr
 80003f2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003f6:	0052      	lsls	r2, r2, #1
 80003f8:	eb43 0303 	adc.w	r3, r3, r3
 80003fc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000400:	bf08      	it	eq
 8000402:	3d01      	subeq	r5, #1
 8000404:	d0f7      	beq.n	80003f6 <__aeabi_dmul+0x1c6>
 8000406:	ea43 0306 	orr.w	r3, r3, r6
 800040a:	4770      	bx	lr
 800040c:	ea94 0f0c 	teq	r4, ip
 8000410:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000414:	bf18      	it	ne
 8000416:	ea95 0f0c 	teqne	r5, ip
 800041a:	d00c      	beq.n	8000436 <__aeabi_dmul+0x206>
 800041c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000420:	bf18      	it	ne
 8000422:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000426:	d1d1      	bne.n	80003cc <__aeabi_dmul+0x19c>
 8000428:	ea81 0103 	eor.w	r1, r1, r3
 800042c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000430:	f04f 0000 	mov.w	r0, #0
 8000434:	bd70      	pop	{r4, r5, r6, pc}
 8000436:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800043a:	bf06      	itte	eq
 800043c:	4610      	moveq	r0, r2
 800043e:	4619      	moveq	r1, r3
 8000440:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000444:	d019      	beq.n	800047a <__aeabi_dmul+0x24a>
 8000446:	ea94 0f0c 	teq	r4, ip
 800044a:	d102      	bne.n	8000452 <__aeabi_dmul+0x222>
 800044c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000450:	d113      	bne.n	800047a <__aeabi_dmul+0x24a>
 8000452:	ea95 0f0c 	teq	r5, ip
 8000456:	d105      	bne.n	8000464 <__aeabi_dmul+0x234>
 8000458:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800045c:	bf1c      	itt	ne
 800045e:	4610      	movne	r0, r2
 8000460:	4619      	movne	r1, r3
 8000462:	d10a      	bne.n	800047a <__aeabi_dmul+0x24a>
 8000464:	ea81 0103 	eor.w	r1, r1, r3
 8000468:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800046c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd70      	pop	{r4, r5, r6, pc}
 800047a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800047e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000482:	bd70      	pop	{r4, r5, r6, pc}

08000484 <__aeabi_drsub>:
 8000484:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000488:	e002      	b.n	8000490 <__adddf3>
 800048a:	bf00      	nop

0800048c <__aeabi_dsub>:
 800048c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000490 <__adddf3>:
 8000490:	b530      	push	{r4, r5, lr}
 8000492:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000496:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800049a:	ea94 0f05 	teq	r4, r5
 800049e:	bf08      	it	eq
 80004a0:	ea90 0f02 	teqeq	r0, r2
 80004a4:	bf1f      	itttt	ne
 80004a6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004aa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ae:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004b2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b6:	f000 80e2 	beq.w	800067e <__adddf3+0x1ee>
 80004ba:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004be:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004c2:	bfb8      	it	lt
 80004c4:	426d      	neglt	r5, r5
 80004c6:	dd0c      	ble.n	80004e2 <__adddf3+0x52>
 80004c8:	442c      	add	r4, r5
 80004ca:	ea80 0202 	eor.w	r2, r0, r2
 80004ce:	ea81 0303 	eor.w	r3, r1, r3
 80004d2:	ea82 0000 	eor.w	r0, r2, r0
 80004d6:	ea83 0101 	eor.w	r1, r3, r1
 80004da:	ea80 0202 	eor.w	r2, r0, r2
 80004de:	ea81 0303 	eor.w	r3, r1, r3
 80004e2:	2d36      	cmp	r5, #54	@ 0x36
 80004e4:	bf88      	it	hi
 80004e6:	bd30      	pophi	{r4, r5, pc}
 80004e8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004f0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004f4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004f8:	d002      	beq.n	8000500 <__adddf3+0x70>
 80004fa:	4240      	negs	r0, r0
 80004fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000500:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000504:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000508:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800050c:	d002      	beq.n	8000514 <__adddf3+0x84>
 800050e:	4252      	negs	r2, r2
 8000510:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000514:	ea94 0f05 	teq	r4, r5
 8000518:	f000 80a7 	beq.w	800066a <__adddf3+0x1da>
 800051c:	f1a4 0401 	sub.w	r4, r4, #1
 8000520:	f1d5 0e20 	rsbs	lr, r5, #32
 8000524:	db0d      	blt.n	8000542 <__adddf3+0xb2>
 8000526:	fa02 fc0e 	lsl.w	ip, r2, lr
 800052a:	fa22 f205 	lsr.w	r2, r2, r5
 800052e:	1880      	adds	r0, r0, r2
 8000530:	f141 0100 	adc.w	r1, r1, #0
 8000534:	fa03 f20e 	lsl.w	r2, r3, lr
 8000538:	1880      	adds	r0, r0, r2
 800053a:	fa43 f305 	asr.w	r3, r3, r5
 800053e:	4159      	adcs	r1, r3
 8000540:	e00e      	b.n	8000560 <__adddf3+0xd0>
 8000542:	f1a5 0520 	sub.w	r5, r5, #32
 8000546:	f10e 0e20 	add.w	lr, lr, #32
 800054a:	2a01      	cmp	r2, #1
 800054c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000550:	bf28      	it	cs
 8000552:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000556:	fa43 f305 	asr.w	r3, r3, r5
 800055a:	18c0      	adds	r0, r0, r3
 800055c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000560:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000564:	d507      	bpl.n	8000576 <__adddf3+0xe6>
 8000566:	f04f 0e00 	mov.w	lr, #0
 800056a:	f1dc 0c00 	rsbs	ip, ip, #0
 800056e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000572:	eb6e 0101 	sbc.w	r1, lr, r1
 8000576:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800057a:	d31b      	bcc.n	80005b4 <__adddf3+0x124>
 800057c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000580:	d30c      	bcc.n	800059c <__adddf3+0x10c>
 8000582:	0849      	lsrs	r1, r1, #1
 8000584:	ea5f 0030 	movs.w	r0, r0, rrx
 8000588:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800058c:	f104 0401 	add.w	r4, r4, #1
 8000590:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000594:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000598:	f080 809a 	bcs.w	80006d0 <__adddf3+0x240>
 800059c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005a0:	bf08      	it	eq
 80005a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005a6:	f150 0000 	adcs.w	r0, r0, #0
 80005aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ae:	ea41 0105 	orr.w	r1, r1, r5
 80005b2:	bd30      	pop	{r4, r5, pc}
 80005b4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005b8:	4140      	adcs	r0, r0
 80005ba:	eb41 0101 	adc.w	r1, r1, r1
 80005be:	3c01      	subs	r4, #1
 80005c0:	bf28      	it	cs
 80005c2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80005c6:	d2e9      	bcs.n	800059c <__adddf3+0x10c>
 80005c8:	f091 0f00 	teq	r1, #0
 80005cc:	bf04      	itt	eq
 80005ce:	4601      	moveq	r1, r0
 80005d0:	2000      	moveq	r0, #0
 80005d2:	fab1 f381 	clz	r3, r1
 80005d6:	bf08      	it	eq
 80005d8:	3320      	addeq	r3, #32
 80005da:	f1a3 030b 	sub.w	r3, r3, #11
 80005de:	f1b3 0220 	subs.w	r2, r3, #32
 80005e2:	da0c      	bge.n	80005fe <__adddf3+0x16e>
 80005e4:	320c      	adds	r2, #12
 80005e6:	dd08      	ble.n	80005fa <__adddf3+0x16a>
 80005e8:	f102 0c14 	add.w	ip, r2, #20
 80005ec:	f1c2 020c 	rsb	r2, r2, #12
 80005f0:	fa01 f00c 	lsl.w	r0, r1, ip
 80005f4:	fa21 f102 	lsr.w	r1, r1, r2
 80005f8:	e00c      	b.n	8000614 <__adddf3+0x184>
 80005fa:	f102 0214 	add.w	r2, r2, #20
 80005fe:	bfd8      	it	le
 8000600:	f1c2 0c20 	rsble	ip, r2, #32
 8000604:	fa01 f102 	lsl.w	r1, r1, r2
 8000608:	fa20 fc0c 	lsr.w	ip, r0, ip
 800060c:	bfdc      	itt	le
 800060e:	ea41 010c 	orrle.w	r1, r1, ip
 8000612:	4090      	lslle	r0, r2
 8000614:	1ae4      	subs	r4, r4, r3
 8000616:	bfa2      	ittt	ge
 8000618:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800061c:	4329      	orrge	r1, r5
 800061e:	bd30      	popge	{r4, r5, pc}
 8000620:	ea6f 0404 	mvn.w	r4, r4
 8000624:	3c1f      	subs	r4, #31
 8000626:	da1c      	bge.n	8000662 <__adddf3+0x1d2>
 8000628:	340c      	adds	r4, #12
 800062a:	dc0e      	bgt.n	800064a <__adddf3+0x1ba>
 800062c:	f104 0414 	add.w	r4, r4, #20
 8000630:	f1c4 0220 	rsb	r2, r4, #32
 8000634:	fa20 f004 	lsr.w	r0, r0, r4
 8000638:	fa01 f302 	lsl.w	r3, r1, r2
 800063c:	ea40 0003 	orr.w	r0, r0, r3
 8000640:	fa21 f304 	lsr.w	r3, r1, r4
 8000644:	ea45 0103 	orr.w	r1, r5, r3
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	f1c4 040c 	rsb	r4, r4, #12
 800064e:	f1c4 0220 	rsb	r2, r4, #32
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 f304 	lsl.w	r3, r1, r4
 800065a:	ea40 0003 	orr.w	r0, r0, r3
 800065e:	4629      	mov	r1, r5
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	fa21 f004 	lsr.w	r0, r1, r4
 8000666:	4629      	mov	r1, r5
 8000668:	bd30      	pop	{r4, r5, pc}
 800066a:	f094 0f00 	teq	r4, #0
 800066e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000672:	bf06      	itte	eq
 8000674:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000678:	3401      	addeq	r4, #1
 800067a:	3d01      	subne	r5, #1
 800067c:	e74e      	b.n	800051c <__adddf3+0x8c>
 800067e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000682:	bf18      	it	ne
 8000684:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000688:	d029      	beq.n	80006de <__adddf3+0x24e>
 800068a:	ea94 0f05 	teq	r4, r5
 800068e:	bf08      	it	eq
 8000690:	ea90 0f02 	teqeq	r0, r2
 8000694:	d005      	beq.n	80006a2 <__adddf3+0x212>
 8000696:	ea54 0c00 	orrs.w	ip, r4, r0
 800069a:	bf04      	itt	eq
 800069c:	4619      	moveq	r1, r3
 800069e:	4610      	moveq	r0, r2
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	ea91 0f03 	teq	r1, r3
 80006a6:	bf1e      	ittt	ne
 80006a8:	2100      	movne	r1, #0
 80006aa:	2000      	movne	r0, #0
 80006ac:	bd30      	popne	{r4, r5, pc}
 80006ae:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006b2:	d105      	bne.n	80006c0 <__adddf3+0x230>
 80006b4:	0040      	lsls	r0, r0, #1
 80006b6:	4149      	adcs	r1, r1
 80006b8:	bf28      	it	cs
 80006ba:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006be:	bd30      	pop	{r4, r5, pc}
 80006c0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80006c4:	bf3c      	itt	cc
 80006c6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80006ca:	bd30      	popcc	{r4, r5, pc}
 80006cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006d0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80006d4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd30      	pop	{r4, r5, pc}
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf1a      	itte	ne
 80006e4:	4619      	movne	r1, r3
 80006e6:	4610      	movne	r0, r2
 80006e8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006ec:	bf1c      	itt	ne
 80006ee:	460b      	movne	r3, r1
 80006f0:	4602      	movne	r2, r0
 80006f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006f6:	bf06      	itte	eq
 80006f8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006fc:	ea91 0f03 	teqeq	r1, r3
 8000700:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000704:	bd30      	pop	{r4, r5, pc}
 8000706:	bf00      	nop

08000708 <__aeabi_ui2d>:
 8000708:	f090 0f00 	teq	r0, #0
 800070c:	bf04      	itt	eq
 800070e:	2100      	moveq	r1, #0
 8000710:	4770      	bxeq	lr
 8000712:	b530      	push	{r4, r5, lr}
 8000714:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000718:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800071c:	f04f 0500 	mov.w	r5, #0
 8000720:	f04f 0100 	mov.w	r1, #0
 8000724:	e750      	b.n	80005c8 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_i2d>:
 8000728:	f090 0f00 	teq	r0, #0
 800072c:	bf04      	itt	eq
 800072e:	2100      	moveq	r1, #0
 8000730:	4770      	bxeq	lr
 8000732:	b530      	push	{r4, r5, lr}
 8000734:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000738:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800073c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000740:	bf48      	it	mi
 8000742:	4240      	negmi	r0, r0
 8000744:	f04f 0100 	mov.w	r1, #0
 8000748:	e73e      	b.n	80005c8 <__adddf3+0x138>
 800074a:	bf00      	nop

0800074c <__aeabi_f2d>:
 800074c:	0042      	lsls	r2, r0, #1
 800074e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000752:	ea4f 0131 	mov.w	r1, r1, rrx
 8000756:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800075a:	bf1f      	itttt	ne
 800075c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000760:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000764:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000768:	4770      	bxne	lr
 800076a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800076e:	bf08      	it	eq
 8000770:	4770      	bxeq	lr
 8000772:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000776:	bf04      	itt	eq
 8000778:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800077c:	4770      	bxeq	lr
 800077e:	b530      	push	{r4, r5, lr}
 8000780:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000784:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000788:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	e71c      	b.n	80005c8 <__adddf3+0x138>
 800078e:	bf00      	nop

08000790 <__aeabi_ul2d>:
 8000790:	ea50 0201 	orrs.w	r2, r0, r1
 8000794:	bf08      	it	eq
 8000796:	4770      	bxeq	lr
 8000798:	b530      	push	{r4, r5, lr}
 800079a:	f04f 0500 	mov.w	r5, #0
 800079e:	e00a      	b.n	80007b6 <__aeabi_l2d+0x16>

080007a0 <__aeabi_l2d>:
 80007a0:	ea50 0201 	orrs.w	r2, r0, r1
 80007a4:	bf08      	it	eq
 80007a6:	4770      	bxeq	lr
 80007a8:	b530      	push	{r4, r5, lr}
 80007aa:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007ae:	d502      	bpl.n	80007b6 <__aeabi_l2d+0x16>
 80007b0:	4240      	negs	r0, r0
 80007b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007b6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007ba:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007be:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007c2:	f43f aed8 	beq.w	8000576 <__adddf3+0xe6>
 80007c6:	f04f 0203 	mov.w	r2, #3
 80007ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ce:	bf18      	it	ne
 80007d0:	3203      	addne	r2, #3
 80007d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007d6:	bf18      	it	ne
 80007d8:	3203      	addne	r2, #3
 80007da:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007de:	f1c2 0320 	rsb	r3, r2, #32
 80007e2:	fa00 fc03 	lsl.w	ip, r0, r3
 80007e6:	fa20 f002 	lsr.w	r0, r0, r2
 80007ea:	fa01 fe03 	lsl.w	lr, r1, r3
 80007ee:	ea40 000e 	orr.w	r0, r0, lr
 80007f2:	fa21 f102 	lsr.w	r1, r1, r2
 80007f6:	4414      	add	r4, r2
 80007f8:	e6bd      	b.n	8000576 <__adddf3+0xe6>
 80007fa:	bf00      	nop

080007fc <__aeabi_uldivmod>:
 80007fc:	b953      	cbnz	r3, 8000814 <__aeabi_uldivmod+0x18>
 80007fe:	b94a      	cbnz	r2, 8000814 <__aeabi_uldivmod+0x18>
 8000800:	2900      	cmp	r1, #0
 8000802:	bf08      	it	eq
 8000804:	2800      	cmpeq	r0, #0
 8000806:	bf1c      	itt	ne
 8000808:	f04f 31ff 	movne.w	r1, #4294967295
 800080c:	f04f 30ff 	movne.w	r0, #4294967295
 8000810:	f000 b988 	b.w	8000b24 <__aeabi_idiv0>
 8000814:	f1ad 0c08 	sub.w	ip, sp, #8
 8000818:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800081c:	f000 f806 	bl	800082c <__udivmoddi4>
 8000820:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000824:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000828:	b004      	add	sp, #16
 800082a:	4770      	bx	lr

0800082c <__udivmoddi4>:
 800082c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000830:	9d08      	ldr	r5, [sp, #32]
 8000832:	468e      	mov	lr, r1
 8000834:	4604      	mov	r4, r0
 8000836:	4688      	mov	r8, r1
 8000838:	2b00      	cmp	r3, #0
 800083a:	d14a      	bne.n	80008d2 <__udivmoddi4+0xa6>
 800083c:	428a      	cmp	r2, r1
 800083e:	4617      	mov	r7, r2
 8000840:	d962      	bls.n	8000908 <__udivmoddi4+0xdc>
 8000842:	fab2 f682 	clz	r6, r2
 8000846:	b14e      	cbz	r6, 800085c <__udivmoddi4+0x30>
 8000848:	f1c6 0320 	rsb	r3, r6, #32
 800084c:	fa01 f806 	lsl.w	r8, r1, r6
 8000850:	fa20 f303 	lsr.w	r3, r0, r3
 8000854:	40b7      	lsls	r7, r6
 8000856:	ea43 0808 	orr.w	r8, r3, r8
 800085a:	40b4      	lsls	r4, r6
 800085c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000860:	fa1f fc87 	uxth.w	ip, r7
 8000864:	fbb8 f1fe 	udiv	r1, r8, lr
 8000868:	0c23      	lsrs	r3, r4, #16
 800086a:	fb0e 8811 	mls	r8, lr, r1, r8
 800086e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000872:	fb01 f20c 	mul.w	r2, r1, ip
 8000876:	429a      	cmp	r2, r3
 8000878:	d909      	bls.n	800088e <__udivmoddi4+0x62>
 800087a:	18fb      	adds	r3, r7, r3
 800087c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000880:	f080 80ea 	bcs.w	8000a58 <__udivmoddi4+0x22c>
 8000884:	429a      	cmp	r2, r3
 8000886:	f240 80e7 	bls.w	8000a58 <__udivmoddi4+0x22c>
 800088a:	3902      	subs	r1, #2
 800088c:	443b      	add	r3, r7
 800088e:	1a9a      	subs	r2, r3, r2
 8000890:	b2a3      	uxth	r3, r4
 8000892:	fbb2 f0fe 	udiv	r0, r2, lr
 8000896:	fb0e 2210 	mls	r2, lr, r0, r2
 800089a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800089e:	fb00 fc0c 	mul.w	ip, r0, ip
 80008a2:	459c      	cmp	ip, r3
 80008a4:	d909      	bls.n	80008ba <__udivmoddi4+0x8e>
 80008a6:	18fb      	adds	r3, r7, r3
 80008a8:	f100 32ff 	add.w	r2, r0, #4294967295
 80008ac:	f080 80d6 	bcs.w	8000a5c <__udivmoddi4+0x230>
 80008b0:	459c      	cmp	ip, r3
 80008b2:	f240 80d3 	bls.w	8000a5c <__udivmoddi4+0x230>
 80008b6:	443b      	add	r3, r7
 80008b8:	3802      	subs	r0, #2
 80008ba:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80008be:	eba3 030c 	sub.w	r3, r3, ip
 80008c2:	2100      	movs	r1, #0
 80008c4:	b11d      	cbz	r5, 80008ce <__udivmoddi4+0xa2>
 80008c6:	40f3      	lsrs	r3, r6
 80008c8:	2200      	movs	r2, #0
 80008ca:	e9c5 3200 	strd	r3, r2, [r5]
 80008ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008d2:	428b      	cmp	r3, r1
 80008d4:	d905      	bls.n	80008e2 <__udivmoddi4+0xb6>
 80008d6:	b10d      	cbz	r5, 80008dc <__udivmoddi4+0xb0>
 80008d8:	e9c5 0100 	strd	r0, r1, [r5]
 80008dc:	2100      	movs	r1, #0
 80008de:	4608      	mov	r0, r1
 80008e0:	e7f5      	b.n	80008ce <__udivmoddi4+0xa2>
 80008e2:	fab3 f183 	clz	r1, r3
 80008e6:	2900      	cmp	r1, #0
 80008e8:	d146      	bne.n	8000978 <__udivmoddi4+0x14c>
 80008ea:	4573      	cmp	r3, lr
 80008ec:	d302      	bcc.n	80008f4 <__udivmoddi4+0xc8>
 80008ee:	4282      	cmp	r2, r0
 80008f0:	f200 8105 	bhi.w	8000afe <__udivmoddi4+0x2d2>
 80008f4:	1a84      	subs	r4, r0, r2
 80008f6:	eb6e 0203 	sbc.w	r2, lr, r3
 80008fa:	2001      	movs	r0, #1
 80008fc:	4690      	mov	r8, r2
 80008fe:	2d00      	cmp	r5, #0
 8000900:	d0e5      	beq.n	80008ce <__udivmoddi4+0xa2>
 8000902:	e9c5 4800 	strd	r4, r8, [r5]
 8000906:	e7e2      	b.n	80008ce <__udivmoddi4+0xa2>
 8000908:	2a00      	cmp	r2, #0
 800090a:	f000 8090 	beq.w	8000a2e <__udivmoddi4+0x202>
 800090e:	fab2 f682 	clz	r6, r2
 8000912:	2e00      	cmp	r6, #0
 8000914:	f040 80a4 	bne.w	8000a60 <__udivmoddi4+0x234>
 8000918:	1a8a      	subs	r2, r1, r2
 800091a:	0c03      	lsrs	r3, r0, #16
 800091c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000920:	b280      	uxth	r0, r0
 8000922:	b2bc      	uxth	r4, r7
 8000924:	2101      	movs	r1, #1
 8000926:	fbb2 fcfe 	udiv	ip, r2, lr
 800092a:	fb0e 221c 	mls	r2, lr, ip, r2
 800092e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000932:	fb04 f20c 	mul.w	r2, r4, ip
 8000936:	429a      	cmp	r2, r3
 8000938:	d907      	bls.n	800094a <__udivmoddi4+0x11e>
 800093a:	18fb      	adds	r3, r7, r3
 800093c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000940:	d202      	bcs.n	8000948 <__udivmoddi4+0x11c>
 8000942:	429a      	cmp	r2, r3
 8000944:	f200 80e0 	bhi.w	8000b08 <__udivmoddi4+0x2dc>
 8000948:	46c4      	mov	ip, r8
 800094a:	1a9b      	subs	r3, r3, r2
 800094c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000950:	fb0e 3312 	mls	r3, lr, r2, r3
 8000954:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000958:	fb02 f404 	mul.w	r4, r2, r4
 800095c:	429c      	cmp	r4, r3
 800095e:	d907      	bls.n	8000970 <__udivmoddi4+0x144>
 8000960:	18fb      	adds	r3, r7, r3
 8000962:	f102 30ff 	add.w	r0, r2, #4294967295
 8000966:	d202      	bcs.n	800096e <__udivmoddi4+0x142>
 8000968:	429c      	cmp	r4, r3
 800096a:	f200 80ca 	bhi.w	8000b02 <__udivmoddi4+0x2d6>
 800096e:	4602      	mov	r2, r0
 8000970:	1b1b      	subs	r3, r3, r4
 8000972:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000976:	e7a5      	b.n	80008c4 <__udivmoddi4+0x98>
 8000978:	f1c1 0620 	rsb	r6, r1, #32
 800097c:	408b      	lsls	r3, r1
 800097e:	fa22 f706 	lsr.w	r7, r2, r6
 8000982:	431f      	orrs	r7, r3
 8000984:	fa0e f401 	lsl.w	r4, lr, r1
 8000988:	fa20 f306 	lsr.w	r3, r0, r6
 800098c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000990:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000994:	4323      	orrs	r3, r4
 8000996:	fa00 f801 	lsl.w	r8, r0, r1
 800099a:	fa1f fc87 	uxth.w	ip, r7
 800099e:	fbbe f0f9 	udiv	r0, lr, r9
 80009a2:	0c1c      	lsrs	r4, r3, #16
 80009a4:	fb09 ee10 	mls	lr, r9, r0, lr
 80009a8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80009ac:	fb00 fe0c 	mul.w	lr, r0, ip
 80009b0:	45a6      	cmp	lr, r4
 80009b2:	fa02 f201 	lsl.w	r2, r2, r1
 80009b6:	d909      	bls.n	80009cc <__udivmoddi4+0x1a0>
 80009b8:	193c      	adds	r4, r7, r4
 80009ba:	f100 3aff 	add.w	sl, r0, #4294967295
 80009be:	f080 809c 	bcs.w	8000afa <__udivmoddi4+0x2ce>
 80009c2:	45a6      	cmp	lr, r4
 80009c4:	f240 8099 	bls.w	8000afa <__udivmoddi4+0x2ce>
 80009c8:	3802      	subs	r0, #2
 80009ca:	443c      	add	r4, r7
 80009cc:	eba4 040e 	sub.w	r4, r4, lr
 80009d0:	fa1f fe83 	uxth.w	lr, r3
 80009d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80009d8:	fb09 4413 	mls	r4, r9, r3, r4
 80009dc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80009e0:	fb03 fc0c 	mul.w	ip, r3, ip
 80009e4:	45a4      	cmp	ip, r4
 80009e6:	d908      	bls.n	80009fa <__udivmoddi4+0x1ce>
 80009e8:	193c      	adds	r4, r7, r4
 80009ea:	f103 3eff 	add.w	lr, r3, #4294967295
 80009ee:	f080 8082 	bcs.w	8000af6 <__udivmoddi4+0x2ca>
 80009f2:	45a4      	cmp	ip, r4
 80009f4:	d97f      	bls.n	8000af6 <__udivmoddi4+0x2ca>
 80009f6:	3b02      	subs	r3, #2
 80009f8:	443c      	add	r4, r7
 80009fa:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80009fe:	eba4 040c 	sub.w	r4, r4, ip
 8000a02:	fba0 ec02 	umull	lr, ip, r0, r2
 8000a06:	4564      	cmp	r4, ip
 8000a08:	4673      	mov	r3, lr
 8000a0a:	46e1      	mov	r9, ip
 8000a0c:	d362      	bcc.n	8000ad4 <__udivmoddi4+0x2a8>
 8000a0e:	d05f      	beq.n	8000ad0 <__udivmoddi4+0x2a4>
 8000a10:	b15d      	cbz	r5, 8000a2a <__udivmoddi4+0x1fe>
 8000a12:	ebb8 0203 	subs.w	r2, r8, r3
 8000a16:	eb64 0409 	sbc.w	r4, r4, r9
 8000a1a:	fa04 f606 	lsl.w	r6, r4, r6
 8000a1e:	fa22 f301 	lsr.w	r3, r2, r1
 8000a22:	431e      	orrs	r6, r3
 8000a24:	40cc      	lsrs	r4, r1
 8000a26:	e9c5 6400 	strd	r6, r4, [r5]
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	e74f      	b.n	80008ce <__udivmoddi4+0xa2>
 8000a2e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000a32:	0c01      	lsrs	r1, r0, #16
 8000a34:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000a38:	b280      	uxth	r0, r0
 8000a3a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000a3e:	463b      	mov	r3, r7
 8000a40:	4638      	mov	r0, r7
 8000a42:	463c      	mov	r4, r7
 8000a44:	46b8      	mov	r8, r7
 8000a46:	46be      	mov	lr, r7
 8000a48:	2620      	movs	r6, #32
 8000a4a:	fbb1 f1f7 	udiv	r1, r1, r7
 8000a4e:	eba2 0208 	sub.w	r2, r2, r8
 8000a52:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000a56:	e766      	b.n	8000926 <__udivmoddi4+0xfa>
 8000a58:	4601      	mov	r1, r0
 8000a5a:	e718      	b.n	800088e <__udivmoddi4+0x62>
 8000a5c:	4610      	mov	r0, r2
 8000a5e:	e72c      	b.n	80008ba <__udivmoddi4+0x8e>
 8000a60:	f1c6 0220 	rsb	r2, r6, #32
 8000a64:	fa2e f302 	lsr.w	r3, lr, r2
 8000a68:	40b7      	lsls	r7, r6
 8000a6a:	40b1      	lsls	r1, r6
 8000a6c:	fa20 f202 	lsr.w	r2, r0, r2
 8000a70:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a74:	430a      	orrs	r2, r1
 8000a76:	fbb3 f8fe 	udiv	r8, r3, lr
 8000a7a:	b2bc      	uxth	r4, r7
 8000a7c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000a80:	0c11      	lsrs	r1, r2, #16
 8000a82:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a86:	fb08 f904 	mul.w	r9, r8, r4
 8000a8a:	40b0      	lsls	r0, r6
 8000a8c:	4589      	cmp	r9, r1
 8000a8e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000a92:	b280      	uxth	r0, r0
 8000a94:	d93e      	bls.n	8000b14 <__udivmoddi4+0x2e8>
 8000a96:	1879      	adds	r1, r7, r1
 8000a98:	f108 3cff 	add.w	ip, r8, #4294967295
 8000a9c:	d201      	bcs.n	8000aa2 <__udivmoddi4+0x276>
 8000a9e:	4589      	cmp	r9, r1
 8000aa0:	d81f      	bhi.n	8000ae2 <__udivmoddi4+0x2b6>
 8000aa2:	eba1 0109 	sub.w	r1, r1, r9
 8000aa6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000aaa:	fb09 f804 	mul.w	r8, r9, r4
 8000aae:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ab2:	b292      	uxth	r2, r2
 8000ab4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ab8:	4542      	cmp	r2, r8
 8000aba:	d229      	bcs.n	8000b10 <__udivmoddi4+0x2e4>
 8000abc:	18ba      	adds	r2, r7, r2
 8000abe:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ac2:	d2c4      	bcs.n	8000a4e <__udivmoddi4+0x222>
 8000ac4:	4542      	cmp	r2, r8
 8000ac6:	d2c2      	bcs.n	8000a4e <__udivmoddi4+0x222>
 8000ac8:	f1a9 0102 	sub.w	r1, r9, #2
 8000acc:	443a      	add	r2, r7
 8000ace:	e7be      	b.n	8000a4e <__udivmoddi4+0x222>
 8000ad0:	45f0      	cmp	r8, lr
 8000ad2:	d29d      	bcs.n	8000a10 <__udivmoddi4+0x1e4>
 8000ad4:	ebbe 0302 	subs.w	r3, lr, r2
 8000ad8:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000adc:	3801      	subs	r0, #1
 8000ade:	46e1      	mov	r9, ip
 8000ae0:	e796      	b.n	8000a10 <__udivmoddi4+0x1e4>
 8000ae2:	eba7 0909 	sub.w	r9, r7, r9
 8000ae6:	4449      	add	r1, r9
 8000ae8:	f1a8 0c02 	sub.w	ip, r8, #2
 8000aec:	fbb1 f9fe 	udiv	r9, r1, lr
 8000af0:	fb09 f804 	mul.w	r8, r9, r4
 8000af4:	e7db      	b.n	8000aae <__udivmoddi4+0x282>
 8000af6:	4673      	mov	r3, lr
 8000af8:	e77f      	b.n	80009fa <__udivmoddi4+0x1ce>
 8000afa:	4650      	mov	r0, sl
 8000afc:	e766      	b.n	80009cc <__udivmoddi4+0x1a0>
 8000afe:	4608      	mov	r0, r1
 8000b00:	e6fd      	b.n	80008fe <__udivmoddi4+0xd2>
 8000b02:	443b      	add	r3, r7
 8000b04:	3a02      	subs	r2, #2
 8000b06:	e733      	b.n	8000970 <__udivmoddi4+0x144>
 8000b08:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b0c:	443b      	add	r3, r7
 8000b0e:	e71c      	b.n	800094a <__udivmoddi4+0x11e>
 8000b10:	4649      	mov	r1, r9
 8000b12:	e79c      	b.n	8000a4e <__udivmoddi4+0x222>
 8000b14:	eba1 0109 	sub.w	r1, r1, r9
 8000b18:	46c4      	mov	ip, r8
 8000b1a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b1e:	fb09 f804 	mul.w	r8, r9, r4
 8000b22:	e7c4      	b.n	8000aae <__udivmoddi4+0x282>

08000b24 <__aeabi_idiv0>:
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8000b28:	b5b0      	push	{r4, r5, r7, lr}
 8000b2a:	b088      	sub	sp, #32
 8000b2c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000b2e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b5c <APPD_EnableCPU2+0x34>)
 8000b30:	1d3c      	adds	r4, r7, #4
 8000b32:	461d      	mov	r5, r3
 8000b34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b38:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b3c:	c403      	stmia	r4!, {r0, r1}
 8000b3e:	8022      	strh	r2, [r4, #0]
 8000b40:	3402      	adds	r4, #2
 8000b42:	0c13      	lsrs	r3, r2, #16
 8000b44:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000b46:	f00a ffe9 	bl	800bb1c <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000b4a:	1d3b      	adds	r3, r7, #4
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f00a fa7a 	bl	800b046 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000b52:	bf00      	nop
}
 8000b54:	3720      	adds	r7, #32
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bdb0      	pop	{r4, r5, r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	0800f1dc 	.word	0x0800f1dc

08000b60 <DbgOutputTraces>:
/* USER CODE END DbgOutputInit */
  return;
}

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	60f8      	str	r0, [r7, #12]
 8000b68:	460b      	mov	r3, r1
 8000b6a:	607a      	str	r2, [r7, #4]
 8000b6c:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 8000b6e:	897a      	ldrh	r2, [r7, #10]
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	68f9      	ldr	r1, [r7, #12]
 8000b74:	2000      	movs	r0, #0
 8000b76:	f001 f8dd 	bl	8001d34 <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 8000b7a:	bf00      	nop
}
 8000b7c:	3710      	adds	r7, #16
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
	...

08000b84 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000b8c:	4b07      	ldr	r3, [pc, #28]	@ (8000bac <LL_C2_PWR_SetPowerMode+0x28>)
 8000b8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000b92:	f023 0207 	bic.w	r2, r3, #7
 8000b96:	4905      	ldr	r1, [pc, #20]	@ (8000bac <LL_C2_PWR_SetPowerMode+0x28>)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	4313      	orrs	r3, r2
 8000b9c:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8000ba0:	bf00      	nop
 8000ba2:	370c      	adds	r7, #12
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr
 8000bac:	58000400 	.word	0x58000400

08000bb0 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000bb8:	4b06      	ldr	r3, [pc, #24]	@ (8000bd4 <LL_EXTI_EnableIT_32_63+0x24>)
 8000bba:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8000bbe:	4905      	ldr	r1, [pc, #20]	@ (8000bd4 <LL_EXTI_EnableIT_32_63+0x24>)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	4313      	orrs	r3, r2
 8000bc4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8000bc8:	bf00      	nop
 8000bca:	370c      	adds	r7, #12
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr
 8000bd4:	58000800 	.word	0x58000800

08000bd8 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000be0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000be4:	4a0a      	ldr	r2, [pc, #40]	@ (8000c10 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000be6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000bea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000bee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000bf2:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	021b      	lsls	r3, r3, #8
 8000bfa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000bfe:	4313      	orrs	r3, r2
 8000c00:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 8000c04:	bf00      	nop
 8000c06:	370c      	adds	r7, #12
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr
 8000c10:	cafecafe 	.word	0xcafecafe

08000c14 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000c1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c20:	689b      	ldr	r3, [r3, #8]
 8000c22:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8000c26:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	608b      	str	r3, [r1, #8]
}
 8000c30:	bf00      	nop
 8000c32:	370c      	adds	r7, #12
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr

08000c3c <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8000c40:	4b04      	ldr	r3, [pc, #16]	@ (8000c54 <LL_DBGMCU_GetDeviceID+0x18>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	e0042000 	.word	0xe0042000

08000c58 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000c5c:	4b04      	ldr	r3, [pc, #16]	@ (8000c70 <LL_DBGMCU_GetRevisionID+0x18>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	0c1b      	lsrs	r3, r3, #16
 8000c62:	b29b      	uxth	r3, r3
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	e0042000 	.word	0xe0042000

08000c74 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000c78:	4b05      	ldr	r3, [pc, #20]	@ (8000c90 <LL_LPM_EnableSleep+0x1c>)
 8000c7a:	691b      	ldr	r3, [r3, #16]
 8000c7c:	4a04      	ldr	r2, [pc, #16]	@ (8000c90 <LL_LPM_EnableSleep+0x1c>)
 8000c7e:	f023 0304 	bic.w	r3, r3, #4
 8000c82:	6113      	str	r3, [r2, #16]
}
 8000c84:	bf00      	nop
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	e000ed00 	.word	0xe000ed00

08000c94 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	22ff      	movs	r2, #255	@ 0xff
 8000ca0:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000ca2:	bf00      	nop
 8000ca4:	370c      	adds	r7, #12
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr

08000cae <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	b083      	sub	sp, #12
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	22ca      	movs	r2, #202	@ 0xca
 8000cba:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2253      	movs	r2, #83	@ 0x53
 8000cc0:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000cc2:	bf00      	nop
 8000cc4:	370c      	adds	r7, #12
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr

08000cce <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	b083      	sub	sp, #12
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	6078      	str	r0, [r7, #4]
 8000cd6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	689b      	ldr	r3, [r3, #8]
 8000cdc:	f023 0207 	bic.w	r2, r3, #7
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	431a      	orrs	r2, r3
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	609a      	str	r2, [r3, #8]
}
 8000ce8:	bf00      	nop
 8000cea:	370c      	adds	r7, #12
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr

08000cf4 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000cf8:	4b04      	ldr	r3, [pc, #16]	@ (8000d0c <MX_APPE_Config+0x18>)
 8000cfa:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000cfe:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8000d00:	f000 f824 	bl	8000d4c <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8000d04:	f000 f829 	bl	8000d5a <Config_HSE>

  return;
 8000d08:	bf00      	nop
}
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	58004000 	.word	0x58004000

08000d10 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8000d14:	f000 f835 	bl	8000d82 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8000d18:	f000 f84e 	bl	8000db8 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000d1c:	4903      	ldr	r1, [pc, #12]	@ (8000d2c <MX_APPE_Init+0x1c>)
 8000d1e:	2000      	movs	r0, #0
 8000d20:	f000 fe16 	bl	8001950 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000d24:	f000 f856 	bl	8000dd4 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 8000d28:	bf00      	nop
}
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	20000438 	.word	0x20000438

08000d30 <Init_Smps>:

void Init_Smps(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8000d34:	bf00      	nop
}
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr

08000d3e <Init_Exti>:

void Init_Exti(void)
{
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8000d42:	2050      	movs	r0, #80	@ 0x50
 8000d44:	f7ff ff34 	bl	8000bb0 <LL_EXTI_EnableIT_32_63>

  return;
 8000d48:	bf00      	nop
}
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8000d50:	bf00      	nop
}
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr

08000d5a <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b082      	sub	sp, #8
 8000d5e:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8000d60:	2000      	movs	r0, #0
 8000d62:	f00b f807 	bl	800bd74 <OTP_Read>
 8000d66:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d005      	beq.n	8000d7a <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	799b      	ldrb	r3, [r3, #6]
 8000d72:	4618      	mov	r0, r3
 8000d74:	f7ff ff30 	bl	8000bd8 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8000d78:	bf00      	nop
 8000d7a:	bf00      	nop
}
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <System_Init>:

static void System_Init(void)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	af00      	add	r7, sp, #0
  Init_Smps();
 8000d86:	f7ff ffd3 	bl	8000d30 <Init_Smps>

  Init_Exti();
 8000d8a:	f7ff ffd8 	bl	8000d3e <Init_Exti>

  Init_Rtc();
 8000d8e:	f000 f803 	bl	8000d98 <Init_Rtc>

  return;
 8000d92:	bf00      	nop
}
 8000d94:	bd80      	pop	{r7, pc}
	...

08000d98 <Init_Rtc>:

static void Init_Rtc(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8000d9c:	4805      	ldr	r0, [pc, #20]	@ (8000db4 <Init_Rtc+0x1c>)
 8000d9e:	f7ff ff86 	bl	8000cae <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8000da2:	2100      	movs	r1, #0
 8000da4:	4803      	ldr	r0, [pc, #12]	@ (8000db4 <Init_Rtc+0x1c>)
 8000da6:	f7ff ff92 	bl	8000cce <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8000daa:	4802      	ldr	r0, [pc, #8]	@ (8000db4 <Init_Rtc+0x1c>)
 8000dac:	f7ff ff72 	bl	8000c94 <LL_RTC_EnableWriteProtection>

  return;
 8000db0:	bf00      	nop
}
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	40002800 	.word	0x40002800

08000db8 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000dbc:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8000dc0:	f7ff ff28 	bl	8000c14 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8000dc4:	f00c ffae 	bl	800dd24 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000dc8:	2004      	movs	r0, #4
 8000dca:	f7ff fedb 	bl	8000b84 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8000dce:	bf00      	nop
}
 8000dd0:	bd80      	pop	{r7, pc}
	...

08000dd4 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b088      	sub	sp, #32
 8000dd8:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8000dda:	f00a fce9 	bl	800b7b0 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 8000dde:	4a11      	ldr	r2, [pc, #68]	@ (8000e24 <appe_Tl_Init+0x50>)
 8000de0:	2100      	movs	r1, #0
 8000de2:	2008      	movs	r0, #8
 8000de4:	f00d f8dc 	bl	800dfa0 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000de8:	4b0f      	ldr	r3, [pc, #60]	@ (8000e28 <appe_Tl_Init+0x54>)
 8000dea:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000dec:	4b0f      	ldr	r3, [pc, #60]	@ (8000e2c <appe_Tl_Init+0x58>)
 8000dee:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000df0:	463b      	mov	r3, r7
 8000df2:	4619      	mov	r1, r3
 8000df4:	480e      	ldr	r0, [pc, #56]	@ (8000e30 <appe_Tl_Init+0x5c>)
 8000df6:	f00a fb9d 	bl	800b534 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000dfa:	4b0e      	ldr	r3, [pc, #56]	@ (8000e34 <appe_Tl_Init+0x60>)
 8000dfc:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000dfe:	4b0e      	ldr	r3, [pc, #56]	@ (8000e38 <appe_Tl_Init+0x64>)
 8000e00:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000e02:	4b0e      	ldr	r3, [pc, #56]	@ (8000e3c <appe_Tl_Init+0x68>)
 8000e04:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000e06:	f240 533c 	movw	r3, #1340	@ 0x53c
 8000e0a:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8000e0c:	f107 0308 	add.w	r3, r7, #8
 8000e10:	4618      	mov	r0, r3
 8000e12:	f00a fe0f 	bl	800ba34 <TL_MM_Init>

  TL_Enable();
 8000e16:	f00a fcc5 	bl	800b7a4 <TL_Enable>

  return;
 8000e1a:	bf00      	nop
}
 8000e1c:	3720      	adds	r7, #32
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	0800b56d 	.word	0x0800b56d
 8000e28:	20030734 	.word	0x20030734
 8000e2c:	08000e41 	.word	0x08000e41
 8000e30:	08000e59 	.word	0x08000e59
 8000e34:	2003094c 	.word	0x2003094c
 8000e38:	20030840 	.word	0x20030840
 8000e3c:	200301f8 	.word	0x200301f8

08000e40 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8000e4a:	bf00      	nop
}
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
	...

08000e58 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b088      	sub	sp, #32
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	330b      	adds	r3, #11
 8000e66:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	881b      	ldrh	r3, [r3, #0]
 8000e6c:	b29b      	uxth	r3, r3
 8000e6e:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 8000e72:	2b07      	cmp	r3, #7
 8000e74:	d860      	bhi.n	8000f38 <APPE_SysUserEvtRx+0xe0>
 8000e76:	a201      	add	r2, pc, #4	@ (adr r2, 8000e7c <APPE_SysUserEvtRx+0x24>)
 8000e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e7c:	08000e9d 	.word	0x08000e9d
 8000e80:	08000edf 	.word	0x08000edf
 8000e84:	08000eed 	.word	0x08000eed
 8000e88:	08000f39 	.word	0x08000f39
 8000e8c:	08000f09 	.word	0x08000f09
 8000e90:	08000f19 	.word	0x08000f19
 8000e94:	08000f21 	.word	0x08000f21
 8000e98:	08000f31 	.word	0x08000f31
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8000e9c:	f107 030c 	add.w	r3, r7, #12
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f00a f8fd 	bl	800b0a0 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
 8000ea6:	7b3b      	ldrb	r3, [r7, #12]
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	7b7b      	ldrb	r3, [r7, #13]
 8000eac:	461a      	mov	r2, r3
 8000eae:	7bbb      	ldrb	r3, [r7, #14]
 8000eb0:	4824      	ldr	r0, [pc, #144]	@ (8000f44 <APPE_SysUserEvtRx+0xec>)
 8000eb2:	f00d fa63 	bl	800e37c <iprintf>
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
 8000eb6:	7c3b      	ldrb	r3, [r7, #16]
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4823      	ldr	r0, [pc, #140]	@ (8000f48 <APPE_SysUserEvtRx+0xf0>)
 8000ebc:	f00d fa5e 	bl	800e37c <iprintf>
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);
 8000ec0:	7dbb      	ldrb	r3, [r7, #22]
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	7dfb      	ldrb	r3, [r7, #23]
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	7e3b      	ldrb	r3, [r7, #24]
 8000eca:	4820      	ldr	r0, [pc, #128]	@ (8000f4c <APPE_SysUserEvtRx+0xf4>)
 8000ecc:	f00d fa56 	bl	800e37c <iprintf>

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
 8000ed0:	481f      	ldr	r0, [pc, #124]	@ (8000f50 <APPE_SysUserEvtRx+0xf8>)
 8000ed2:	f00d fa53 	bl	800e37c <iprintf>
    APPE_SysEvtReadyProcessing(pPayload);
 8000ed6:	6878      	ldr	r0, [r7, #4]
 8000ed8:	f000 f870 	bl	8000fbc <APPE_SysEvtReadyProcessing>
    break;
 8000edc:	e02d      	b.n	8000f3a <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
 8000ede:	481d      	ldr	r0, [pc, #116]	@ (8000f54 <APPE_SysUserEvtRx+0xfc>)
 8000ee0:	f00d fa4c 	bl	800e37c <iprintf>
    APPE_SysEvtError(pPayload);
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f000 f843 	bl	8000f70 <APPE_SysEvtError>
    break;
 8000eea:	e026      	b.n	8000f3a <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE -- BLE NVM RAM HAS BEEN UPDATED BY CPU2 \n");
 8000eec:	481a      	ldr	r0, [pc, #104]	@ (8000f58 <APPE_SysUserEvtRx+0x100>)
 8000eee:	f00d fab5 	bl	800e45c <puts>
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->StartAddress,
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	3302      	adds	r3, #2
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 8000ef6:	6819      	ldr	r1, [r3, #0]
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->Size);
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	3302      	adds	r3, #2
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	461a      	mov	r2, r3
 8000f00:	4816      	ldr	r0, [pc, #88]	@ (8000f5c <APPE_SysUserEvtRx+0x104>)
 8000f02:	f00d fa3b 	bl	800e37c <iprintf>
    break;
 8000f06:	e018      	b.n	8000f3a <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_START_WRITE:
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
                ((SHCI_C2_NvmStartWrite_Evt_t*)p_sys_event->payload)->NumberOfWords);
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	3302      	adds	r3, #2
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4813      	ldr	r0, [pc, #76]	@ (8000f60 <APPE_SysUserEvtRx+0x108>)
 8000f12:	f00d fa33 	bl	800e37c <iprintf>
    break;
 8000f16:	e010      	b.n	8000f3a <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_END_WRITE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_WRITE\n\r");
 8000f18:	4812      	ldr	r0, [pc, #72]	@ (8000f64 <APPE_SysUserEvtRx+0x10c>)
 8000f1a:	f00d fa2f 	bl	800e37c <iprintf>
    break;
 8000f1e:	e00c      	b.n	8000f3a <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_START_ERASE:
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
                ((SHCI_C2_NvmStartErase_Evt_t*)p_sys_event->payload)->NumberOfSectors);
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	3302      	adds	r3, #2
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4619      	mov	r1, r3
 8000f28:	480f      	ldr	r0, [pc, #60]	@ (8000f68 <APPE_SysUserEvtRx+0x110>)
 8000f2a:	f00d fa27 	bl	800e37c <iprintf>
    break;
 8000f2e:	e004      	b.n	8000f3a <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
 8000f30:	480e      	ldr	r0, [pc, #56]	@ (8000f6c <APPE_SysUserEvtRx+0x114>)
 8000f32:	f00d fa23 	bl	800e37c <iprintf>
    break;
 8000f36:	e000      	b.n	8000f3a <APPE_SysUserEvtRx+0xe2>

  default:
    break;
 8000f38:	bf00      	nop
  }

  return;
 8000f3a:	bf00      	nop
}
 8000f3c:	3720      	adds	r7, #32
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	0800f1f8 	.word	0x0800f1f8
 8000f48:	0800f21c 	.word	0x0800f21c
 8000f4c:	0800f238 	.word	0x0800f238
 8000f50:	0800f250 	.word	0x0800f250
 8000f54:	0800f270 	.word	0x0800f270
 8000f58:	0800f294 	.word	0x0800f294
 8000f5c:	0800f2e4 	.word	0x0800f2e4
 8000f60:	0800f30c 	.word	0x0800f30c
 8000f64:	0800f348 	.word	0x0800f348
 8000f68:	0800f36c 	.word	0x0800f36c
 8000f6c:	0800f3a8 	.word	0x0800f3a8

08000f70 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	330b      	adds	r3, #11
 8000f7e:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	3302      	adds	r3, #2
 8000f84:	60bb      	str	r3, [r7, #8]

  APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n\r",(*p_sys_error_code));
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4808      	ldr	r0, [pc, #32]	@ (8000fb0 <APPE_SysEvtError+0x40>)
 8000f8e:	f00d f9f5 	bl	800e37c <iprintf>

  if ((*p_sys_error_code) == ERR_BLE_INIT)
 8000f92:	68bb      	ldr	r3, [r7, #8]
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d103      	bne.n	8000fa2 <APPE_SysEvtError+0x32>
  {
    /* Error during BLE stack initialization */
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 8000f9a:	4806      	ldr	r0, [pc, #24]	@ (8000fb4 <APPE_SysEvtError+0x44>)
 8000f9c:	f00d fa5e 	bl	800e45c <puts>
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8000fa0:	e003      	b.n	8000faa <APPE_SysEvtError+0x3a>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 8000fa2:	4805      	ldr	r0, [pc, #20]	@ (8000fb8 <APPE_SysEvtError+0x48>)
 8000fa4:	f00d fa5a 	bl	800e45c <puts>
  return;
 8000fa8:	bf00      	nop
}
 8000faa:	3710      	adds	r7, #16
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	0800f3cc 	.word	0x0800f3cc
 8000fb4:	0800f3fc 	.word	0x0800f3fc
 8000fb8:	0800f438 	.word	0x0800f438

08000fbc <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b08a      	sub	sp, #40	@ 0x28
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8000fc4:	f107 0308 	add.w	r3, r7, #8
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]
 8000fd0:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	330b      	adds	r3, #11
 8000fe0:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	3302      	adds	r3, #2
 8000fe6:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8000fe8:	69bb      	ldr	r3, [r7, #24]
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d128      	bne.n	8001042 <APPE_SysEvtReadyProcessing+0x86>
  {
    /**
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");
 8000ff0:	481d      	ldr	r0, [pc, #116]	@ (8001068 <APPE_SysEvtReadyProcessing+0xac>)
 8000ff2:	f00d fa33 	bl	800e45c <puts>

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8000ff6:	f7ff fd97 	bl	8000b28 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8000ffa:	230f      	movs	r3, #15
 8000ffc:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8000ffe:	237f      	movs	r3, #127	@ 0x7f
 8001000:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8001002:	f7ff fe29 	bl	8000c58 <LL_DBGMCU_GetRevisionID>
 8001006:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);
 8001008:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800100a:	4818      	ldr	r0, [pc, #96]	@ (800106c <APPE_SysEvtReadyProcessing+0xb0>)
 800100c:	f00d f9b6 	bl	800e37c <iprintf>

    config_param.RevisionID = (uint16_t)RevisionID;
 8001010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001012:	b29b      	uxth	r3, r3
 8001014:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 8001016:	f7ff fe11 	bl	8000c3c <LL_DBGMCU_GetDeviceID>
 800101a:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
 800101c:	6a39      	ldr	r1, [r7, #32]
 800101e:	4814      	ldr	r0, [pc, #80]	@ (8001070 <APPE_SysEvtReadyProcessing+0xb4>)
 8001020:	f00d f9ac 	bl	800e37c <iprintf>
    config_param.DeviceID = (uint16_t)DeviceID;
 8001024:	6a3b      	ldr	r3, [r7, #32]
 8001026:	b29b      	uxth	r3, r3
 8001028:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 800102a:	f107 0308 	add.w	r3, r7, #8
 800102e:	4618      	mov	r0, r3
 8001030:	f00a f820 	bl	800b074 <SHCI_C2_Config>

    APP_BLE_Init();
 8001034:	f00b fb72 	bl	800c71c <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8001038:	2100      	movs	r1, #0
 800103a:	2001      	movs	r0, #1
 800103c:	f00c fe84 	bl	800dd48 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8001040:	e00e      	b.n	8001060 <APPE_SysEvtReadyProcessing+0xa4>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8001042:	69bb      	ldr	r3, [r7, #24]
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	2b01      	cmp	r3, #1
 8001048:	d106      	bne.n	8001058 <APPE_SysEvtReadyProcessing+0x9c>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - FUS_FW_RUNNING \n\r");
 800104a:	480a      	ldr	r0, [pc, #40]	@ (8001074 <APPE_SysEvtReadyProcessing+0xb8>)
 800104c:	f00d f996 	bl	800e37c <iprintf>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2200      	movs	r2, #0
 8001054:	701a      	strb	r2, [r3, #0]
  return;
 8001056:	e003      	b.n	8001060 <APPE_SysEvtReadyProcessing+0xa4>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
 8001058:	4807      	ldr	r0, [pc, #28]	@ (8001078 <APPE_SysEvtReadyProcessing+0xbc>)
 800105a:	f00d f98f 	bl	800e37c <iprintf>
  return;
 800105e:	bf00      	nop
}
 8001060:	3728      	adds	r7, #40	@ 0x28
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	0800f470 	.word	0x0800f470
 800106c:	0800f48c 	.word	0x0800f48c
 8001070:	0800f4b0 	.word	0x0800f4b0
 8001074:	0800f4d0 	.word	0x0800f4d0
 8001078:	0800f504 	.word	0x0800f504

0800107c <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001084:	f002 fdae 	bl	8003be4 <HAL_GetTick>
 8001088:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001094:	d00a      	beq.n	80010ac <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8001096:	f002 fdbd 	bl	8003c14 <HAL_GetTickFreq>
 800109a:	4603      	mov	r3, r0
 800109c:	461a      	mov	r2, r3
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	4413      	add	r3, r2
 80010a2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010a4:	e002      	b.n	80010ac <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 80010a6:	f7ff fde5 	bl	8000c74 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM) || defined (__ARMCC_VERSION)
    __force_stores();
  #endif /* __ARMCC_VERSION */

    __WFI();
 80010aa:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 80010ac:	f002 fd9a 	bl	8003be4 <HAL_GetTick>
 80010b0:	4602      	mov	r2, r0
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	68fa      	ldr	r2, [r7, #12]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d8f4      	bhi.n	80010a6 <HAL_Delay+0x2a>
  }
}
 80010bc:	bf00      	nop
 80010be:	bf00      	nop
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 80010c6:	b580      	push	{r7, lr}
 80010c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80010ca:	f04f 30ff 	mov.w	r0, #4294967295
 80010ce:	f00c fe6b 	bl	800dda8 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 80010d2:	bf00      	nop
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 80010d6:	b480      	push	{r7}
 80010d8:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 80010da:	bf00      	nop
}
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr

080010e4 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80010ec:	2100      	movs	r1, #0
 80010ee:	2008      	movs	r0, #8
 80010f0:	f00c ff78 	bl	800dfe4 <UTIL_SEQ_SetTask>
  return;
 80010f4:	bf00      	nop
}
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001104:	2002      	movs	r0, #2
 8001106:	f00c ffd9 	bl	800e0bc <UTIL_SEQ_SetEvt>
  return;
 800110a:	bf00      	nop
}
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b082      	sub	sp, #8
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 800111a:	2002      	movs	r0, #2
 800111c:	f00c ffee 	bl	800e0fc <UTIL_SEQ_WaitEvt>
  return;
 8001120:	bf00      	nop
}
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}

08001128 <LL_EXTI_EnableIT_0_31>:
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001130:	4b06      	ldr	r3, [pc, #24]	@ (800114c <LL_EXTI_EnableIT_0_31+0x24>)
 8001132:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8001136:	4905      	ldr	r1, [pc, #20]	@ (800114c <LL_EXTI_EnableIT_0_31+0x24>)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	4313      	orrs	r3, r2
 800113c:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8001140:	bf00      	nop
 8001142:	370c      	adds	r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	58000800 	.word	0x58000800

08001150 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001158:	4b05      	ldr	r3, [pc, #20]	@ (8001170 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	4904      	ldr	r1, [pc, #16]	@ (8001170 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4313      	orrs	r3, r2
 8001162:	600b      	str	r3, [r1, #0]

}
 8001164:	bf00      	nop
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr
 8001170:	58000800 	.word	0x58000800

08001174 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800117a:	4b0d      	ldr	r3, [pc, #52]	@ (80011b0 <ReadRtcSsrValue+0x3c>)
 800117c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800117e:	b29b      	uxth	r3, r3
 8001180:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001182:	4b0b      	ldr	r3, [pc, #44]	@ (80011b0 <ReadRtcSsrValue+0x3c>)
 8001184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001186:	b29b      	uxth	r3, r3
 8001188:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 800118a:	e005      	b.n	8001198 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001190:	4b07      	ldr	r3, [pc, #28]	@ (80011b0 <ReadRtcSsrValue+0x3c>)
 8001192:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001194:	b29b      	uxth	r3, r3
 8001196:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8001198:	687a      	ldr	r2, [r7, #4]
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	429a      	cmp	r2, r3
 800119e:	d1f5      	bne.n	800118c <ReadRtcSsrValue+0x18>
  }

  return second_read;
 80011a0:	683b      	ldr	r3, [r7, #0]
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	40002800 	.word	0x40002800

080011b4 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b085      	sub	sp, #20
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	460a      	mov	r2, r1
 80011be:	71fb      	strb	r3, [r7, #7]
 80011c0:	4613      	mov	r3, r2
 80011c2:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 80011c4:	79ba      	ldrb	r2, [r7, #6]
 80011c6:	491d      	ldr	r1, [pc, #116]	@ (800123c <LinkTimerAfter+0x88>)
 80011c8:	4613      	mov	r3, r2
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	4413      	add	r3, r2
 80011ce:	00db      	lsls	r3, r3, #3
 80011d0:	440b      	add	r3, r1
 80011d2:	3315      	adds	r3, #21
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80011d8:	7bfb      	ldrb	r3, [r7, #15]
 80011da:	2b06      	cmp	r3, #6
 80011dc:	d009      	beq.n	80011f2 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 80011de:	7bfa      	ldrb	r2, [r7, #15]
 80011e0:	4916      	ldr	r1, [pc, #88]	@ (800123c <LinkTimerAfter+0x88>)
 80011e2:	4613      	mov	r3, r2
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	4413      	add	r3, r2
 80011e8:	00db      	lsls	r3, r3, #3
 80011ea:	440b      	add	r3, r1
 80011ec:	3314      	adds	r3, #20
 80011ee:	79fa      	ldrb	r2, [r7, #7]
 80011f0:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 80011f2:	79fa      	ldrb	r2, [r7, #7]
 80011f4:	4911      	ldr	r1, [pc, #68]	@ (800123c <LinkTimerAfter+0x88>)
 80011f6:	4613      	mov	r3, r2
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	4413      	add	r3, r2
 80011fc:	00db      	lsls	r3, r3, #3
 80011fe:	440b      	add	r3, r1
 8001200:	3315      	adds	r3, #21
 8001202:	7bfa      	ldrb	r2, [r7, #15]
 8001204:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8001206:	79fa      	ldrb	r2, [r7, #7]
 8001208:	490c      	ldr	r1, [pc, #48]	@ (800123c <LinkTimerAfter+0x88>)
 800120a:	4613      	mov	r3, r2
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	4413      	add	r3, r2
 8001210:	00db      	lsls	r3, r3, #3
 8001212:	440b      	add	r3, r1
 8001214:	3314      	adds	r3, #20
 8001216:	79ba      	ldrb	r2, [r7, #6]
 8001218:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 800121a:	79ba      	ldrb	r2, [r7, #6]
 800121c:	4907      	ldr	r1, [pc, #28]	@ (800123c <LinkTimerAfter+0x88>)
 800121e:	4613      	mov	r3, r2
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	4413      	add	r3, r2
 8001224:	00db      	lsls	r3, r3, #3
 8001226:	440b      	add	r3, r1
 8001228:	3315      	adds	r3, #21
 800122a:	79fa      	ldrb	r2, [r7, #7]
 800122c:	701a      	strb	r2, [r3, #0]

  return;
 800122e:	bf00      	nop
}
 8001230:	3714      	adds	r7, #20
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	200000fc 	.word	0x200000fc

08001240 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8001240:	b480      	push	{r7}
 8001242:	b085      	sub	sp, #20
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	460a      	mov	r2, r1
 800124a:	71fb      	strb	r3, [r7, #7]
 800124c:	4613      	mov	r3, r2
 800124e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8001250:	4b29      	ldr	r3, [pc, #164]	@ (80012f8 <LinkTimerBefore+0xb8>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	b2db      	uxtb	r3, r3
 8001256:	79ba      	ldrb	r2, [r7, #6]
 8001258:	429a      	cmp	r2, r3
 800125a:	d032      	beq.n	80012c2 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 800125c:	79ba      	ldrb	r2, [r7, #6]
 800125e:	4927      	ldr	r1, [pc, #156]	@ (80012fc <LinkTimerBefore+0xbc>)
 8001260:	4613      	mov	r3, r2
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	4413      	add	r3, r2
 8001266:	00db      	lsls	r3, r3, #3
 8001268:	440b      	add	r3, r1
 800126a:	3314      	adds	r3, #20
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8001270:	7bfa      	ldrb	r2, [r7, #15]
 8001272:	4922      	ldr	r1, [pc, #136]	@ (80012fc <LinkTimerBefore+0xbc>)
 8001274:	4613      	mov	r3, r2
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	4413      	add	r3, r2
 800127a:	00db      	lsls	r3, r3, #3
 800127c:	440b      	add	r3, r1
 800127e:	3315      	adds	r3, #21
 8001280:	79fa      	ldrb	r2, [r7, #7]
 8001282:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8001284:	79fa      	ldrb	r2, [r7, #7]
 8001286:	491d      	ldr	r1, [pc, #116]	@ (80012fc <LinkTimerBefore+0xbc>)
 8001288:	4613      	mov	r3, r2
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	4413      	add	r3, r2
 800128e:	00db      	lsls	r3, r3, #3
 8001290:	440b      	add	r3, r1
 8001292:	3315      	adds	r3, #21
 8001294:	79ba      	ldrb	r2, [r7, #6]
 8001296:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8001298:	79fa      	ldrb	r2, [r7, #7]
 800129a:	4918      	ldr	r1, [pc, #96]	@ (80012fc <LinkTimerBefore+0xbc>)
 800129c:	4613      	mov	r3, r2
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	4413      	add	r3, r2
 80012a2:	00db      	lsls	r3, r3, #3
 80012a4:	440b      	add	r3, r1
 80012a6:	3314      	adds	r3, #20
 80012a8:	7bfa      	ldrb	r2, [r7, #15]
 80012aa:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80012ac:	79ba      	ldrb	r2, [r7, #6]
 80012ae:	4913      	ldr	r1, [pc, #76]	@ (80012fc <LinkTimerBefore+0xbc>)
 80012b0:	4613      	mov	r3, r2
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	4413      	add	r3, r2
 80012b6:	00db      	lsls	r3, r3, #3
 80012b8:	440b      	add	r3, r1
 80012ba:	3314      	adds	r3, #20
 80012bc:	79fa      	ldrb	r2, [r7, #7]
 80012be:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 80012c0:	e014      	b.n	80012ec <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 80012c2:	79fa      	ldrb	r2, [r7, #7]
 80012c4:	490d      	ldr	r1, [pc, #52]	@ (80012fc <LinkTimerBefore+0xbc>)
 80012c6:	4613      	mov	r3, r2
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	4413      	add	r3, r2
 80012cc:	00db      	lsls	r3, r3, #3
 80012ce:	440b      	add	r3, r1
 80012d0:	3315      	adds	r3, #21
 80012d2:	79ba      	ldrb	r2, [r7, #6]
 80012d4:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80012d6:	79ba      	ldrb	r2, [r7, #6]
 80012d8:	4908      	ldr	r1, [pc, #32]	@ (80012fc <LinkTimerBefore+0xbc>)
 80012da:	4613      	mov	r3, r2
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	4413      	add	r3, r2
 80012e0:	00db      	lsls	r3, r3, #3
 80012e2:	440b      	add	r3, r1
 80012e4:	3314      	adds	r3, #20
 80012e6:	79fa      	ldrb	r2, [r7, #7]
 80012e8:	701a      	strb	r2, [r3, #0]
  return;
 80012ea:	bf00      	nop
}
 80012ec:	3714      	adds	r7, #20
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	2000018c 	.word	0x2000018c
 80012fc:	200000fc 	.word	0x200000fc

08001300 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	4603      	mov	r3, r0
 8001308:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800130a:	4b4e      	ldr	r3, [pc, #312]	@ (8001444 <linkTimer+0x144>)
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	b2db      	uxtb	r3, r3
 8001310:	2b06      	cmp	r3, #6
 8001312:	d118      	bne.n	8001346 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001314:	4b4b      	ldr	r3, [pc, #300]	@ (8001444 <linkTimer+0x144>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	b2da      	uxtb	r2, r3
 800131a:	4b4b      	ldr	r3, [pc, #300]	@ (8001448 <linkTimer+0x148>)
 800131c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 800131e:	4a49      	ldr	r2, [pc, #292]	@ (8001444 <linkTimer+0x144>)
 8001320:	79fb      	ldrb	r3, [r7, #7]
 8001322:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8001324:	79fa      	ldrb	r2, [r7, #7]
 8001326:	4949      	ldr	r1, [pc, #292]	@ (800144c <linkTimer+0x14c>)
 8001328:	4613      	mov	r3, r2
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	4413      	add	r3, r2
 800132e:	00db      	lsls	r3, r3, #3
 8001330:	440b      	add	r3, r1
 8001332:	3315      	adds	r3, #21
 8001334:	2206      	movs	r2, #6
 8001336:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001338:	4b45      	ldr	r3, [pc, #276]	@ (8001450 <linkTimer+0x150>)
 800133a:	f04f 32ff 	mov.w	r2, #4294967295
 800133e:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8001340:	2300      	movs	r3, #0
 8001342:	81fb      	strh	r3, [r7, #14]
 8001344:	e078      	b.n	8001438 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8001346:	f000 f909 	bl	800155c <ReturnTimeElapsed>
 800134a:	4603      	mov	r3, r0
 800134c:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 800134e:	79fa      	ldrb	r2, [r7, #7]
 8001350:	493e      	ldr	r1, [pc, #248]	@ (800144c <linkTimer+0x14c>)
 8001352:	4613      	mov	r3, r2
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	4413      	add	r3, r2
 8001358:	00db      	lsls	r3, r3, #3
 800135a:	440b      	add	r3, r1
 800135c:	3308      	adds	r3, #8
 800135e:	6819      	ldr	r1, [r3, #0]
 8001360:	89fb      	ldrh	r3, [r7, #14]
 8001362:	79fa      	ldrb	r2, [r7, #7]
 8001364:	4419      	add	r1, r3
 8001366:	4839      	ldr	r0, [pc, #228]	@ (800144c <linkTimer+0x14c>)
 8001368:	4613      	mov	r3, r2
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	4413      	add	r3, r2
 800136e:	00db      	lsls	r3, r3, #3
 8001370:	4403      	add	r3, r0
 8001372:	3308      	adds	r3, #8
 8001374:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8001376:	79fa      	ldrb	r2, [r7, #7]
 8001378:	4934      	ldr	r1, [pc, #208]	@ (800144c <linkTimer+0x14c>)
 800137a:	4613      	mov	r3, r2
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	4413      	add	r3, r2
 8001380:	00db      	lsls	r3, r3, #3
 8001382:	440b      	add	r3, r1
 8001384:	3308      	adds	r3, #8
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 800138a:	4b2e      	ldr	r3, [pc, #184]	@ (8001444 <linkTimer+0x144>)
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	b2db      	uxtb	r3, r3
 8001390:	4619      	mov	r1, r3
 8001392:	4a2e      	ldr	r2, [pc, #184]	@ (800144c <linkTimer+0x14c>)
 8001394:	460b      	mov	r3, r1
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	440b      	add	r3, r1
 800139a:	00db      	lsls	r3, r3, #3
 800139c:	4413      	add	r3, r2
 800139e:	3308      	adds	r3, #8
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	68ba      	ldr	r2, [r7, #8]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d337      	bcc.n	8001418 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 80013a8:	4b26      	ldr	r3, [pc, #152]	@ (8001444 <linkTimer+0x144>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 80013ae:	7b7a      	ldrb	r2, [r7, #13]
 80013b0:	4926      	ldr	r1, [pc, #152]	@ (800144c <linkTimer+0x14c>)
 80013b2:	4613      	mov	r3, r2
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	4413      	add	r3, r2
 80013b8:	00db      	lsls	r3, r3, #3
 80013ba:	440b      	add	r3, r1
 80013bc:	3315      	adds	r3, #21
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80013c2:	e013      	b.n	80013ec <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 80013c4:	7b7a      	ldrb	r2, [r7, #13]
 80013c6:	4921      	ldr	r1, [pc, #132]	@ (800144c <linkTimer+0x14c>)
 80013c8:	4613      	mov	r3, r2
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	4413      	add	r3, r2
 80013ce:	00db      	lsls	r3, r3, #3
 80013d0:	440b      	add	r3, r1
 80013d2:	3315      	adds	r3, #21
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 80013d8:	7b7a      	ldrb	r2, [r7, #13]
 80013da:	491c      	ldr	r1, [pc, #112]	@ (800144c <linkTimer+0x14c>)
 80013dc:	4613      	mov	r3, r2
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	4413      	add	r3, r2
 80013e2:	00db      	lsls	r3, r3, #3
 80013e4:	440b      	add	r3, r1
 80013e6:	3315      	adds	r3, #21
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80013ec:	7b3b      	ldrb	r3, [r7, #12]
 80013ee:	2b06      	cmp	r3, #6
 80013f0:	d00b      	beq.n	800140a <linkTimer+0x10a>
 80013f2:	7b3a      	ldrb	r2, [r7, #12]
 80013f4:	4915      	ldr	r1, [pc, #84]	@ (800144c <linkTimer+0x14c>)
 80013f6:	4613      	mov	r3, r2
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	4413      	add	r3, r2
 80013fc:	00db      	lsls	r3, r3, #3
 80013fe:	440b      	add	r3, r1
 8001400:	3308      	adds	r3, #8
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	68ba      	ldr	r2, [r7, #8]
 8001406:	429a      	cmp	r2, r3
 8001408:	d2dc      	bcs.n	80013c4 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 800140a:	7b7a      	ldrb	r2, [r7, #13]
 800140c:	79fb      	ldrb	r3, [r7, #7]
 800140e:	4611      	mov	r1, r2
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff fecf 	bl	80011b4 <LinkTimerAfter>
 8001416:	e00f      	b.n	8001438 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001418:	4b0a      	ldr	r3, [pc, #40]	@ (8001444 <linkTimer+0x144>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	b2da      	uxtb	r2, r3
 800141e:	79fb      	ldrb	r3, [r7, #7]
 8001420:	4611      	mov	r1, r2
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff ff0c 	bl	8001240 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8001428:	4b06      	ldr	r3, [pc, #24]	@ (8001444 <linkTimer+0x144>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	b2da      	uxtb	r2, r3
 800142e:	4b06      	ldr	r3, [pc, #24]	@ (8001448 <linkTimer+0x148>)
 8001430:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8001432:	4a04      	ldr	r2, [pc, #16]	@ (8001444 <linkTimer+0x144>)
 8001434:	79fb      	ldrb	r3, [r7, #7]
 8001436:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8001438:	89fb      	ldrh	r3, [r7, #14]
}
 800143a:	4618      	mov	r0, r3
 800143c:	3710      	adds	r7, #16
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	2000018c 	.word	0x2000018c
 8001448:	2000018d 	.word	0x2000018d
 800144c:	200000fc 	.word	0x200000fc
 8001450:	20000190 	.word	0x20000190

08001454 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8001454:	b480      	push	{r7}
 8001456:	b085      	sub	sp, #20
 8001458:	af00      	add	r7, sp, #0
 800145a:	4603      	mov	r3, r0
 800145c:	460a      	mov	r2, r1
 800145e:	71fb      	strb	r3, [r7, #7]
 8001460:	4613      	mov	r3, r2
 8001462:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8001464:	4b39      	ldr	r3, [pc, #228]	@ (800154c <UnlinkTimer+0xf8>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	b2db      	uxtb	r3, r3
 800146a:	79fa      	ldrb	r2, [r7, #7]
 800146c:	429a      	cmp	r2, r3
 800146e:	d111      	bne.n	8001494 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001470:	4b36      	ldr	r3, [pc, #216]	@ (800154c <UnlinkTimer+0xf8>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	b2da      	uxtb	r2, r3
 8001476:	4b36      	ldr	r3, [pc, #216]	@ (8001550 <UnlinkTimer+0xfc>)
 8001478:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 800147a:	79fa      	ldrb	r2, [r7, #7]
 800147c:	4935      	ldr	r1, [pc, #212]	@ (8001554 <UnlinkTimer+0x100>)
 800147e:	4613      	mov	r3, r2
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	4413      	add	r3, r2
 8001484:	00db      	lsls	r3, r3, #3
 8001486:	440b      	add	r3, r1
 8001488:	3315      	adds	r3, #21
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	b2da      	uxtb	r2, r3
 800148e:	4b2f      	ldr	r3, [pc, #188]	@ (800154c <UnlinkTimer+0xf8>)
 8001490:	701a      	strb	r2, [r3, #0]
 8001492:	e03e      	b.n	8001512 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8001494:	79fa      	ldrb	r2, [r7, #7]
 8001496:	492f      	ldr	r1, [pc, #188]	@ (8001554 <UnlinkTimer+0x100>)
 8001498:	4613      	mov	r3, r2
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	4413      	add	r3, r2
 800149e:	00db      	lsls	r3, r3, #3
 80014a0:	440b      	add	r3, r1
 80014a2:	3314      	adds	r3, #20
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 80014a8:	79fa      	ldrb	r2, [r7, #7]
 80014aa:	492a      	ldr	r1, [pc, #168]	@ (8001554 <UnlinkTimer+0x100>)
 80014ac:	4613      	mov	r3, r2
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	4413      	add	r3, r2
 80014b2:	00db      	lsls	r3, r3, #3
 80014b4:	440b      	add	r3, r1
 80014b6:	3315      	adds	r3, #21
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 80014bc:	79f9      	ldrb	r1, [r7, #7]
 80014be:	7bfa      	ldrb	r2, [r7, #15]
 80014c0:	4824      	ldr	r0, [pc, #144]	@ (8001554 <UnlinkTimer+0x100>)
 80014c2:	460b      	mov	r3, r1
 80014c4:	005b      	lsls	r3, r3, #1
 80014c6:	440b      	add	r3, r1
 80014c8:	00db      	lsls	r3, r3, #3
 80014ca:	4403      	add	r3, r0
 80014cc:	3315      	adds	r3, #21
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	b2d8      	uxtb	r0, r3
 80014d2:	4920      	ldr	r1, [pc, #128]	@ (8001554 <UnlinkTimer+0x100>)
 80014d4:	4613      	mov	r3, r2
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	4413      	add	r3, r2
 80014da:	00db      	lsls	r3, r3, #3
 80014dc:	440b      	add	r3, r1
 80014de:	3315      	adds	r3, #21
 80014e0:	4602      	mov	r2, r0
 80014e2:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80014e4:	7bbb      	ldrb	r3, [r7, #14]
 80014e6:	2b06      	cmp	r3, #6
 80014e8:	d013      	beq.n	8001512 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 80014ea:	79f9      	ldrb	r1, [r7, #7]
 80014ec:	7bba      	ldrb	r2, [r7, #14]
 80014ee:	4819      	ldr	r0, [pc, #100]	@ (8001554 <UnlinkTimer+0x100>)
 80014f0:	460b      	mov	r3, r1
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	440b      	add	r3, r1
 80014f6:	00db      	lsls	r3, r3, #3
 80014f8:	4403      	add	r3, r0
 80014fa:	3314      	adds	r3, #20
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	b2d8      	uxtb	r0, r3
 8001500:	4914      	ldr	r1, [pc, #80]	@ (8001554 <UnlinkTimer+0x100>)
 8001502:	4613      	mov	r3, r2
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	4413      	add	r3, r2
 8001508:	00db      	lsls	r3, r3, #3
 800150a:	440b      	add	r3, r1
 800150c:	3314      	adds	r3, #20
 800150e:	4602      	mov	r2, r0
 8001510:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8001512:	79fa      	ldrb	r2, [r7, #7]
 8001514:	490f      	ldr	r1, [pc, #60]	@ (8001554 <UnlinkTimer+0x100>)
 8001516:	4613      	mov	r3, r2
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	4413      	add	r3, r2
 800151c:	00db      	lsls	r3, r3, #3
 800151e:	440b      	add	r3, r1
 8001520:	330c      	adds	r3, #12
 8001522:	2201      	movs	r2, #1
 8001524:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8001526:	4b09      	ldr	r3, [pc, #36]	@ (800154c <UnlinkTimer+0xf8>)
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	b2db      	uxtb	r3, r3
 800152c:	2b06      	cmp	r3, #6
 800152e:	d107      	bne.n	8001540 <UnlinkTimer+0xec>
 8001530:	79bb      	ldrb	r3, [r7, #6]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d104      	bne.n	8001540 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001536:	4b08      	ldr	r3, [pc, #32]	@ (8001558 <UnlinkTimer+0x104>)
 8001538:	f04f 32ff 	mov.w	r2, #4294967295
 800153c:	601a      	str	r2, [r3, #0]
  }

  return;
 800153e:	bf00      	nop
 8001540:	bf00      	nop
}
 8001542:	3714      	adds	r7, #20
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr
 800154c:	2000018c 	.word	0x2000018c
 8001550:	2000018d 	.word	0x2000018d
 8001554:	200000fc 	.word	0x200000fc
 8001558:	20000190 	.word	0x20000190

0800155c <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8001562:	4b1a      	ldr	r3, [pc, #104]	@ (80015cc <ReturnTimeElapsed+0x70>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800156a:	d026      	beq.n	80015ba <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 800156c:	f7ff fe02 	bl	8001174 <ReadRtcSsrValue>
 8001570:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8001572:	4b16      	ldr	r3, [pc, #88]	@ (80015cc <ReturnTimeElapsed+0x70>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	429a      	cmp	r2, r3
 800157a:	d805      	bhi.n	8001588 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 800157c:	4b13      	ldr	r3, [pc, #76]	@ (80015cc <ReturnTimeElapsed+0x70>)
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	607b      	str	r3, [r7, #4]
 8001586:	e00a      	b.n	800159e <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8001588:	4b11      	ldr	r3, [pc, #68]	@ (80015d0 <ReturnTimeElapsed+0x74>)
 800158a:	881b      	ldrh	r3, [r3, #0]
 800158c:	461a      	mov	r2, r3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001594:	4b0d      	ldr	r3, [pc, #52]	@ (80015cc <ReturnTimeElapsed+0x70>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	683a      	ldr	r2, [r7, #0]
 800159a:	4413      	add	r3, r2
 800159c:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 800159e:	4b0d      	ldr	r3, [pc, #52]	@ (80015d4 <ReturnTimeElapsed+0x78>)
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	461a      	mov	r2, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	fb02 f303 	mul.w	r3, r2, r3
 80015aa:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 80015ac:	4b0a      	ldr	r3, [pc, #40]	@ (80015d8 <ReturnTimeElapsed+0x7c>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	461a      	mov	r2, r3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	40d3      	lsrs	r3, r2
 80015b6:	607b      	str	r3, [r7, #4]
 80015b8:	e001      	b.n	80015be <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 80015ba:	2300      	movs	r3, #0
 80015bc:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	b29b      	uxth	r3, r3
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	20000190 	.word	0x20000190
 80015d0:	20000198 	.word	0x20000198
 80015d4:	20000196 	.word	0x20000196
 80015d8:	20000195 	.word	0x20000195

080015dc <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	4603      	mov	r3, r0
 80015e4:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 80015e6:	88fb      	ldrh	r3, [r7, #6]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d108      	bne.n	80015fe <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80015ec:	f7ff fdc2 	bl	8001174 <ReadRtcSsrValue>
 80015f0:	4603      	mov	r3, r0
 80015f2:	4a21      	ldr	r2, [pc, #132]	@ (8001678 <RestartWakeupCounter+0x9c>)
 80015f4:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80015f6:	2003      	movs	r0, #3
 80015f8:	f002 fc95 	bl	8003f26 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 80015fc:	e039      	b.n	8001672 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 80015fe:	88fb      	ldrh	r3, [r7, #6]
 8001600:	2b01      	cmp	r3, #1
 8001602:	d803      	bhi.n	800160c <RestartWakeupCounter+0x30>
 8001604:	4b1d      	ldr	r3, [pc, #116]	@ (800167c <RestartWakeupCounter+0xa0>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	2b01      	cmp	r3, #1
 800160a:	d002      	beq.n	8001612 <RestartWakeupCounter+0x36>
      Value -= 1;
 800160c:	88fb      	ldrh	r3, [r7, #6]
 800160e:	3b01      	subs	r3, #1
 8001610:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001612:	bf00      	nop
 8001614:	4b1a      	ldr	r3, [pc, #104]	@ (8001680 <RestartWakeupCounter+0xa4>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	68db      	ldr	r3, [r3, #12]
 800161a:	f003 0304 	and.w	r3, r3, #4
 800161e:	2b00      	cmp	r3, #0
 8001620:	d0f8      	beq.n	8001614 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001622:	4b17      	ldr	r3, [pc, #92]	@ (8001680 <RestartWakeupCounter+0xa4>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	b2da      	uxtb	r2, r3
 800162a:	4b15      	ldr	r3, [pc, #84]	@ (8001680 <RestartWakeupCounter+0xa4>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001632:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001634:	4b13      	ldr	r3, [pc, #76]	@ (8001684 <RestartWakeupCounter+0xa8>)
 8001636:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800163a:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 800163c:	2003      	movs	r0, #3
 800163e:	f002 fc80 	bl	8003f42 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8001642:	4b11      	ldr	r3, [pc, #68]	@ (8001688 <RestartWakeupCounter+0xac>)
 8001644:	695b      	ldr	r3, [r3, #20]
 8001646:	0c1b      	lsrs	r3, r3, #16
 8001648:	041b      	lsls	r3, r3, #16
 800164a:	88fa      	ldrh	r2, [r7, #6]
 800164c:	490e      	ldr	r1, [pc, #56]	@ (8001688 <RestartWakeupCounter+0xac>)
 800164e:	4313      	orrs	r3, r2
 8001650:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001652:	f7ff fd8f 	bl	8001174 <ReadRtcSsrValue>
 8001656:	4603      	mov	r3, r0
 8001658:	4a07      	ldr	r2, [pc, #28]	@ (8001678 <RestartWakeupCounter+0x9c>)
 800165a:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 800165c:	4b08      	ldr	r3, [pc, #32]	@ (8001680 <RestartWakeupCounter+0xa4>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	689a      	ldr	r2, [r3, #8]
 8001662:	4b07      	ldr	r3, [pc, #28]	@ (8001680 <RestartWakeupCounter+0xa4>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800166a:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 800166c:	f3af 8000 	nop.w
  return ;
 8001670:	bf00      	nop
}
 8001672:	3708      	adds	r7, #8
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	20000190 	.word	0x20000190
 800167c:	20000195 	.word	0x20000195
 8001680:	20000438 	.word	0x20000438
 8001684:	58000800 	.word	0x58000800
 8001688:	40002800 	.word	0x40002800

0800168c <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001692:	4b45      	ldr	r3, [pc, #276]	@ (80017a8 <RescheduleTimerList+0x11c>)
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800169a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800169e:	d107      	bne.n	80016b0 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 80016a0:	bf00      	nop
 80016a2:	4b42      	ldr	r3, [pc, #264]	@ (80017ac <RescheduleTimerList+0x120>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	f003 0304 	and.w	r3, r3, #4
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d1f8      	bne.n	80016a2 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 80016b0:	4b3e      	ldr	r3, [pc, #248]	@ (80017ac <RescheduleTimerList+0x120>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	689a      	ldr	r2, [r3, #8]
 80016b6:	4b3d      	ldr	r3, [pc, #244]	@ (80017ac <RescheduleTimerList+0x120>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80016be:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 80016c0:	4b3b      	ldr	r3, [pc, #236]	@ (80017b0 <RescheduleTimerList+0x124>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 80016c6:	7bfa      	ldrb	r2, [r7, #15]
 80016c8:	493a      	ldr	r1, [pc, #232]	@ (80017b4 <RescheduleTimerList+0x128>)
 80016ca:	4613      	mov	r3, r2
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	4413      	add	r3, r2
 80016d0:	00db      	lsls	r3, r3, #3
 80016d2:	440b      	add	r3, r1
 80016d4:	3308      	adds	r3, #8
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 80016da:	f7ff ff3f 	bl	800155c <ReturnTimeElapsed>
 80016de:	4603      	mov	r3, r0
 80016e0:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 80016e2:	88fb      	ldrh	r3, [r7, #6]
 80016e4:	68ba      	ldr	r2, [r7, #8]
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d205      	bcs.n	80016f6 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 80016ea:	2300      	movs	r3, #0
 80016ec:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80016ee:	4b32      	ldr	r3, [pc, #200]	@ (80017b8 <RescheduleTimerList+0x12c>)
 80016f0:	2201      	movs	r2, #1
 80016f2:	701a      	strb	r2, [r3, #0]
 80016f4:	e04d      	b.n	8001792 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 80016f6:	88fb      	ldrh	r3, [r7, #6]
 80016f8:	4a30      	ldr	r2, [pc, #192]	@ (80017bc <RescheduleTimerList+0x130>)
 80016fa:	8812      	ldrh	r2, [r2, #0]
 80016fc:	b292      	uxth	r2, r2
 80016fe:	4413      	add	r3, r2
 8001700:	461a      	mov	r2, r3
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	4293      	cmp	r3, r2
 8001706:	d906      	bls.n	8001716 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8001708:	4b2c      	ldr	r3, [pc, #176]	@ (80017bc <RescheduleTimerList+0x130>)
 800170a:	881b      	ldrh	r3, [r3, #0]
 800170c:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 800170e:	4b2a      	ldr	r3, [pc, #168]	@ (80017b8 <RescheduleTimerList+0x12c>)
 8001710:	2200      	movs	r2, #0
 8001712:	701a      	strb	r2, [r3, #0]
 8001714:	e03d      	b.n	8001792 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	b29a      	uxth	r2, r3
 800171a:	88fb      	ldrh	r3, [r7, #6]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001720:	4b25      	ldr	r3, [pc, #148]	@ (80017b8 <RescheduleTimerList+0x12c>)
 8001722:	2201      	movs	r2, #1
 8001724:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001726:	e034      	b.n	8001792 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8001728:	7bfa      	ldrb	r2, [r7, #15]
 800172a:	4922      	ldr	r1, [pc, #136]	@ (80017b4 <RescheduleTimerList+0x128>)
 800172c:	4613      	mov	r3, r2
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	4413      	add	r3, r2
 8001732:	00db      	lsls	r3, r3, #3
 8001734:	440b      	add	r3, r1
 8001736:	3308      	adds	r3, #8
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	88fb      	ldrh	r3, [r7, #6]
 800173c:	429a      	cmp	r2, r3
 800173e:	d20a      	bcs.n	8001756 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8001740:	7bfa      	ldrb	r2, [r7, #15]
 8001742:	491c      	ldr	r1, [pc, #112]	@ (80017b4 <RescheduleTimerList+0x128>)
 8001744:	4613      	mov	r3, r2
 8001746:	005b      	lsls	r3, r3, #1
 8001748:	4413      	add	r3, r2
 800174a:	00db      	lsls	r3, r3, #3
 800174c:	440b      	add	r3, r1
 800174e:	3308      	adds	r3, #8
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]
 8001754:	e013      	b.n	800177e <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8001756:	7bfa      	ldrb	r2, [r7, #15]
 8001758:	4916      	ldr	r1, [pc, #88]	@ (80017b4 <RescheduleTimerList+0x128>)
 800175a:	4613      	mov	r3, r2
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	4413      	add	r3, r2
 8001760:	00db      	lsls	r3, r3, #3
 8001762:	440b      	add	r3, r1
 8001764:	3308      	adds	r3, #8
 8001766:	6819      	ldr	r1, [r3, #0]
 8001768:	88fb      	ldrh	r3, [r7, #6]
 800176a:	7bfa      	ldrb	r2, [r7, #15]
 800176c:	1ac9      	subs	r1, r1, r3
 800176e:	4811      	ldr	r0, [pc, #68]	@ (80017b4 <RescheduleTimerList+0x128>)
 8001770:	4613      	mov	r3, r2
 8001772:	005b      	lsls	r3, r3, #1
 8001774:	4413      	add	r3, r2
 8001776:	00db      	lsls	r3, r3, #3
 8001778:	4403      	add	r3, r0
 800177a:	3308      	adds	r3, #8
 800177c:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 800177e:	7bfa      	ldrb	r2, [r7, #15]
 8001780:	490c      	ldr	r1, [pc, #48]	@ (80017b4 <RescheduleTimerList+0x128>)
 8001782:	4613      	mov	r3, r2
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	4413      	add	r3, r2
 8001788:	00db      	lsls	r3, r3, #3
 800178a:	440b      	add	r3, r1
 800178c:	3315      	adds	r3, #21
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001792:	7bfb      	ldrb	r3, [r7, #15]
 8001794:	2b06      	cmp	r3, #6
 8001796:	d1c7      	bne.n	8001728 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8001798:	89bb      	ldrh	r3, [r7, #12]
 800179a:	4618      	mov	r0, r3
 800179c:	f7ff ff1e 	bl	80015dc <RestartWakeupCounter>

  return ;
 80017a0:	bf00      	nop
}
 80017a2:	3710      	adds	r7, #16
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	40002800 	.word	0x40002800
 80017ac:	20000438 	.word	0x20000438
 80017b0:	2000018c 	.word	0x2000018c
 80017b4:	200000fc 	.word	0x200000fc
 80017b8:	20000194 	.word	0x20000194
 80017bc:	2000019a 	.word	0x2000019a

080017c0 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b08a      	sub	sp, #40	@ 0x28
 80017c4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80017c6:	f3ef 8310 	mrs	r3, PRIMASK
 80017ca:	617b      	str	r3, [r7, #20]
  return(result);
 80017cc:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80017ce:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 80017d0:	b672      	cpsid	i
}
 80017d2:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80017d4:	4b59      	ldr	r3, [pc, #356]	@ (800193c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	22ca      	movs	r2, #202	@ 0xca
 80017da:	625a      	str	r2, [r3, #36]	@ 0x24
 80017dc:	4b57      	ldr	r3, [pc, #348]	@ (800193c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2253      	movs	r2, #83	@ 0x53
 80017e2:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 80017e4:	4b55      	ldr	r3, [pc, #340]	@ (800193c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	689a      	ldr	r2, [r3, #8]
 80017ea:	4b54      	ldr	r3, [pc, #336]	@ (800193c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80017f2:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 80017f4:	4b52      	ldr	r3, [pc, #328]	@ (8001940 <HW_TS_RTC_Wakeup_Handler+0x180>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 80017fc:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001800:	4950      	ldr	r1, [pc, #320]	@ (8001944 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001802:	4613      	mov	r3, r2
 8001804:	005b      	lsls	r3, r3, #1
 8001806:	4413      	add	r3, r2
 8001808:	00db      	lsls	r3, r3, #3
 800180a:	440b      	add	r3, r1
 800180c:	330c      	adds	r3, #12
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	b2db      	uxtb	r3, r3
 8001812:	2b02      	cmp	r3, #2
 8001814:	d16e      	bne.n	80018f4 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8001816:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800181a:	494a      	ldr	r1, [pc, #296]	@ (8001944 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800181c:	4613      	mov	r3, r2
 800181e:	005b      	lsls	r3, r3, #1
 8001820:	4413      	add	r3, r2
 8001822:	00db      	lsls	r3, r3, #3
 8001824:	440b      	add	r3, r1
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 800182a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800182e:	4945      	ldr	r1, [pc, #276]	@ (8001944 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001830:	4613      	mov	r3, r2
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	4413      	add	r3, r2
 8001836:	00db      	lsls	r3, r3, #3
 8001838:	440b      	add	r3, r1
 800183a:	3310      	adds	r3, #16
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8001840:	4b41      	ldr	r3, [pc, #260]	@ (8001948 <HW_TS_RTC_Wakeup_Handler+0x188>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	b2db      	uxtb	r3, r3
 8001846:	2b00      	cmp	r3, #0
 8001848:	d04c      	beq.n	80018e4 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 800184a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800184e:	493d      	ldr	r1, [pc, #244]	@ (8001944 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001850:	4613      	mov	r3, r2
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	4413      	add	r3, r2
 8001856:	00db      	lsls	r3, r3, #3
 8001858:	440b      	add	r3, r1
 800185a:	330d      	adds	r3, #13
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	b2db      	uxtb	r3, r3
 8001860:	2b01      	cmp	r3, #1
 8001862:	d124      	bne.n	80018ae <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001864:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001868:	2101      	movs	r1, #1
 800186a:	4618      	mov	r0, r3
 800186c:	f7ff fdf2 	bl	8001454 <UnlinkTimer>
 8001870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001872:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	f383 8810 	msr	PRIMASK, r3
}
 800187a:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 800187c:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001880:	4930      	ldr	r1, [pc, #192]	@ (8001944 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001882:	4613      	mov	r3, r2
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	4413      	add	r3, r2
 8001888:	00db      	lsls	r3, r3, #3
 800188a:	440b      	add	r3, r1
 800188c:	3304      	adds	r3, #4
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001894:	4611      	mov	r1, r2
 8001896:	4618      	mov	r0, r3
 8001898:	f000 f9b8 	bl	8001c0c <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800189c:	4b27      	ldr	r3, [pc, #156]	@ (800193c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	22ca      	movs	r2, #202	@ 0xca
 80018a2:	625a      	str	r2, [r3, #36]	@ 0x24
 80018a4:	4b25      	ldr	r3, [pc, #148]	@ (800193c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2253      	movs	r2, #83	@ 0x53
 80018aa:	625a      	str	r2, [r3, #36]	@ 0x24
 80018ac:	e012      	b.n	80018d4 <HW_TS_RTC_Wakeup_Handler+0x114>
 80018ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018b0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	f383 8810 	msr	PRIMASK, r3
}
 80018b8:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 80018ba:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80018be:	4618      	mov	r0, r3
 80018c0:	f000 f920 	bl	8001b04 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80018c4:	4b1d      	ldr	r3, [pc, #116]	@ (800193c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	22ca      	movs	r2, #202	@ 0xca
 80018ca:	625a      	str	r2, [r3, #36]	@ 0x24
 80018cc:	4b1b      	ldr	r3, [pc, #108]	@ (800193c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2253      	movs	r2, #83	@ 0x53
 80018d2:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 80018d4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80018d8:	69fa      	ldr	r2, [r7, #28]
 80018da:	4619      	mov	r1, r3
 80018dc:	69b8      	ldr	r0, [r7, #24]
 80018de:	f000 fa1b 	bl	8001d18 <HW_TS_RTC_Int_AppNot>
 80018e2:	e022      	b.n	800192a <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 80018e4:	f7ff fed2 	bl	800168c <RescheduleTimerList>
 80018e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ea:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	f383 8810 	msr	PRIMASK, r3
}
 80018f2:	e01a      	b.n	800192a <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80018f4:	bf00      	nop
 80018f6:	4b11      	ldr	r3, [pc, #68]	@ (800193c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	f003 0304 	and.w	r3, r3, #4
 8001900:	2b00      	cmp	r3, #0
 8001902:	d0f8      	beq.n	80018f6 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001904:	4b0d      	ldr	r3, [pc, #52]	@ (800193c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	68db      	ldr	r3, [r3, #12]
 800190a:	b2da      	uxtb	r2, r3
 800190c:	4b0b      	ldr	r3, [pc, #44]	@ (800193c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001914:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001916:	4b0d      	ldr	r3, [pc, #52]	@ (800194c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001918:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800191c:	60da      	str	r2, [r3, #12]
 800191e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001920:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f383 8810 	msr	PRIMASK, r3
}
 8001928:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800192a:	4b04      	ldr	r3, [pc, #16]	@ (800193c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	22ff      	movs	r2, #255	@ 0xff
 8001930:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 8001932:	bf00      	nop
}
 8001934:	3728      	adds	r7, #40	@ 0x28
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	20000438 	.word	0x20000438
 8001940:	2000018c 	.word	0x2000018c
 8001944:	200000fc 	.word	0x200000fc
 8001948:	20000194 	.word	0x20000194
 800194c:	58000800 	.word	0x58000800

08001950 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b088      	sub	sp, #32
 8001954:	af00      	add	r7, sp, #0
 8001956:	4603      	mov	r3, r0
 8001958:	6039      	str	r1, [r7, #0]
 800195a:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800195c:	4b5e      	ldr	r3, [pc, #376]	@ (8001ad8 <HW_TS_Init+0x188>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	22ca      	movs	r2, #202	@ 0xca
 8001962:	625a      	str	r2, [r3, #36]	@ 0x24
 8001964:	4b5c      	ldr	r3, [pc, #368]	@ (8001ad8 <HW_TS_Init+0x188>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2253      	movs	r2, #83	@ 0x53
 800196a:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800196c:	4b5b      	ldr	r3, [pc, #364]	@ (8001adc <HW_TS_Init+0x18c>)
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	4a5a      	ldr	r2, [pc, #360]	@ (8001adc <HW_TS_Init+0x18c>)
 8001972:	f043 0320 	orr.w	r3, r3, #32
 8001976:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001978:	4b58      	ldr	r3, [pc, #352]	@ (8001adc <HW_TS_Init+0x18c>)
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	b2db      	uxtb	r3, r3
 800197e:	f003 0307 	and.w	r3, r3, #7
 8001982:	b2db      	uxtb	r3, r3
 8001984:	f1c3 0304 	rsb	r3, r3, #4
 8001988:	b2da      	uxtb	r2, r3
 800198a:	4b55      	ldr	r3, [pc, #340]	@ (8001ae0 <HW_TS_Init+0x190>)
 800198c:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 800198e:	4b53      	ldr	r3, [pc, #332]	@ (8001adc <HW_TS_Init+0x18c>)
 8001990:	691b      	ldr	r3, [r3, #16]
 8001992:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001996:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 800199a:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800199c:	693a      	ldr	r2, [r7, #16]
 800199e:	fa92 f2a2 	rbit	r2, r2
 80019a2:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80019a4:	68fa      	ldr	r2, [r7, #12]
 80019a6:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80019a8:	697a      	ldr	r2, [r7, #20]
 80019aa:	2a00      	cmp	r2, #0
 80019ac:	d101      	bne.n	80019b2 <HW_TS_Init+0x62>
  {
    return 32U;
 80019ae:	2220      	movs	r2, #32
 80019b0:	e003      	b.n	80019ba <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 80019b2:	697a      	ldr	r2, [r7, #20]
 80019b4:	fab2 f282 	clz	r2, r2
 80019b8:	b2d2      	uxtb	r2, r2
 80019ba:	40d3      	lsrs	r3, r2
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	3301      	adds	r3, #1
 80019c0:	b2da      	uxtb	r2, r3
 80019c2:	4b48      	ldr	r3, [pc, #288]	@ (8001ae4 <HW_TS_Init+0x194>)
 80019c4:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80019c6:	4b45      	ldr	r3, [pc, #276]	@ (8001adc <HW_TS_Init+0x18c>)
 80019c8:	691b      	ldr	r3, [r3, #16]
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	3301      	adds	r3, #1
 80019d4:	b29a      	uxth	r2, r3
 80019d6:	4b44      	ldr	r3, [pc, #272]	@ (8001ae8 <HW_TS_Init+0x198>)
 80019d8:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80019da:	4b43      	ldr	r3, [pc, #268]	@ (8001ae8 <HW_TS_Init+0x198>)
 80019dc:	881b      	ldrh	r3, [r3, #0]
 80019de:	3b01      	subs	r3, #1
 80019e0:	4a40      	ldr	r2, [pc, #256]	@ (8001ae4 <HW_TS_Init+0x194>)
 80019e2:	7812      	ldrb	r2, [r2, #0]
 80019e4:	fb02 f303 	mul.w	r3, r2, r3
 80019e8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80019ec:	4a3c      	ldr	r2, [pc, #240]	@ (8001ae0 <HW_TS_Init+0x190>)
 80019ee:	7812      	ldrb	r2, [r2, #0]
 80019f0:	40d3      	lsrs	r3, r2
 80019f2:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d904      	bls.n	8001a08 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80019fe:	4b3b      	ldr	r3, [pc, #236]	@ (8001aec <HW_TS_Init+0x19c>)
 8001a00:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a04:	801a      	strh	r2, [r3, #0]
 8001a06:	e003      	b.n	8001a10 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	b29a      	uxth	r2, r3
 8001a0c:	4b37      	ldr	r3, [pc, #220]	@ (8001aec <HW_TS_Init+0x19c>)
 8001a0e:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001a10:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001a14:	f7ff fb9c 	bl	8001150 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001a18:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001a1c:	f7ff fb84 	bl	8001128 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8001a20:	79fb      	ldrb	r3, [r7, #7]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d13d      	bne.n	8001aa2 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001a26:	4b32      	ldr	r3, [pc, #200]	@ (8001af0 <HW_TS_Init+0x1a0>)
 8001a28:	2201      	movs	r2, #1
 8001a2a:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001a2c:	4b31      	ldr	r3, [pc, #196]	@ (8001af4 <HW_TS_Init+0x1a4>)
 8001a2e:	f04f 32ff 	mov.w	r2, #4294967295
 8001a32:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001a34:	2300      	movs	r3, #0
 8001a36:	77fb      	strb	r3, [r7, #31]
 8001a38:	e00c      	b.n	8001a54 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8001a3a:	7ffa      	ldrb	r2, [r7, #31]
 8001a3c:	492e      	ldr	r1, [pc, #184]	@ (8001af8 <HW_TS_Init+0x1a8>)
 8001a3e:	4613      	mov	r3, r2
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	4413      	add	r3, r2
 8001a44:	00db      	lsls	r3, r3, #3
 8001a46:	440b      	add	r3, r1
 8001a48:	330c      	adds	r3, #12
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001a4e:	7ffb      	ldrb	r3, [r7, #31]
 8001a50:	3301      	adds	r3, #1
 8001a52:	77fb      	strb	r3, [r7, #31]
 8001a54:	7ffb      	ldrb	r3, [r7, #31]
 8001a56:	2b05      	cmp	r3, #5
 8001a58:	d9ef      	bls.n	8001a3a <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001a5a:	4b28      	ldr	r3, [pc, #160]	@ (8001afc <HW_TS_Init+0x1ac>)
 8001a5c:	2206      	movs	r2, #6
 8001a5e:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8001a60:	4b1d      	ldr	r3, [pc, #116]	@ (8001ad8 <HW_TS_Init+0x188>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	689a      	ldr	r2, [r3, #8]
 8001a66:	4b1c      	ldr	r3, [pc, #112]	@ (8001ad8 <HW_TS_Init+0x188>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001a6e:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001a70:	4b19      	ldr	r3, [pc, #100]	@ (8001ad8 <HW_TS_Init+0x188>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	68db      	ldr	r3, [r3, #12]
 8001a76:	b2da      	uxtb	r2, r3
 8001a78:	4b17      	ldr	r3, [pc, #92]	@ (8001ad8 <HW_TS_Init+0x188>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001a80:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001a82:	4b1f      	ldr	r3, [pc, #124]	@ (8001b00 <HW_TS_Init+0x1b0>)
 8001a84:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001a88:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001a8a:	2003      	movs	r0, #3
 8001a8c:	f002 fa59 	bl	8003f42 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001a90:	4b11      	ldr	r3, [pc, #68]	@ (8001ad8 <HW_TS_Init+0x188>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	689a      	ldr	r2, [r3, #8]
 8001a96:	4b10      	ldr	r3, [pc, #64]	@ (8001ad8 <HW_TS_Init+0x188>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001a9e:	609a      	str	r2, [r3, #8]
 8001aa0:	e009      	b.n	8001ab6 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8001aa2:	4b0d      	ldr	r3, [pc, #52]	@ (8001ad8 <HW_TS_Init+0x188>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d002      	beq.n	8001ab6 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001ab0:	2003      	movs	r0, #3
 8001ab2:	f002 fa38 	bl	8003f26 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001ab6:	4b08      	ldr	r3, [pc, #32]	@ (8001ad8 <HW_TS_Init+0x188>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	22ff      	movs	r2, #255	@ 0xff
 8001abc:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8001abe:	2200      	movs	r2, #0
 8001ac0:	2103      	movs	r1, #3
 8001ac2:	2003      	movs	r0, #3
 8001ac4:	f002 f9ed 	bl	8003ea2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001ac8:	2003      	movs	r0, #3
 8001aca:	f002 fa04 	bl	8003ed6 <HAL_NVIC_EnableIRQ>

  return;
 8001ace:	bf00      	nop
}
 8001ad0:	3720      	adds	r7, #32
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	20000438 	.word	0x20000438
 8001adc:	40002800 	.word	0x40002800
 8001ae0:	20000195 	.word	0x20000195
 8001ae4:	20000196 	.word	0x20000196
 8001ae8:	20000198 	.word	0x20000198
 8001aec:	2000019a 	.word	0x2000019a
 8001af0:	20000194 	.word	0x20000194
 8001af4:	20000190 	.word	0x20000190
 8001af8:	200000fc 	.word	0x200000fc
 8001afc:	2000018c 	.word	0x2000018c
 8001b00:	58000800 	.word	0x58000800

08001b04 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001b0e:	f3ef 8310 	mrs	r3, PRIMASK
 8001b12:	60fb      	str	r3, [r7, #12]
  return(result);
 8001b14:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001b16:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001b18:	b672      	cpsid	i
}
 8001b1a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001b1c:	2003      	movs	r0, #3
 8001b1e:	f002 f9e8 	bl	8003ef2 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001b22:	4b34      	ldr	r3, [pc, #208]	@ (8001bf4 <HW_TS_Stop+0xf0>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	22ca      	movs	r2, #202	@ 0xca
 8001b28:	625a      	str	r2, [r3, #36]	@ 0x24
 8001b2a:	4b32      	ldr	r3, [pc, #200]	@ (8001bf4 <HW_TS_Stop+0xf0>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2253      	movs	r2, #83	@ 0x53
 8001b30:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001b32:	79fa      	ldrb	r2, [r7, #7]
 8001b34:	4930      	ldr	r1, [pc, #192]	@ (8001bf8 <HW_TS_Stop+0xf4>)
 8001b36:	4613      	mov	r3, r2
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	4413      	add	r3, r2
 8001b3c:	00db      	lsls	r3, r3, #3
 8001b3e:	440b      	add	r3, r1
 8001b40:	330c      	adds	r3, #12
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d142      	bne.n	8001bd0 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001b4a:	79fb      	ldrb	r3, [r7, #7]
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7ff fc80 	bl	8001454 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001b54:	4b29      	ldr	r3, [pc, #164]	@ (8001bfc <HW_TS_Stop+0xf8>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001b5a:	7cfb      	ldrb	r3, [r7, #19]
 8001b5c:	2b06      	cmp	r3, #6
 8001b5e:	d12f      	bne.n	8001bc0 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001b60:	4b27      	ldr	r3, [pc, #156]	@ (8001c00 <HW_TS_Stop+0xfc>)
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b6c:	d107      	bne.n	8001b7e <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001b6e:	bf00      	nop
 8001b70:	4b20      	ldr	r3, [pc, #128]	@ (8001bf4 <HW_TS_Stop+0xf0>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	68db      	ldr	r3, [r3, #12]
 8001b76:	f003 0304 	and.w	r3, r3, #4
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d1f8      	bne.n	8001b70 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001b7e:	4b1d      	ldr	r3, [pc, #116]	@ (8001bf4 <HW_TS_Stop+0xf0>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	689a      	ldr	r2, [r3, #8]
 8001b84:	4b1b      	ldr	r3, [pc, #108]	@ (8001bf4 <HW_TS_Stop+0xf0>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001b8c:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001b8e:	bf00      	nop
 8001b90:	4b18      	ldr	r3, [pc, #96]	@ (8001bf4 <HW_TS_Stop+0xf0>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	68db      	ldr	r3, [r3, #12]
 8001b96:	f003 0304 	and.w	r3, r3, #4
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d0f8      	beq.n	8001b90 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001b9e:	4b15      	ldr	r3, [pc, #84]	@ (8001bf4 <HW_TS_Stop+0xf0>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	b2da      	uxtb	r2, r3
 8001ba6:	4b13      	ldr	r3, [pc, #76]	@ (8001bf4 <HW_TS_Stop+0xf0>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001bae:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001bb0:	4b14      	ldr	r3, [pc, #80]	@ (8001c04 <HW_TS_Stop+0x100>)
 8001bb2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001bb6:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001bb8:	2003      	movs	r0, #3
 8001bba:	f002 f9c2 	bl	8003f42 <HAL_NVIC_ClearPendingIRQ>
 8001bbe:	e007      	b.n	8001bd0 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001bc0:	4b11      	ldr	r3, [pc, #68]	@ (8001c08 <HW_TS_Stop+0x104>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	7cfa      	ldrb	r2, [r7, #19]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d001      	beq.n	8001bd0 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8001bcc:	f7ff fd5e 	bl	800168c <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001bd0:	4b08      	ldr	r3, [pc, #32]	@ (8001bf4 <HW_TS_Stop+0xf0>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	22ff      	movs	r2, #255	@ 0xff
 8001bd6:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001bd8:	2003      	movs	r0, #3
 8001bda:	f002 f97c 	bl	8003ed6 <HAL_NVIC_EnableIRQ>
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	f383 8810 	msr	PRIMASK, r3
}
 8001be8:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001bea:	bf00      	nop
}
 8001bec:	3718      	adds	r7, #24
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	20000438 	.word	0x20000438
 8001bf8:	200000fc 	.word	0x200000fc
 8001bfc:	2000018c 	.word	0x2000018c
 8001c00:	40002800 	.word	0x40002800
 8001c04:	58000800 	.word	0x58000800
 8001c08:	2000018d 	.word	0x2000018d

08001c0c <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b086      	sub	sp, #24
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	4603      	mov	r3, r0
 8001c14:	6039      	str	r1, [r7, #0]
 8001c16:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001c18:	79fa      	ldrb	r2, [r7, #7]
 8001c1a:	493b      	ldr	r1, [pc, #236]	@ (8001d08 <HW_TS_Start+0xfc>)
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	4413      	add	r3, r2
 8001c22:	00db      	lsls	r3, r3, #3
 8001c24:	440b      	add	r3, r1
 8001c26:	330c      	adds	r3, #12
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d103      	bne.n	8001c38 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001c30:	79fb      	ldrb	r3, [r7, #7]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7ff ff66 	bl	8001b04 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001c38:	f3ef 8310 	mrs	r3, PRIMASK
 8001c3c:	60fb      	str	r3, [r7, #12]
  return(result);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001c40:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001c42:	b672      	cpsid	i
}
 8001c44:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001c46:	2003      	movs	r0, #3
 8001c48:	f002 f953 	bl	8003ef2 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001c4c:	4b2f      	ldr	r3, [pc, #188]	@ (8001d0c <HW_TS_Start+0x100>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	22ca      	movs	r2, #202	@ 0xca
 8001c52:	625a      	str	r2, [r3, #36]	@ 0x24
 8001c54:	4b2d      	ldr	r3, [pc, #180]	@ (8001d0c <HW_TS_Start+0x100>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2253      	movs	r2, #83	@ 0x53
 8001c5a:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001c5c:	79fa      	ldrb	r2, [r7, #7]
 8001c5e:	492a      	ldr	r1, [pc, #168]	@ (8001d08 <HW_TS_Start+0xfc>)
 8001c60:	4613      	mov	r3, r2
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	4413      	add	r3, r2
 8001c66:	00db      	lsls	r3, r3, #3
 8001c68:	440b      	add	r3, r1
 8001c6a:	330c      	adds	r3, #12
 8001c6c:	2202      	movs	r2, #2
 8001c6e:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001c70:	79fa      	ldrb	r2, [r7, #7]
 8001c72:	4925      	ldr	r1, [pc, #148]	@ (8001d08 <HW_TS_Start+0xfc>)
 8001c74:	4613      	mov	r3, r2
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	4413      	add	r3, r2
 8001c7a:	00db      	lsls	r3, r3, #3
 8001c7c:	440b      	add	r3, r1
 8001c7e:	3308      	adds	r3, #8
 8001c80:	683a      	ldr	r2, [r7, #0]
 8001c82:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001c84:	79fa      	ldrb	r2, [r7, #7]
 8001c86:	4920      	ldr	r1, [pc, #128]	@ (8001d08 <HW_TS_Start+0xfc>)
 8001c88:	4613      	mov	r3, r2
 8001c8a:	005b      	lsls	r3, r3, #1
 8001c8c:	4413      	add	r3, r2
 8001c8e:	00db      	lsls	r3, r3, #3
 8001c90:	440b      	add	r3, r1
 8001c92:	3304      	adds	r3, #4
 8001c94:	683a      	ldr	r2, [r7, #0]
 8001c96:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001c98:	79fb      	ldrb	r3, [r7, #7]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7ff fb30 	bl	8001300 <linkTimer>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001ca4:	4b1a      	ldr	r3, [pc, #104]	@ (8001d10 <HW_TS_Start+0x104>)
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001caa:	4b1a      	ldr	r3, [pc, #104]	@ (8001d14 <HW_TS_Start+0x108>)
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	7c7a      	ldrb	r2, [r7, #17]
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d002      	beq.n	8001cbc <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 8001cb6:	f7ff fce9 	bl	800168c <RescheduleTimerList>
 8001cba:	e013      	b.n	8001ce4 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8001cbc:	79fa      	ldrb	r2, [r7, #7]
 8001cbe:	4912      	ldr	r1, [pc, #72]	@ (8001d08 <HW_TS_Start+0xfc>)
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	4413      	add	r3, r2
 8001cc6:	00db      	lsls	r3, r3, #3
 8001cc8:	440b      	add	r3, r1
 8001cca:	3308      	adds	r3, #8
 8001ccc:	6819      	ldr	r1, [r3, #0]
 8001cce:	8a7b      	ldrh	r3, [r7, #18]
 8001cd0:	79fa      	ldrb	r2, [r7, #7]
 8001cd2:	1ac9      	subs	r1, r1, r3
 8001cd4:	480c      	ldr	r0, [pc, #48]	@ (8001d08 <HW_TS_Start+0xfc>)
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	4413      	add	r3, r2
 8001cdc:	00db      	lsls	r3, r3, #3
 8001cde:	4403      	add	r3, r0
 8001ce0:	3308      	adds	r3, #8
 8001ce2:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001ce4:	4b09      	ldr	r3, [pc, #36]	@ (8001d0c <HW_TS_Start+0x100>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	22ff      	movs	r2, #255	@ 0xff
 8001cea:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001cec:	2003      	movs	r0, #3
 8001cee:	f002 f8f2 	bl	8003ed6 <HAL_NVIC_EnableIRQ>
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	f383 8810 	msr	PRIMASK, r3
}
 8001cfc:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001cfe:	bf00      	nop
}
 8001d00:	3718      	adds	r7, #24
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	200000fc 	.word	0x200000fc
 8001d0c:	20000438 	.word	0x20000438
 8001d10:	2000018c 	.word	0x2000018c
 8001d14:	2000018d 	.word	0x2000018d

08001d18 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	460b      	mov	r3, r1
 8001d22:	607a      	str	r2, [r7, #4]
 8001d24:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4798      	blx	r3

  return;
 8001d2a:	bf00      	nop
}
 8001d2c:	3710      	adds	r7, #16
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
	...

08001d34 <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b086      	sub	sp, #24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	60b9      	str	r1, [r7, #8]
 8001d3c:	607b      	str	r3, [r7, #4]
 8001d3e:	4603      	mov	r3, r0
 8001d40:	73fb      	strb	r3, [r7, #15]
 8001d42:	4613      	mov	r3, r2
 8001d44:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 8001d46:	2300      	movs	r3, #0
 8001d48:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 8001d4e:	7bfb      	ldrb	r3, [r7, #15]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d10e      	bne.n	8001d72 <HW_UART_Transmit_DMA+0x3e>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_huart1TxCb = cb;
 8001d54:	4a17      	ldr	r2, [pc, #92]	@ (8001db4 <HW_UART_Transmit_DMA+0x80>)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 8001d5a:	4b17      	ldr	r3, [pc, #92]	@ (8001db8 <HW_UART_Transmit_DMA+0x84>)
 8001d5c:	4a17      	ldr	r2, [pc, #92]	@ (8001dbc <HW_UART_Transmit_DMA+0x88>)
 8001d5e:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8001d60:	89bb      	ldrh	r3, [r7, #12]
 8001d62:	461a      	mov	r2, r3
 8001d64:	68b9      	ldr	r1, [r7, #8]
 8001d66:	4814      	ldr	r0, [pc, #80]	@ (8001db8 <HW_UART_Transmit_DMA+0x84>)
 8001d68:	f006 f84c 	bl	8007e04 <HAL_UART_Transmit_DMA>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	75fb      	strb	r3, [r7, #23]
            break;
 8001d70:	e000      	b.n	8001d74 <HW_UART_Transmit_DMA+0x40>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 8001d72:	bf00      	nop
    }

    switch (hal_status)
 8001d74:	7dfb      	ldrb	r3, [r7, #23]
 8001d76:	2b03      	cmp	r3, #3
 8001d78:	d816      	bhi.n	8001da8 <HW_UART_Transmit_DMA+0x74>
 8001d7a:	a201      	add	r2, pc, #4	@ (adr r2, 8001d80 <HW_UART_Transmit_DMA+0x4c>)
 8001d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d80:	08001d91 	.word	0x08001d91
 8001d84:	08001d97 	.word	0x08001d97
 8001d88:	08001d9d 	.word	0x08001d9d
 8001d8c:	08001da3 	.word	0x08001da3
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 8001d90:	2300      	movs	r3, #0
 8001d92:	75bb      	strb	r3, [r7, #22]
            break;
 8001d94:	e009      	b.n	8001daa <HW_UART_Transmit_DMA+0x76>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 8001d96:	2301      	movs	r3, #1
 8001d98:	75bb      	strb	r3, [r7, #22]
            break;
 8001d9a:	e006      	b.n	8001daa <HW_UART_Transmit_DMA+0x76>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	75bb      	strb	r3, [r7, #22]
            break;
 8001da0:	e003      	b.n	8001daa <HW_UART_Transmit_DMA+0x76>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 8001da2:	2303      	movs	r3, #3
 8001da4:	75bb      	strb	r3, [r7, #22]
            break;
 8001da6:	e000      	b.n	8001daa <HW_UART_Transmit_DMA+0x76>

        default:
            break;
 8001da8:	bf00      	nop
    }

    return hw_status;
 8001daa:	7dbb      	ldrb	r3, [r7, #22]
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3718      	adds	r7, #24
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	200001a0 	.word	0x200001a0
 8001db8:	200002ac 	.word	0x200002ac
 8001dbc:	40013800 	.word	0x40013800

08001dc0 <HAL_UART_RxCpltCallback>:

    return;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	461a      	mov	r2, r3
 8001dce:	4b09      	ldr	r3, [pc, #36]	@ (8001df4 <HAL_UART_RxCpltCallback+0x34>)
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d107      	bne.n	8001de4 <HAL_UART_RxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1RxCb)
 8001dd4:	4b08      	ldr	r3, [pc, #32]	@ (8001df8 <HAL_UART_RxCpltCallback+0x38>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d005      	beq.n	8001de8 <HAL_UART_RxCpltCallback+0x28>
            {
                HW_huart1RxCb();
 8001ddc:	4b06      	ldr	r3, [pc, #24]	@ (8001df8 <HAL_UART_RxCpltCallback+0x38>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4798      	blx	r3
            }
            break;
 8001de2:	e001      	b.n	8001de8 <HAL_UART_RxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 8001de4:	bf00      	nop
 8001de6:	e000      	b.n	8001dea <HAL_UART_RxCpltCallback+0x2a>
            break;
 8001de8:	bf00      	nop
    }

    return;
 8001dea:	bf00      	nop
}
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	40013800 	.word	0x40013800
 8001df8:	2000019c 	.word	0x2000019c

08001dfc <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	461a      	mov	r2, r3
 8001e0a:	4b09      	ldr	r3, [pc, #36]	@ (8001e30 <HAL_UART_TxCpltCallback+0x34>)
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d107      	bne.n	8001e20 <HAL_UART_TxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 8001e10:	4b08      	ldr	r3, [pc, #32]	@ (8001e34 <HAL_UART_TxCpltCallback+0x38>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d005      	beq.n	8001e24 <HAL_UART_TxCpltCallback+0x28>
            {
                HW_huart1TxCb();
 8001e18:	4b06      	ldr	r3, [pc, #24]	@ (8001e34 <HAL_UART_TxCpltCallback+0x38>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4798      	blx	r3
            }
            break;
 8001e1e:	e001      	b.n	8001e24 <HAL_UART_TxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 8001e20:	bf00      	nop
 8001e22:	e000      	b.n	8001e26 <HAL_UART_TxCpltCallback+0x2a>
            break;
 8001e24:	bf00      	nop
    }

    return;
 8001e26:	bf00      	nop
}
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	40013800 	.word	0x40013800
 8001e34:	200001a0 	.word	0x200001a0

08001e38 <LL_RCC_LSE_SetDriveCapability>:
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001e40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e48:	f023 0218 	bic.w	r2, r3, #24
 8001e4c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8001e58:	bf00      	nop
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b085      	sub	sp, #20
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001e6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e70:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001e72:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	648b      	str	r3, [r1, #72]	@ 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001e7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e80:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4013      	ands	r3, r2
 8001e86:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e88:	68fb      	ldr	r3, [r7, #12]
}
 8001e8a:	bf00      	nop
 8001e8c:	3714      	adds	r7, #20
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr

08001e96 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001e96:	b480      	push	{r7}
 8001e98:	b085      	sub	sp, #20
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001e9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ea2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001ea4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001eae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001eb2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001eba:	68fb      	ldr	r3, [r7, #12]
}
 8001ebc:	bf00      	nop
 8001ebe:	3714      	adds	r7, #20
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ece:	f001 fe1b 	bl	8003b08 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8001ed2:	f7fe ff0f 	bl	8000cf4 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ed6:	f000 f9a9 	bl	800222c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001eda:	f000 fa09 	bl	80022f0 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8001ede:	f000 fa27 	bl	8002330 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ee2:	f000 fbb7 	bl	8002654 <MX_GPIO_Init>
  MX_DMA_Init();
 8001ee6:	f000 fb9b 	bl	8002620 <MX_DMA_Init>
  MX_RTC_Init();
 8001eea:	f000 fad9 	bl	80024a0 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8001eee:	f000 fa81 	bl	80023f4 <MX_USART1_UART_Init>
  MX_LPUART1_UART_Init();
 8001ef2:	f000 fa31 	bl	8002358 <MX_LPUART1_UART_Init>
  MX_TIM2_Init();
 8001ef6:	f000 fb45 	bl	8002584 <MX_TIM2_Init>
  MX_SPI2_Init();
 8001efa:	f000 fb05 	bl	8002508 <MX_SPI2_Init>
  MX_RF_Init();
 8001efe:	f000 fac7 	bl	8002490 <MX_RF_Init>
  /* USER CODE BEGIN 2 */
  // Initialize LEDs
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8001f02:	2201      	movs	r2, #1
 8001f04:	2120      	movs	r1, #32
 8001f06:	4856      	ldr	r0, [pc, #344]	@ (8002060 <main+0x198>)
 8001f08:	f002 fdc2 	bl	8004a90 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	2101      	movs	r1, #1
 8001f10:	4853      	ldr	r0, [pc, #332]	@ (8002060 <main+0x198>)
 8001f12:	f002 fdbd 	bl	8004a90 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8001f16:	2201      	movs	r2, #1
 8001f18:	2102      	movs	r1, #2
 8001f1a:	4851      	ldr	r0, [pc, #324]	@ (8002060 <main+0x198>)
 8001f1c:	f002 fdb8 	bl	8004a90 <HAL_GPIO_WritePin>

  HAL_Delay(1000);
 8001f20:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001f24:	f7ff f8aa 	bl	800107c <HAL_Delay>

  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8001f28:	2200      	movs	r2, #0
 8001f2a:	2120      	movs	r1, #32
 8001f2c:	484c      	ldr	r0, [pc, #304]	@ (8002060 <main+0x198>)
 8001f2e:	f002 fdaf 	bl	8004a90 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001f32:	2200      	movs	r2, #0
 8001f34:	2101      	movs	r1, #1
 8001f36:	484a      	ldr	r0, [pc, #296]	@ (8002060 <main+0x198>)
 8001f38:	f002 fdaa 	bl	8004a90 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	2102      	movs	r1, #2
 8001f40:	4847      	ldr	r0, [pc, #284]	@ (8002060 <main+0x198>)
 8001f42:	f002 fda5 	bl	8004a90 <HAL_GPIO_WritePin>

  if (NRF24_Init(&hspi2) != NRF24_SUCCESS) {
 8001f46:	4847      	ldr	r0, [pc, #284]	@ (8002064 <main+0x19c>)
 8001f48:	f001 fa88 	bl	800345c <NRF24_Init>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <main+0x8e>
	  while(1);	// Halt on error
 8001f52:	bf00      	nop
 8001f54:	e7fd      	b.n	8001f52 <main+0x8a>
  }

  if (DMX512_Init(&hlpuart1, &htim2) != HAL_OK){
 8001f56:	4944      	ldr	r1, [pc, #272]	@ (8002068 <main+0x1a0>)
 8001f58:	4844      	ldr	r0, [pc, #272]	@ (800206c <main+0x1a4>)
 8001f5a:	f001 f907 	bl	800316c <DMX512_Init>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <main+0xa0>
	  while(1);	// Halt on error
 8001f64:	bf00      	nop
 8001f66:	e7fd      	b.n	8001f64 <main+0x9c>
  }

  NRF24_Mode(NRF24_MODE_TX); // Set NRF24 to transmit mode
 8001f68:	2001      	movs	r0, #1
 8001f6a:	f001 fafb 	bl	8003564 <NRF24_Mode>
  DMX512_StopTask(); // Start in idle state
 8001f6e:	f001 fa21 	bl	80033b4 <DMX512_StopTask>
  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8001f72:	f7fe fecd 	bl	8000d10 <MX_APPE_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	// Handle B1 button long/short press
	if (B1_pressed_time != 0 && !B1_long_press_flag) {
 8001f76:	4b3e      	ldr	r3, [pc, #248]	@ (8002070 <main+0x1a8>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d014      	beq.n	8001fa8 <main+0xe0>
 8001f7e:	4b3d      	ldr	r3, [pc, #244]	@ (8002074 <main+0x1ac>)
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d110      	bne.n	8001fa8 <main+0xe0>
		if ((HAL_GetTick() - B1_pressed_time) >= 1000) {
 8001f86:	f001 fe2d 	bl	8003be4 <HAL_GetTick>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	4b38      	ldr	r3, [pc, #224]	@ (8002070 <main+0x1a8>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001f96:	d307      	bcc.n	8001fa8 <main+0xe0>
			B1_long_press_flag = 1;
 8001f98:	4b36      	ldr	r3, [pc, #216]	@ (8002074 <main+0x1ac>)
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	701a      	strb	r2, [r3, #0]
			B1_pressed_time = 0;
 8001f9e:	4b34      	ldr	r3, [pc, #208]	@ (8002070 <main+0x1a8>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]
			Ble_Disconnect_Req();
 8001fa4:	f00b f8dc 	bl	800d160 <Ble_Disconnect_Req>
		}
	}

    // Handle B1 short press
	if(B1_short_press_flag){
 8001fa8:	4b33      	ldr	r3, [pc, #204]	@ (8002078 <main+0x1b0>)
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d01f      	beq.n	8001ff0 <main+0x128>
		B1_short_press_flag = 0;
 8001fb0:	4b31      	ldr	r3, [pc, #196]	@ (8002078 <main+0x1b0>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	701a      	strb	r2, [r3, #0]
		uint8_t data = 0xFF;
 8001fb6:	23ff      	movs	r3, #255	@ 0xff
 8001fb8:	70bb      	strb	r3, [r7, #2]
		if (NRF24_Active){
 8001fba:	4b30      	ldr	r3, [pc, #192]	@ (800207c <main+0x1b4>)
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d014      	beq.n	8001fec <main+0x124>
			NR24Res_TypeDef result = NRF24_SendData(broadcast_address, &data, 1);
 8001fc2:	1cbb      	adds	r3, r7, #2
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	482d      	ldr	r0, [pc, #180]	@ (8002080 <main+0x1b8>)
 8001fca:	f001 fb5d 	bl	8003688 <NRF24_SendData>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	71fb      	strb	r3, [r7, #7]

			if (result == NRF24_SUCCESS) {
 8001fd2:	79fb      	ldrb	r3, [r7, #7]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d109      	bne.n	8001fec <main+0x124>
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8001fd8:	2201      	movs	r2, #1
 8001fda:	2102      	movs	r1, #2
 8001fdc:	4820      	ldr	r0, [pc, #128]	@ (8002060 <main+0x198>)
 8001fde:	f002 fd57 	bl	8004a90 <HAL_GPIO_WritePin>
				NRF24_DataSent_time = HAL_GetTick();
 8001fe2:	f001 fdff 	bl	8003be4 <HAL_GetTick>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	4a26      	ldr	r2, [pc, #152]	@ (8002084 <main+0x1bc>)
 8001fea:	6013      	str	r3, [r2, #0]
			}
		}
		DMX512_ResetBuffer();	// Reset DMX buffer on short press
 8001fec:	f001 f9ee 	bl	80033cc <DMX512_ResetBuffer>
	}

    if (B1_double_click_flag) {
 8001ff0:	4b25      	ldr	r3, [pc, #148]	@ (8002088 <main+0x1c0>)
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d00c      	beq.n	8002012 <main+0x14a>
        B1_double_click_flag = 0;
 8001ff8:	4b23      	ldr	r3, [pc, #140]	@ (8002088 <main+0x1c0>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	701a      	strb	r2, [r3, #0]
        NRF24_Active = !NRF24_Active;
 8001ffe:	4b1f      	ldr	r3, [pc, #124]	@ (800207c <main+0x1b4>)
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	2b00      	cmp	r3, #0
 8002004:	bf0c      	ite	eq
 8002006:	2301      	moveq	r3, #1
 8002008:	2300      	movne	r3, #0
 800200a:	b2db      	uxtb	r3, r3
 800200c:	461a      	mov	r2, r3
 800200e:	4b1b      	ldr	r3, [pc, #108]	@ (800207c <main+0x1b4>)
 8002010:	701a      	strb	r2, [r3, #0]
//			B3_pressed_time = 0;
//		}
//	}

    // Update BLE connection status LED
	if(isBleConnected() && ble_con_status == 0) {
 8002012:	f00b f8ad 	bl	800d170 <isBleConnected>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d00c      	beq.n	8002036 <main+0x16e>
 800201c:	4b1b      	ldr	r3, [pc, #108]	@ (800208c <main+0x1c4>)
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d108      	bne.n	8002036 <main+0x16e>
		ble_con_status = 1;
 8002024:	4b19      	ldr	r3, [pc, #100]	@ (800208c <main+0x1c4>)
 8002026:	2201      	movs	r2, #1
 8002028:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 800202a:	2201      	movs	r2, #1
 800202c:	2120      	movs	r1, #32
 800202e:	480c      	ldr	r0, [pc, #48]	@ (8002060 <main+0x198>)
 8002030:	f002 fd2e 	bl	8004a90 <HAL_GPIO_WritePin>
 8002034:	e042      	b.n	80020bc <main+0x1f4>
	}else if(isBleConnected() == 0 && ble_con_status == 1){
 8002036:	f00b f89b 	bl	800d170 <isBleConnected>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d127      	bne.n	8002090 <main+0x1c8>
 8002040:	4b12      	ldr	r3, [pc, #72]	@ (800208c <main+0x1c4>)
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	2b01      	cmp	r3, #1
 8002046:	d123      	bne.n	8002090 <main+0x1c8>
		ble_con_status = 0;
 8002048:	4b10      	ldr	r3, [pc, #64]	@ (800208c <main+0x1c4>)
 800204a:	2200      	movs	r2, #0
 800204c:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 800204e:	2200      	movs	r2, #0
 8002050:	2120      	movs	r1, #32
 8002052:	4803      	ldr	r0, [pc, #12]	@ (8002060 <main+0x198>)
 8002054:	f002 fd1c 	bl	8004a90 <HAL_GPIO_WritePin>
		Adv_Start_Req();
 8002058:	f00b f872 	bl	800d140 <Adv_Start_Req>
 800205c:	e02e      	b.n	80020bc <main+0x1f4>
 800205e:	bf00      	nop
 8002060:	48000400 	.word	0x48000400
 8002064:	2000045c 	.word	0x2000045c
 8002068:	200004c0 	.word	0x200004c0
 800206c:	200001e0 	.word	0x200001e0
 8002070:	20000510 	.word	0x20000510
 8002074:	20000514 	.word	0x20000514
 8002078:	20000515 	.word	0x20000515
 800207c:	20000008 	.word	0x20000008
 8002080:	2000000c 	.word	0x2000000c
 8002084:	2000051c 	.word	0x2000051c
 8002088:	20000516 	.word	0x20000516
 800208c:	20000524 	.word	0x20000524
	}else if (ble_con_status == 0 && (HAL_GetTick()-tLEDToggle) > 500) {
 8002090:	4b5a      	ldr	r3, [pc, #360]	@ (80021fc <main+0x334>)
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d111      	bne.n	80020bc <main+0x1f4>
 8002098:	f001 fda4 	bl	8003be4 <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	4b58      	ldr	r3, [pc, #352]	@ (8002200 <main+0x338>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80020a8:	d908      	bls.n	80020bc <main+0x1f4>
		tLEDToggle = HAL_GetTick();
 80020aa:	f001 fd9b 	bl	8003be4 <HAL_GetTick>
 80020ae:	4603      	mov	r3, r0
 80020b0:	4a53      	ldr	r2, [pc, #332]	@ (8002200 <main+0x338>)
 80020b2:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80020b4:	2120      	movs	r1, #32
 80020b6:	4853      	ldr	r0, [pc, #332]	@ (8002204 <main+0x33c>)
 80020b8:	f002 fd02 	bl	8004ac0 <HAL_GPIO_TogglePin>
	}

    // Turn off LED3 after 100ms if data was sent
	if (HAL_GPIO_ReadPin(LD3_GPIO_Port, LD3_Pin) && (HAL_GetTick()-NRF24_DataSent_time) > 100) {
 80020bc:	2102      	movs	r1, #2
 80020be:	4851      	ldr	r0, [pc, #324]	@ (8002204 <main+0x33c>)
 80020c0:	f002 fcce 	bl	8004a60 <HAL_GPIO_ReadPin>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d00c      	beq.n	80020e4 <main+0x21c>
 80020ca:	f001 fd8b 	bl	8003be4 <HAL_GetTick>
 80020ce:	4602      	mov	r2, r0
 80020d0:	4b4d      	ldr	r3, [pc, #308]	@ (8002208 <main+0x340>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	2b64      	cmp	r3, #100	@ 0x64
 80020d8:	d904      	bls.n	80020e4 <main+0x21c>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80020da:	2200      	movs	r2, #0
 80020dc:	2102      	movs	r1, #2
 80020de:	4849      	ldr	r0, [pc, #292]	@ (8002204 <main+0x33c>)
 80020e0:	f002 fcd6 	bl	8004a90 <HAL_GPIO_WritePin>
	}

    // Process BLE data when available
    if (data_ready) {
 80020e4:	4b49      	ldr	r3, [pc, #292]	@ (800220c <main+0x344>)
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d027      	beq.n	800213e <main+0x276>
    	ParseResult ok = ParseDMXData(ble_buffer, ble_lenght);
 80020ee:	4b48      	ldr	r3, [pc, #288]	@ (8002210 <main+0x348>)
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	4619      	mov	r1, r3
 80020f4:	4847      	ldr	r0, [pc, #284]	@ (8002214 <main+0x34c>)
 80020f6:	f007 f97f 	bl	80093f8 <ParseDMXData>
 80020fa:	4603      	mov	r3, r0
 80020fc:	71bb      	strb	r3, [r7, #6]
        if (ok == 0 && NRF24_Active)
 80020fe:	79bb      	ldrb	r3, [r7, #6]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d119      	bne.n	8002138 <main+0x270>
 8002104:	4b44      	ldr	r3, [pc, #272]	@ (8002218 <main+0x350>)
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d015      	beq.n	8002138 <main+0x270>
        {
        	NR24Res_TypeDef result = SendBLEDataViaNRF24(broadcast_address, ble_buffer, ble_lenght);
 800210c:	4b40      	ldr	r3, [pc, #256]	@ (8002210 <main+0x348>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	461a      	mov	r2, r3
 8002112:	4940      	ldr	r1, [pc, #256]	@ (8002214 <main+0x34c>)
 8002114:	4841      	ldr	r0, [pc, #260]	@ (800221c <main+0x354>)
 8002116:	f007 fac3 	bl	80096a0 <SendBLEDataViaNRF24>
 800211a:	4603      	mov	r3, r0
 800211c:	717b      	strb	r3, [r7, #5]

			if (result == NRF24_SUCCESS) {
 800211e:	797b      	ldrb	r3, [r7, #5]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d109      	bne.n	8002138 <main+0x270>
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8002124:	2201      	movs	r2, #1
 8002126:	2102      	movs	r1, #2
 8002128:	4836      	ldr	r0, [pc, #216]	@ (8002204 <main+0x33c>)
 800212a:	f002 fcb1 	bl	8004a90 <HAL_GPIO_WritePin>
				NRF24_DataSent_time = HAL_GetTick();
 800212e:	f001 fd59 	bl	8003be4 <HAL_GetTick>
 8002132:	4603      	mov	r3, r0
 8002134:	4a34      	ldr	r2, [pc, #208]	@ (8002208 <main+0x340>)
 8002136:	6013      	str	r3, [r2, #0]
			}
        }
        data_ready = 0;
 8002138:	4b34      	ldr	r3, [pc, #208]	@ (800220c <main+0x344>)
 800213a:	2200      	movs	r2, #0
 800213c:	701a      	strb	r2, [r3, #0]
    }

    // Process full DMX buffer and sync
    if (data_full_ready) {
 800213e:	4b38      	ldr	r3, [pc, #224]	@ (8002220 <main+0x358>)
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	b2db      	uxtb	r3, r3
 8002144:	2b00      	cmp	r3, #0
 8002146:	d01f      	beq.n	8002188 <main+0x2c0>
    	DMX512_SetBuffer(ble_full_buffer);	// Update DMX buffer
 8002148:	4836      	ldr	r0, [pc, #216]	@ (8002224 <main+0x35c>)
 800214a:	f001 f881 	bl	8003250 <DMX512_SetBuffer>
    	if (NRF24_Active){
 800214e:	4b32      	ldr	r3, [pc, #200]	@ (8002218 <main+0x350>)
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d015      	beq.n	8002182 <main+0x2ba>
			NR24Res_TypeDef result = SendSyncMessages(broadcast_address, DMX512_GetBuffer());
 8002156:	f001 f945 	bl	80033e4 <DMX512_GetBuffer>
 800215a:	4603      	mov	r3, r0
 800215c:	4619      	mov	r1, r3
 800215e:	482f      	ldr	r0, [pc, #188]	@ (800221c <main+0x354>)
 8002160:	f007 fbe6 	bl	8009930 <SendSyncMessages>
 8002164:	4603      	mov	r3, r0
 8002166:	713b      	strb	r3, [r7, #4]
			if (result == NRF24_SUCCESS) {
 8002168:	793b      	ldrb	r3, [r7, #4]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d109      	bne.n	8002182 <main+0x2ba>
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 800216e:	2201      	movs	r2, #1
 8002170:	2102      	movs	r1, #2
 8002172:	4824      	ldr	r0, [pc, #144]	@ (8002204 <main+0x33c>)
 8002174:	f002 fc8c 	bl	8004a90 <HAL_GPIO_WritePin>
				NRF24_DataSent_time = HAL_GetTick();
 8002178:	f001 fd34 	bl	8003be4 <HAL_GetTick>
 800217c:	4603      	mov	r3, r0
 800217e:	4a22      	ldr	r2, [pc, #136]	@ (8002208 <main+0x340>)
 8002180:	6013      	str	r3, [r2, #0]
			}
    	}
    	data_full_ready = 0;
 8002182:	4b27      	ldr	r3, [pc, #156]	@ (8002220 <main+0x358>)
 8002184:	2200      	movs	r2, #0
 8002186:	701a      	strb	r2, [r3, #0]
    }

    // Send DMX sync periodically
    if (HAL_GetTick() - last_sync_time >= 10 && HAL_GetTick() - last_sync_time >= 200 && DMX512_IsTransmitting() && NRF24_Active) {
 8002188:	f001 fd2c 	bl	8003be4 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	4b26      	ldr	r3, [pc, #152]	@ (8002228 <main+0x360>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	2b09      	cmp	r3, #9
 8002196:	d92b      	bls.n	80021f0 <main+0x328>
 8002198:	f001 fd24 	bl	8003be4 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	4b22      	ldr	r3, [pc, #136]	@ (8002228 <main+0x360>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	2bc7      	cmp	r3, #199	@ 0xc7
 80021a6:	d923      	bls.n	80021f0 <main+0x328>
 80021a8:	f001 f8e8 	bl	800337c <DMX512_IsTransmitting>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d01e      	beq.n	80021f0 <main+0x328>
 80021b2:	4b19      	ldr	r3, [pc, #100]	@ (8002218 <main+0x350>)
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d01a      	beq.n	80021f0 <main+0x328>
        last_sync_time = HAL_GetTick();
 80021ba:	f001 fd13 	bl	8003be4 <HAL_GetTick>
 80021be:	4603      	mov	r3, r0
 80021c0:	4a19      	ldr	r2, [pc, #100]	@ (8002228 <main+0x360>)
 80021c2:	6013      	str	r3, [r2, #0]
        NR24Res_TypeDef result = SendSyncMessages(broadcast_address, DMX512_GetBuffer());
 80021c4:	f001 f90e 	bl	80033e4 <DMX512_GetBuffer>
 80021c8:	4603      	mov	r3, r0
 80021ca:	4619      	mov	r1, r3
 80021cc:	4813      	ldr	r0, [pc, #76]	@ (800221c <main+0x354>)
 80021ce:	f007 fbaf 	bl	8009930 <SendSyncMessages>
 80021d2:	4603      	mov	r3, r0
 80021d4:	70fb      	strb	r3, [r7, #3]
		if (result == NRF24_SUCCESS) {
 80021d6:	78fb      	ldrb	r3, [r7, #3]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d109      	bne.n	80021f0 <main+0x328>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80021dc:	2201      	movs	r2, #1
 80021de:	2102      	movs	r1, #2
 80021e0:	4808      	ldr	r0, [pc, #32]	@ (8002204 <main+0x33c>)
 80021e2:	f002 fc55 	bl	8004a90 <HAL_GPIO_WritePin>
			NRF24_DataSent_time = HAL_GetTick();
 80021e6:	f001 fcfd 	bl	8003be4 <HAL_GetTick>
 80021ea:	4603      	mov	r3, r0
 80021ec:	4a06      	ldr	r2, [pc, #24]	@ (8002208 <main+0x340>)
 80021ee:	6013      	str	r3, [r2, #0]
		}
    }

	DMX512_Task(); // Non-blocking DMX task
 80021f0:	f001 f842 	bl	8003278 <DMX512_Task>

    /* USER CODE END WHILE */
    MX_APPE_Process();
 80021f4:	f7fe ff67 	bl	80010c6 <MX_APPE_Process>
	if (B1_pressed_time != 0 && !B1_long_press_flag) {
 80021f8:	e6bd      	b.n	8001f76 <main+0xae>
 80021fa:	bf00      	nop
 80021fc:	20000524 	.word	0x20000524
 8002200:	2000050c 	.word	0x2000050c
 8002204:	48000400 	.word	0x48000400
 8002208:	2000051c 	.word	0x2000051c
 800220c:	20000729 	.word	0x20000729
 8002210:	20000728 	.word	0x20000728
 8002214:	20000528 	.word	0x20000528
 8002218:	20000008 	.word	0x20000008
 800221c:	2000000c 	.word	0x2000000c
 8002220:	2000092c 	.word	0x2000092c
 8002224:	2000072c 	.word	0x2000072c
 8002228:	20000520 	.word	0x20000520

0800222c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b09a      	sub	sp, #104	@ 0x68
 8002230:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002232:	f107 0320 	add.w	r3, r7, #32
 8002236:	2248      	movs	r2, #72	@ 0x48
 8002238:	2100      	movs	r1, #0
 800223a:	4618      	mov	r0, r3
 800223c:	f00c f9fe 	bl	800e63c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002240:	1d3b      	adds	r3, r7, #4
 8002242:	2200      	movs	r2, #0
 8002244:	601a      	str	r2, [r3, #0]
 8002246:	605a      	str	r2, [r3, #4]
 8002248:	609a      	str	r2, [r3, #8]
 800224a:	60da      	str	r2, [r3, #12]
 800224c:	611a      	str	r2, [r3, #16]
 800224e:	615a      	str	r2, [r3, #20]
 8002250:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002252:	f002 fd11 	bl	8004c78 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 8002256:	2010      	movs	r0, #16
 8002258:	f7ff fdee 	bl	8001e38 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800225c:	4b23      	ldr	r3, [pc, #140]	@ (80022ec <SystemClock_Config+0xc0>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002264:	4a21      	ldr	r2, [pc, #132]	@ (80022ec <SystemClock_Config+0xc0>)
 8002266:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800226a:	6013      	str	r3, [r2, #0]
 800226c:	4b1f      	ldr	r3, [pc, #124]	@ (80022ec <SystemClock_Config+0xc0>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002274:	603b      	str	r3, [r7, #0]
 8002276:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8002278:	2327      	movs	r3, #39	@ 0x27
 800227a:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800227c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002280:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002282:	2301      	movs	r3, #1
 8002284:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002286:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800228a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800228c:	2301      	movs	r3, #1
 800228e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002290:	2340      	movs	r3, #64	@ 0x40
 8002292:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8002294:	2300      	movs	r3, #0
 8002296:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8002298:	23a0      	movs	r3, #160	@ 0xa0
 800229a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800229c:	2300      	movs	r3, #0
 800229e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022a0:	f107 0320 	add.w	r3, r7, #32
 80022a4:	4618      	mov	r0, r3
 80022a6:	f003 f87b 	bl	80053a0 <HAL_RCC_OscConfig>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d001      	beq.n	80022b4 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80022b0:	f000 faf3 	bl	800289a <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80022b4:	236f      	movs	r3, #111	@ 0x6f
 80022b6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80022b8:	2300      	movs	r3, #0
 80022ba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022bc:	2300      	movs	r3, #0
 80022be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80022c0:	2300      	movs	r3, #0
 80022c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80022c4:	2300      	movs	r3, #0
 80022c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80022c8:	2300      	movs	r3, #0
 80022ca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80022cc:	2300      	movs	r3, #0
 80022ce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80022d0:	1d3b      	adds	r3, r7, #4
 80022d2:	2101      	movs	r1, #1
 80022d4:	4618      	mov	r0, r3
 80022d6:	f003 fbd7 	bl	8005a88 <HAL_RCC_ClockConfig>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d001      	beq.n	80022e4 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80022e0:	f000 fadb 	bl	800289a <Error_Handler>
  }
}
 80022e4:	bf00      	nop
 80022e6:	3768      	adds	r7, #104	@ 0x68
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	58000400 	.word	0x58000400

080022f0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b094      	sub	sp, #80	@ 0x50
 80022f4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022f6:	463b      	mov	r3, r7
 80022f8:	2250      	movs	r2, #80	@ 0x50
 80022fa:	2100      	movs	r1, #0
 80022fc:	4618      	mov	r0, r3
 80022fe:	f00c f99d 	bl	800e63c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8002302:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002306:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8002308:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800230c:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 800230e:	2300      	movs	r3, #0
 8002310:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8002312:	2300      	movs	r3, #0
 8002314:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002316:	463b      	mov	r3, r7
 8002318:	4618      	mov	r0, r3
 800231a:	f003 fff2 	bl	8006302 <HAL_RCCEx_PeriphCLKConfig>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8002324:	f000 fab9 	bl	800289a <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8002328:	bf00      	nop
 800232a:	3750      	adds	r7, #80	@ 0x50
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8002334:	4b06      	ldr	r3, [pc, #24]	@ (8002350 <MX_IPCC_Init+0x20>)
 8002336:	4a07      	ldr	r2, [pc, #28]	@ (8002354 <MX_IPCC_Init+0x24>)
 8002338:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 800233a:	4805      	ldr	r0, [pc, #20]	@ (8002350 <MX_IPCC_Init+0x20>)
 800233c:	f002 fc16 	bl	8004b6c <HAL_IPCC_Init>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8002346:	f000 faa8 	bl	800289a <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 800234a:	bf00      	nop
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	200001a4 	.word	0x200001a4
 8002354:	58000c00 	.word	0x58000c00

08002358 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800235c:	4b22      	ldr	r3, [pc, #136]	@ (80023e8 <MX_LPUART1_UART_Init+0x90>)
 800235e:	4a23      	ldr	r2, [pc, #140]	@ (80023ec <MX_LPUART1_UART_Init+0x94>)
 8002360:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 250000;
 8002362:	4b21      	ldr	r3, [pc, #132]	@ (80023e8 <MX_LPUART1_UART_Init+0x90>)
 8002364:	4a22      	ldr	r2, [pc, #136]	@ (80023f0 <MX_LPUART1_UART_Init+0x98>)
 8002366:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002368:	4b1f      	ldr	r3, [pc, #124]	@ (80023e8 <MX_LPUART1_UART_Init+0x90>)
 800236a:	2200      	movs	r2, #0
 800236c:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_2;
 800236e:	4b1e      	ldr	r3, [pc, #120]	@ (80023e8 <MX_LPUART1_UART_Init+0x90>)
 8002370:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002374:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002376:	4b1c      	ldr	r3, [pc, #112]	@ (80023e8 <MX_LPUART1_UART_Init+0x90>)
 8002378:	2200      	movs	r2, #0
 800237a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800237c:	4b1a      	ldr	r3, [pc, #104]	@ (80023e8 <MX_LPUART1_UART_Init+0x90>)
 800237e:	220c      	movs	r2, #12
 8002380:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002382:	4b19      	ldr	r3, [pc, #100]	@ (80023e8 <MX_LPUART1_UART_Init+0x90>)
 8002384:	2200      	movs	r2, #0
 8002386:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002388:	4b17      	ldr	r3, [pc, #92]	@ (80023e8 <MX_LPUART1_UART_Init+0x90>)
 800238a:	2200      	movs	r2, #0
 800238c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800238e:	4b16      	ldr	r3, [pc, #88]	@ (80023e8 <MX_LPUART1_UART_Init+0x90>)
 8002390:	2200      	movs	r2, #0
 8002392:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002394:	4b14      	ldr	r3, [pc, #80]	@ (80023e8 <MX_LPUART1_UART_Init+0x90>)
 8002396:	2200      	movs	r2, #0
 8002398:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800239a:	4b13      	ldr	r3, [pc, #76]	@ (80023e8 <MX_LPUART1_UART_Init+0x90>)
 800239c:	2200      	movs	r2, #0
 800239e:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80023a0:	4811      	ldr	r0, [pc, #68]	@ (80023e8 <MX_LPUART1_UART_Init+0x90>)
 80023a2:	f005 fccf 	bl	8007d44 <HAL_UART_Init>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d001      	beq.n	80023b0 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80023ac:	f000 fa75 	bl	800289a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80023b0:	2100      	movs	r1, #0
 80023b2:	480d      	ldr	r0, [pc, #52]	@ (80023e8 <MX_LPUART1_UART_Init+0x90>)
 80023b4:	f006 ff55 	bl	8009262 <HAL_UARTEx_SetTxFifoThreshold>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80023be:	f000 fa6c 	bl	800289a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80023c2:	2100      	movs	r1, #0
 80023c4:	4808      	ldr	r0, [pc, #32]	@ (80023e8 <MX_LPUART1_UART_Init+0x90>)
 80023c6:	f006 ff8a 	bl	80092de <HAL_UARTEx_SetRxFifoThreshold>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80023d0:	f000 fa63 	bl	800289a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80023d4:	4804      	ldr	r0, [pc, #16]	@ (80023e8 <MX_LPUART1_UART_Init+0x90>)
 80023d6:	f006 ff0b 	bl	80091f0 <HAL_UARTEx_DisableFifoMode>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80023e0:	f000 fa5b 	bl	800289a <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80023e4:	bf00      	nop
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	200001e0 	.word	0x200001e0
 80023ec:	40008000 	.word	0x40008000
 80023f0:	0003d090 	.word	0x0003d090

080023f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80023f8:	4b23      	ldr	r3, [pc, #140]	@ (8002488 <MX_USART1_UART_Init+0x94>)
 80023fa:	4a24      	ldr	r2, [pc, #144]	@ (800248c <MX_USART1_UART_Init+0x98>)
 80023fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80023fe:	4b22      	ldr	r3, [pc, #136]	@ (8002488 <MX_USART1_UART_Init+0x94>)
 8002400:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002404:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002406:	4b20      	ldr	r3, [pc, #128]	@ (8002488 <MX_USART1_UART_Init+0x94>)
 8002408:	2200      	movs	r2, #0
 800240a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800240c:	4b1e      	ldr	r3, [pc, #120]	@ (8002488 <MX_USART1_UART_Init+0x94>)
 800240e:	2200      	movs	r2, #0
 8002410:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002412:	4b1d      	ldr	r3, [pc, #116]	@ (8002488 <MX_USART1_UART_Init+0x94>)
 8002414:	2200      	movs	r2, #0
 8002416:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002418:	4b1b      	ldr	r3, [pc, #108]	@ (8002488 <MX_USART1_UART_Init+0x94>)
 800241a:	220c      	movs	r2, #12
 800241c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800241e:	4b1a      	ldr	r3, [pc, #104]	@ (8002488 <MX_USART1_UART_Init+0x94>)
 8002420:	2200      	movs	r2, #0
 8002422:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8002424:	4b18      	ldr	r3, [pc, #96]	@ (8002488 <MX_USART1_UART_Init+0x94>)
 8002426:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800242a:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800242c:	4b16      	ldr	r3, [pc, #88]	@ (8002488 <MX_USART1_UART_Init+0x94>)
 800242e:	2200      	movs	r2, #0
 8002430:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002432:	4b15      	ldr	r3, [pc, #84]	@ (8002488 <MX_USART1_UART_Init+0x94>)
 8002434:	2200      	movs	r2, #0
 8002436:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002438:	4b13      	ldr	r3, [pc, #76]	@ (8002488 <MX_USART1_UART_Init+0x94>)
 800243a:	2200      	movs	r2, #0
 800243c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800243e:	4812      	ldr	r0, [pc, #72]	@ (8002488 <MX_USART1_UART_Init+0x94>)
 8002440:	f005 fc80 	bl	8007d44 <HAL_UART_Init>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 800244a:	f000 fa26 	bl	800289a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800244e:	2100      	movs	r1, #0
 8002450:	480d      	ldr	r0, [pc, #52]	@ (8002488 <MX_USART1_UART_Init+0x94>)
 8002452:	f006 ff06 	bl	8009262 <HAL_UARTEx_SetTxFifoThreshold>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d001      	beq.n	8002460 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 800245c:	f000 fa1d 	bl	800289a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002460:	2100      	movs	r1, #0
 8002462:	4809      	ldr	r0, [pc, #36]	@ (8002488 <MX_USART1_UART_Init+0x94>)
 8002464:	f006 ff3b 	bl	80092de <HAL_UARTEx_SetRxFifoThreshold>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 800246e:	f000 fa14 	bl	800289a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002472:	4805      	ldr	r0, [pc, #20]	@ (8002488 <MX_USART1_UART_Init+0x94>)
 8002474:	f006 febc 	bl	80091f0 <HAL_UARTEx_DisableFifoMode>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 800247e:	f000 fa0c 	bl	800289a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002482:	bf00      	nop
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	200002ac 	.word	0x200002ac
 800248c:	40013800 	.word	0x40013800

08002490 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8002494:	bf00      	nop
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
	...

080024a0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80024a4:	4b16      	ldr	r3, [pc, #88]	@ (8002500 <MX_RTC_Init+0x60>)
 80024a6:	4a17      	ldr	r2, [pc, #92]	@ (8002504 <MX_RTC_Init+0x64>)
 80024a8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80024aa:	4b15      	ldr	r3, [pc, #84]	@ (8002500 <MX_RTC_Init+0x60>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 80024b0:	4b13      	ldr	r3, [pc, #76]	@ (8002500 <MX_RTC_Init+0x60>)
 80024b2:	220f      	movs	r2, #15
 80024b4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80024b6:	4b12      	ldr	r3, [pc, #72]	@ (8002500 <MX_RTC_Init+0x60>)
 80024b8:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80024bc:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80024be:	4b10      	ldr	r3, [pc, #64]	@ (8002500 <MX_RTC_Init+0x60>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80024c4:	4b0e      	ldr	r3, [pc, #56]	@ (8002500 <MX_RTC_Init+0x60>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80024ca:	4b0d      	ldr	r3, [pc, #52]	@ (8002500 <MX_RTC_Init+0x60>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80024d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002500 <MX_RTC_Init+0x60>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80024d6:	480a      	ldr	r0, [pc, #40]	@ (8002500 <MX_RTC_Init+0x60>)
 80024d8:	f004 f99a 	bl	8006810 <HAL_RTC_Init>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 80024e2:	f000 f9da 	bl	800289a <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80024e6:	2200      	movs	r2, #0
 80024e8:	2100      	movs	r1, #0
 80024ea:	4805      	ldr	r0, [pc, #20]	@ (8002500 <MX_RTC_Init+0x60>)
 80024ec:	f004 fa9e 	bl	8006a2c <HAL_RTCEx_SetWakeUpTimer_IT>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80024f6:	f000 f9d0 	bl	800289a <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80024fa:	bf00      	nop
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	20000438 	.word	0x20000438
 8002504:	40002800 	.word	0x40002800

08002508 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800250c:	4b1b      	ldr	r3, [pc, #108]	@ (800257c <MX_SPI2_Init+0x74>)
 800250e:	4a1c      	ldr	r2, [pc, #112]	@ (8002580 <MX_SPI2_Init+0x78>)
 8002510:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002512:	4b1a      	ldr	r3, [pc, #104]	@ (800257c <MX_SPI2_Init+0x74>)
 8002514:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002518:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800251a:	4b18      	ldr	r3, [pc, #96]	@ (800257c <MX_SPI2_Init+0x74>)
 800251c:	2200      	movs	r2, #0
 800251e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002520:	4b16      	ldr	r3, [pc, #88]	@ (800257c <MX_SPI2_Init+0x74>)
 8002522:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002526:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002528:	4b14      	ldr	r3, [pc, #80]	@ (800257c <MX_SPI2_Init+0x74>)
 800252a:	2200      	movs	r2, #0
 800252c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800252e:	4b13      	ldr	r3, [pc, #76]	@ (800257c <MX_SPI2_Init+0x74>)
 8002530:	2200      	movs	r2, #0
 8002532:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002534:	4b11      	ldr	r3, [pc, #68]	@ (800257c <MX_SPI2_Init+0x74>)
 8002536:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800253a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800253c:	4b0f      	ldr	r3, [pc, #60]	@ (800257c <MX_SPI2_Init+0x74>)
 800253e:	2218      	movs	r2, #24
 8002540:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002542:	4b0e      	ldr	r3, [pc, #56]	@ (800257c <MX_SPI2_Init+0x74>)
 8002544:	2200      	movs	r2, #0
 8002546:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002548:	4b0c      	ldr	r3, [pc, #48]	@ (800257c <MX_SPI2_Init+0x74>)
 800254a:	2200      	movs	r2, #0
 800254c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800254e:	4b0b      	ldr	r3, [pc, #44]	@ (800257c <MX_SPI2_Init+0x74>)
 8002550:	2200      	movs	r2, #0
 8002552:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002554:	4b09      	ldr	r3, [pc, #36]	@ (800257c <MX_SPI2_Init+0x74>)
 8002556:	2207      	movs	r2, #7
 8002558:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800255a:	4b08      	ldr	r3, [pc, #32]	@ (800257c <MX_SPI2_Init+0x74>)
 800255c:	2200      	movs	r2, #0
 800255e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002560:	4b06      	ldr	r3, [pc, #24]	@ (800257c <MX_SPI2_Init+0x74>)
 8002562:	2208      	movs	r2, #8
 8002564:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002566:	4805      	ldr	r0, [pc, #20]	@ (800257c <MX_SPI2_Init+0x74>)
 8002568:	f004 fb2c 	bl	8006bc4 <HAL_SPI_Init>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002572:	f000 f992 	bl	800289a <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002576:	bf00      	nop
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	2000045c 	.word	0x2000045c
 8002580:	40003800 	.word	0x40003800

08002584 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b088      	sub	sp, #32
 8002588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800258a:	f107 0310 	add.w	r3, r7, #16
 800258e:	2200      	movs	r2, #0
 8002590:	601a      	str	r2, [r3, #0]
 8002592:	605a      	str	r2, [r3, #4]
 8002594:	609a      	str	r2, [r3, #8]
 8002596:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002598:	1d3b      	adds	r3, r7, #4
 800259a:	2200      	movs	r2, #0
 800259c:	601a      	str	r2, [r3, #0]
 800259e:	605a      	str	r2, [r3, #4]
 80025a0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80025a2:	4b1e      	ldr	r3, [pc, #120]	@ (800261c <MX_TIM2_Init+0x98>)
 80025a4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80025a8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80025aa:	4b1c      	ldr	r3, [pc, #112]	@ (800261c <MX_TIM2_Init+0x98>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025b0:	4b1a      	ldr	r3, [pc, #104]	@ (800261c <MX_TIM2_Init+0x98>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80025b6:	4b19      	ldr	r3, [pc, #100]	@ (800261c <MX_TIM2_Init+0x98>)
 80025b8:	f04f 32ff 	mov.w	r2, #4294967295
 80025bc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025be:	4b17      	ldr	r3, [pc, #92]	@ (800261c <MX_TIM2_Init+0x98>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025c4:	4b15      	ldr	r3, [pc, #84]	@ (800261c <MX_TIM2_Init+0x98>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80025ca:	4814      	ldr	r0, [pc, #80]	@ (800261c <MX_TIM2_Init+0x98>)
 80025cc:	f004 ff48 	bl	8007460 <HAL_TIM_Base_Init>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80025d6:	f000 f960 	bl	800289a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025de:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80025e0:	f107 0310 	add.w	r3, r7, #16
 80025e4:	4619      	mov	r1, r3
 80025e6:	480d      	ldr	r0, [pc, #52]	@ (800261c <MX_TIM2_Init+0x98>)
 80025e8:	f005 f917 	bl	800781a <HAL_TIM_ConfigClockSource>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80025f2:	f000 f952 	bl	800289a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025f6:	2300      	movs	r3, #0
 80025f8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025fa:	2300      	movs	r3, #0
 80025fc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80025fe:	1d3b      	adds	r3, r7, #4
 8002600:	4619      	mov	r1, r3
 8002602:	4806      	ldr	r0, [pc, #24]	@ (800261c <MX_TIM2_Init+0x98>)
 8002604:	f005 fb00 	bl	8007c08 <HAL_TIMEx_MasterConfigSynchronization>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800260e:	f000 f944 	bl	800289a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002612:	bf00      	nop
 8002614:	3720      	adds	r7, #32
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	200004c0 	.word	0x200004c0

08002620 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002624:	2004      	movs	r0, #4
 8002626:	f7ff fc1d 	bl	8001e64 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800262a:	2001      	movs	r0, #1
 800262c:	f7ff fc1a 	bl	8001e64 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002630:	2200      	movs	r2, #0
 8002632:	2100      	movs	r1, #0
 8002634:	200b      	movs	r0, #11
 8002636:	f001 fc34 	bl	8003ea2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800263a:	200b      	movs	r0, #11
 800263c:	f001 fc4b 	bl	8003ed6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002640:	2200      	movs	r2, #0
 8002642:	2100      	movs	r1, #0
 8002644:	200c      	movs	r0, #12
 8002646:	f001 fc2c 	bl	8003ea2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800264a:	200c      	movs	r0, #12
 800264c:	f001 fc43 	bl	8003ed6 <HAL_NVIC_EnableIRQ>

}
 8002650:	bf00      	nop
 8002652:	bd80      	pop	{r7, pc}

08002654 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b086      	sub	sp, #24
 8002658:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800265a:	1d3b      	adds	r3, r7, #4
 800265c:	2200      	movs	r2, #0
 800265e:	601a      	str	r2, [r3, #0]
 8002660:	605a      	str	r2, [r3, #4]
 8002662:	609a      	str	r2, [r3, #8]
 8002664:	60da      	str	r2, [r3, #12]
 8002666:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002668:	2004      	movs	r0, #4
 800266a:	f7ff fc14 	bl	8001e96 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800266e:	2001      	movs	r0, #1
 8002670:	f7ff fc11 	bl	8001e96 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002674:	2002      	movs	r0, #2
 8002676:	f7ff fc0e 	bl	8001e96 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800267a:	2008      	movs	r0, #8
 800267c:	f7ff fc0b 	bl	8001e96 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8002680:	2200      	movs	r2, #0
 8002682:	210c      	movs	r1, #12
 8002684:	4847      	ldr	r0, [pc, #284]	@ (80027a4 <MX_GPIO_Init+0x150>)
 8002686:	f002 fa03 	bl	8004a90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, NRF24_CE_Pin|NRF24_CSN_Pin, GPIO_PIN_RESET);
 800268a:	2200      	movs	r2, #0
 800268c:	210c      	movs	r1, #12
 800268e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002692:	f002 f9fd 	bl	8004a90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8002696:	2200      	movs	r2, #0
 8002698:	2123      	movs	r1, #35	@ 0x23
 800269a:	4843      	ldr	r0, [pc, #268]	@ (80027a8 <MX_GPIO_Init+0x154>)
 800269c:	f002 f9f8 	bl	8004a90 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80026a0:	230c      	movs	r3, #12
 80026a2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026a4:	2301      	movs	r3, #1
 80026a6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a8:	2300      	movs	r3, #0
 80026aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ac:	2300      	movs	r3, #0
 80026ae:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026b0:	1d3b      	adds	r3, r7, #4
 80026b2:	4619      	mov	r1, r3
 80026b4:	483b      	ldr	r0, [pc, #236]	@ (80027a4 <MX_GPIO_Init+0x150>)
 80026b6:	f001 ff85 	bl	80045c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : NRF24_CE_Pin NRF24_CSN_Pin */
  GPIO_InitStruct.Pin = NRF24_CE_Pin|NRF24_CSN_Pin;
 80026ba:	230c      	movs	r3, #12
 80026bc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026be:	2301      	movs	r3, #1
 80026c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c2:	2300      	movs	r3, #0
 80026c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026c6:	2300      	movs	r3, #0
 80026c8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ca:	1d3b      	adds	r3, r7, #4
 80026cc:	4619      	mov	r1, r3
 80026ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80026d2:	f001 ff77 	bl	80045c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80026d6:	2310      	movs	r3, #16
 80026d8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80026da:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80026de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026e0:	2301      	movs	r3, #1
 80026e2:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80026e4:	1d3b      	adds	r3, r7, #4
 80026e6:	4619      	mov	r1, r3
 80026e8:	482e      	ldr	r0, [pc, #184]	@ (80027a4 <MX_GPIO_Init+0x150>)
 80026ea:	f001 ff6b 	bl	80045c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 80026ee:	2323      	movs	r3, #35	@ 0x23
 80026f0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026f2:	2301      	movs	r3, #1
 80026f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f6:	2300      	movs	r3, #0
 80026f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026fa:	2300      	movs	r3, #0
 80026fc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026fe:	1d3b      	adds	r3, r7, #4
 8002700:	4619      	mov	r1, r3
 8002702:	4829      	ldr	r0, [pc, #164]	@ (80027a8 <MX_GPIO_Init+0x154>)
 8002704:	f001 ff5e 	bl	80045c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF24_IRQ_Pin */
  GPIO_InitStruct.Pin = NRF24_IRQ_Pin;
 8002708:	2340      	movs	r3, #64	@ 0x40
 800270a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800270c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002710:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002712:	2300      	movs	r3, #0
 8002714:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(NRF24_IRQ_GPIO_Port, &GPIO_InitStruct);
 8002716:	1d3b      	adds	r3, r7, #4
 8002718:	4619      	mov	r1, r3
 800271a:	4822      	ldr	r0, [pc, #136]	@ (80027a4 <MX_GPIO_Init+0x150>)
 800271c:	f001 ff52 	bl	80045c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 8002720:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002724:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002726:	2302      	movs	r3, #2
 8002728:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272a:	2300      	movs	r3, #0
 800272c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800272e:	2300      	movs	r3, #0
 8002730:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8002732:	230a      	movs	r3, #10
 8002734:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002736:	1d3b      	adds	r3, r7, #4
 8002738:	4619      	mov	r1, r3
 800273a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800273e:	f001 ff41 	bl	80045c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8002742:	2303      	movs	r3, #3
 8002744:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002746:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800274a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800274c:	2301      	movs	r3, #1
 800274e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002750:	1d3b      	adds	r3, r7, #4
 8002752:	4619      	mov	r1, r3
 8002754:	4815      	ldr	r0, [pc, #84]	@ (80027ac <MX_GPIO_Init+0x158>)
 8002756:	f001 ff35 	bl	80045c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800275a:	2200      	movs	r2, #0
 800275c:	2100      	movs	r1, #0
 800275e:	2006      	movs	r0, #6
 8002760:	f001 fb9f 	bl	8003ea2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002764:	2006      	movs	r0, #6
 8002766:	f001 fbb6 	bl	8003ed6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800276a:	2200      	movs	r2, #0
 800276c:	2100      	movs	r1, #0
 800276e:	2007      	movs	r0, #7
 8002770:	f001 fb97 	bl	8003ea2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002774:	2007      	movs	r0, #7
 8002776:	f001 fbae 	bl	8003ed6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800277a:	2200      	movs	r2, #0
 800277c:	2100      	movs	r1, #0
 800277e:	200a      	movs	r0, #10
 8002780:	f001 fb8f 	bl	8003ea2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002784:	200a      	movs	r0, #10
 8002786:	f001 fba6 	bl	8003ed6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800278a:	2200      	movs	r2, #0
 800278c:	2100      	movs	r1, #0
 800278e:	2017      	movs	r0, #23
 8002790:	f001 fb87 	bl	8003ea2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002794:	2017      	movs	r0, #23
 8002796:	f001 fb9e 	bl	8003ed6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800279a:	bf00      	nop
 800279c:	3718      	adds	r7, #24
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	48000800 	.word	0x48000800
 80027a8:	48000400 	.word	0x48000400
 80027ac:	48000c00 	.word	0x48000c00

080027b0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	4603      	mov	r3, r0
 80027b8:	80fb      	strh	r3, [r7, #6]
  switch(GPIO_Pin)
 80027ba:	88fb      	ldrh	r3, [r7, #6]
 80027bc:	2b40      	cmp	r3, #64	@ 0x40
 80027be:	d047      	beq.n	8002850 <HAL_GPIO_EXTI_Callback+0xa0>
 80027c0:	2b40      	cmp	r3, #64	@ 0x40
 80027c2:	dc48      	bgt.n	8002856 <HAL_GPIO_EXTI_Callback+0xa6>
 80027c4:	2b10      	cmp	r3, #16
 80027c6:	d006      	beq.n	80027d6 <HAL_GPIO_EXTI_Callback+0x26>
 80027c8:	2b10      	cmp	r3, #16
 80027ca:	dc44      	bgt.n	8002856 <HAL_GPIO_EXTI_Callback+0xa6>
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d044      	beq.n	800285a <HAL_GPIO_EXTI_Callback+0xaa>
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d044      	beq.n	800285e <HAL_GPIO_EXTI_Callback+0xae>
	case NRF24_IRQ_Pin:
		NRF24_IRQ_Callback();
		break;

    default:
    	break;
 80027d4:	e03f      	b.n	8002856 <HAL_GPIO_EXTI_Callback+0xa6>
        if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET) {
 80027d6:	2110      	movs	r1, #16
 80027d8:	4824      	ldr	r0, [pc, #144]	@ (800286c <HAL_GPIO_EXTI_Callback+0xbc>)
 80027da:	f002 f941 	bl	8004a60 <HAL_GPIO_ReadPin>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d10b      	bne.n	80027fc <HAL_GPIO_EXTI_Callback+0x4c>
            B1_pressed_time = HAL_GetTick();
 80027e4:	f001 f9fe 	bl	8003be4 <HAL_GetTick>
 80027e8:	4603      	mov	r3, r0
 80027ea:	4a21      	ldr	r2, [pc, #132]	@ (8002870 <HAL_GPIO_EXTI_Callback+0xc0>)
 80027ec:	6013      	str	r3, [r2, #0]
            B1_long_press_flag = 0;
 80027ee:	4b21      	ldr	r3, [pc, #132]	@ (8002874 <HAL_GPIO_EXTI_Callback+0xc4>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	701a      	strb	r2, [r3, #0]
            B1_double_click_flag = 0;
 80027f4:	4b20      	ldr	r3, [pc, #128]	@ (8002878 <HAL_GPIO_EXTI_Callback+0xc8>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	701a      	strb	r2, [r3, #0]
        break;
 80027fa:	e032      	b.n	8002862 <HAL_GPIO_EXTI_Callback+0xb2>
            if (!B1_long_press_flag) {
 80027fc:	4b1d      	ldr	r3, [pc, #116]	@ (8002874 <HAL_GPIO_EXTI_Callback+0xc4>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d12e      	bne.n	8002862 <HAL_GPIO_EXTI_Callback+0xb2>
                uint32_t press_duration = HAL_GetTick() - B1_pressed_time;
 8002804:	f001 f9ee 	bl	8003be4 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	4b19      	ldr	r3, [pc, #100]	@ (8002870 <HAL_GPIO_EXTI_Callback+0xc0>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	60fb      	str	r3, [r7, #12]
                if (press_duration < 1000 && press_duration > 50) {
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002818:	d223      	bcs.n	8002862 <HAL_GPIO_EXTI_Callback+0xb2>
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2b32      	cmp	r3, #50	@ 0x32
 800281e:	d920      	bls.n	8002862 <HAL_GPIO_EXTI_Callback+0xb2>
                    B1_short_press_flag = 1;
 8002820:	4b16      	ldr	r3, [pc, #88]	@ (800287c <HAL_GPIO_EXTI_Callback+0xcc>)
 8002822:	2201      	movs	r2, #1
 8002824:	701a      	strb	r2, [r3, #0]
                    B1_pressed_time = 0;
 8002826:	4b12      	ldr	r3, [pc, #72]	@ (8002870 <HAL_GPIO_EXTI_Callback+0xc0>)
 8002828:	2200      	movs	r2, #0
 800282a:	601a      	str	r2, [r3, #0]
                    if (HAL_GetTick() - last_short_press_time < 300) {
 800282c:	f001 f9da 	bl	8003be4 <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	4b13      	ldr	r3, [pc, #76]	@ (8002880 <HAL_GPIO_EXTI_Callback+0xd0>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800283c:	d202      	bcs.n	8002844 <HAL_GPIO_EXTI_Callback+0x94>
                        B1_double_click_flag = 1;
 800283e:	4b0e      	ldr	r3, [pc, #56]	@ (8002878 <HAL_GPIO_EXTI_Callback+0xc8>)
 8002840:	2201      	movs	r2, #1
 8002842:	701a      	strb	r2, [r3, #0]
                    last_short_press_time = HAL_GetTick();
 8002844:	f001 f9ce 	bl	8003be4 <HAL_GetTick>
 8002848:	4603      	mov	r3, r0
 800284a:	4a0d      	ldr	r2, [pc, #52]	@ (8002880 <HAL_GPIO_EXTI_Callback+0xd0>)
 800284c:	6013      	str	r3, [r2, #0]
        break;
 800284e:	e008      	b.n	8002862 <HAL_GPIO_EXTI_Callback+0xb2>
		NRF24_IRQ_Callback();
 8002850:	f001 f954 	bl	8003afc <NRF24_IRQ_Callback>
		break;
 8002854:	e006      	b.n	8002864 <HAL_GPIO_EXTI_Callback+0xb4>
    	break;
 8002856:	bf00      	nop
 8002858:	e004      	b.n	8002864 <HAL_GPIO_EXTI_Callback+0xb4>
		break;
 800285a:	bf00      	nop
 800285c:	e002      	b.n	8002864 <HAL_GPIO_EXTI_Callback+0xb4>
		break;
 800285e:	bf00      	nop
 8002860:	e000      	b.n	8002864 <HAL_GPIO_EXTI_Callback+0xb4>
        break;
 8002862:	bf00      	nop
  }
}
 8002864:	bf00      	nop
 8002866:	3710      	adds	r7, #16
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}
 800286c:	48000800 	.word	0x48000800
 8002870:	20000510 	.word	0x20000510
 8002874:	20000514 	.word	0x20000514
 8002878:	20000516 	.word	0x20000516
 800287c:	20000515 	.word	0x20000515
 8002880:	20000518 	.word	0x20000518

08002884 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
	DMX_TIM_PeriodElapsedCallback(htim);
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f000 fdb3 	bl	80033f8 <DMX_TIM_PeriodElapsedCallback>
}
 8002892:	bf00      	nop
 8002894:	3708      	adds	r7, #8
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}

0800289a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800289a:	b480      	push	{r7}
 800289c:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800289e:	b672      	cpsid	i
}
 80028a0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028a2:	bf00      	nop
 80028a4:	e7fd      	b.n	80028a2 <Error_Handler+0x8>

080028a6 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80028a6:	b480      	push	{r7}
 80028a8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80028aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028b2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80028b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80028ba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80028be:	bf00      	nop
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr

080028c8 <LL_AHB2_GRP1_EnableClock>:
{
 80028c8:	b480      	push	{r7}
 80028ca:	b085      	sub	sp, #20
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80028d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028d4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80028d6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4313      	orrs	r3, r2
 80028de:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80028e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028e4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4013      	ands	r3, r2
 80028ea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80028ec:	68fb      	ldr	r3, [r7, #12]
}
 80028ee:	bf00      	nop
 80028f0:	3714      	adds	r7, #20
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr

080028fa <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80028fa:	b480      	push	{r7}
 80028fc:	b085      	sub	sp, #20
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002902:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002906:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002908:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	4313      	orrs	r3, r2
 8002910:	650b      	str	r3, [r1, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002912:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002916:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4013      	ands	r3, r2
 800291c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800291e:	68fb      	ldr	r3, [r7, #12]
}
 8002920:	bf00      	nop
 8002922:	3714      	adds	r7, #20
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800292c:	b480      	push	{r7}
 800292e:	b085      	sub	sp, #20
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002934:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002938:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800293a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4313      	orrs	r3, r2
 8002942:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002944:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002948:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4013      	ands	r3, r2
 800294e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002950:	68fb      	ldr	r3, [r7, #12]
}
 8002952:	bf00      	nop
 8002954:	3714      	adds	r7, #20
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr

0800295e <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 800295e:	b480      	push	{r7}
 8002960:	b085      	sub	sp, #20
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8002966:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800296a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800296c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	4313      	orrs	r3, r2
 8002974:	65cb      	str	r3, [r1, #92]	@ 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8002976:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800297a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	4013      	ands	r3, r2
 8002980:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002982:	68fb      	ldr	r3, [r7, #12]
}
 8002984:	bf00      	nop
 8002986:	3714      	adds	r7, #20
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <LL_APB1_GRP1_DisableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8002998:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800299c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	43db      	mvns	r3, r3
 80029a2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80029a6:	4013      	ands	r3, r2
 80029a8:	658b      	str	r3, [r1, #88]	@ 0x58
}
 80029aa:	bf00      	nop
 80029ac:	370c      	adds	r7, #12
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr

080029b6 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80029b6:	b480      	push	{r7}
 80029b8:	b085      	sub	sp, #20
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80029be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029c2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80029c4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80029ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029d2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	4013      	ands	r3, r2
 80029d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80029da:	68fb      	ldr	r3, [r7, #12]
}
 80029dc:	bf00      	nop
 80029de:	3714      	adds	r7, #20
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 80029ec:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80029f0:	f7ff ff83 	bl	80028fa <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 80029f4:	2200      	movs	r2, #0
 80029f6:	2100      	movs	r1, #0
 80029f8:	202e      	movs	r0, #46	@ 0x2e
 80029fa:	f001 fa52 	bl	8003ea2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 80029fe:	202e      	movs	r0, #46	@ 0x2e
 8002a00:	f001 fa69 	bl	8003ed6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a04:	bf00      	nop
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <HAL_IPCC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hipcc: IPCC handle pointer
  * @retval None
  */
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a0d      	ldr	r2, [pc, #52]	@ (8002a4c <HAL_IPCC_MspInit+0x44>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d113      	bne.n	8002a42 <HAL_IPCC_MspInit+0x3a>
  {
    /* USER CODE BEGIN IPCC_MspInit 0 */

    /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8002a1a:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8002a1e:	f7ff ff6c 	bl	80028fa <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8002a22:	2200      	movs	r2, #0
 8002a24:	2100      	movs	r1, #0
 8002a26:	202c      	movs	r0, #44	@ 0x2c
 8002a28:	f001 fa3b 	bl	8003ea2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8002a2c:	202c      	movs	r0, #44	@ 0x2c
 8002a2e:	f001 fa52 	bl	8003ed6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8002a32:	2200      	movs	r2, #0
 8002a34:	2100      	movs	r1, #0
 8002a36:	202d      	movs	r0, #45	@ 0x2d
 8002a38:	f001 fa33 	bl	8003ea2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8002a3c:	202d      	movs	r0, #45	@ 0x2d
 8002a3e:	f001 fa4a 	bl	8003ed6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END IPCC_MspInit 1 */

  }

}
 8002a42:	bf00      	nop
 8002a44:	3708      	adds	r7, #8
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	58000c00 	.word	0x58000c00

08002a50 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b09c      	sub	sp, #112	@ 0x70
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a58:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	601a      	str	r2, [r3, #0]
 8002a60:	605a      	str	r2, [r3, #4]
 8002a62:	609a      	str	r2, [r3, #8]
 8002a64:	60da      	str	r2, [r3, #12]
 8002a66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a68:	f107 030c 	add.w	r3, r7, #12
 8002a6c:	2250      	movs	r2, #80	@ 0x50
 8002a6e:	2100      	movs	r1, #0
 8002a70:	4618      	mov	r0, r3
 8002a72:	f00b fde3 	bl	800e63c <memset>
  if(huart->Instance==LPUART1)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a67      	ldr	r2, [pc, #412]	@ (8002c18 <HAL_UART_MspInit+0x1c8>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d155      	bne.n	8002b2c <HAL_UART_MspInit+0xdc>

    /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002a80:	2302      	movs	r3, #2
 8002a82:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002a84:	2300      	movs	r3, #0
 8002a86:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a88:	f107 030c 	add.w	r3, r7, #12
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f003 fc38 	bl	8006302 <HAL_RCCEx_PeriphCLKConfig>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d001      	beq.n	8002a9c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002a98:	f7ff feff 	bl	800289a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002a9c:	2001      	movs	r0, #1
 8002a9e:	f7ff ff5e 	bl	800295e <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002aa2:	2004      	movs	r0, #4
 8002aa4:	f7ff ff10 	bl	80028c8 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aac:	2302      	movs	r3, #2
 8002aae:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002ab8:	2308      	movs	r3, #8
 8002aba:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002abc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	4856      	ldr	r0, [pc, #344]	@ (8002c1c <HAL_UART_MspInit+0x1cc>)
 8002ac4:	f001 fd7e 	bl	80045c4 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 8002ac8:	4b55      	ldr	r3, [pc, #340]	@ (8002c20 <HAL_UART_MspInit+0x1d0>)
 8002aca:	4a56      	ldr	r2, [pc, #344]	@ (8002c24 <HAL_UART_MspInit+0x1d4>)
 8002acc:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8002ace:	4b54      	ldr	r3, [pc, #336]	@ (8002c20 <HAL_UART_MspInit+0x1d0>)
 8002ad0:	2211      	movs	r2, #17
 8002ad2:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ad4:	4b52      	ldr	r3, [pc, #328]	@ (8002c20 <HAL_UART_MspInit+0x1d0>)
 8002ad6:	2210      	movs	r2, #16
 8002ad8:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ada:	4b51      	ldr	r3, [pc, #324]	@ (8002c20 <HAL_UART_MspInit+0x1d0>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002ae0:	4b4f      	ldr	r3, [pc, #316]	@ (8002c20 <HAL_UART_MspInit+0x1d0>)
 8002ae2:	2280      	movs	r2, #128	@ 0x80
 8002ae4:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ae6:	4b4e      	ldr	r3, [pc, #312]	@ (8002c20 <HAL_UART_MspInit+0x1d0>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002aec:	4b4c      	ldr	r3, [pc, #304]	@ (8002c20 <HAL_UART_MspInit+0x1d0>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8002af2:	4b4b      	ldr	r3, [pc, #300]	@ (8002c20 <HAL_UART_MspInit+0x1d0>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002af8:	4b49      	ldr	r3, [pc, #292]	@ (8002c20 <HAL_UART_MspInit+0x1d0>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8002afe:	4848      	ldr	r0, [pc, #288]	@ (8002c20 <HAL_UART_MspInit+0x1d0>)
 8002b00:	f001 fa2e 	bl	8003f60 <HAL_DMA_Init>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d001      	beq.n	8002b0e <HAL_UART_MspInit+0xbe>
    {
      Error_Handler();
 8002b0a:	f7ff fec6 	bl	800289a <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a43      	ldr	r2, [pc, #268]	@ (8002c20 <HAL_UART_MspInit+0x1d0>)
 8002b12:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002b14:	4a42      	ldr	r2, [pc, #264]	@ (8002c20 <HAL_UART_MspInit+0x1d0>)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	2100      	movs	r1, #0
 8002b1e:	2025      	movs	r0, #37	@ 0x25
 8002b20:	f001 f9bf 	bl	8003ea2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8002b24:	2025      	movs	r0, #37	@ 0x25
 8002b26:	f001 f9d6 	bl	8003ed6 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART1_MspInit 1 */

    /* USER CODE END USART1_MspInit 1 */
  }

}
 8002b2a:	e070      	b.n	8002c0e <HAL_UART_MspInit+0x1be>
  else if(huart->Instance==USART1)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a3d      	ldr	r2, [pc, #244]	@ (8002c28 <HAL_UART_MspInit+0x1d8>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d16b      	bne.n	8002c0e <HAL_UART_MspInit+0x1be>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002b36:	2301      	movs	r3, #1
 8002b38:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b3e:	f107 030c 	add.w	r3, r7, #12
 8002b42:	4618      	mov	r0, r3
 8002b44:	f003 fbdd 	bl	8006302 <HAL_RCCEx_PeriphCLKConfig>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d001      	beq.n	8002b52 <HAL_UART_MspInit+0x102>
      Error_Handler();
 8002b4e:	f7ff fea4 	bl	800289a <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b52:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002b56:	f7ff ff2e 	bl	80029b6 <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b5a:	2001      	movs	r0, #1
 8002b5c:	f7ff feb4 	bl	80028c8 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b60:	2002      	movs	r0, #2
 8002b62:	f7ff feb1 	bl	80028c8 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002b66:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002b6a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b6c:	2302      	movs	r3, #2
 8002b6e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b70:	2300      	movs	r3, #0
 8002b72:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b74:	2300      	movs	r3, #0
 8002b76:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002b78:	2307      	movs	r3, #7
 8002b7a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b7c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002b80:	4619      	mov	r1, r3
 8002b82:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b86:	f001 fd1d 	bl	80045c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002b8a:	2340      	movs	r3, #64	@ 0x40
 8002b8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b8e:	2302      	movs	r3, #2
 8002b90:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b92:	2300      	movs	r3, #0
 8002b94:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b96:	2300      	movs	r3, #0
 8002b98:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002b9a:	2307      	movs	r3, #7
 8002b9c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b9e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	4821      	ldr	r0, [pc, #132]	@ (8002c2c <HAL_UART_MspInit+0x1dc>)
 8002ba6:	f001 fd0d 	bl	80045c4 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA1_Channel1;
 8002baa:	4b21      	ldr	r3, [pc, #132]	@ (8002c30 <HAL_UART_MspInit+0x1e0>)
 8002bac:	4a21      	ldr	r2, [pc, #132]	@ (8002c34 <HAL_UART_MspInit+0x1e4>)
 8002bae:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002bb0:	4b1f      	ldr	r3, [pc, #124]	@ (8002c30 <HAL_UART_MspInit+0x1e0>)
 8002bb2:	220f      	movs	r2, #15
 8002bb4:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002bb6:	4b1e      	ldr	r3, [pc, #120]	@ (8002c30 <HAL_UART_MspInit+0x1e0>)
 8002bb8:	2210      	movs	r2, #16
 8002bba:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002bbc:	4b1c      	ldr	r3, [pc, #112]	@ (8002c30 <HAL_UART_MspInit+0x1e0>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002bc2:	4b1b      	ldr	r3, [pc, #108]	@ (8002c30 <HAL_UART_MspInit+0x1e0>)
 8002bc4:	2280      	movs	r2, #128	@ 0x80
 8002bc6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002bc8:	4b19      	ldr	r3, [pc, #100]	@ (8002c30 <HAL_UART_MspInit+0x1e0>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002bce:	4b18      	ldr	r3, [pc, #96]	@ (8002c30 <HAL_UART_MspInit+0x1e0>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002bd4:	4b16      	ldr	r3, [pc, #88]	@ (8002c30 <HAL_UART_MspInit+0x1e0>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002bda:	4b15      	ldr	r3, [pc, #84]	@ (8002c30 <HAL_UART_MspInit+0x1e0>)
 8002bdc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002be0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002be2:	4813      	ldr	r0, [pc, #76]	@ (8002c30 <HAL_UART_MspInit+0x1e0>)
 8002be4:	f001 f9bc 	bl	8003f60 <HAL_DMA_Init>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <HAL_UART_MspInit+0x1a2>
      Error_Handler();
 8002bee:	f7ff fe54 	bl	800289a <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a0e      	ldr	r2, [pc, #56]	@ (8002c30 <HAL_UART_MspInit+0x1e0>)
 8002bf6:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002bf8:	4a0d      	ldr	r2, [pc, #52]	@ (8002c30 <HAL_UART_MspInit+0x1e0>)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002bfe:	2200      	movs	r2, #0
 8002c00:	2100      	movs	r1, #0
 8002c02:	2024      	movs	r0, #36	@ 0x24
 8002c04:	f001 f94d 	bl	8003ea2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002c08:	2024      	movs	r0, #36	@ 0x24
 8002c0a:	f001 f964 	bl	8003ed6 <HAL_NVIC_EnableIRQ>
}
 8002c0e:	bf00      	nop
 8002c10:	3770      	adds	r7, #112	@ 0x70
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	40008000 	.word	0x40008000
 8002c1c:	48000800 	.word	0x48000800
 8002c20:	20000378 	.word	0x20000378
 8002c24:	4002001c 	.word	0x4002001c
 8002c28:	40013800 	.word	0x40013800
 8002c2c:	48000400 	.word	0x48000400
 8002c30:	200003d8 	.word	0x200003d8
 8002c34:	40020008 	.word	0x40020008

08002c38 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b096      	sub	sp, #88	@ 0x58
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c40:	f107 0308 	add.w	r3, r7, #8
 8002c44:	2250      	movs	r2, #80	@ 0x50
 8002c46:	2100      	movs	r1, #0
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f00b fcf7 	bl	800e63c <memset>
  if(hrtc->Instance==RTC)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a12      	ldr	r2, [pc, #72]	@ (8002c9c <HAL_RTC_MspInit+0x64>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d11d      	bne.n	8002c94 <HAL_RTC_MspInit+0x5c>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002c58:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002c5c:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002c5e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c62:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c64:	f107 0308 	add.w	r3, r7, #8
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f003 fb4a 	bl	8006302 <HAL_RCCEx_PeriphCLKConfig>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d001      	beq.n	8002c78 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002c74:	f7ff fe11 	bl	800289a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002c78:	f7ff fe15 	bl	80028a6 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002c7c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002c80:	f7ff fe54 	bl	800292c <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8002c84:	2200      	movs	r2, #0
 8002c86:	2100      	movs	r1, #0
 8002c88:	2003      	movs	r0, #3
 8002c8a:	f001 f90a 	bl	8003ea2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8002c8e:	2003      	movs	r0, #3
 8002c90:	f001 f921 	bl	8003ed6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8002c94:	bf00      	nop
 8002c96:	3758      	adds	r7, #88	@ 0x58
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	40002800 	.word	0x40002800

08002ca0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b088      	sub	sp, #32
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ca8:	f107 030c 	add.w	r3, r7, #12
 8002cac:	2200      	movs	r2, #0
 8002cae:	601a      	str	r2, [r3, #0]
 8002cb0:	605a      	str	r2, [r3, #4]
 8002cb2:	609a      	str	r2, [r3, #8]
 8002cb4:	60da      	str	r2, [r3, #12]
 8002cb6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a0f      	ldr	r2, [pc, #60]	@ (8002cfc <HAL_SPI_MspInit+0x5c>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d117      	bne.n	8002cf2 <HAL_SPI_MspInit+0x52>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002cc2:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002cc6:	f7ff fe31 	bl	800292c <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cca:	2002      	movs	r0, #2
 8002ccc:	f7ff fdfc 	bl	80028c8 <LL_AHB2_GRP1_EnableClock>
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002cd0:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8002cd4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cd6:	2302      	movs	r3, #2
 8002cd8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002ce2:	2305      	movs	r3, #5
 8002ce4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ce6:	f107 030c 	add.w	r3, r7, #12
 8002cea:	4619      	mov	r1, r3
 8002cec:	4804      	ldr	r0, [pc, #16]	@ (8002d00 <HAL_SPI_MspInit+0x60>)
 8002cee:	f001 fc69 	bl	80045c4 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8002cf2:	bf00      	nop
 8002cf4:	3720      	adds	r7, #32
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	40003800 	.word	0x40003800
 8002d00:	48000400 	.word	0x48000400

08002d04 <HAL_SPI_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI2)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a07      	ldr	r2, [pc, #28]	@ (8002d30 <HAL_SPI_MspDeInit+0x2c>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d108      	bne.n	8002d28 <HAL_SPI_MspDeInit+0x24>
  {
    /* USER CODE BEGIN SPI2_MspDeInit 0 */

    /* USER CODE END SPI2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI2_CLK_DISABLE();
 8002d16:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002d1a:	f7ff fe39 	bl	8002990 <LL_APB1_GRP1_DisableClock>
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15);
 8002d1e:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8002d22:	4804      	ldr	r0, [pc, #16]	@ (8002d34 <HAL_SPI_MspDeInit+0x30>)
 8002d24:	f001 fdbe 	bl	80048a4 <HAL_GPIO_DeInit>
    /* USER CODE BEGIN SPI2_MspDeInit 1 */

    /* USER CODE END SPI2_MspDeInit 1 */
  }

}
 8002d28:	bf00      	nop
 8002d2a:	3708      	adds	r7, #8
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	40003800 	.word	0x40003800
 8002d34:	48000400 	.word	0x48000400

08002d38 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d48:	d10a      	bne.n	8002d60 <HAL_TIM_Base_MspInit+0x28>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d4a:	2001      	movs	r0, #1
 8002d4c:	f7ff fdee 	bl	800292c <LL_APB1_GRP1_EnableClock>
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002d50:	2200      	movs	r2, #0
 8002d52:	2100      	movs	r1, #0
 8002d54:	201c      	movs	r0, #28
 8002d56:	f001 f8a4 	bl	8003ea2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002d5a:	201c      	movs	r0, #28
 8002d5c:	f001 f8bb 	bl	8003ed6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8002d60:	bf00      	nop
 8002d62:	3708      	adds	r7, #8
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002d6c:	bf00      	nop
 8002d6e:	e7fd      	b.n	8002d6c <NMI_Handler+0x4>

08002d70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d70:	b480      	push	{r7}
 8002d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d74:	bf00      	nop
 8002d76:	e7fd      	b.n	8002d74 <HardFault_Handler+0x4>

08002d78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d7c:	bf00      	nop
 8002d7e:	e7fd      	b.n	8002d7c <MemManage_Handler+0x4>

08002d80 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d80:	b480      	push	{r7}
 8002d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d84:	bf00      	nop
 8002d86:	e7fd      	b.n	8002d84 <BusFault_Handler+0x4>

08002d88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d8c:	bf00      	nop
 8002d8e:	e7fd      	b.n	8002d8c <UsageFault_Handler+0x4>

08002d90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d90:	b480      	push	{r7}
 8002d92:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d94:	bf00      	nop
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr

08002d9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d9e:	b480      	push	{r7}
 8002da0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002da2:	bf00      	nop
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002dac:	b480      	push	{r7}
 8002dae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002db0:	bf00      	nop
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr

08002dba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002dba:	b580      	push	{r7, lr}
 8002dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002dbe:	f000 fefd 	bl	8003bbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002dc2:	bf00      	nop
 8002dc4:	bd80      	pop	{r7, pc}

08002dc6 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8002dc6:	b580      	push	{r7, lr}
 8002dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8002dca:	f7fe fcf9 	bl	80017c0 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8002dce:	bf00      	nop
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B2_Pin);
 8002dd6:	2001      	movs	r0, #1
 8002dd8:	f001 fe8c 	bl	8004af4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002ddc:	bf00      	nop
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B3_Pin);
 8002de4:	2002      	movs	r0, #2
 8002de6:	f001 fe85 	bl	8004af4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002dea:	bf00      	nop
 8002dec:	bd80      	pop	{r7, pc}

08002dee <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002dee:	b580      	push	{r7, lr}
 8002df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002df2:	2010      	movs	r0, #16
 8002df4:	f001 fe7e 	bl	8004af4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002df8:	bf00      	nop
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002e00:	4802      	ldr	r0, [pc, #8]	@ (8002e0c <DMA1_Channel1_IRQHandler+0x10>)
 8002e02:	f001 fa8e 	bl	8004322 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002e06:	bf00      	nop
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	200003d8 	.word	0x200003d8

08002e10 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8002e14:	4802      	ldr	r0, [pc, #8]	@ (8002e20 <DMA1_Channel2_IRQHandler+0x10>)
 8002e16:	f001 fa84 	bl	8004322 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002e1a:	bf00      	nop
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	20000378 	.word	0x20000378

08002e24 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NRF24_IRQ_Pin);
 8002e28:	2040      	movs	r0, #64	@ 0x40
 8002e2a:	f001 fe63 	bl	8004af4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002e2e:	bf00      	nop
 8002e30:	bd80      	pop	{r7, pc}
	...

08002e34 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002e38:	4802      	ldr	r0, [pc, #8]	@ (8002e44 <TIM2_IRQHandler+0x10>)
 8002e3a:	f004 fbe7 	bl	800760c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002e3e:	bf00      	nop
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	200004c0 	.word	0x200004c0

08002e48 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002e4c:	4802      	ldr	r0, [pc, #8]	@ (8002e58 <USART1_IRQHandler+0x10>)
 8002e4e:	f005 f859 	bl	8007f04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002e52:	bf00      	nop
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	200002ac 	.word	0x200002ac

08002e5c <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */
  DMX_UART_TxCpltCallback(&hlpuart1);
 8002e60:	4803      	ldr	r0, [pc, #12]	@ (8002e70 <LPUART1_IRQHandler+0x14>)
 8002e62:	f000 fae5 	bl	8003430 <DMX_UART_TxCpltCallback>
  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8002e66:	4802      	ldr	r0, [pc, #8]	@ (8002e70 <LPUART1_IRQHandler+0x14>)
 8002e68:	f005 f84c 	bl	8007f04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8002e6c:	bf00      	nop
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	200001e0 	.word	0x200001e0

08002e74 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8002e78:	f00a fd9a 	bl	800d9b0 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8002e7c:	bf00      	nop
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8002e84:	f00a fdca 	bl	800da1c <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8002e88:	bf00      	nop
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8002e90:	f001 fe48 	bl	8004b24 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8002e94:	bf00      	nop
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b086      	sub	sp, #24
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	60b9      	str	r1, [r7, #8]
 8002ea2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	617b      	str	r3, [r7, #20]
 8002ea8:	e00a      	b.n	8002ec0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002eaa:	f3af 8000 	nop.w
 8002eae:	4601      	mov	r1, r0
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	1c5a      	adds	r2, r3, #1
 8002eb4:	60ba      	str	r2, [r7, #8]
 8002eb6:	b2ca      	uxtb	r2, r1
 8002eb8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	617b      	str	r3, [r7, #20]
 8002ec0:	697a      	ldr	r2, [r7, #20]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	dbf0      	blt.n	8002eaa <_read+0x12>
  }

  return len;
 8002ec8:	687b      	ldr	r3, [r7, #4]
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3718      	adds	r7, #24
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002ed2:	b480      	push	{r7}
 8002ed4:	b083      	sub	sp, #12
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002eda:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	370c      	adds	r7, #12
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr

08002eea <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002eea:	b480      	push	{r7}
 8002eec:	b083      	sub	sp, #12
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
 8002ef2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002efa:	605a      	str	r2, [r3, #4]
  return 0;
 8002efc:	2300      	movs	r3, #0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	370c      	adds	r7, #12
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr

08002f0a <_isatty>:

int _isatty(int file)
{
 8002f0a:	b480      	push	{r7}
 8002f0c:	b083      	sub	sp, #12
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002f12:	2301      	movs	r3, #1
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	370c      	adds	r7, #12
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr

08002f20 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b085      	sub	sp, #20
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	60b9      	str	r1, [r7, #8]
 8002f2a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3714      	adds	r7, #20
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
	...

08002f3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b086      	sub	sp, #24
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f44:	4a14      	ldr	r2, [pc, #80]	@ (8002f98 <_sbrk+0x5c>)
 8002f46:	4b15      	ldr	r3, [pc, #84]	@ (8002f9c <_sbrk+0x60>)
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f50:	4b13      	ldr	r3, [pc, #76]	@ (8002fa0 <_sbrk+0x64>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d102      	bne.n	8002f5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f58:	4b11      	ldr	r3, [pc, #68]	@ (8002fa0 <_sbrk+0x64>)
 8002f5a:	4a12      	ldr	r2, [pc, #72]	@ (8002fa4 <_sbrk+0x68>)
 8002f5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f5e:	4b10      	ldr	r3, [pc, #64]	@ (8002fa0 <_sbrk+0x64>)
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4413      	add	r3, r2
 8002f66:	693a      	ldr	r2, [r7, #16]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d207      	bcs.n	8002f7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f6c:	f00b fbb4 	bl	800e6d8 <__errno>
 8002f70:	4603      	mov	r3, r0
 8002f72:	220c      	movs	r2, #12
 8002f74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f76:	f04f 33ff 	mov.w	r3, #4294967295
 8002f7a:	e009      	b.n	8002f90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f7c:	4b08      	ldr	r3, [pc, #32]	@ (8002fa0 <_sbrk+0x64>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f82:	4b07      	ldr	r3, [pc, #28]	@ (8002fa0 <_sbrk+0x64>)
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4413      	add	r3, r2
 8002f8a:	4a05      	ldr	r2, [pc, #20]	@ (8002fa0 <_sbrk+0x64>)
 8002f8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3718      	adds	r7, #24
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	20030000 	.word	0x20030000
 8002f9c:	00000400 	.word	0x00000400
 8002fa0:	20000930 	.word	0x20000930
 8002fa4:	20000f38 	.word	0x20000f38

08002fa8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8002fac:	4b24      	ldr	r3, [pc, #144]	@ (8003040 <SystemInit+0x98>)
 8002fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fb2:	4a23      	ldr	r2, [pc, #140]	@ (8003040 <SystemInit+0x98>)
 8002fb4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002fb8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002fbc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002fc6:	f043 0301 	orr.w	r3, r3, #1
 8002fca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8002fcc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fd0:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8002fd4:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8002fd6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002fe0:	4b18      	ldr	r3, [pc, #96]	@ (8003044 <SystemInit+0x9c>)
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8002fe6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002fee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ff2:	f023 0305 	bic.w	r3, r3, #5
 8002ff6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002ffa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ffe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003002:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003006:	f023 0301 	bic.w	r3, r3, #1
 800300a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800300e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003012:	4a0d      	ldr	r2, [pc, #52]	@ (8003048 <SystemInit+0xa0>)
 8003014:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8003016:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800301a:	4a0b      	ldr	r2, [pc, #44]	@ (8003048 <SystemInit+0xa0>)
 800301c:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800301e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003028:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800302c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800302e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003032:	2200      	movs	r2, #0
 8003034:	619a      	str	r2, [r3, #24]
}
 8003036:	bf00      	nop
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr
 8003040:	e000ed00 	.word	0xe000ed00
 8003044:	faf6fefb 	.word	0xfaf6fefb
 8003048:	22041000 	.word	0x22041000

0800304c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 800304c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800304e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003050:	3304      	adds	r3, #4

08003052 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003052:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003054:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8003056:	d3f9      	bcc.n	800304c <CopyDataInit>
  bx lr
 8003058:	4770      	bx	lr

0800305a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800305a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 800305c:	3004      	adds	r0, #4

0800305e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800305e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8003060:	d3fb      	bcc.n	800305a <FillZerobss>
  bx lr
 8003062:	4770      	bx	lr

08003064 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003064:	480c      	ldr	r0, [pc, #48]	@ (8003098 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003066:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003068:	f7ff ff9e 	bl	8002fa8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800306c:	480b      	ldr	r0, [pc, #44]	@ (800309c <LoopForever+0x6>)
 800306e:	490c      	ldr	r1, [pc, #48]	@ (80030a0 <LoopForever+0xa>)
 8003070:	4a0c      	ldr	r2, [pc, #48]	@ (80030a4 <LoopForever+0xe>)
 8003072:	2300      	movs	r3, #0
 8003074:	f7ff ffed 	bl	8003052 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8003078:	480b      	ldr	r0, [pc, #44]	@ (80030a8 <LoopForever+0x12>)
 800307a:	490c      	ldr	r1, [pc, #48]	@ (80030ac <LoopForever+0x16>)
 800307c:	4a0c      	ldr	r2, [pc, #48]	@ (80030b0 <LoopForever+0x1a>)
 800307e:	2300      	movs	r3, #0
 8003080:	f7ff ffe7 	bl	8003052 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8003084:	480b      	ldr	r0, [pc, #44]	@ (80030b4 <LoopForever+0x1e>)
 8003086:	490c      	ldr	r1, [pc, #48]	@ (80030b8 <LoopForever+0x22>)
 8003088:	2300      	movs	r3, #0
 800308a:	f7ff ffe8 	bl	800305e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800308e:	f00b fb29 	bl	800e6e4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8003092:	f7fe ff19 	bl	8001ec8 <main>

08003096 <LoopForever>:

LoopForever:
  b LoopForever
 8003096:	e7fe      	b.n	8003096 <LoopForever>
  ldr   r0, =_estack
 8003098:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 800309c:	20000008 	.word	0x20000008
 80030a0:	20000094 	.word	0x20000094
 80030a4:	080109a8 	.word	0x080109a8
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80030a8:	200301e4 	.word	0x200301e4
 80030ac:	20030a67 	.word	0x20030a67
 80030b0:	08010a7a 	.word	0x08010a7a
  INIT_BSS _sbss, _ebss
 80030b4:	200000e0 	.word	0x200000e0
 80030b8:	20000f38 	.word	0x20000f38

080030bc <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80030bc:	e7fe      	b.n	80030bc <ADC1_IRQHandler>
	...

080030c0 <delay_us>:
static uint8_t DMX_Stop = 1;						// Flag to stop/start transmission
/**
 * @brief Generate a non-blocking microsecond delay using a timer
 * @param us Delay duration in microseconds
*/
static void delay_us(uint32_t us) {
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b082      	sub	sp, #8
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
    /* Stop timer if running */
    HAL_TIM_Base_Stop_IT(dmx_htim);
 80030c8:	4b0f      	ldr	r3, [pc, #60]	@ (8003108 <delay_us+0x48>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4618      	mov	r0, r3
 80030ce:	f004 fa6d 	bl	80075ac <HAL_TIM_Base_Stop_IT>
    delay_complete = 0;
 80030d2:	4b0e      	ldr	r3, [pc, #56]	@ (800310c <delay_us+0x4c>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	701a      	strb	r2, [r3, #0]
    /* Set auto-reload register to desired microseconds */
    __HAL_TIM_SET_AUTORELOAD(dmx_htim, us);
 80030d8:	4b0b      	ldr	r3, [pc, #44]	@ (8003108 <delay_us+0x48>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80030e2:	4b09      	ldr	r3, [pc, #36]	@ (8003108 <delay_us+0x48>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	60da      	str	r2, [r3, #12]
    /* Reset counter */
    __HAL_TIM_SET_COUNTER(dmx_htim, 0);
 80030ea:	4b07      	ldr	r3, [pc, #28]	@ (8003108 <delay_us+0x48>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2200      	movs	r2, #0
 80030f2:	625a      	str	r2, [r3, #36]	@ 0x24
    /* Start timer in interrupt mode */
    HAL_TIM_Base_Start_IT(dmx_htim);
 80030f4:	4b04      	ldr	r3, [pc, #16]	@ (8003108 <delay_us+0x48>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4618      	mov	r0, r3
 80030fa:	f004 fa09 	bl	8007510 <HAL_TIM_Base_Start_IT>
}
 80030fe:	bf00      	nop
 8003100:	3708      	adds	r7, #8
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	20000938 	.word	0x20000938
 800310c:	20000b3d 	.word	0x20000b3d

08003110 <DMX512_Tx_Output>:

/**
 * @brief Configure TX pin as GPIO output for Break/MAB generation
 * Used during Break (low) and MAB (high) signal generation.
 */
static void DMX512_Tx_Output(void){
 8003110:	b580      	push	{r7, lr}
 8003112:	b086      	sub	sp, #24
 8003114:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct;
    GPIO_InitStruct.Pin = DMX_TX_Pin;
 8003116:	2302      	movs	r3, #2
 8003118:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;  // Push-pull output
 800311a:	2301      	movs	r3, #1
 800311c:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;          // No pull-up/pull-down
 800311e:	2300      	movs	r3, #0
 8003120:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH; // High-speed GPIO
 8003122:	2303      	movs	r3, #3
 8003124:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(DMX_TX_GPIO_Port, &GPIO_InitStruct);
 8003126:	1d3b      	adds	r3, r7, #4
 8003128:	4619      	mov	r1, r3
 800312a:	4803      	ldr	r0, [pc, #12]	@ (8003138 <DMX512_Tx_Output+0x28>)
 800312c:	f001 fa4a 	bl	80045c4 <HAL_GPIO_Init>
}
 8003130:	bf00      	nop
 8003132:	3718      	adds	r7, #24
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}
 8003138:	48000800 	.word	0x48000800

0800313c <DMX512_Tx_Alter_Function>:

/**
 * @brief Reconfigure TX pin to alternate function for UART transmission
 * Switches from GPIO output to UART mode for data transmission.
 */
static void DMX512_Tx_Alter_Function(void){
 800313c:	b580      	push	{r7, lr}
 800313e:	b086      	sub	sp, #24
 8003140:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct;
    GPIO_InitStruct.Pin = DMX_TX_Pin;
 8003142:	2302      	movs	r3, #2
 8003144:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;      // Alternate function push-pull
 8003146:	2302      	movs	r3, #2
 8003148:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800314a:	2300      	movs	r3, #0
 800314c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800314e:	2303      	movs	r3, #3
 8003150:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Alternate = DMX_UART_AF;    // UART alternate function
 8003152:	2308      	movs	r3, #8
 8003154:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(DMX_TX_GPIO_Port, &GPIO_InitStruct);
 8003156:	1d3b      	adds	r3, r7, #4
 8003158:	4619      	mov	r1, r3
 800315a:	4803      	ldr	r0, [pc, #12]	@ (8003168 <DMX512_Tx_Alter_Function+0x2c>)
 800315c:	f001 fa32 	bl	80045c4 <HAL_GPIO_Init>
}
 8003160:	bf00      	nop
 8003162:	3718      	adds	r7, #24
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	48000800 	.word	0x48000800

0800316c <DMX512_Init>:
 * @brief Initialize DMX512 library
 * @param huart Pointer to USART handle
 * @param htim  Pointer to timer handle
 * @return HAL_StatusTypeDef
 */
HAL_StatusTypeDef DMX512_Init(UART_HandleTypeDef *huart, TIM_HandleTypeDef *htim) {
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]
    dmx_huart = huart;
 8003176:	4a24      	ldr	r2, [pc, #144]	@ (8003208 <DMX512_Init+0x9c>)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6013      	str	r3, [r2, #0]
    dmx_htim  = htim;
 800317c:	4a23      	ldr	r2, [pc, #140]	@ (800320c <DMX512_Init+0xa0>)
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	6013      	str	r3, [r2, #0]

    // Configure UART for DMX512 (250 kbps, 8N2)
    huart->Init.BaudRate = 250000;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a22      	ldr	r2, [pc, #136]	@ (8003210 <DMX512_Init+0xa4>)
 8003186:	605a      	str	r2, [r3, #4]
    huart->Init.WordLength = UART_WORDLENGTH_8B;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	609a      	str	r2, [r3, #8]
    huart->Init.StopBits = UART_STOPBITS_2;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003194:	60da      	str	r2, [r3, #12]
    huart->Init.Parity = UART_PARITY_NONE;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	611a      	str	r2, [r3, #16]
    huart->Init.Mode = UART_MODE_TX_RX;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	220c      	movs	r2, #12
 80031a0:	615a      	str	r2, [r3, #20]
    huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	619a      	str	r2, [r3, #24]
    if (HAL_UART_Init(huart) != HAL_OK) return HAL_ERROR;
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f004 fdcb 	bl	8007d44 <HAL_UART_Init>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d001      	beq.n	80031b8 <DMX512_Init+0x4c>
 80031b4:	2301      	movs	r3, #1
 80031b6:	e023      	b.n	8003200 <DMX512_Init+0x94>

    // Configure Timer for 1 µs ticks
    htim->Init.Prescaler = 32 - 1; // Assuming 32 MHz clock, 1 µs tick
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	221f      	movs	r2, #31
 80031bc:	605a      	str	r2, [r3, #4]
    htim->Init.CounterMode = TIM_COUNTERMODE_UP;
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	2200      	movs	r2, #0
 80031c2:	609a      	str	r2, [r3, #8]
    htim->Init.Period = 0xFFFFFFFF;
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	f04f 32ff 	mov.w	r2, #4294967295
 80031ca:	60da      	str	r2, [r3, #12]
    htim->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	2200      	movs	r2, #0
 80031d0:	611a      	str	r2, [r3, #16]
    htim->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	2200      	movs	r2, #0
 80031d6:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(htim) != HAL_OK) return HAL_ERROR;
 80031d8:	6838      	ldr	r0, [r7, #0]
 80031da:	f004 f941 	bl	8007460 <HAL_TIM_Base_Init>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d001      	beq.n	80031e8 <DMX512_Init+0x7c>
 80031e4:	2301      	movs	r3, #1
 80031e6:	e00b      	b.n	8003200 <DMX512_Init+0x94>
    if (HAL_TIM_Base_Start_IT(htim) != HAL_OK) return HAL_ERROR;
 80031e8:	6838      	ldr	r0, [r7, #0]
 80031ea:	f004 f991 	bl	8007510 <HAL_TIM_Base_Start_IT>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d001      	beq.n	80031f8 <DMX512_Init+0x8c>
 80031f4:	2301      	movs	r3, #1
 80031f6:	e003      	b.n	8003200 <DMX512_Init+0x94>

    DMX_Stop = 0; // Enable transmission by default
 80031f8:	4b06      	ldr	r3, [pc, #24]	@ (8003214 <DMX512_Init+0xa8>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	701a      	strb	r2, [r3, #0]
    return HAL_OK;
 80031fe:	2300      	movs	r3, #0
}
 8003200:	4618      	mov	r0, r3
 8003202:	3708      	adds	r7, #8
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}
 8003208:	20000934 	.word	0x20000934
 800320c:	20000938 	.word	0x20000938
 8003210:	0003d090 	.word	0x0003d090
 8003214:	20000019 	.word	0x20000019

08003218 <DMX512_SetChannel>:
/**
 * @brief Set a DMX channel value
 * @param channel Channel number (1-512)
 * @param value   0-255
 */
void DMX512_SetChannel(uint16_t channel, uint8_t value) {
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	4603      	mov	r3, r0
 8003220:	460a      	mov	r2, r1
 8003222:	80fb      	strh	r3, [r7, #6]
 8003224:	4613      	mov	r3, r2
 8003226:	717b      	strb	r3, [r7, #5]
    if (channel > 0 && channel <= DMX_MAX_CHANNELS) {
 8003228:	88fb      	ldrh	r3, [r7, #6]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d007      	beq.n	800323e <DMX512_SetChannel+0x26>
 800322e:	88fb      	ldrh	r3, [r7, #6]
 8003230:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003234:	d803      	bhi.n	800323e <DMX512_SetChannel+0x26>
        dmx_buffer[channel] = value; // Update buffer (index 1-512)
 8003236:	88fb      	ldrh	r3, [r7, #6]
 8003238:	4904      	ldr	r1, [pc, #16]	@ (800324c <DMX512_SetChannel+0x34>)
 800323a:	797a      	ldrb	r2, [r7, #5]
 800323c:	54ca      	strb	r2, [r1, r3]
    }
}
 800323e:	bf00      	nop
 8003240:	370c      	adds	r7, #12
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop
 800324c:	2000093c 	.word	0x2000093c

08003250 <DMX512_SetBuffer>:

/**
 * @brief Set the entire DMX channel buffer (excluding start code).
 * @param data Pointer to an array of 512 bytes containing channel data.
 */
void DMX512_SetBuffer(const uint8_t *data) {
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
    if (data == NULL) return;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d006      	beq.n	800326c <DMX512_SetBuffer+0x1c>
    memcpy(&dmx_buffer[1], data, DMX_MAX_CHANNELS); // Copy channels 1-512
 800325e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003262:	6879      	ldr	r1, [r7, #4]
 8003264:	4803      	ldr	r0, [pc, #12]	@ (8003274 <DMX512_SetBuffer+0x24>)
 8003266:	f00b fa64 	bl	800e732 <memcpy>
 800326a:	e000      	b.n	800326e <DMX512_SetBuffer+0x1e>
    if (data == NULL) return;
 800326c:	bf00      	nop
}
 800326e:	3708      	adds	r7, #8
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}
 8003274:	2000093d 	.word	0x2000093d

08003278 <DMX512_Task>:
}

/**
 * @brief Non-blocking task to manage DMX frame transmission
 */
void DMX512_Task(void) {
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0
    switch (dmx_state) {
 800327e:	4b37      	ldr	r3, [pc, #220]	@ (800335c <DMX512_Task+0xe4>)
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	2b03      	cmp	r3, #3
 8003284:	d866      	bhi.n	8003354 <DMX512_Task+0xdc>
 8003286:	a201      	add	r2, pc, #4	@ (adr r2, 800328c <DMX512_Task+0x14>)
 8003288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800328c:	0800329d 	.word	0x0800329d
 8003290:	080032ed 	.word	0x080032ed
 8003294:	08003313 	.word	0x08003313
 8003298:	08003335 	.word	0x08003335
        case DMX_IDLE:
            if (!DMX_Stop) {
 800329c:	4b30      	ldr	r3, [pc, #192]	@ (8003360 <DMX512_Task+0xe8>)
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d150      	bne.n	8003346 <DMX512_Task+0xce>
                uint32_t current_time = HAL_GetTick();
 80032a4:	f000 fc9e 	bl	8003be4 <HAL_GetTick>
 80032a8:	6078      	str	r0, [r7, #4]
                if ((current_time - last_frame_time) >= DMX_FRAME_INTERVAL_MS) {
 80032aa:	4b2e      	ldr	r3, [pc, #184]	@ (8003364 <DMX512_Task+0xec>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	2b16      	cmp	r3, #22
 80032b4:	d947      	bls.n	8003346 <DMX512_Task+0xce>
                    last_frame_time = current_time;
 80032b6:	4a2b      	ldr	r2, [pc, #172]	@ (8003364 <DMX512_Task+0xec>)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6013      	str	r3, [r2, #0]
                    dmx_state = DMX_BREAK;
 80032bc:	4b27      	ldr	r3, [pc, #156]	@ (800335c <DMX512_Task+0xe4>)
 80032be:	2201      	movs	r2, #1
 80032c0:	701a      	strb	r2, [r3, #0]
                    DMX_ENABLE_TX();
 80032c2:	2201      	movs	r2, #1
 80032c4:	2104      	movs	r1, #4
 80032c6:	4828      	ldr	r0, [pc, #160]	@ (8003368 <DMX512_Task+0xf0>)
 80032c8:	f001 fbe2 	bl	8004a90 <HAL_GPIO_WritePin>
 80032cc:	2201      	movs	r2, #1
 80032ce:	2108      	movs	r1, #8
 80032d0:	4825      	ldr	r0, [pc, #148]	@ (8003368 <DMX512_Task+0xf0>)
 80032d2:	f001 fbdd 	bl	8004a90 <HAL_GPIO_WritePin>
                    DMX512_Tx_Output();
 80032d6:	f7ff ff1b 	bl	8003110 <DMX512_Tx_Output>
                    HAL_GPIO_WritePin(DMX_TX_GPIO_Port, DMX_TX_Pin, GPIO_PIN_RESET); // Break
 80032da:	2200      	movs	r2, #0
 80032dc:	2102      	movs	r1, #2
 80032de:	4822      	ldr	r0, [pc, #136]	@ (8003368 <DMX512_Task+0xf0>)
 80032e0:	f001 fbd6 	bl	8004a90 <HAL_GPIO_WritePin>
                    delay_us(DMX_BREAK_US); // Non-blocking delay
 80032e4:	20b0      	movs	r0, #176	@ 0xb0
 80032e6:	f7ff feeb 	bl	80030c0 <delay_us>
                }
            }
            break;
 80032ea:	e02c      	b.n	8003346 <DMX512_Task+0xce>

        case DMX_BREAK:
            if (delay_complete) {
 80032ec:	4b1f      	ldr	r3, [pc, #124]	@ (800336c <DMX512_Task+0xf4>)
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d029      	beq.n	800334a <DMX512_Task+0xd2>
                dmx_state = DMX_MAB;
 80032f6:	4b19      	ldr	r3, [pc, #100]	@ (800335c <DMX512_Task+0xe4>)
 80032f8:	2202      	movs	r2, #2
 80032fa:	701a      	strb	r2, [r3, #0]
                HAL_GPIO_WritePin(DMX_TX_GPIO_Port, DMX_TX_Pin, GPIO_PIN_SET); // MAB
 80032fc:	2201      	movs	r2, #1
 80032fe:	2102      	movs	r1, #2
 8003300:	4819      	ldr	r0, [pc, #100]	@ (8003368 <DMX512_Task+0xf0>)
 8003302:	f001 fbc5 	bl	8004a90 <HAL_GPIO_WritePin>
                DMX512_Tx_Alter_Function();
 8003306:	f7ff ff19 	bl	800313c <DMX512_Tx_Alter_Function>
                delay_us(DMX_MAB_US);
 800330a:	200c      	movs	r0, #12
 800330c:	f7ff fed8 	bl	80030c0 <delay_us>
            }
            break;
 8003310:	e01b      	b.n	800334a <DMX512_Task+0xd2>

        case DMX_MAB:
            if (delay_complete) {
 8003312:	4b16      	ldr	r3, [pc, #88]	@ (800336c <DMX512_Task+0xf4>)
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	b2db      	uxtb	r3, r3
 8003318:	2b00      	cmp	r3, #0
 800331a:	d018      	beq.n	800334e <DMX512_Task+0xd6>
                dmx_state = DMX_TRANSMIT_DATA;
 800331c:	4b0f      	ldr	r3, [pc, #60]	@ (800335c <DMX512_Task+0xe4>)
 800331e:	2203      	movs	r2, #3
 8003320:	701a      	strb	r2, [r3, #0]
                HAL_UART_Transmit_DMA(dmx_huart, dmx_buffer, DMX_BUFFER_SIZE); // Start DMA
 8003322:	4b13      	ldr	r3, [pc, #76]	@ (8003370 <DMX512_Task+0xf8>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f240 2201 	movw	r2, #513	@ 0x201
 800332a:	4912      	ldr	r1, [pc, #72]	@ (8003374 <DMX512_Task+0xfc>)
 800332c:	4618      	mov	r0, r3
 800332e:	f004 fd69 	bl	8007e04 <HAL_UART_Transmit_DMA>
            }
            break;
 8003332:	e00c      	b.n	800334e <DMX512_Task+0xd6>

        case DMX_TRANSMIT_DATA:
            if (dma_transfer_complete) {
 8003334:	4b10      	ldr	r3, [pc, #64]	@ (8003378 <DMX512_Task+0x100>)
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	b2db      	uxtb	r3, r3
 800333a:	2b00      	cmp	r3, #0
 800333c:	d009      	beq.n	8003352 <DMX512_Task+0xda>
                dmx_state = DMX_IDLE; // Return to idle
 800333e:	4b07      	ldr	r3, [pc, #28]	@ (800335c <DMX512_Task+0xe4>)
 8003340:	2200      	movs	r2, #0
 8003342:	701a      	strb	r2, [r3, #0]
            }
            break;
 8003344:	e005      	b.n	8003352 <DMX512_Task+0xda>
            break;
 8003346:	bf00      	nop
 8003348:	e004      	b.n	8003354 <DMX512_Task+0xdc>
            break;
 800334a:	bf00      	nop
 800334c:	e002      	b.n	8003354 <DMX512_Task+0xdc>
            break;
 800334e:	bf00      	nop
 8003350:	e000      	b.n	8003354 <DMX512_Task+0xdc>
            break;
 8003352:	bf00      	nop
    }
}
 8003354:	bf00      	nop
 8003356:	3708      	adds	r7, #8
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}
 800335c:	20000b3e 	.word	0x20000b3e
 8003360:	20000019 	.word	0x20000019
 8003364:	20000b40 	.word	0x20000b40
 8003368:	48000800 	.word	0x48000800
 800336c:	20000b3d 	.word	0x20000b3d
 8003370:	20000934 	.word	0x20000934
 8003374:	2000093c 	.word	0x2000093c
 8003378:	20000018 	.word	0x20000018

0800337c <DMX512_IsTransmitting>:
}

/**
 * @brief Checks if a DMX transmission is currently active.
 */
uint8_t DMX512_IsTransmitting(void) {
 800337c:	b480      	push	{r7}
 800337e:	af00      	add	r7, sp, #0
    return !DMX_Stop; // 1 if transmitting, 0 if idle
 8003380:	4b05      	ldr	r3, [pc, #20]	@ (8003398 <DMX512_IsTransmitting+0x1c>)
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	2b00      	cmp	r3, #0
 8003386:	bf0c      	ite	eq
 8003388:	2301      	moveq	r3, #1
 800338a:	2300      	movne	r3, #0
 800338c:	b2db      	uxtb	r3, r3
}
 800338e:	4618      	mov	r0, r3
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr
 8003398:	20000019 	.word	0x20000019

0800339c <DMX512_StartTask>:

/**
 * @brief Starts DMX transmission.
 */
void DMX512_StartTask(void) {
 800339c:	b480      	push	{r7}
 800339e:	af00      	add	r7, sp, #0
    DMX_Stop = 0; // Enable transmission
 80033a0:	4b03      	ldr	r3, [pc, #12]	@ (80033b0 <DMX512_StartTask+0x14>)
 80033a2:	2200      	movs	r2, #0
 80033a4:	701a      	strb	r2, [r3, #0]
}
 80033a6:	bf00      	nop
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr
 80033b0:	20000019 	.word	0x20000019

080033b4 <DMX512_StopTask>:

/**
 * @brief Stops DMX transmission.
 */
void DMX512_StopTask(void) {
 80033b4:	b480      	push	{r7}
 80033b6:	af00      	add	r7, sp, #0
    DMX_Stop = 1; // Disable transmission
 80033b8:	4b03      	ldr	r3, [pc, #12]	@ (80033c8 <DMX512_StopTask+0x14>)
 80033ba:	2201      	movs	r2, #1
 80033bc:	701a      	strb	r2, [r3, #0]
}
 80033be:	bf00      	nop
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr
 80033c8:	20000019 	.word	0x20000019

080033cc <DMX512_ResetBuffer>:

/**
 * @brief Reset the DMX buffer to 0 (Start Code + 512 channels).
 */
void DMX512_ResetBuffer(void) {
 80033cc:	b580      	push	{r7, lr}
 80033ce:	af00      	add	r7, sp, #0
    memset(dmx_buffer, 0, DMX_BUFFER_SIZE); // Clear buffer
 80033d0:	f240 2201 	movw	r2, #513	@ 0x201
 80033d4:	2100      	movs	r1, #0
 80033d6:	4802      	ldr	r0, [pc, #8]	@ (80033e0 <DMX512_ResetBuffer+0x14>)
 80033d8:	f00b f930 	bl	800e63c <memset>
}
 80033dc:	bf00      	nop
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	2000093c 	.word	0x2000093c

080033e4 <DMX512_GetBuffer>:
}

/**
 * @brief Provides a read-only pointer to the entire DMX buffer.
 */
const uint8_t* DMX512_GetBuffer(void) {
 80033e4:	b480      	push	{r7}
 80033e6:	af00      	add	r7, sp, #0
    return dmx_buffer; // Return buffer pointer
 80033e8:	4b02      	ldr	r3, [pc, #8]	@ (80033f4 <DMX512_GetBuffer+0x10>)
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr
 80033f4:	2000093c 	.word	0x2000093c

080033f8 <DMX_TIM_PeriodElapsedCallback>:

/**
 * @brief Timer interrupt callback to mark microsecond delay completion
 */
void DMX_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
    if (htim == dmx_htim) {
 8003400:	4b09      	ldr	r3, [pc, #36]	@ (8003428 <DMX_TIM_PeriodElapsedCallback+0x30>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	429a      	cmp	r2, r3
 8003408:	d10a      	bne.n	8003420 <DMX_TIM_PeriodElapsedCallback+0x28>
        delay_complete = 1; // Mark delay as complete
 800340a:	4b08      	ldr	r3, [pc, #32]	@ (800342c <DMX_TIM_PeriodElapsedCallback+0x34>)
 800340c:	2201      	movs	r2, #1
 800340e:	701a      	strb	r2, [r3, #0]
        HAL_TIM_Base_Stop_IT(htim); // Stop timer
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f004 f8cb 	bl	80075ac <HAL_TIM_Base_Stop_IT>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE); // Clear interrupt flag
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f06f 0201 	mvn.w	r2, #1
 800341e:	611a      	str	r2, [r3, #16]
    }
}
 8003420:	bf00      	nop
 8003422:	3708      	adds	r7, #8
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}
 8003428:	20000938 	.word	0x20000938
 800342c:	20000b3d 	.word	0x20000b3d

08003430 <DMX_UART_TxCpltCallback>:

/**
 * @brief UART transmission complete callback
 */
void DMX_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8003430:	b480      	push	{r7}
 8003432:	b083      	sub	sp, #12
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
    if (huart == dmx_huart) {
 8003438:	4b06      	ldr	r3, [pc, #24]	@ (8003454 <DMX_UART_TxCpltCallback+0x24>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	429a      	cmp	r2, r3
 8003440:	d102      	bne.n	8003448 <DMX_UART_TxCpltCallback+0x18>
        dma_transfer_complete = 1; // Mark DMA as complete
 8003442:	4b05      	ldr	r3, [pc, #20]	@ (8003458 <DMX_UART_TxCpltCallback+0x28>)
 8003444:	2201      	movs	r2, #1
 8003446:	701a      	strb	r2, [r3, #0]
        // DMX_DISABLE_TX(); // Optional: Disable transmitter after transmission
    }
}
 8003448:	bf00      	nop
 800344a:	370c      	adds	r7, #12
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr
 8003454:	20000934 	.word	0x20000934
 8003458:	20000018 	.word	0x20000018

0800345c <NRF24_Init>:
static void NRF24_SPI_Error(void);
static void NRF24_SPI_Init(void);


// Initialization
uint8_t NRF24_Init(SPI_HandleTypeDef *hspi) {
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
	uint8_t result, i;

	// SPI handle link
	hspi_nrf = hspi;
 8003464:	4a14      	ldr	r2, [pc, #80]	@ (80034b8 <NRF24_Init+0x5c>)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6013      	str	r3, [r2, #0]

	NRF24_SPI_Init();
 800346a:	f000 fb0d 	bl	8003a88 <NRF24_SPI_Init>

	// Initialize RX flag variables
	for (i=0; i<NRF24_NUM_PIPES; i++) {
 800346e:	2300      	movs	r3, #0
 8003470:	73fb      	strb	r3, [r7, #15]
 8003472:	e006      	b.n	8003482 <NRF24_Init+0x26>
		NRF24_isRecivedData[i] = RESET; // No received data at start
 8003474:	7bfb      	ldrb	r3, [r7, #15]
 8003476:	4a11      	ldr	r2, [pc, #68]	@ (80034bc <NRF24_Init+0x60>)
 8003478:	2100      	movs	r1, #0
 800347a:	54d1      	strb	r1, [r2, r3]
	for (i=0; i<NRF24_NUM_PIPES; i++) {
 800347c:	7bfb      	ldrb	r3, [r7, #15]
 800347e:	3301      	adds	r3, #1
 8003480:	73fb      	strb	r3, [r7, #15]
 8003482:	7bfb      	ldrb	r3, [r7, #15]
 8003484:	2b05      	cmp	r3, #5
 8003486:	d9f5      	bls.n	8003474 <NRF24_Init+0x18>
	}

	// Default Initial Mode
	NRF24_currentMode = NRF24_MODE_POWERDOWN;
 8003488:	4b0d      	ldr	r3, [pc, #52]	@ (80034c0 <NRF24_Init+0x64>)
 800348a:	2203      	movs	r2, #3
 800348c:	701a      	strb	r2, [r3, #0]

	// Save options for configuration register
	NRF24_confOptions = NRF24_CONFIG_OPT;
 800348e:	4b0d      	ldr	r3, [pc, #52]	@ (80034c4 <NRF24_Init+0x68>)
 8003490:	2238      	movs	r2, #56	@ 0x38
 8003492:	701a      	strb	r2, [r3, #0]
#ifndef NRF24_RX_IRQ_MODE
	NRF24_confOptions |= (1<<MASK_RX_DR); // Disable RX IRQ Generation
#endif

	// Chip Not active: CE Low
	NRF24_CE(0);
 8003494:	2200      	movs	r2, #0
 8003496:	2104      	movs	r1, #4
 8003498:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800349c:	f001 faf8 	bl	8004a90 <HAL_GPIO_WritePin>

	// Time for assure the module is internally initialized
	HAL_Delay(100);
 80034a0:	2064      	movs	r0, #100	@ 0x64
 80034a2:	f7fd fdeb 	bl	800107c <HAL_Delay>

	// nRF24L01 Configuration
	result = NRF24_Config();
 80034a6:	f000 f80f 	bl	80034c8 <NRF24_Config>
 80034aa:	4603      	mov	r3, r0
 80034ac:	73bb      	strb	r3, [r7, #14]

	return result;
 80034ae:	7bbb      	ldrb	r3, [r7, #14]

}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3710      	adds	r7, #16
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	20000b44 	.word	0x20000b44
 80034bc:	20000c08 	.word	0x20000c08
 80034c0:	20000c0e 	.word	0x20000c0e
 80034c4:	20000c15 	.word	0x20000c15

080034c8 <NRF24_Config>:

// General NRF24L01 Configuration
// Sets the main registers in the NRF24 module and powers the module in receiving mode
uint8_t NRF24_Config(void) {
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
	uint8_t ch;

	NRF24_Mode(NRF24_MODE_STANDBYI);
 80034ce:	2002      	movs	r0, #2
 80034d0:	f000 f848 	bl	8003564 <NRF24_Mode>

	// Disable all RX pipes (configure it by specific function)
	NRF24_WriteCMD(CMD_W_REG | REG_EN_RXADDR, 0x00); // PIPE0-5 PRX=OFF
 80034d4:	2100      	movs	r1, #0
 80034d6:	2022      	movs	r0, #34	@ 0x22
 80034d8:	f000 f9f2 	bl	80038c0 <NRF24_WriteCMD>
	NRF24_WriteCMD(CMD_W_REG | REG_EN_AA, 0x00);     // Disable PIPE0-5 AutoACK=0
 80034dc:	2100      	movs	r1, #0
 80034de:	2021      	movs	r0, #33	@ 0x21
 80034e0:	f000 f9ee 	bl	80038c0 <NRF24_WriteCMD>

	// General configuration
	NRF24_WriteCMD(CMD_W_REG | REG_SETUP_AW, (NRF24_ADR_WIDTH-2));			// TX/RX address size = 0x03 (0b11) = 5 bytes (have to subtract 2).
 80034e4:	2103      	movs	r1, #3
 80034e6:	2023      	movs	r0, #35	@ 0x23
 80034e8:	f000 f9ea 	bl	80038c0 <NRF24_WriteCMD>
	NRF24_WriteCMD(CMD_W_REG | REG_RF_CH, NRF24_CH);    	            	// Select the RF frequency = 2400+40 Mhz.
 80034ec:	2128      	movs	r1, #40	@ 0x28
 80034ee:	2025      	movs	r0, #37	@ 0x25
 80034f0:	f000 f9e6 	bl	80038c0 <NRF24_WriteCMD>
	NRF24_WriteCMD(CMD_W_REG | REG_RF_SETUP, 0x02 /*0x26*/);    			// 0x26: 250kBps (bit 3 off and 5 on), TX max PWR = 0 dBm (bit 1 and 2 on), LNA (Low Noise Amplifier) Off (bit 0 off)
 80034f4:	2102      	movs	r1, #2
 80034f6:	2026      	movs	r0, #38	@ 0x26
 80034f8:	f000 f9e2 	bl	80038c0 <NRF24_WriteCMD>
																			// The LNA gain makes it possible to reduce the current consumption in RX
																			// mode with 0.8mA at the cost of 1.5dB reduction in receiver sensitivity.
	NRF24_WriteCMD(CMD_W_REG | REG_SETUP_RETR, 0x10 | NRF24_NUM_RETRANS);	// Time between retransmissions = 500us, Max. retransmission = 15 times
 80034fc:	211f      	movs	r1, #31
 80034fe:	2024      	movs	r0, #36	@ 0x24
 8003500:	f000 f9de 	bl	80038c0 <NRF24_WriteCMD>


	// Check if SPI is working fine
	ch = NRF24_ReadCMD(CMD_R_REG | REG_RF_CH);
 8003504:	2005      	movs	r0, #5
 8003506:	f000 f9fe 	bl	8003906 <NRF24_ReadCMD>
 800350a:	4603      	mov	r3, r0
 800350c:	71fb      	strb	r3, [r7, #7]
	if (ch != NRF24_CH) {
 800350e:	79fb      	ldrb	r3, [r7, #7]
 8003510:	2b28      	cmp	r3, #40	@ 0x28
 8003512:	d001      	beq.n	8003518 <NRF24_Config+0x50>
		return NRF24_ERROR;
 8003514:	2302      	movs	r3, #2
 8003516:	e015      	b.n	8003544 <NRF24_Config+0x7c>
	}

	// Clear the FIFO buffers and flags
	NRF24_WriteByte(CMD_FLUSH_TX); // This command doesn't need a data byte
 8003518:	20e1      	movs	r0, #225	@ 0xe1
 800351a:	f000 fa8d 	bl	8003a38 <NRF24_WriteByte>
	NRF24_WriteByte(CMD_FLUSH_RX); // This command doesn't need a data byte
 800351e:	20e2      	movs	r0, #226	@ 0xe2
 8003520:	f000 fa8a 	bl	8003a38 <NRF24_WriteByte>

	// IRQ flag clean
	NRF24_WriteCMD(CMD_W_REG | REG_STATUS, (1<<RX_DR));
 8003524:	2140      	movs	r1, #64	@ 0x40
 8003526:	2027      	movs	r0, #39	@ 0x27
 8003528:	f000 f9ca 	bl	80038c0 <NRF24_WriteCMD>
	NRF24_WriteCMD(CMD_W_REG | REG_STATUS, (1<<TX_DS));
 800352c:	2120      	movs	r1, #32
 800352e:	2027      	movs	r0, #39	@ 0x27
 8003530:	f000 f9c6 	bl	80038c0 <NRF24_WriteCMD>
	NRF24_WriteCMD(CMD_W_REG | REG_STATUS, (1<<MAX_RT));
 8003534:	2110      	movs	r1, #16
 8003536:	2027      	movs	r0, #39	@ 0x27
 8003538:	f000 f9c2 	bl	80038c0 <NRF24_WriteCMD>


	// Enable Chip => Ready to receive data
	NRF24_Mode(NRF24_MODE_RX);
 800353c:	2000      	movs	r0, #0
 800353e:	f000 f811 	bl	8003564 <NRF24_Mode>

	return NRF24_SUCCESS;
 8003542:	2300      	movs	r3, #0
}
 8003544:	4618      	mov	r0, r3
 8003546:	3708      	adds	r7, #8
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <NRF24_GetMode>:

	return NRF24_SUCCESS;
}


NR24Mode_TypeDef NRF24_GetMode(void) {
 800354c:	b480      	push	{r7}
 800354e:	af00      	add	r7, sp, #0
	return NRF24_currentMode;
 8003550:	4b03      	ldr	r3, [pc, #12]	@ (8003560 <NRF24_GetMode+0x14>)
 8003552:	781b      	ldrb	r3, [r3, #0]
}
 8003554:	4618      	mov	r0, r3
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop
 8003560:	20000c0e 	.word	0x20000c0e

08003564 <NRF24_Mode>:

void NRF24_Mode(NR24Mode_TypeDef mode) {
 8003564:	b580      	push	{r7, lr}
 8003566:	b082      	sub	sp, #8
 8003568:	af00      	add	r7, sp, #0
 800356a:	4603      	mov	r3, r0
 800356c:	71fb      	strb	r3, [r7, #7]

	if (NRF24_currentMode != mode) {
 800356e:	4b44      	ldr	r3, [pc, #272]	@ (8003680 <NRF24_Mode+0x11c>)
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	79fa      	ldrb	r2, [r7, #7]
 8003574:	429a      	cmp	r2, r3
 8003576:	d07f      	beq.n	8003678 <NRF24_Mode+0x114>

		switch (mode) {
 8003578:	79fb      	ldrb	r3, [r7, #7]
 800357a:	2b03      	cmp	r3, #3
 800357c:	d879      	bhi.n	8003672 <NRF24_Mode+0x10e>
 800357e:	a201      	add	r2, pc, #4	@ (adr r2, 8003584 <NRF24_Mode+0x20>)
 8003580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003584:	080035dd 	.word	0x080035dd
 8003588:	08003627 	.word	0x08003627
 800358c:	080035af 	.word	0x080035af
 8003590:	08003595 	.word	0x08003595

			// Power down mode
			case NRF24_MODE_POWERDOWN:
				NRF24_CE(0);
 8003594:	2200      	movs	r2, #0
 8003596:	2104      	movs	r1, #4
 8003598:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800359c:	f001 fa78 	bl	8004a90 <HAL_GPIO_WritePin>
				NRF24_WriteCMD(CMD_W_REG | REG_CONFIG, NRF24_confOptions |  (0<<PWR_UP) | (0<<PRIM_RX));
 80035a0:	4b38      	ldr	r3, [pc, #224]	@ (8003684 <NRF24_Mode+0x120>)
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	4619      	mov	r1, r3
 80035a6:	2020      	movs	r0, #32
 80035a8:	f000 f98a 	bl	80038c0 <NRF24_WriteCMD>
				break;
 80035ac:	e061      	b.n	8003672 <NRF24_Mode+0x10e>

			// Standby-I mode
			case NRF24_MODE_STANDBYI:
				NRF24_CE(0);
 80035ae:	2200      	movs	r2, #0
 80035b0:	2104      	movs	r1, #4
 80035b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80035b6:	f001 fa6b 	bl	8004a90 <HAL_GPIO_WritePin>

				if (NRF24_currentMode == NRF24_MODE_POWERDOWN){
 80035ba:	4b31      	ldr	r3, [pc, #196]	@ (8003680 <NRF24_Mode+0x11c>)
 80035bc:	781b      	ldrb	r3, [r3, #0]
 80035be:	2b03      	cmp	r3, #3
 80035c0:	d156      	bne.n	8003670 <NRF24_Mode+0x10c>
					NRF24_WriteCMD(CMD_W_REG | REG_CONFIG, NRF24_confOptions |  (1<<PWR_UP) | (0<<PRIM_RX));
 80035c2:	4b30      	ldr	r3, [pc, #192]	@ (8003684 <NRF24_Mode+0x120>)
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	f043 0302 	orr.w	r3, r3, #2
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	4619      	mov	r1, r3
 80035ce:	2020      	movs	r0, #32
 80035d0:	f000 f976 	bl	80038c0 <NRF24_WriteCMD>
					HAL_Delay(2);
 80035d4:	2002      	movs	r0, #2
 80035d6:	f7fd fd51 	bl	800107c <HAL_Delay>
				}
				break;
 80035da:	e049      	b.n	8003670 <NRF24_Mode+0x10c>

			// RX mode
			case NRF24_MODE_RX:
				if (NRF24_currentMode != NRF24_MODE_POWERDOWN && NRF24_currentMode != NRF24_MODE_STANDBYI) {
 80035dc:	4b28      	ldr	r3, [pc, #160]	@ (8003680 <NRF24_Mode+0x11c>)
 80035de:	781b      	ldrb	r3, [r3, #0]
 80035e0:	2b03      	cmp	r3, #3
 80035e2:	d009      	beq.n	80035f8 <NRF24_Mode+0x94>
 80035e4:	4b26      	ldr	r3, [pc, #152]	@ (8003680 <NRF24_Mode+0x11c>)
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	d005      	beq.n	80035f8 <NRF24_Mode+0x94>
					NRF24_CE(0);
 80035ec:	2200      	movs	r2, #0
 80035ee:	2104      	movs	r1, #4
 80035f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80035f4:	f001 fa4c 	bl	8004a90 <HAL_GPIO_WritePin>
				}

				NRF24_WriteCMD(CMD_W_REG | REG_CONFIG, NRF24_confOptions |  (1<<PWR_UP) | (1<<PRIM_RX));
 80035f8:	4b22      	ldr	r3, [pc, #136]	@ (8003684 <NRF24_Mode+0x120>)
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	f043 0303 	orr.w	r3, r3, #3
 8003600:	b2db      	uxtb	r3, r3
 8003602:	4619      	mov	r1, r3
 8003604:	2020      	movs	r0, #32
 8003606:	f000 f95b 	bl	80038c0 <NRF24_WriteCMD>

				if (NRF24_currentMode == NRF24_MODE_POWERDOWN) {
 800360a:	4b1d      	ldr	r3, [pc, #116]	@ (8003680 <NRF24_Mode+0x11c>)
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	2b03      	cmp	r3, #3
 8003610:	d102      	bne.n	8003618 <NRF24_Mode+0xb4>
					HAL_Delay(5); // Wait some time to wake up from power down
 8003612:	2005      	movs	r0, #5
 8003614:	f7fd fd32 	bl	800107c <HAL_Delay>
				}

				NRF24_CE(1);
 8003618:	2201      	movs	r2, #1
 800361a:	2104      	movs	r1, #4
 800361c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003620:	f001 fa36 	bl	8004a90 <HAL_GPIO_WritePin>
				break;
 8003624:	e025      	b.n	8003672 <NRF24_Mode+0x10e>

			// TX mode
			case NRF24_MODE_TX:

				if (NRF24_currentMode != NRF24_MODE_POWERDOWN && NRF24_currentMode != NRF24_MODE_STANDBYI) {
 8003626:	4b16      	ldr	r3, [pc, #88]	@ (8003680 <NRF24_Mode+0x11c>)
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	2b03      	cmp	r3, #3
 800362c:	d009      	beq.n	8003642 <NRF24_Mode+0xde>
 800362e:	4b14      	ldr	r3, [pc, #80]	@ (8003680 <NRF24_Mode+0x11c>)
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	2b02      	cmp	r3, #2
 8003634:	d005      	beq.n	8003642 <NRF24_Mode+0xde>
					NRF24_CE(0);
 8003636:	2200      	movs	r2, #0
 8003638:	2104      	movs	r1, #4
 800363a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800363e:	f001 fa27 	bl	8004a90 <HAL_GPIO_WritePin>
				}

				NRF24_WriteCMD(CMD_W_REG | REG_CONFIG, NRF24_confOptions |  (1<<PWR_UP) | (0<<PRIM_RX));
 8003642:	4b10      	ldr	r3, [pc, #64]	@ (8003684 <NRF24_Mode+0x120>)
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	f043 0302 	orr.w	r3, r3, #2
 800364a:	b2db      	uxtb	r3, r3
 800364c:	4619      	mov	r1, r3
 800364e:	2020      	movs	r0, #32
 8003650:	f000 f936 	bl	80038c0 <NRF24_WriteCMD>

				if (NRF24_currentMode == NRF24_MODE_POWERDOWN) {
 8003654:	4b0a      	ldr	r3, [pc, #40]	@ (8003680 <NRF24_Mode+0x11c>)
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	2b03      	cmp	r3, #3
 800365a:	d102      	bne.n	8003662 <NRF24_Mode+0xfe>
					HAL_Delay(5); // Wait some time to wake up from power down
 800365c:	2005      	movs	r0, #5
 800365e:	f7fd fd0d 	bl	800107c <HAL_Delay>
				}

				NRF24_CE(1);
 8003662:	2201      	movs	r2, #1
 8003664:	2104      	movs	r1, #4
 8003666:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800366a:	f001 fa11 	bl	8004a90 <HAL_GPIO_WritePin>
				break;
 800366e:	e000      	b.n	8003672 <NRF24_Mode+0x10e>
				break;
 8003670:	bf00      	nop

		}

		// Update the flag to new mode
		NRF24_currentMode = mode;
 8003672:	4a03      	ldr	r2, [pc, #12]	@ (8003680 <NRF24_Mode+0x11c>)
 8003674:	79fb      	ldrb	r3, [r7, #7]
 8003676:	7013      	strb	r3, [r2, #0]
	}
}
 8003678:	bf00      	nop
 800367a:	3708      	adds	r7, #8
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}
 8003680:	20000c0e 	.word	0x20000c0e
 8003684:	20000c15 	.word	0x20000c15

08003688 <NRF24_SendData>:
	NRF24_isRecivedData[pipe] = RESET;

	return NRF24_SUCCESS;
}

uint8_t NRF24_SendData(uint8_t *txAddr, uint8_t *data, uint8_t len) {
 8003688:	b580      	push	{r7, lr}
 800368a:	b088      	sub	sp, #32
 800368c:	af00      	add	r7, sp, #0
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	60b9      	str	r1, [r7, #8]
 8003692:	4613      	mov	r3, r2
 8003694:	71fb      	strb	r3, [r7, #7]
	uint8_t result, status;
	uint8_t addrP0[NRF24_ADR_WIDTH];
	uint8_t oldregAA, oldregENP;

	// 32 bytes maximum (a packet). It could be improved sending as packets as data we have.
	if (len > NRF24_PLOAD_WIDTH) {
 8003696:	79fb      	ldrb	r3, [r7, #7]
 8003698:	2b20      	cmp	r3, #32
 800369a:	d901      	bls.n	80036a0 <NRF24_SendData+0x18>
		return NRF24_ERROR;
 800369c:	2302      	movs	r3, #2
 800369e:	e087      	b.n	80037b0 <NRF24_SendData+0x128>
	}

	// Get the current Mode
	previousMode = NRF24_GetMode();
 80036a0:	f7ff ff54 	bl	800354c <NRF24_GetMode>
 80036a4:	4603      	mov	r3, r0
 80036a6:	767b      	strb	r3, [r7, #25]

	// Standby-I Mode
	NRF24_Mode(NRF24_MODE_STANDBYI);
 80036a8:	2002      	movs	r0, #2
 80036aa:	f7ff ff5b 	bl	8003564 <NRF24_Mode>

	// Set the TX address if different from previous
	if (memcmp(txAddr, NRF24_lastAddressTX, NRF24_ADR_WIDTH) != 0) {
 80036ae:	2205      	movs	r2, #5
 80036b0:	4941      	ldr	r1, [pc, #260]	@ (80037b8 <NRF24_SendData+0x130>)
 80036b2:	68f8      	ldr	r0, [r7, #12]
 80036b4:	f00a ffb2 	bl	800e61c <memcmp>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d00a      	beq.n	80036d4 <NRF24_SendData+0x4c>

		// Stores the last TX address
		memcpy(NRF24_lastAddressTX, txAddr,NRF24_ADR_WIDTH);
 80036be:	4b3e      	ldr	r3, [pc, #248]	@ (80037b8 <NRF24_SendData+0x130>)
 80036c0:	68fa      	ldr	r2, [r7, #12]
 80036c2:	6810      	ldr	r0, [r2, #0]
 80036c4:	6018      	str	r0, [r3, #0]
 80036c6:	7912      	ldrb	r2, [r2, #4]
 80036c8:	711a      	strb	r2, [r3, #4]

		// Updates the TX address
		NRF24_WriteLargeCMD(CMD_W_REG | REG_TX_ADDR, (uint8_t*)txAddr, NRF24_ADR_WIDTH);
 80036ca:	2205      	movs	r2, #5
 80036cc:	68f9      	ldr	r1, [r7, #12]
 80036ce:	2030      	movs	r0, #48	@ 0x30
 80036d0:	f000 f938 	bl	8003944 <NRF24_WriteLargeCMD>

	// Configure for receive AACK
	// For AutoACK:     pipe0 Enabled, pipe0 AACK enabled, pipe0 RX addr = TX addr

		// Enable of pipe0
		oldregENP = NRF24_ReadCMD(CMD_R_REG | REG_EN_RXADDR);
 80036d4:	2002      	movs	r0, #2
 80036d6:	f000 f916 	bl	8003906 <NRF24_ReadCMD>
 80036da:	4603      	mov	r3, r0
 80036dc:	763b      	strb	r3, [r7, #24]
		NRF24_WriteCMD(CMD_W_REG | REG_EN_RXADDR, oldregENP | (1<<ERX_P0));
 80036de:	7e3b      	ldrb	r3, [r7, #24]
 80036e0:	f043 0301 	orr.w	r3, r3, #1
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	4619      	mov	r1, r3
 80036e8:	2022      	movs	r0, #34	@ 0x22
 80036ea:	f000 f8e9 	bl	80038c0 <NRF24_WriteCMD>
		// Enable AutoACK for pipe0
//		oldregAA = NRF24_ReadCMD(CMD_R_REG | REG_EN_AA);
//		NRF24_WriteCMD(CMD_W_REG | REG_EN_AA,  oldregAA | (1<<ENAA_P0));

		// Save current pipe0 address for restore after
		NRF24_ReadLargeCMD(CMD_R_REG | REG_RX_ADDR_P0, addrP0, NRF24_ADR_WIDTH);
 80036ee:	f107 0310 	add.w	r3, r7, #16
 80036f2:	2205      	movs	r2, #5
 80036f4:	4619      	mov	r1, r3
 80036f6:	200a      	movs	r0, #10
 80036f8:	f000 f954 	bl	80039a4 <NRF24_ReadLargeCMD>

		// Set RX PIPE0 Addr = TX Addr for receive the Auto-ACK
		NRF24_WriteLargeCMD(CMD_W_REG | REG_RX_ADDR_P0, txAddr, NRF24_ADR_WIDTH);
 80036fc:	2205      	movs	r2, #5
 80036fe:	68f9      	ldr	r1, [r7, #12]
 8003700:	202a      	movs	r0, #42	@ 0x2a
 8003702:	f000 f91f 	bl	8003944 <NRF24_WriteLargeCMD>


	// Flush TX FIFO
	NRF24_WriteByte(CMD_FLUSH_TX);
 8003706:	20e1      	movs	r0, #225	@ 0xe1
 8003708:	f000 f996 	bl	8003a38 <NRF24_WriteByte>

	// Fill the TX PAYLOAD
	NRF24_WriteLargeCMD(CMD_WR_TX_PLOAD, data, NRF24_PLOAD_WIDTH);
 800370c:	2220      	movs	r2, #32
 800370e:	68b9      	ldr	r1, [r7, #8]
 8003710:	20a0      	movs	r0, #160	@ 0xa0
 8003712:	f000 f917 	bl	8003944 <NRF24_WriteLargeCMD>

	// Enable Chip => TX Mode => Start transmission
	NRF24_Mode(NRF24_MODE_TX);
 8003716:	2001      	movs	r0, #1
 8003718:	f7ff ff24 	bl	8003564 <NRF24_Mode>


	// Wait to receive the TX_DS or MAX_RT flag (without interrupt, disabled)
	timeout = NRF24_SEND_TIMEOUT;
 800371c:	f242 7310 	movw	r3, #10000	@ 0x2710
 8003720:	61fb      	str	r3, [r7, #28]
	status = NRF24_ReadStatus();
 8003722:	f000 f970 	bl	8003a06 <NRF24_ReadStatus>
 8003726:	4603      	mov	r3, r0
 8003728:	76bb      	strb	r3, [r7, #26]
	while(!(status & (1<<TX_DS)) && !(status & (1<<MAX_RT))) {
 800372a:	e008      	b.n	800373e <NRF24_SendData+0xb6>
		if((timeout--) == 0) break;
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	1e5a      	subs	r2, r3, #1
 8003730:	61fa      	str	r2, [r7, #28]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d00e      	beq.n	8003754 <NRF24_SendData+0xcc>
		status = NRF24_ReadStatus();
 8003736:	f000 f966 	bl	8003a06 <NRF24_ReadStatus>
 800373a:	4603      	mov	r3, r0
 800373c:	76bb      	strb	r3, [r7, #26]
	while(!(status & (1<<TX_DS)) && !(status & (1<<MAX_RT))) {
 800373e:	7ebb      	ldrb	r3, [r7, #26]
 8003740:	f003 0320 	and.w	r3, r3, #32
 8003744:	2b00      	cmp	r3, #0
 8003746:	d106      	bne.n	8003756 <NRF24_SendData+0xce>
 8003748:	7ebb      	ldrb	r3, [r7, #26]
 800374a:	f003 0310 	and.w	r3, r3, #16
 800374e:	2b00      	cmp	r3, #0
 8003750:	d0ec      	beq.n	800372c <NRF24_SendData+0xa4>
 8003752:	e000      	b.n	8003756 <NRF24_SendData+0xce>
		if((timeout--) == 0) break;
 8003754:	bf00      	nop
	}

	// TX Finish OK
	if(status & (1<<TX_DS)) {
 8003756:	7ebb      	ldrb	r3, [r7, #26]
 8003758:	f003 0320 	and.w	r3, r3, #32
 800375c:	2b00      	cmp	r3, #0
 800375e:	d002      	beq.n	8003766 <NRF24_SendData+0xde>
//		BSP_LED_Toggle(LED_GREEN);
		result = NRF24_SUCCESS;
 8003760:	2300      	movs	r3, #0
 8003762:	76fb      	strb	r3, [r7, #27]
 8003764:	e009      	b.n	800377a <NRF24_SendData+0xf2>

	// Not ACK received (reached maximum retransmissions)
	} else if (status & (1<<MAX_RT)) {
 8003766:	7ebb      	ldrb	r3, [r7, #26]
 8003768:	f003 0310 	and.w	r3, r3, #16
 800376c:	2b00      	cmp	r3, #0
 800376e:	d002      	beq.n	8003776 <NRF24_SendData+0xee>
//		BSP_LED_Toggle(LED_BLUE);
		result = NRF24_MAXRT;
 8003770:	2301      	movs	r3, #1
 8003772:	76fb      	strb	r3, [r7, #27]
 8003774:	e001      	b.n	800377a <NRF24_SendData+0xf2>

	// Internal protocol error (software timeout, timeout = 0)
	} else {
		result = NRF24_ERROR;
 8003776:	2302      	movs	r3, #2
 8003778:	76fb      	strb	r3, [r7, #27]
	}


	// Standby-I Mode
	NRF24_Mode(NRF24_MODE_STANDBYI);
 800377a:	2002      	movs	r0, #2
 800377c:	f7ff fef2 	bl	8003564 <NRF24_Mode>

	// Clear the flags related with TX
	NRF24_WriteCMD(CMD_W_REG | REG_STATUS, (1<<TX_DS) | (1<<MAX_RT));
 8003780:	2130      	movs	r1, #48	@ 0x30
 8003782:	2027      	movs	r0, #39	@ 0x27
 8003784:	f000 f89c 	bl	80038c0 <NRF24_WriteCMD>


	// Leaves the pipe0 RX in its previous state

		// Restore Enable/Disable of pipe0
		NRF24_WriteCMD(CMD_W_REG | REG_EN_RXADDR, oldregENP);
 8003788:	7e3b      	ldrb	r3, [r7, #24]
 800378a:	4619      	mov	r1, r3
 800378c:	2022      	movs	r0, #34	@ 0x22
 800378e:	f000 f897 	bl	80038c0 <NRF24_WriteCMD>

		// Restore AutoACK for pipe0
//		NRF24_WriteCMD(CMD_W_REG | REG_EN_AA,  oldregAA);

		// Restore RX PIPE0 Addr
		NRF24_WriteLargeCMD(CMD_W_REG | REG_RX_ADDR_P0, addrP0, NRF24_ADR_WIDTH);
 8003792:	f107 0310 	add.w	r3, r7, #16
 8003796:	2205      	movs	r2, #5
 8003798:	4619      	mov	r1, r3
 800379a:	202a      	movs	r0, #42	@ 0x2a
 800379c:	f000 f8d2 	bl	8003944 <NRF24_WriteLargeCMD>


	// Flush TX FIFO
	NRF24_WriteByte(CMD_FLUSH_TX);
 80037a0:	20e1      	movs	r0, #225	@ 0xe1
 80037a2:	f000 f949 	bl	8003a38 <NRF24_WriteByte>


	// Return previous mode;
	NRF24_Mode(previousMode);
 80037a6:	7e7b      	ldrb	r3, [r7, #25]
 80037a8:	4618      	mov	r0, r3
 80037aa:	f7ff fedb 	bl	8003564 <NRF24_Mode>


	return result;
 80037ae:	7efb      	ldrb	r3, [r7, #27]
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3720      	adds	r7, #32
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	20000c10 	.word	0x20000c10

080037bc <NRF24_CheckDataRX>:
 * 		1) read payload through SPI,
 * 		2) clear RX_DR IRQ,
 * 		3) read FIFO_STATUS to check if there are more payloads available in RX FIFO,
 * 		4) if there are more data in RX FIFO, repeat from 1
*/
void NRF24_CheckDataRX(void) {
 80037bc:	b5b0      	push	{r4, r5, r7, lr}
 80037be:	b08a      	sub	sp, #40	@ 0x28
 80037c0:	af00      	add	r7, sp, #0
	uint8_t status, previousMode;
	uint8_t rxPipe;
	uint8_t rxBuffer[NRF24_PLOAD_WIDTH];

	// Read NRF24 status register
	status = NRF24_ReadStatus();
 80037c2:	f000 f920 	bl	8003a06 <NRF24_ReadStatus>
 80037c6:	4603      	mov	r3, r0
 80037c8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	// RX data received
	if(status & (1<<RX_DR)) {
 80037cc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80037d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d04c      	beq.n	8003872 <NRF24_CheckDataRX+0xb6>
//		BSP_LED_Toggle(LED_BLUE);

		// Get the current Mode
		previousMode = NRF24_GetMode();
 80037d8:	f7ff feb8 	bl	800354c <NRF24_GetMode>
 80037dc:	4603      	mov	r3, r0
 80037de:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

		// Standby-I Mode
		NRF24_Mode(NRF24_MODE_STANDBYI);
 80037e2:	2002      	movs	r0, #2
 80037e4:	f7ff febe 	bl	8003564 <NRF24_Mode>


		// Get the pipe number (bits 1 to 3 of status)
		rxPipe = (status >> 1) & 0b00000111;
 80037e8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80037ec:	085b      	lsrs	r3, r3, #1
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	f003 0307 	and.w	r3, r3, #7
 80037f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

		// Check if RX FIFO is empty
		while(rxPipe != 0x07) {
 80037f8:	e032      	b.n	8003860 <NRF24_CheckDataRX+0xa4>

			// Read RX payload
			NRF24_ReadLargeCMD(CMD_RD_RX_PLOAD, rxBuffer, NRF24_PLOAD_WIDTH);
 80037fa:	1d3b      	adds	r3, r7, #4
 80037fc:	2220      	movs	r2, #32
 80037fe:	4619      	mov	r1, r3
 8003800:	2061      	movs	r0, #97	@ 0x61
 8003802:	f000 f8cf 	bl	80039a4 <NRF24_ReadLargeCMD>


			// Copy the data to the external buffer if it is free
			if (NRF24_isRecivedData[rxPipe] == RESET) {
 8003806:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800380a:	4a1c      	ldr	r2, [pc, #112]	@ (800387c <NRF24_CheckDataRX+0xc0>)
 800380c:	5cd3      	ldrb	r3, [r2, r3]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d115      	bne.n	800383e <NRF24_CheckDataRX+0x82>
				memcpy(&NRF24_RecivData[rxPipe][0], rxBuffer, NRF24_PLOAD_WIDTH);
 8003812:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003816:	015b      	lsls	r3, r3, #5
 8003818:	4a19      	ldr	r2, [pc, #100]	@ (8003880 <NRF24_CheckDataRX+0xc4>)
 800381a:	4413      	add	r3, r2
 800381c:	461d      	mov	r5, r3
 800381e:	1d3c      	adds	r4, r7, #4
 8003820:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003822:	6028      	str	r0, [r5, #0]
 8003824:	6069      	str	r1, [r5, #4]
 8003826:	60aa      	str	r2, [r5, #8]
 8003828:	60eb      	str	r3, [r5, #12]
 800382a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800382c:	6128      	str	r0, [r5, #16]
 800382e:	6169      	str	r1, [r5, #20]
 8003830:	61aa      	str	r2, [r5, #24]
 8003832:	61eb      	str	r3, [r5, #28]
				NRF24_isRecivedData[rxPipe] = SET;
 8003834:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003838:	4a10      	ldr	r2, [pc, #64]	@ (800387c <NRF24_CheckDataRX+0xc0>)
 800383a:	2101      	movs	r1, #1
 800383c:	54d1      	strb	r1, [r2, r3]
			}


			// Clear flag  RX_DR
			NRF24_WriteCMD(CMD_W_REG | REG_STATUS, (1<<RX_DR));
 800383e:	2140      	movs	r1, #64	@ 0x40
 8003840:	2027      	movs	r0, #39	@ 0x27
 8003842:	f000 f83d 	bl	80038c0 <NRF24_WriteCMD>


			// Read the status reg and get the next pipe number (bits 1 to 3 of status)
			// If it is 0x07 the RX FIFO is empty, oterwise it has the pipe number
			status = NRF24_ReadStatus();
 8003846:	f000 f8de 	bl	8003a06 <NRF24_ReadStatus>
 800384a:	4603      	mov	r3, r0
 800384c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			rxPipe = (status >> 1) & 0b00000111;
 8003850:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003854:	085b      	lsrs	r3, r3, #1
 8003856:	b2db      	uxtb	r3, r3
 8003858:	f003 0307 	and.w	r3, r3, #7
 800385c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		while(rxPipe != 0x07) {
 8003860:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003864:	2b07      	cmp	r3, #7
 8003866:	d1c8      	bne.n	80037fa <NRF24_CheckDataRX+0x3e>
		}


		// Return previous mode;
		NRF24_Mode(previousMode);
 8003868:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800386c:	4618      	mov	r0, r3
 800386e:	f7ff fe79 	bl	8003564 <NRF24_Mode>

	}

}
 8003872:	bf00      	nop
 8003874:	3728      	adds	r7, #40	@ 0x28
 8003876:	46bd      	mov	sp, r7
 8003878:	bdb0      	pop	{r4, r5, r7, pc}
 800387a:	bf00      	nop
 800387c:	20000c08 	.word	0x20000c08
 8003880:	20000b48 	.word	0x20000b48

08003884 <NRF24_TransferByte>:
//------------------------------------------------------------------------------//
// BSP COMMUNICATION FUNCTIONS
//------------------------------------------------------------------------------//

// Clocks only one byte to target device and returns the received one
uint8_t NRF24_TransferByte(uint8_t data) {
 8003884:	b580      	push	{r7, lr}
 8003886:	b086      	sub	sp, #24
 8003888:	af02      	add	r7, sp, #8
 800388a:	4603      	mov	r3, r0
 800388c:	71fb      	strb	r3, [r7, #7]
	  uint8_t receivedbyte = 0;
 800388e:	2300      	movs	r3, #0
 8003890:	73fb      	strb	r3, [r7, #15]

	  // Send a Byte through the SPI peripheral
	  // and receives a byte at the same time (Full-Duplex)
	  if(HAL_SPI_TransmitReceive(hspi_nrf, (uint8_t*) &data, (uint8_t*) &receivedbyte, 1, NRF24_SEND_TIMEOUT) != HAL_OK) {
 8003892:	4b0a      	ldr	r3, [pc, #40]	@ (80038bc <NRF24_TransferByte+0x38>)
 8003894:	6818      	ldr	r0, [r3, #0]
 8003896:	f107 020f 	add.w	r2, r7, #15
 800389a:	1df9      	adds	r1, r7, #7
 800389c:	f242 7310 	movw	r3, #10000	@ 0x2710
 80038a0:	9300      	str	r3, [sp, #0]
 80038a2:	2301      	movs	r3, #1
 80038a4:	f003 fa59 	bl	8006d5a <HAL_SPI_TransmitReceive>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d001      	beq.n	80038b2 <NRF24_TransferByte+0x2e>
		  NRF24_SPI_Error();
 80038ae:	f000 f8dd 	bl	8003a6c <NRF24_SPI_Error>
	  }

	  return receivedbyte;
 80038b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3710      	adds	r7, #16
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	20000b44 	.word	0x20000b44

080038c0 <NRF24_WriteCMD>:

// Writes a value of a command (1 byte of cmd + 1 byte of data)
uint8_t NRF24_WriteCMD(uint8_t cmd, uint8_t value) {
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	4603      	mov	r3, r0
 80038c8:	460a      	mov	r2, r1
 80038ca:	71fb      	strb	r3, [r7, #7]
 80038cc:	4613      	mov	r3, r2
 80038ce:	71bb      	strb	r3, [r7, #6]
	uint8_t status;
	NRF24_CSN(0);
 80038d0:	2200      	movs	r2, #0
 80038d2:	2108      	movs	r1, #8
 80038d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80038d8:	f001 f8da 	bl	8004a90 <HAL_GPIO_WritePin>
	status = NRF24_TransferByte(cmd); // (The first byte returns always the value of the STATUS register)
 80038dc:	79fb      	ldrb	r3, [r7, #7]
 80038de:	4618      	mov	r0, r3
 80038e0:	f7ff ffd0 	bl	8003884 <NRF24_TransferByte>
 80038e4:	4603      	mov	r3, r0
 80038e6:	73fb      	strb	r3, [r7, #15]
	NRF24_TransferByte(value);
 80038e8:	79bb      	ldrb	r3, [r7, #6]
 80038ea:	4618      	mov	r0, r3
 80038ec:	f7ff ffca 	bl	8003884 <NRF24_TransferByte>
	NRF24_CSN(1);
 80038f0:	2201      	movs	r2, #1
 80038f2:	2108      	movs	r1, #8
 80038f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80038f8:	f001 f8ca 	bl	8004a90 <HAL_GPIO_WritePin>
	return status;
 80038fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3710      	adds	r7, #16
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}

08003906 <NRF24_ReadCMD>:

// Reads a value of a command (1 byte of cmd + 1 byte of data)
uint8_t NRF24_ReadCMD(uint8_t cmd) {
 8003906:	b580      	push	{r7, lr}
 8003908:	b084      	sub	sp, #16
 800390a:	af00      	add	r7, sp, #0
 800390c:	4603      	mov	r3, r0
 800390e:	71fb      	strb	r3, [r7, #7]
	uint8_t value;
	NRF24_CSN(0);
 8003910:	2200      	movs	r2, #0
 8003912:	2108      	movs	r1, #8
 8003914:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003918:	f001 f8ba 	bl	8004a90 <HAL_GPIO_WritePin>
	NRF24_TransferByte(cmd);
 800391c:	79fb      	ldrb	r3, [r7, #7]
 800391e:	4618      	mov	r0, r3
 8003920:	f7ff ffb0 	bl	8003884 <NRF24_TransferByte>
	value=NRF24_TransferByte(0xFF);
 8003924:	20ff      	movs	r0, #255	@ 0xff
 8003926:	f7ff ffad 	bl	8003884 <NRF24_TransferByte>
 800392a:	4603      	mov	r3, r0
 800392c:	73fb      	strb	r3, [r7, #15]
	NRF24_CSN(1);
 800392e:	2201      	movs	r2, #1
 8003930:	2108      	movs	r1, #8
 8003932:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003936:	f001 f8ab 	bl	8004a90 <HAL_GPIO_WritePin>
	return value;
 800393a:	7bfb      	ldrb	r3, [r7, #15]
}
 800393c:	4618      	mov	r0, r3
 800393e:	3710      	adds	r7, #16
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}

08003944 <NRF24_WriteLargeCMD>:

// Writes an array of values of a command (1 byte of cmd + n bytes of data)
uint8_t NRF24_WriteLargeCMD(uint8_t cmd, uint8_t *pBuf, uint8_t bytes) {
 8003944:	b580      	push	{r7, lr}
 8003946:	b084      	sub	sp, #16
 8003948:	af00      	add	r7, sp, #0
 800394a:	4603      	mov	r3, r0
 800394c:	6039      	str	r1, [r7, #0]
 800394e:	71fb      	strb	r3, [r7, #7]
 8003950:	4613      	mov	r3, r2
 8003952:	71bb      	strb	r3, [r7, #6]
	uint8_t status,byte_ctr;
	NRF24_CSN(0);
 8003954:	2200      	movs	r2, #0
 8003956:	2108      	movs	r1, #8
 8003958:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800395c:	f001 f898 	bl	8004a90 <HAL_GPIO_WritePin>
	status = NRF24_TransferByte(cmd); // (The first byte returns always the value of the STATUS register)
 8003960:	79fb      	ldrb	r3, [r7, #7]
 8003962:	4618      	mov	r0, r3
 8003964:	f7ff ff8e 	bl	8003884 <NRF24_TransferByte>
 8003968:	4603      	mov	r3, r0
 800396a:	73bb      	strb	r3, [r7, #14]
	for(byte_ctr=0;byte_ctr<bytes;byte_ctr++)
 800396c:	2300      	movs	r3, #0
 800396e:	73fb      	strb	r3, [r7, #15]
 8003970:	e009      	b.n	8003986 <NRF24_WriteLargeCMD+0x42>
		NRF24_TransferByte(*pBuf++);
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	1c5a      	adds	r2, r3, #1
 8003976:	603a      	str	r2, [r7, #0]
 8003978:	781b      	ldrb	r3, [r3, #0]
 800397a:	4618      	mov	r0, r3
 800397c:	f7ff ff82 	bl	8003884 <NRF24_TransferByte>
	for(byte_ctr=0;byte_ctr<bytes;byte_ctr++)
 8003980:	7bfb      	ldrb	r3, [r7, #15]
 8003982:	3301      	adds	r3, #1
 8003984:	73fb      	strb	r3, [r7, #15]
 8003986:	7bfa      	ldrb	r2, [r7, #15]
 8003988:	79bb      	ldrb	r3, [r7, #6]
 800398a:	429a      	cmp	r2, r3
 800398c:	d3f1      	bcc.n	8003972 <NRF24_WriteLargeCMD+0x2e>
	NRF24_CSN(1);
 800398e:	2201      	movs	r2, #1
 8003990:	2108      	movs	r1, #8
 8003992:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003996:	f001 f87b 	bl	8004a90 <HAL_GPIO_WritePin>
	return(status);
 800399a:	7bbb      	ldrb	r3, [r7, #14]
}
 800399c:	4618      	mov	r0, r3
 800399e:	3710      	adds	r7, #16
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <NRF24_ReadLargeCMD>:

// Reads an array of values of a command (1 byte of cmd + n bytes of data)
uint8_t NRF24_ReadLargeCMD(uint8_t cmd, uint8_t *pBuf, uint8_t bytes) {
 80039a4:	b590      	push	{r4, r7, lr}
 80039a6:	b085      	sub	sp, #20
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	4603      	mov	r3, r0
 80039ac:	6039      	str	r1, [r7, #0]
 80039ae:	71fb      	strb	r3, [r7, #7]
 80039b0:	4613      	mov	r3, r2
 80039b2:	71bb      	strb	r3, [r7, #6]
	uint8_t status, byte_ctr;
	NRF24_CSN(0);
 80039b4:	2200      	movs	r2, #0
 80039b6:	2108      	movs	r1, #8
 80039b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80039bc:	f001 f868 	bl	8004a90 <HAL_GPIO_WritePin>
	status = NRF24_TransferByte(cmd); // El primer byte retorna per defecte el valor del reg. STATUS
 80039c0:	79fb      	ldrb	r3, [r7, #7]
 80039c2:	4618      	mov	r0, r3
 80039c4:	f7ff ff5e 	bl	8003884 <NRF24_TransferByte>
 80039c8:	4603      	mov	r3, r0
 80039ca:	73bb      	strb	r3, [r7, #14]
	for(byte_ctr=0; byte_ctr<bytes; byte_ctr++)
 80039cc:	2300      	movs	r3, #0
 80039ce:	73fb      	strb	r3, [r7, #15]
 80039d0:	e00a      	b.n	80039e8 <NRF24_ReadLargeCMD+0x44>
		pBuf[byte_ctr] = NRF24_TransferByte(0);
 80039d2:	7bfb      	ldrb	r3, [r7, #15]
 80039d4:	683a      	ldr	r2, [r7, #0]
 80039d6:	18d4      	adds	r4, r2, r3
 80039d8:	2000      	movs	r0, #0
 80039da:	f7ff ff53 	bl	8003884 <NRF24_TransferByte>
 80039de:	4603      	mov	r3, r0
 80039e0:	7023      	strb	r3, [r4, #0]
	for(byte_ctr=0; byte_ctr<bytes; byte_ctr++)
 80039e2:	7bfb      	ldrb	r3, [r7, #15]
 80039e4:	3301      	adds	r3, #1
 80039e6:	73fb      	strb	r3, [r7, #15]
 80039e8:	7bfa      	ldrb	r2, [r7, #15]
 80039ea:	79bb      	ldrb	r3, [r7, #6]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d3f0      	bcc.n	80039d2 <NRF24_ReadLargeCMD+0x2e>
	NRF24_CSN(1);
 80039f0:	2201      	movs	r2, #1
 80039f2:	2108      	movs	r1, #8
 80039f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80039f8:	f001 f84a 	bl	8004a90 <HAL_GPIO_WritePin>
	return(status);
 80039fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3714      	adds	r7, #20
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd90      	pop	{r4, r7, pc}

08003a06 <NRF24_ReadStatus>:

// Sends only one byte (no command = 0xFF) and returns the STATUS register value
uint8_t NRF24_ReadStatus(void) {
 8003a06:	b580      	push	{r7, lr}
 8003a08:	b082      	sub	sp, #8
 8003a0a:	af00      	add	r7, sp, #0
	uint8_t status;
	NRF24_CSN(0);
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	2108      	movs	r1, #8
 8003a10:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003a14:	f001 f83c 	bl	8004a90 <HAL_GPIO_WritePin>
	status = NRF24_TransferByte(0xFF);
 8003a18:	20ff      	movs	r0, #255	@ 0xff
 8003a1a:	f7ff ff33 	bl	8003884 <NRF24_TransferByte>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	71fb      	strb	r3, [r7, #7]
	NRF24_CSN(1);
 8003a22:	2201      	movs	r2, #1
 8003a24:	2108      	movs	r1, #8
 8003a26:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003a2a:	f001 f831 	bl	8004a90 <HAL_GPIO_WritePin>
	return(status);
 8003a2e:	79fb      	ldrb	r3, [r7, #7]
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3708      	adds	r7, #8
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}

08003a38 <NRF24_WriteByte>:


// Sends only one byte by SPI
void NRF24_WriteByte(uint8_t value) {
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b082      	sub	sp, #8
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	4603      	mov	r3, r0
 8003a40:	71fb      	strb	r3, [r7, #7]
	NRF24_CSN(0);
 8003a42:	2200      	movs	r2, #0
 8003a44:	2108      	movs	r1, #8
 8003a46:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003a4a:	f001 f821 	bl	8004a90 <HAL_GPIO_WritePin>
	NRF24_TransferByte(value);
 8003a4e:	79fb      	ldrb	r3, [r7, #7]
 8003a50:	4618      	mov	r0, r3
 8003a52:	f7ff ff17 	bl	8003884 <NRF24_TransferByte>
	NRF24_CSN(1);
 8003a56:	2201      	movs	r2, #1
 8003a58:	2108      	movs	r1, #8
 8003a5a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003a5e:	f001 f817 	bl	8004a90 <HAL_GPIO_WritePin>
}
 8003a62:	bf00      	nop
 8003a64:	3708      	adds	r7, #8
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
	...

08003a6c <NRF24_SPI_Error>:


// SPI Error treatment function.
static void NRF24_SPI_Error(void) {
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	af00      	add	r7, sp, #0
	// De-initialize the SPI communication bus
	HAL_SPI_DeInit(hspi_nrf);
 8003a70:	4b04      	ldr	r3, [pc, #16]	@ (8003a84 <NRF24_SPI_Error+0x18>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4618      	mov	r0, r3
 8003a76:	f003 f948 	bl	8006d0a <HAL_SPI_DeInit>

	// Re-Initialize the SPI communication bus
	NRF24_SPI_Init();
 8003a7a:	f000 f805 	bl	8003a88 <NRF24_SPI_Init>
}
 8003a7e:	bf00      	nop
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	20000b44 	.word	0x20000b44

08003a88 <NRF24_SPI_Init>:


// SPI re-initialization after bus error
static void NRF24_SPI_Init(void) {
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	af00      	add	r7, sp, #0
	//if(HAL_SPI_GetState(hspi_nrf) == HAL_SPI_STATE_RESET) {
		// SPI configuration
		hspi_nrf->Init.Mode = SPI_MODE_MASTER;
 8003a8c:	4b1a      	ldr	r3, [pc, #104]	@ (8003af8 <NRF24_SPI_Init+0x70>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003a94:	605a      	str	r2, [r3, #4]
		hspi_nrf->Init.Direction = SPI_DIRECTION_2LINES;
 8003a96:	4b18      	ldr	r3, [pc, #96]	@ (8003af8 <NRF24_SPI_Init+0x70>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	609a      	str	r2, [r3, #8]
		hspi_nrf->Init.DataSize = SPI_DATASIZE_8BIT;
 8003a9e:	4b16      	ldr	r3, [pc, #88]	@ (8003af8 <NRF24_SPI_Init+0x70>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003aa6:	60da      	str	r2, [r3, #12]
		hspi_nrf->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003aa8:	4b13      	ldr	r3, [pc, #76]	@ (8003af8 <NRF24_SPI_Init+0x70>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2200      	movs	r2, #0
 8003aae:	611a      	str	r2, [r3, #16]
		hspi_nrf->Init.CLKPhase = SPI_PHASE_1EDGE;
 8003ab0:	4b11      	ldr	r3, [pc, #68]	@ (8003af8 <NRF24_SPI_Init+0x70>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	615a      	str	r2, [r3, #20]
		hspi_nrf->Init.NSS = SPI_NSS_SOFT;
 8003ab8:	4b0f      	ldr	r3, [pc, #60]	@ (8003af8 <NRF24_SPI_Init+0x70>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ac0:	619a      	str	r2, [r3, #24]
		hspi_nrf->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003ac2:	4b0d      	ldr	r3, [pc, #52]	@ (8003af8 <NRF24_SPI_Init+0x70>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	2218      	movs	r2, #24
 8003ac8:	61da      	str	r2, [r3, #28]
		hspi_nrf->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003aca:	4b0b      	ldr	r3, [pc, #44]	@ (8003af8 <NRF24_SPI_Init+0x70>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	621a      	str	r2, [r3, #32]
		hspi_nrf->Init.TIMode = SPI_TIMODE_DISABLE;
 8003ad2:	4b09      	ldr	r3, [pc, #36]	@ (8003af8 <NRF24_SPI_Init+0x70>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	625a      	str	r2, [r3, #36]	@ 0x24
		hspi_nrf->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ada:	4b07      	ldr	r3, [pc, #28]	@ (8003af8 <NRF24_SPI_Init+0x70>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	629a      	str	r2, [r3, #40]	@ 0x28
		hspi_nrf->Init.CRCPolynomial = 10;
 8003ae2:	4b05      	ldr	r3, [pc, #20]	@ (8003af8 <NRF24_SPI_Init+0x70>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	220a      	movs	r2, #10
 8003ae8:	62da      	str	r2, [r3, #44]	@ 0x2c
		HAL_SPI_Init(hspi_nrf);
 8003aea:	4b03      	ldr	r3, [pc, #12]	@ (8003af8 <NRF24_SPI_Init+0x70>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4618      	mov	r0, r3
 8003af0:	f003 f868 	bl	8006bc4 <HAL_SPI_Init>
	//}
}
 8003af4:	bf00      	nop
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	20000b44 	.word	0x20000b44

08003afc <NRF24_IRQ_Callback>:
//------------------------------------------------------------------------------//
//------------------------------------------------------------------------------//

// Interrupt handler
// This function handles EXTI interrupt request.
void NRF24_IRQ_Callback(void) {
 8003afc:	b580      	push	{r7, lr}
 8003afe:	af00      	add	r7, sp, #0
//	BSP_LED_Toggle(LED_RED);

#ifdef NRF24_RX_IRQ_MODE
	NRF24_CheckDataRX();
 8003b00:	f7ff fe5c 	bl	80037bc <NRF24_CheckDataRX>
#endif

}
 8003b04:	bf00      	nop
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b12:	4b0c      	ldr	r3, [pc, #48]	@ (8003b44 <HAL_Init+0x3c>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a0b      	ldr	r2, [pc, #44]	@ (8003b44 <HAL_Init+0x3c>)
 8003b18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b1c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b1e:	2003      	movs	r0, #3
 8003b20:	f000 f9b4 	bl	8003e8c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003b24:	2000      	movs	r0, #0
 8003b26:	f000 f80f 	bl	8003b48 <HAL_InitTick>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d002      	beq.n	8003b36 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	71fb      	strb	r3, [r7, #7]
 8003b34:	e001      	b.n	8003b3a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003b36:	f7fe ff57 	bl	80029e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003b3a:	79fb      	ldrb	r3, [r7, #7]
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3708      	adds	r7, #8
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	58004000 	.word	0x58004000

08003b48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003b50:	2300      	movs	r3, #0
 8003b52:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8003b54:	4b17      	ldr	r3, [pc, #92]	@ (8003bb4 <HAL_InitTick+0x6c>)
 8003b56:	781b      	ldrb	r3, [r3, #0]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d024      	beq.n	8003ba6 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003b5c:	f002 f940 	bl	8005de0 <HAL_RCC_GetHCLKFreq>
 8003b60:	4602      	mov	r2, r0
 8003b62:	4b14      	ldr	r3, [pc, #80]	@ (8003bb4 <HAL_InitTick+0x6c>)
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	4619      	mov	r1, r3
 8003b68:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003b6c:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b74:	4618      	mov	r0, r3
 8003b76:	f000 f9ca 	bl	8003f0e <HAL_SYSTICK_Config>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d10f      	bne.n	8003ba0 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2b0f      	cmp	r3, #15
 8003b84:	d809      	bhi.n	8003b9a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b86:	2200      	movs	r2, #0
 8003b88:	6879      	ldr	r1, [r7, #4]
 8003b8a:	f04f 30ff 	mov.w	r0, #4294967295
 8003b8e:	f000 f988 	bl	8003ea2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003b92:	4a09      	ldr	r2, [pc, #36]	@ (8003bb8 <HAL_InitTick+0x70>)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6013      	str	r3, [r2, #0]
 8003b98:	e007      	b.n	8003baa <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	73fb      	strb	r3, [r7, #15]
 8003b9e:	e004      	b.n	8003baa <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	73fb      	strb	r3, [r7, #15]
 8003ba4:	e001      	b.n	8003baa <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3710      	adds	r7, #16
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	20000020 	.word	0x20000020
 8003bb8:	2000001c 	.word	0x2000001c

08003bbc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003bc0:	4b06      	ldr	r3, [pc, #24]	@ (8003bdc <HAL_IncTick+0x20>)
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	4b06      	ldr	r3, [pc, #24]	@ (8003be0 <HAL_IncTick+0x24>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4413      	add	r3, r2
 8003bcc:	4a04      	ldr	r2, [pc, #16]	@ (8003be0 <HAL_IncTick+0x24>)
 8003bce:	6013      	str	r3, [r2, #0]
}
 8003bd0:	bf00      	nop
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr
 8003bda:	bf00      	nop
 8003bdc:	20000020 	.word	0x20000020
 8003be0:	20000c18 	.word	0x20000c18

08003be4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003be4:	b480      	push	{r7}
 8003be6:	af00      	add	r7, sp, #0
  return uwTick;
 8003be8:	4b03      	ldr	r3, [pc, #12]	@ (8003bf8 <HAL_GetTick+0x14>)
 8003bea:	681b      	ldr	r3, [r3, #0]
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr
 8003bf6:	bf00      	nop
 8003bf8:	20000c18 	.word	0x20000c18

08003bfc <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8003c00:	4b03      	ldr	r3, [pc, #12]	@ (8003c10 <HAL_GetTickPrio+0x14>)
 8003c02:	681b      	ldr	r3, [r3, #0]
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop
 8003c10:	2000001c 	.word	0x2000001c

08003c14 <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8003c14:	b480      	push	{r7}
 8003c16:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8003c18:	4b03      	ldr	r3, [pc, #12]	@ (8003c28 <HAL_GetTickFreq+0x14>)
 8003c1a:	781b      	ldrb	r3, [r3, #0]
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr
 8003c26:	bf00      	nop
 8003c28:	20000020 	.word	0x20000020

08003c2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b085      	sub	sp, #20
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f003 0307 	and.w	r3, r3, #7
 8003c3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c3c:	4b0c      	ldr	r3, [pc, #48]	@ (8003c70 <__NVIC_SetPriorityGrouping+0x44>)
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c42:	68ba      	ldr	r2, [r7, #8]
 8003c44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003c48:	4013      	ands	r3, r2
 8003c4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c54:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003c58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c5e:	4a04      	ldr	r2, [pc, #16]	@ (8003c70 <__NVIC_SetPriorityGrouping+0x44>)
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	60d3      	str	r3, [r2, #12]
}
 8003c64:	bf00      	nop
 8003c66:	3714      	adds	r7, #20
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr
 8003c70:	e000ed00 	.word	0xe000ed00

08003c74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c74:	b480      	push	{r7}
 8003c76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c78:	4b04      	ldr	r3, [pc, #16]	@ (8003c8c <__NVIC_GetPriorityGrouping+0x18>)
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	0a1b      	lsrs	r3, r3, #8
 8003c7e:	f003 0307 	and.w	r3, r3, #7
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr
 8003c8c:	e000ed00 	.word	0xe000ed00

08003c90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	4603      	mov	r3, r0
 8003c98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	db0b      	blt.n	8003cba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ca2:	79fb      	ldrb	r3, [r7, #7]
 8003ca4:	f003 021f 	and.w	r2, r3, #31
 8003ca8:	4907      	ldr	r1, [pc, #28]	@ (8003cc8 <__NVIC_EnableIRQ+0x38>)
 8003caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cae:	095b      	lsrs	r3, r3, #5
 8003cb0:	2001      	movs	r0, #1
 8003cb2:	fa00 f202 	lsl.w	r2, r0, r2
 8003cb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003cba:	bf00      	nop
 8003cbc:	370c      	adds	r7, #12
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr
 8003cc6:	bf00      	nop
 8003cc8:	e000e100 	.word	0xe000e100

08003ccc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	db12      	blt.n	8003d04 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cde:	79fb      	ldrb	r3, [r7, #7]
 8003ce0:	f003 021f 	and.w	r2, r3, #31
 8003ce4:	490a      	ldr	r1, [pc, #40]	@ (8003d10 <__NVIC_DisableIRQ+0x44>)
 8003ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cea:	095b      	lsrs	r3, r3, #5
 8003cec:	2001      	movs	r0, #1
 8003cee:	fa00 f202 	lsl.w	r2, r0, r2
 8003cf2:	3320      	adds	r3, #32
 8003cf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003cf8:	f3bf 8f4f 	dsb	sy
}
 8003cfc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003cfe:	f3bf 8f6f 	isb	sy
}
 8003d02:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003d04:	bf00      	nop
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr
 8003d10:	e000e100 	.word	0xe000e100

08003d14 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	db0c      	blt.n	8003d40 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d26:	79fb      	ldrb	r3, [r7, #7]
 8003d28:	f003 021f 	and.w	r2, r3, #31
 8003d2c:	4907      	ldr	r1, [pc, #28]	@ (8003d4c <__NVIC_SetPendingIRQ+0x38>)
 8003d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d32:	095b      	lsrs	r3, r3, #5
 8003d34:	2001      	movs	r0, #1
 8003d36:	fa00 f202 	lsl.w	r2, r0, r2
 8003d3a:	3340      	adds	r3, #64	@ 0x40
 8003d3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003d40:	bf00      	nop
 8003d42:	370c      	adds	r7, #12
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr
 8003d4c:	e000e100 	.word	0xe000e100

08003d50 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	4603      	mov	r3, r0
 8003d58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	db0c      	blt.n	8003d7c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d62:	79fb      	ldrb	r3, [r7, #7]
 8003d64:	f003 021f 	and.w	r2, r3, #31
 8003d68:	4907      	ldr	r1, [pc, #28]	@ (8003d88 <__NVIC_ClearPendingIRQ+0x38>)
 8003d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d6e:	095b      	lsrs	r3, r3, #5
 8003d70:	2001      	movs	r0, #1
 8003d72:	fa00 f202 	lsl.w	r2, r0, r2
 8003d76:	3360      	adds	r3, #96	@ 0x60
 8003d78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003d7c:	bf00      	nop
 8003d7e:	370c      	adds	r7, #12
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr
 8003d88:	e000e100 	.word	0xe000e100

08003d8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	4603      	mov	r3, r0
 8003d94:	6039      	str	r1, [r7, #0]
 8003d96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	db0a      	blt.n	8003db6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	b2da      	uxtb	r2, r3
 8003da4:	490c      	ldr	r1, [pc, #48]	@ (8003dd8 <__NVIC_SetPriority+0x4c>)
 8003da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003daa:	0112      	lsls	r2, r2, #4
 8003dac:	b2d2      	uxtb	r2, r2
 8003dae:	440b      	add	r3, r1
 8003db0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003db4:	e00a      	b.n	8003dcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	b2da      	uxtb	r2, r3
 8003dba:	4908      	ldr	r1, [pc, #32]	@ (8003ddc <__NVIC_SetPriority+0x50>)
 8003dbc:	79fb      	ldrb	r3, [r7, #7]
 8003dbe:	f003 030f 	and.w	r3, r3, #15
 8003dc2:	3b04      	subs	r3, #4
 8003dc4:	0112      	lsls	r2, r2, #4
 8003dc6:	b2d2      	uxtb	r2, r2
 8003dc8:	440b      	add	r3, r1
 8003dca:	761a      	strb	r2, [r3, #24]
}
 8003dcc:	bf00      	nop
 8003dce:	370c      	adds	r7, #12
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr
 8003dd8:	e000e100 	.word	0xe000e100
 8003ddc:	e000ed00 	.word	0xe000ed00

08003de0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b089      	sub	sp, #36	@ 0x24
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	60b9      	str	r1, [r7, #8]
 8003dea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f003 0307 	and.w	r3, r3, #7
 8003df2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	f1c3 0307 	rsb	r3, r3, #7
 8003dfa:	2b04      	cmp	r3, #4
 8003dfc:	bf28      	it	cs
 8003dfe:	2304      	movcs	r3, #4
 8003e00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	3304      	adds	r3, #4
 8003e06:	2b06      	cmp	r3, #6
 8003e08:	d902      	bls.n	8003e10 <NVIC_EncodePriority+0x30>
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	3b03      	subs	r3, #3
 8003e0e:	e000      	b.n	8003e12 <NVIC_EncodePriority+0x32>
 8003e10:	2300      	movs	r3, #0
 8003e12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e14:	f04f 32ff 	mov.w	r2, #4294967295
 8003e18:	69bb      	ldr	r3, [r7, #24]
 8003e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1e:	43da      	mvns	r2, r3
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	401a      	ands	r2, r3
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e28:	f04f 31ff 	mov.w	r1, #4294967295
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e32:	43d9      	mvns	r1, r3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e38:	4313      	orrs	r3, r2
         );
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3724      	adds	r7, #36	@ 0x24
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr
	...

08003e48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b082      	sub	sp, #8
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	3b01      	subs	r3, #1
 8003e54:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003e58:	d301      	bcc.n	8003e5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e00f      	b.n	8003e7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e5e:	4a0a      	ldr	r2, [pc, #40]	@ (8003e88 <SysTick_Config+0x40>)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	3b01      	subs	r3, #1
 8003e64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e66:	210f      	movs	r1, #15
 8003e68:	f04f 30ff 	mov.w	r0, #4294967295
 8003e6c:	f7ff ff8e 	bl	8003d8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e70:	4b05      	ldr	r3, [pc, #20]	@ (8003e88 <SysTick_Config+0x40>)
 8003e72:	2200      	movs	r2, #0
 8003e74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e76:	4b04      	ldr	r3, [pc, #16]	@ (8003e88 <SysTick_Config+0x40>)
 8003e78:	2207      	movs	r2, #7
 8003e7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3708      	adds	r7, #8
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	e000e010 	.word	0xe000e010

08003e8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f7ff fec9 	bl	8003c2c <__NVIC_SetPriorityGrouping>
}
 8003e9a:	bf00      	nop
 8003e9c:	3708      	adds	r7, #8
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}

08003ea2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ea2:	b580      	push	{r7, lr}
 8003ea4:	b086      	sub	sp, #24
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	60b9      	str	r1, [r7, #8]
 8003eac:	607a      	str	r2, [r7, #4]
 8003eae:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003eb0:	f7ff fee0 	bl	8003c74 <__NVIC_GetPriorityGrouping>
 8003eb4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	68b9      	ldr	r1, [r7, #8]
 8003eba:	6978      	ldr	r0, [r7, #20]
 8003ebc:	f7ff ff90 	bl	8003de0 <NVIC_EncodePriority>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ec6:	4611      	mov	r1, r2
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f7ff ff5f 	bl	8003d8c <__NVIC_SetPriority>
}
 8003ece:	bf00      	nop
 8003ed0:	3718      	adds	r7, #24
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}

08003ed6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ed6:	b580      	push	{r7, lr}
 8003ed8:	b082      	sub	sp, #8
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	4603      	mov	r3, r0
 8003ede:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f7ff fed3 	bl	8003c90 <__NVIC_EnableIRQ>
}
 8003eea:	bf00      	nop
 8003eec:	3708      	adds	r7, #8
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}

08003ef2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003ef2:	b580      	push	{r7, lr}
 8003ef4:	b082      	sub	sp, #8
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	4603      	mov	r3, r0
 8003efa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f00:	4618      	mov	r0, r3
 8003f02:	f7ff fee3 	bl	8003ccc <__NVIC_DisableIRQ>
}
 8003f06:	bf00      	nop
 8003f08:	3708      	adds	r7, #8
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}

08003f0e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f0e:	b580      	push	{r7, lr}
 8003f10:	b082      	sub	sp, #8
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f7ff ff96 	bl	8003e48 <SysTick_Config>
 8003f1c:	4603      	mov	r3, r0
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3708      	adds	r7, #8
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}

08003f26 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8003f26:	b580      	push	{r7, lr}
 8003f28:	b082      	sub	sp, #8
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8003f30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f34:	4618      	mov	r0, r3
 8003f36:	f7ff feed 	bl	8003d14 <__NVIC_SetPendingIRQ>
}
 8003f3a:	bf00      	nop
 8003f3c:	3708      	adds	r7, #8
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}

08003f42 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003f42:	b580      	push	{r7, lr}
 8003f44:	b082      	sub	sp, #8
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	4603      	mov	r3, r0
 8003f4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8003f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f50:	4618      	mov	r0, r3
 8003f52:	f7ff fefd 	bl	8003d50 <__NVIC_ClearPendingIRQ>
}
 8003f56:	bf00      	nop
 8003f58:	3708      	adds	r7, #8
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
	...

08003f60 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b084      	sub	sp, #16
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d101      	bne.n	8003f72 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e08e      	b.n	8004090 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	461a      	mov	r2, r3
 8003f78:	4b47      	ldr	r3, [pc, #284]	@ (8004098 <HAL_DMA_Init+0x138>)
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d80f      	bhi.n	8003f9e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	461a      	mov	r2, r3
 8003f84:	4b45      	ldr	r3, [pc, #276]	@ (800409c <HAL_DMA_Init+0x13c>)
 8003f86:	4413      	add	r3, r2
 8003f88:	4a45      	ldr	r2, [pc, #276]	@ (80040a0 <HAL_DMA_Init+0x140>)
 8003f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f8e:	091b      	lsrs	r3, r3, #4
 8003f90:	009a      	lsls	r2, r3, #2
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a42      	ldr	r2, [pc, #264]	@ (80040a4 <HAL_DMA_Init+0x144>)
 8003f9a:	641a      	str	r2, [r3, #64]	@ 0x40
 8003f9c:	e00e      	b.n	8003fbc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	4b40      	ldr	r3, [pc, #256]	@ (80040a8 <HAL_DMA_Init+0x148>)
 8003fa6:	4413      	add	r3, r2
 8003fa8:	4a3d      	ldr	r2, [pc, #244]	@ (80040a0 <HAL_DMA_Init+0x140>)
 8003faa:	fba2 2303 	umull	r2, r3, r2, r3
 8003fae:	091b      	lsrs	r3, r3, #4
 8003fb0:	009a      	lsls	r2, r3, #2
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4a3c      	ldr	r2, [pc, #240]	@ (80040ac <HAL_DMA_Init+0x14c>)
 8003fba:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2202      	movs	r2, #2
 8003fc0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003fd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fd6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003fe0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	699b      	ldr	r3, [r3, #24]
 8003ff2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ff8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a1b      	ldr	r3, [r3, #32]
 8003ffe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	4313      	orrs	r3, r2
 8004004:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	68fa      	ldr	r2, [r7, #12]
 800400c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f000 fa74 	bl	80044fc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800401c:	d102      	bne.n	8004024 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	685a      	ldr	r2, [r3, #4]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800402c:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8004030:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800403a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d010      	beq.n	8004066 <HAL_DMA_Init+0x106>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	2b04      	cmp	r3, #4
 800404a:	d80c      	bhi.n	8004066 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f000 fa93 	bl	8004578 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004056:	2200      	movs	r2, #0
 8004058:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004062:	605a      	str	r2, [r3, #4]
 8004064:	e008      	b.n	8004078 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2201      	movs	r2, #1
 8004082:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800408e:	2300      	movs	r3, #0
}
 8004090:	4618      	mov	r0, r3
 8004092:	3710      	adds	r7, #16
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}
 8004098:	40020407 	.word	0x40020407
 800409c:	bffdfff8 	.word	0xbffdfff8
 80040a0:	cccccccd 	.word	0xcccccccd
 80040a4:	40020000 	.word	0x40020000
 80040a8:	bffdfbf8 	.word	0xbffdfbf8
 80040ac:	40020400 	.word	0x40020400

080040b0 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b086      	sub	sp, #24
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	60b9      	str	r1, [r7, #8]
 80040ba:	607a      	str	r2, [r7, #4]
 80040bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040be:	2300      	movs	r3, #0
 80040c0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d101      	bne.n	80040d0 <HAL_DMA_Start_IT+0x20>
 80040cc:	2302      	movs	r3, #2
 80040ce:	e066      	b.n	800419e <HAL_DMA_Start_IT+0xee>
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d155      	bne.n	8004190 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2202      	movs	r2, #2
 80040e8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2200      	movs	r2, #0
 80040f0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f022 0201 	bic.w	r2, r2, #1
 8004100:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	68b9      	ldr	r1, [r7, #8]
 8004108:	68f8      	ldr	r0, [r7, #12]
 800410a:	f000 f9b9 	bl	8004480 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004112:	2b00      	cmp	r3, #0
 8004114:	d008      	beq.n	8004128 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f042 020e 	orr.w	r2, r2, #14
 8004124:	601a      	str	r2, [r3, #0]
 8004126:	e00f      	b.n	8004148 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f022 0204 	bic.w	r2, r2, #4
 8004136:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f042 020a 	orr.w	r2, r2, #10
 8004146:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d007      	beq.n	8004166 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004160:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004164:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800416a:	2b00      	cmp	r3, #0
 800416c:	d007      	beq.n	800417e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004178:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800417c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f042 0201 	orr.w	r2, r2, #1
 800418c:	601a      	str	r2, [r3, #0]
 800418e:	e005      	b.n	800419c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2200      	movs	r2, #0
 8004194:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004198:	2302      	movs	r3, #2
 800419a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800419c:	7dfb      	ldrb	r3, [r7, #23]
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3718      	adds	r7, #24
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}

080041a6 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80041a6:	b480      	push	{r7}
 80041a8:	b083      	sub	sp, #12
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d101      	bne.n	80041b8 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e04f      	b.n	8004258 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	d008      	beq.n	80041d6 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2204      	movs	r2, #4
 80041c8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e040      	b.n	8004258 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f022 020e 	bic.w	r2, r2, #14
 80041e4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80041f4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f022 0201 	bic.w	r2, r2, #1
 8004204:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800420a:	f003 021c 	and.w	r2, r3, #28
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004212:	2101      	movs	r1, #1
 8004214:	fa01 f202 	lsl.w	r2, r1, r2
 8004218:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004222:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004228:	2b00      	cmp	r3, #0
 800422a:	d00c      	beq.n	8004246 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004236:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800423a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004244:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2201      	movs	r2, #1
 800424a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 8004256:	2300      	movs	r3, #0
}
 8004258:	4618      	mov	r0, r3
 800425a:	370c      	adds	r7, #12
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr

08004264 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b084      	sub	sp, #16
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800426c:	2300      	movs	r3, #0
 800426e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004276:	b2db      	uxtb	r3, r3
 8004278:	2b02      	cmp	r3, #2
 800427a:	d005      	beq.n	8004288 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2204      	movs	r2, #4
 8004280:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	73fb      	strb	r3, [r7, #15]
 8004286:	e047      	b.n	8004318 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f022 020e 	bic.w	r2, r2, #14
 8004296:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f022 0201 	bic.w	r2, r2, #1
 80042a6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042b2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80042b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042bc:	f003 021c 	and.w	r2, r3, #28
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042c4:	2101      	movs	r1, #1
 80042c6:	fa01 f202 	lsl.w	r2, r1, r2
 80042ca:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80042d4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d00c      	beq.n	80042f8 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80042ec:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80042f6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800430c:	2b00      	cmp	r3, #0
 800430e:	d003      	beq.n	8004318 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	4798      	blx	r3
    }
  }
  return status;
 8004318:	7bfb      	ldrb	r3, [r7, #15]
}
 800431a:	4618      	mov	r0, r3
 800431c:	3710      	adds	r7, #16
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}

08004322 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004322:	b580      	push	{r7, lr}
 8004324:	b084      	sub	sp, #16
 8004326:	af00      	add	r7, sp, #0
 8004328:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800433e:	f003 031c 	and.w	r3, r3, #28
 8004342:	2204      	movs	r2, #4
 8004344:	409a      	lsls	r2, r3
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	4013      	ands	r3, r2
 800434a:	2b00      	cmp	r3, #0
 800434c:	d026      	beq.n	800439c <HAL_DMA_IRQHandler+0x7a>
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	f003 0304 	and.w	r3, r3, #4
 8004354:	2b00      	cmp	r3, #0
 8004356:	d021      	beq.n	800439c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 0320 	and.w	r3, r3, #32
 8004362:	2b00      	cmp	r3, #0
 8004364:	d107      	bne.n	8004376 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f022 0204 	bic.w	r2, r2, #4
 8004374:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800437a:	f003 021c 	and.w	r2, r3, #28
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004382:	2104      	movs	r1, #4
 8004384:	fa01 f202 	lsl.w	r2, r1, r2
 8004388:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800438e:	2b00      	cmp	r3, #0
 8004390:	d071      	beq.n	8004476 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800439a:	e06c      	b.n	8004476 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043a0:	f003 031c 	and.w	r3, r3, #28
 80043a4:	2202      	movs	r2, #2
 80043a6:	409a      	lsls	r2, r3
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	4013      	ands	r3, r2
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d02e      	beq.n	800440e <HAL_DMA_IRQHandler+0xec>
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	f003 0302 	and.w	r3, r3, #2
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d029      	beq.n	800440e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 0320 	and.w	r3, r3, #32
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d10b      	bne.n	80043e0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f022 020a 	bic.w	r2, r2, #10
 80043d6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043e4:	f003 021c 	and.w	r2, r3, #28
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ec:	2102      	movs	r1, #2
 80043ee:	fa01 f202 	lsl.w	r2, r1, r2
 80043f2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004400:	2b00      	cmp	r3, #0
 8004402:	d038      	beq.n	8004476 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800440c:	e033      	b.n	8004476 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004412:	f003 031c 	and.w	r3, r3, #28
 8004416:	2208      	movs	r2, #8
 8004418:	409a      	lsls	r2, r3
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	4013      	ands	r3, r2
 800441e:	2b00      	cmp	r3, #0
 8004420:	d02a      	beq.n	8004478 <HAL_DMA_IRQHandler+0x156>
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	f003 0308 	and.w	r3, r3, #8
 8004428:	2b00      	cmp	r3, #0
 800442a:	d025      	beq.n	8004478 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f022 020e 	bic.w	r2, r2, #14
 800443a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004440:	f003 021c 	and.w	r2, r3, #28
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004448:	2101      	movs	r1, #1
 800444a:	fa01 f202 	lsl.w	r2, r1, r2
 800444e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2201      	movs	r2, #1
 8004454:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2201      	movs	r2, #1
 800445a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800446a:	2b00      	cmp	r3, #0
 800446c:	d004      	beq.n	8004478 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004476:	bf00      	nop
 8004478:	bf00      	nop
}
 800447a:	3710      	adds	r7, #16
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}

08004480 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004480:	b480      	push	{r7}
 8004482:	b085      	sub	sp, #20
 8004484:	af00      	add	r7, sp, #0
 8004486:	60f8      	str	r0, [r7, #12]
 8004488:	60b9      	str	r1, [r7, #8]
 800448a:	607a      	str	r2, [r7, #4]
 800448c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004492:	68fa      	ldr	r2, [r7, #12]
 8004494:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004496:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800449c:	2b00      	cmp	r3, #0
 800449e:	d004      	beq.n	80044aa <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044a4:	68fa      	ldr	r2, [r7, #12]
 80044a6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80044a8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044ae:	f003 021c 	and.w	r2, r3, #28
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044b6:	2101      	movs	r1, #1
 80044b8:	fa01 f202 	lsl.w	r2, r1, r2
 80044bc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	683a      	ldr	r2, [r7, #0]
 80044c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	2b10      	cmp	r3, #16
 80044cc:	d108      	bne.n	80044e0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	68ba      	ldr	r2, [r7, #8]
 80044dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80044de:	e007      	b.n	80044f0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	68ba      	ldr	r2, [r7, #8]
 80044e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	60da      	str	r2, [r3, #12]
}
 80044f0:	bf00      	nop
 80044f2:	3714      	adds	r7, #20
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr

080044fc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b085      	sub	sp, #20
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	461a      	mov	r2, r3
 800450a:	4b17      	ldr	r3, [pc, #92]	@ (8004568 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800450c:	429a      	cmp	r2, r3
 800450e:	d80a      	bhi.n	8004526 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004514:	089b      	lsrs	r3, r3, #2
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800451c:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	6493      	str	r3, [r2, #72]	@ 0x48
 8004524:	e007      	b.n	8004536 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800452a:	089b      	lsrs	r3, r3, #2
 800452c:	009a      	lsls	r2, r3, #2
 800452e:	4b0f      	ldr	r3, [pc, #60]	@ (800456c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004530:	4413      	add	r3, r2
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	b2db      	uxtb	r3, r3
 800453c:	3b08      	subs	r3, #8
 800453e:	4a0c      	ldr	r2, [pc, #48]	@ (8004570 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004540:	fba2 2303 	umull	r2, r3, r2, r3
 8004544:	091b      	lsrs	r3, r3, #4
 8004546:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	4a0a      	ldr	r2, [pc, #40]	@ (8004574 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800454c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	f003 031f 	and.w	r3, r3, #31
 8004554:	2201      	movs	r2, #1
 8004556:	409a      	lsls	r2, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800455c:	bf00      	nop
 800455e:	3714      	adds	r7, #20
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr
 8004568:	40020407 	.word	0x40020407
 800456c:	4002081c 	.word	0x4002081c
 8004570:	cccccccd 	.word	0xcccccccd
 8004574:	40020880 	.word	0x40020880

08004578 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004578:	b480      	push	{r7}
 800457a:	b085      	sub	sp, #20
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004588:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800458a:	68fa      	ldr	r2, [r7, #12]
 800458c:	4b0b      	ldr	r3, [pc, #44]	@ (80045bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800458e:	4413      	add	r3, r2
 8004590:	009b      	lsls	r3, r3, #2
 8004592:	461a      	mov	r2, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	4a09      	ldr	r2, [pc, #36]	@ (80045c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 800459c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	3b01      	subs	r3, #1
 80045a2:	f003 0303 	and.w	r3, r3, #3
 80045a6:	2201      	movs	r2, #1
 80045a8:	409a      	lsls	r2, r3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80045ae:	bf00      	nop
 80045b0:	3714      	adds	r7, #20
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr
 80045ba:	bf00      	nop
 80045bc:	1000823f 	.word	0x1000823f
 80045c0:	40020940 	.word	0x40020940

080045c4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b087      	sub	sp, #28
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80045ce:	2300      	movs	r3, #0
 80045d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80045d2:	e14c      	b.n	800486e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	2101      	movs	r1, #1
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	fa01 f303 	lsl.w	r3, r1, r3
 80045e0:	4013      	ands	r3, r2
 80045e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	f000 813e 	beq.w	8004868 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	f003 0303 	and.w	r3, r3, #3
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d005      	beq.n	8004604 <HAL_GPIO_Init+0x40>
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	f003 0303 	and.w	r3, r3, #3
 8004600:	2b02      	cmp	r3, #2
 8004602:	d130      	bne.n	8004666 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	005b      	lsls	r3, r3, #1
 800460e:	2203      	movs	r2, #3
 8004610:	fa02 f303 	lsl.w	r3, r2, r3
 8004614:	43db      	mvns	r3, r3
 8004616:	693a      	ldr	r2, [r7, #16]
 8004618:	4013      	ands	r3, r2
 800461a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	68da      	ldr	r2, [r3, #12]
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	005b      	lsls	r3, r3, #1
 8004624:	fa02 f303 	lsl.w	r3, r2, r3
 8004628:	693a      	ldr	r2, [r7, #16]
 800462a:	4313      	orrs	r3, r2
 800462c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	693a      	ldr	r2, [r7, #16]
 8004632:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800463a:	2201      	movs	r2, #1
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	fa02 f303 	lsl.w	r3, r2, r3
 8004642:	43db      	mvns	r3, r3
 8004644:	693a      	ldr	r2, [r7, #16]
 8004646:	4013      	ands	r3, r2
 8004648:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	091b      	lsrs	r3, r3, #4
 8004650:	f003 0201 	and.w	r2, r3, #1
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	fa02 f303 	lsl.w	r3, r2, r3
 800465a:	693a      	ldr	r2, [r7, #16]
 800465c:	4313      	orrs	r3, r2
 800465e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	693a      	ldr	r2, [r7, #16]
 8004664:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	f003 0303 	and.w	r3, r3, #3
 800466e:	2b03      	cmp	r3, #3
 8004670:	d017      	beq.n	80046a2 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	68db      	ldr	r3, [r3, #12]
 8004676:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	005b      	lsls	r3, r3, #1
 800467c:	2203      	movs	r2, #3
 800467e:	fa02 f303 	lsl.w	r3, r2, r3
 8004682:	43db      	mvns	r3, r3
 8004684:	693a      	ldr	r2, [r7, #16]
 8004686:	4013      	ands	r3, r2
 8004688:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	689a      	ldr	r2, [r3, #8]
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	005b      	lsls	r3, r3, #1
 8004692:	fa02 f303 	lsl.w	r3, r2, r3
 8004696:	693a      	ldr	r2, [r7, #16]
 8004698:	4313      	orrs	r3, r2
 800469a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	693a      	ldr	r2, [r7, #16]
 80046a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	f003 0303 	and.w	r3, r3, #3
 80046aa:	2b02      	cmp	r3, #2
 80046ac:	d123      	bne.n	80046f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	08da      	lsrs	r2, r3, #3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	3208      	adds	r2, #8
 80046b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	f003 0307 	and.w	r3, r3, #7
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	220f      	movs	r2, #15
 80046c6:	fa02 f303 	lsl.w	r3, r2, r3
 80046ca:	43db      	mvns	r3, r3
 80046cc:	693a      	ldr	r2, [r7, #16]
 80046ce:	4013      	ands	r3, r2
 80046d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	691a      	ldr	r2, [r3, #16]
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	f003 0307 	and.w	r3, r3, #7
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	fa02 f303 	lsl.w	r3, r2, r3
 80046e2:	693a      	ldr	r2, [r7, #16]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	08da      	lsrs	r2, r3, #3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	3208      	adds	r2, #8
 80046f0:	6939      	ldr	r1, [r7, #16]
 80046f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	005b      	lsls	r3, r3, #1
 8004700:	2203      	movs	r2, #3
 8004702:	fa02 f303 	lsl.w	r3, r2, r3
 8004706:	43db      	mvns	r3, r3
 8004708:	693a      	ldr	r2, [r7, #16]
 800470a:	4013      	ands	r3, r2
 800470c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	f003 0203 	and.w	r2, r3, #3
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	005b      	lsls	r3, r3, #1
 800471a:	fa02 f303 	lsl.w	r3, r2, r3
 800471e:	693a      	ldr	r2, [r7, #16]
 8004720:	4313      	orrs	r3, r2
 8004722:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	693a      	ldr	r2, [r7, #16]
 8004728:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004732:	2b00      	cmp	r3, #0
 8004734:	f000 8098 	beq.w	8004868 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004738:	4a54      	ldr	r2, [pc, #336]	@ (800488c <HAL_GPIO_Init+0x2c8>)
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	089b      	lsrs	r3, r3, #2
 800473e:	3302      	adds	r3, #2
 8004740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004744:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	f003 0303 	and.w	r3, r3, #3
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	220f      	movs	r2, #15
 8004750:	fa02 f303 	lsl.w	r3, r2, r3
 8004754:	43db      	mvns	r3, r3
 8004756:	693a      	ldr	r2, [r7, #16]
 8004758:	4013      	ands	r3, r2
 800475a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004762:	d019      	beq.n	8004798 <HAL_GPIO_Init+0x1d4>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	4a4a      	ldr	r2, [pc, #296]	@ (8004890 <HAL_GPIO_Init+0x2cc>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d013      	beq.n	8004794 <HAL_GPIO_Init+0x1d0>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	4a49      	ldr	r2, [pc, #292]	@ (8004894 <HAL_GPIO_Init+0x2d0>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d00d      	beq.n	8004790 <HAL_GPIO_Init+0x1cc>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	4a48      	ldr	r2, [pc, #288]	@ (8004898 <HAL_GPIO_Init+0x2d4>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d007      	beq.n	800478c <HAL_GPIO_Init+0x1c8>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	4a47      	ldr	r2, [pc, #284]	@ (800489c <HAL_GPIO_Init+0x2d8>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d101      	bne.n	8004788 <HAL_GPIO_Init+0x1c4>
 8004784:	2304      	movs	r3, #4
 8004786:	e008      	b.n	800479a <HAL_GPIO_Init+0x1d6>
 8004788:	2307      	movs	r3, #7
 800478a:	e006      	b.n	800479a <HAL_GPIO_Init+0x1d6>
 800478c:	2303      	movs	r3, #3
 800478e:	e004      	b.n	800479a <HAL_GPIO_Init+0x1d6>
 8004790:	2302      	movs	r3, #2
 8004792:	e002      	b.n	800479a <HAL_GPIO_Init+0x1d6>
 8004794:	2301      	movs	r3, #1
 8004796:	e000      	b.n	800479a <HAL_GPIO_Init+0x1d6>
 8004798:	2300      	movs	r3, #0
 800479a:	697a      	ldr	r2, [r7, #20]
 800479c:	f002 0203 	and.w	r2, r2, #3
 80047a0:	0092      	lsls	r2, r2, #2
 80047a2:	4093      	lsls	r3, r2
 80047a4:	693a      	ldr	r2, [r7, #16]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80047aa:	4938      	ldr	r1, [pc, #224]	@ (800488c <HAL_GPIO_Init+0x2c8>)
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	089b      	lsrs	r3, r3, #2
 80047b0:	3302      	adds	r3, #2
 80047b2:	693a      	ldr	r2, [r7, #16]
 80047b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80047b8:	4b39      	ldr	r3, [pc, #228]	@ (80048a0 <HAL_GPIO_Init+0x2dc>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	43db      	mvns	r3, r3
 80047c2:	693a      	ldr	r2, [r7, #16]
 80047c4:	4013      	ands	r3, r2
 80047c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d003      	beq.n	80047dc <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80047d4:	693a      	ldr	r2, [r7, #16]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	4313      	orrs	r3, r2
 80047da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80047dc:	4a30      	ldr	r2, [pc, #192]	@ (80048a0 <HAL_GPIO_Init+0x2dc>)
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80047e2:	4b2f      	ldr	r3, [pc, #188]	@ (80048a0 <HAL_GPIO_Init+0x2dc>)
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	43db      	mvns	r3, r3
 80047ec:	693a      	ldr	r2, [r7, #16]
 80047ee:	4013      	ands	r3, r2
 80047f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d003      	beq.n	8004806 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80047fe:	693a      	ldr	r2, [r7, #16]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	4313      	orrs	r3, r2
 8004804:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004806:	4a26      	ldr	r2, [pc, #152]	@ (80048a0 <HAL_GPIO_Init+0x2dc>)
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800480c:	4b24      	ldr	r3, [pc, #144]	@ (80048a0 <HAL_GPIO_Init+0x2dc>)
 800480e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004812:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	43db      	mvns	r3, r3
 8004818:	693a      	ldr	r2, [r7, #16]
 800481a:	4013      	ands	r3, r2
 800481c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d003      	beq.n	8004832 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800482a:	693a      	ldr	r2, [r7, #16]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	4313      	orrs	r3, r2
 8004830:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004832:	4a1b      	ldr	r2, [pc, #108]	@ (80048a0 <HAL_GPIO_Init+0x2dc>)
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 800483a:	4b19      	ldr	r3, [pc, #100]	@ (80048a0 <HAL_GPIO_Init+0x2dc>)
 800483c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004840:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	43db      	mvns	r3, r3
 8004846:	693a      	ldr	r2, [r7, #16]
 8004848:	4013      	ands	r3, r2
 800484a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004854:	2b00      	cmp	r3, #0
 8004856:	d003      	beq.n	8004860 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8004858:	693a      	ldr	r2, [r7, #16]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	4313      	orrs	r3, r2
 800485e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004860:	4a0f      	ldr	r2, [pc, #60]	@ (80048a0 <HAL_GPIO_Init+0x2dc>)
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	3301      	adds	r3, #1
 800486c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	fa22 f303 	lsr.w	r3, r2, r3
 8004878:	2b00      	cmp	r3, #0
 800487a:	f47f aeab 	bne.w	80045d4 <HAL_GPIO_Init+0x10>
  }
}
 800487e:	bf00      	nop
 8004880:	bf00      	nop
 8004882:	371c      	adds	r7, #28
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr
 800488c:	40010000 	.word	0x40010000
 8004890:	48000400 	.word	0x48000400
 8004894:	48000800 	.word	0x48000800
 8004898:	48000c00 	.word	0x48000c00
 800489c:	48001000 	.word	0x48001000
 80048a0:	58000800 	.word	0x58000800

080048a4 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b087      	sub	sp, #28
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80048ae:	2300      	movs	r3, #0
 80048b0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80048b2:	e0bb      	b.n	8004a2c <HAL_GPIO_DeInit+0x188>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80048b4:	2201      	movs	r2, #1
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	fa02 f303 	lsl.w	r3, r2, r3
 80048bc:	683a      	ldr	r2, [r7, #0]
 80048be:	4013      	ands	r3, r2
 80048c0:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	f000 80ae 	beq.w	8004a26 <HAL_GPIO_DeInit+0x182>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80048ca:	4a5f      	ldr	r2, [pc, #380]	@ (8004a48 <HAL_GPIO_DeInit+0x1a4>)
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	089b      	lsrs	r3, r3, #2
 80048d0:	3302      	adds	r3, #2
 80048d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048d6:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4u * (position & 0x03u)));
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	f003 0303 	and.w	r3, r3, #3
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	220f      	movs	r2, #15
 80048e2:	fa02 f303 	lsl.w	r3, r2, r3
 80048e6:	68fa      	ldr	r2, [r7, #12]
 80048e8:	4013      	ands	r3, r2
 80048ea:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80048f2:	d019      	beq.n	8004928 <HAL_GPIO_DeInit+0x84>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4a55      	ldr	r2, [pc, #340]	@ (8004a4c <HAL_GPIO_DeInit+0x1a8>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d013      	beq.n	8004924 <HAL_GPIO_DeInit+0x80>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	4a54      	ldr	r2, [pc, #336]	@ (8004a50 <HAL_GPIO_DeInit+0x1ac>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d00d      	beq.n	8004920 <HAL_GPIO_DeInit+0x7c>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	4a53      	ldr	r2, [pc, #332]	@ (8004a54 <HAL_GPIO_DeInit+0x1b0>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d007      	beq.n	800491c <HAL_GPIO_DeInit+0x78>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	4a52      	ldr	r2, [pc, #328]	@ (8004a58 <HAL_GPIO_DeInit+0x1b4>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d101      	bne.n	8004918 <HAL_GPIO_DeInit+0x74>
 8004914:	2304      	movs	r3, #4
 8004916:	e008      	b.n	800492a <HAL_GPIO_DeInit+0x86>
 8004918:	2307      	movs	r3, #7
 800491a:	e006      	b.n	800492a <HAL_GPIO_DeInit+0x86>
 800491c:	2303      	movs	r3, #3
 800491e:	e004      	b.n	800492a <HAL_GPIO_DeInit+0x86>
 8004920:	2302      	movs	r3, #2
 8004922:	e002      	b.n	800492a <HAL_GPIO_DeInit+0x86>
 8004924:	2301      	movs	r3, #1
 8004926:	e000      	b.n	800492a <HAL_GPIO_DeInit+0x86>
 8004928:	2300      	movs	r3, #0
 800492a:	697a      	ldr	r2, [r7, #20]
 800492c:	f002 0203 	and.w	r2, r2, #3
 8004930:	0092      	lsls	r2, r2, #2
 8004932:	4093      	lsls	r3, r2
 8004934:	68fa      	ldr	r2, [r7, #12]
 8004936:	429a      	cmp	r2, r3
 8004938:	d136      	bne.n	80049a8 <HAL_GPIO_DeInit+0x104>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800493a:	4b48      	ldr	r3, [pc, #288]	@ (8004a5c <HAL_GPIO_DeInit+0x1b8>)
 800493c:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	43db      	mvns	r3, r3
 8004944:	4945      	ldr	r1, [pc, #276]	@ (8004a5c <HAL_GPIO_DeInit+0x1b8>)
 8004946:	4013      	ands	r3, r2
 8004948:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 800494c:	4b43      	ldr	r3, [pc, #268]	@ (8004a5c <HAL_GPIO_DeInit+0x1b8>)
 800494e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	43db      	mvns	r3, r3
 8004956:	4941      	ldr	r1, [pc, #260]	@ (8004a5c <HAL_GPIO_DeInit+0x1b8>)
 8004958:	4013      	ands	r3, r2
 800495a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800495e:	4b3f      	ldr	r3, [pc, #252]	@ (8004a5c <HAL_GPIO_DeInit+0x1b8>)
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	43db      	mvns	r3, r3
 8004966:	493d      	ldr	r1, [pc, #244]	@ (8004a5c <HAL_GPIO_DeInit+0x1b8>)
 8004968:	4013      	ands	r3, r2
 800496a:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 800496c:	4b3b      	ldr	r3, [pc, #236]	@ (8004a5c <HAL_GPIO_DeInit+0x1b8>)
 800496e:	685a      	ldr	r2, [r3, #4]
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	43db      	mvns	r3, r3
 8004974:	4939      	ldr	r1, [pc, #228]	@ (8004a5c <HAL_GPIO_DeInit+0x1b8>)
 8004976:	4013      	ands	r3, r2
 8004978:	604b      	str	r3, [r1, #4]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	f003 0303 	and.w	r3, r3, #3
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	220f      	movs	r2, #15
 8004984:	fa02 f303 	lsl.w	r3, r2, r3
 8004988:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800498a:	4a2f      	ldr	r2, [pc, #188]	@ (8004a48 <HAL_GPIO_DeInit+0x1a4>)
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	089b      	lsrs	r3, r3, #2
 8004990:	3302      	adds	r3, #2
 8004992:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	43da      	mvns	r2, r3
 800499a:	482b      	ldr	r0, [pc, #172]	@ (8004a48 <HAL_GPIO_DeInit+0x1a4>)
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	089b      	lsrs	r3, r3, #2
 80049a0:	400a      	ands	r2, r1
 80049a2:	3302      	adds	r3, #2
 80049a4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	005b      	lsls	r3, r3, #1
 80049b0:	2103      	movs	r1, #3
 80049b2:	fa01 f303 	lsl.w	r3, r1, r3
 80049b6:	431a      	orrs	r2, r3
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	08da      	lsrs	r2, r3, #3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	3208      	adds	r2, #8
 80049c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	f003 0307 	and.w	r3, r3, #7
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	220f      	movs	r2, #15
 80049d2:	fa02 f303 	lsl.w	r3, r2, r3
 80049d6:	43db      	mvns	r3, r3
 80049d8:	697a      	ldr	r2, [r7, #20]
 80049da:	08d2      	lsrs	r2, r2, #3
 80049dc:	4019      	ands	r1, r3
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	3208      	adds	r2, #8
 80049e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	68da      	ldr	r2, [r3, #12]
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	005b      	lsls	r3, r3, #1
 80049ee:	2103      	movs	r1, #3
 80049f0:	fa01 f303 	lsl.w	r3, r1, r3
 80049f4:	43db      	mvns	r3, r3
 80049f6:	401a      	ands	r2, r3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	685a      	ldr	r2, [r3, #4]
 8004a00:	2101      	movs	r1, #1
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	fa01 f303 	lsl.w	r3, r1, r3
 8004a08:	43db      	mvns	r3, r3
 8004a0a:	401a      	ands	r2, r3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	689a      	ldr	r2, [r3, #8]
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	005b      	lsls	r3, r3, #1
 8004a18:	2103      	movs	r1, #3
 8004a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a1e:	43db      	mvns	r3, r3
 8004a20:	401a      	ands	r2, r3
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	609a      	str	r2, [r3, #8]
    }

    position++;
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	3301      	adds	r3, #1
 8004a2a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004a2c:	683a      	ldr	r2, [r7, #0]
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	fa22 f303 	lsr.w	r3, r2, r3
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	f47f af3d 	bne.w	80048b4 <HAL_GPIO_DeInit+0x10>
  }
}
 8004a3a:	bf00      	nop
 8004a3c:	bf00      	nop
 8004a3e:	371c      	adds	r7, #28
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr
 8004a48:	40010000 	.word	0x40010000
 8004a4c:	48000400 	.word	0x48000400
 8004a50:	48000800 	.word	0x48000800
 8004a54:	48000c00 	.word	0x48000c00
 8004a58:	48001000 	.word	0x48001000
 8004a5c:	58000800 	.word	0x58000800

08004a60 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b085      	sub	sp, #20
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	460b      	mov	r3, r1
 8004a6a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	691a      	ldr	r2, [r3, #16]
 8004a70:	887b      	ldrh	r3, [r7, #2]
 8004a72:	4013      	ands	r3, r2
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d002      	beq.n	8004a7e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	73fb      	strb	r3, [r7, #15]
 8004a7c:	e001      	b.n	8004a82 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004a82:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3714      	adds	r7, #20
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr

08004a90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	460b      	mov	r3, r1
 8004a9a:	807b      	strh	r3, [r7, #2]
 8004a9c:	4613      	mov	r3, r2
 8004a9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004aa0:	787b      	ldrb	r3, [r7, #1]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d003      	beq.n	8004aae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004aa6:	887a      	ldrh	r2, [r7, #2]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004aac:	e002      	b.n	8004ab4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004aae:	887a      	ldrh	r2, [r7, #2]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004ab4:	bf00      	nop
 8004ab6:	370c      	adds	r7, #12
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr

08004ac0 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b085      	sub	sp, #20
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	460b      	mov	r3, r1
 8004aca:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	695b      	ldr	r3, [r3, #20]
 8004ad0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004ad2:	887a      	ldrh	r2, [r7, #2]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	4013      	ands	r3, r2
 8004ad8:	041a      	lsls	r2, r3, #16
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	43d9      	mvns	r1, r3
 8004ade:	887b      	ldrh	r3, [r7, #2]
 8004ae0:	400b      	ands	r3, r1
 8004ae2:	431a      	orrs	r2, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	619a      	str	r2, [r3, #24]
}
 8004ae8:	bf00      	nop
 8004aea:	3714      	adds	r7, #20
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr

08004af4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b082      	sub	sp, #8
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	4603      	mov	r3, r0
 8004afc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004afe:	4b08      	ldr	r3, [pc, #32]	@ (8004b20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b00:	68da      	ldr	r2, [r3, #12]
 8004b02:	88fb      	ldrh	r3, [r7, #6]
 8004b04:	4013      	ands	r3, r2
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d006      	beq.n	8004b18 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004b0a:	4a05      	ldr	r2, [pc, #20]	@ (8004b20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b0c:	88fb      	ldrh	r3, [r7, #6]
 8004b0e:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004b10:	88fb      	ldrh	r3, [r7, #6]
 8004b12:	4618      	mov	r0, r3
 8004b14:	f7fd fe4c 	bl	80027b0 <HAL_GPIO_EXTI_Callback>
  }
}
 8004b18:	bf00      	nop
 8004b1a:	3708      	adds	r7, #8
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	58000800 	.word	0x58000800

08004b24 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b082      	sub	sp, #8
 8004b28:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8004b2a:	4b0a      	ldr	r3, [pc, #40]	@ (8004b54 <HAL_HSEM_IRQHandler+0x30>)
 8004b2c:	68db      	ldr	r3, [r3, #12]
 8004b2e:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8004b30:	4b08      	ldr	r3, [pc, #32]	@ (8004b54 <HAL_HSEM_IRQHandler+0x30>)
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	43db      	mvns	r3, r3
 8004b38:	4906      	ldr	r1, [pc, #24]	@ (8004b54 <HAL_HSEM_IRQHandler+0x30>)
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8004b3e:	4a05      	ldr	r2, [pc, #20]	@ (8004b54 <HAL_HSEM_IRQHandler+0x30>)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f000 f807 	bl	8004b58 <HAL_HSEM_FreeCallback>
}
 8004b4a:	bf00      	nop
 8004b4c:	3708      	adds	r7, #8
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}
 8004b52:	bf00      	nop
 8004b54:	58001500 	.word	0x58001500

08004b58 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b083      	sub	sp, #12
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8004b60:	bf00      	nop
 8004b62:	370c      	adds	r7, #12
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr

08004b6c <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b084      	sub	sp, #16
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8004b74:	2300      	movs	r3, #0
 8004b76:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d01e      	beq.n	8004bbc <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8004b7e:	4b13      	ldr	r3, [pc, #76]	@ (8004bcc <HAL_IPCC_Init+0x60>)
 8004b80:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d102      	bne.n	8004b94 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f7fd ff3a 	bl	8002a08 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8004b94:	68b8      	ldr	r0, [r7, #8]
 8004b96:	f000 f85b 	bl	8004c50 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f000 f82c 	bl	8004c04 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8004bba:	e001      	b.n	8004bc0 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8004bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3710      	adds	r7, #16
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	58000c00 	.word	0x58000c00

08004bd0 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b085      	sub	sp, #20
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	60f8      	str	r0, [r7, #12]
 8004bd8:	60b9      	str	r1, [r7, #8]
 8004bda:	4613      	mov	r3, r2
 8004bdc:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8004bde:	bf00      	nop
 8004be0:	3714      	adds	r7, #20
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr

08004bea <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8004bea:	b480      	push	{r7}
 8004bec:	b085      	sub	sp, #20
 8004bee:	af00      	add	r7, sp, #0
 8004bf0:	60f8      	str	r0, [r7, #12]
 8004bf2:	60b9      	str	r1, [r7, #8]
 8004bf4:	4613      	mov	r3, r2
 8004bf6:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8004bf8:	bf00      	nop
 8004bfa:	3714      	adds	r7, #20
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr

08004c04 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b085      	sub	sp, #20
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	60fb      	str	r3, [r7, #12]
 8004c10:	e00f      	b.n	8004c32 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	4413      	add	r3, r2
 8004c1a:	4a0b      	ldr	r2, [pc, #44]	@ (8004c48 <IPCC_SetDefaultCallbacks+0x44>)
 8004c1c:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	3306      	adds	r3, #6
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	4413      	add	r3, r2
 8004c28:	4a08      	ldr	r2, [pc, #32]	@ (8004c4c <IPCC_SetDefaultCallbacks+0x48>)
 8004c2a:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	3301      	adds	r3, #1
 8004c30:	60fb      	str	r3, [r7, #12]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2b05      	cmp	r3, #5
 8004c36:	d9ec      	bls.n	8004c12 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8004c38:	bf00      	nop
 8004c3a:	bf00      	nop
 8004c3c:	3714      	adds	r7, #20
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr
 8004c46:	bf00      	nop
 8004c48:	08004bd1 	.word	0x08004bd1
 8004c4c:	08004beb 	.word	0x08004beb

08004c50 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b083      	sub	sp, #12
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 8004c64:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	223f      	movs	r2, #63	@ 0x3f
 8004c6a:	609a      	str	r2, [r3, #8]
}
 8004c6c:	bf00      	nop
 8004c6e:	370c      	adds	r7, #12
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr

08004c78 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c7c:	4b05      	ldr	r3, [pc, #20]	@ (8004c94 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a04      	ldr	r2, [pc, #16]	@ (8004c94 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004c82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c86:	6013      	str	r3, [r2, #0]
}
 8004c88:	bf00      	nop
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr
 8004c92:	bf00      	nop
 8004c94:	58000400 	.word	0x58000400

08004c98 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8004c9c:	4b04      	ldr	r3, [pc, #16]	@ (8004cb0 <HAL_PWREx_GetVoltageRange+0x18>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop
 8004cb0:	58000400 	.word	0x58000400

08004cb4 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004cb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004cc2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004cc6:	d101      	bne.n	8004ccc <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e000      	b.n	8004cce <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8004ccc:	2300      	movs	r3, #0
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr

08004cd8 <LL_RCC_HSE_Enable>:
{
 8004cd8:	b480      	push	{r7}
 8004cda:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004cdc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004ce6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cea:	6013      	str	r3, [r2, #0]
}
 8004cec:	bf00      	nop
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr

08004cf6 <LL_RCC_HSE_Disable>:
{
 8004cf6:	b480      	push	{r7}
 8004cf8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004cfa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004d04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d08:	6013      	str	r3, [r2, #0]
}
 8004d0a:	bf00      	nop
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr

08004d14 <LL_RCC_HSE_IsReady>:
{
 8004d14:	b480      	push	{r7}
 8004d16:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004d18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d22:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004d26:	d101      	bne.n	8004d2c <LL_RCC_HSE_IsReady+0x18>
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e000      	b.n	8004d2e <LL_RCC_HSE_IsReady+0x1a>
 8004d2c:	2300      	movs	r3, #0
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr

08004d38 <LL_RCC_HSI_Enable>:
{
 8004d38:	b480      	push	{r7}
 8004d3a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004d3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004d46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d4a:	6013      	str	r3, [r2, #0]
}
 8004d4c:	bf00      	nop
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr

08004d56 <LL_RCC_HSI_Disable>:
{
 8004d56:	b480      	push	{r7}
 8004d58:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004d5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004d64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d68:	6013      	str	r3, [r2, #0]
}
 8004d6a:	bf00      	nop
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr

08004d74 <LL_RCC_HSI_IsReady>:
{
 8004d74:	b480      	push	{r7}
 8004d76:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004d78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d86:	d101      	bne.n	8004d8c <LL_RCC_HSI_IsReady+0x18>
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e000      	b.n	8004d8e <LL_RCC_HSI_IsReady+0x1a>
 8004d8c:	2300      	movs	r3, #0
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr

08004d98 <LL_RCC_HSI_SetCalibTrimming>:
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b083      	sub	sp, #12
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004da0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	061b      	lsls	r3, r3, #24
 8004dae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004db2:	4313      	orrs	r3, r2
 8004db4:	604b      	str	r3, [r1, #4]
}
 8004db6:	bf00      	nop
 8004db8:	370c      	adds	r7, #12
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr

08004dc2 <LL_RCC_HSI48_Enable>:
{
 8004dc2:	b480      	push	{r7}
 8004dc4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004dc6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004dca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004dce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004dd2:	f043 0301 	orr.w	r3, r3, #1
 8004dd6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8004dda:	bf00      	nop
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de2:	4770      	bx	lr

08004de4 <LL_RCC_HSI48_Disable>:
{
 8004de4:	b480      	push	{r7}
 8004de6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004de8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004dec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004df0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004df4:	f023 0301 	bic.w	r3, r3, #1
 8004df8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8004dfc:	bf00      	nop
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr

08004e06 <LL_RCC_HSI48_IsReady>:
{
 8004e06:	b480      	push	{r7}
 8004e08:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8004e0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004e12:	f003 0302 	and.w	r3, r3, #2
 8004e16:	2b02      	cmp	r3, #2
 8004e18:	d101      	bne.n	8004e1e <LL_RCC_HSI48_IsReady+0x18>
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e000      	b.n	8004e20 <LL_RCC_HSI48_IsReady+0x1a>
 8004e1e:	2300      	movs	r3, #0
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr

08004e2a <LL_RCC_LSE_Enable>:
{
 8004e2a:	b480      	push	{r7}
 8004e2c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004e2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e36:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004e3a:	f043 0301 	orr.w	r3, r3, #1
 8004e3e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004e42:	bf00      	nop
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr

08004e4c <LL_RCC_LSE_Disable>:
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004e50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e58:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004e5c:	f023 0301 	bic.w	r3, r3, #1
 8004e60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004e64:	bf00      	nop
 8004e66:	46bd      	mov	sp, r7
 8004e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6c:	4770      	bx	lr

08004e6e <LL_RCC_LSE_EnableBypass>:
{
 8004e6e:	b480      	push	{r7}
 8004e70:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004e72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e7a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004e7e:	f043 0304 	orr.w	r3, r3, #4
 8004e82:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004e86:	bf00      	nop
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr

08004e90 <LL_RCC_LSE_DisableBypass>:
{
 8004e90:	b480      	push	{r7}
 8004e92:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004e94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e9c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004ea0:	f023 0304 	bic.w	r3, r3, #4
 8004ea4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004ea8:	bf00      	nop
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr

08004eb2 <LL_RCC_LSE_IsReady>:
{
 8004eb2:	b480      	push	{r7}
 8004eb4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004eb6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ebe:	f003 0302 	and.w	r3, r3, #2
 8004ec2:	2b02      	cmp	r3, #2
 8004ec4:	d101      	bne.n	8004eca <LL_RCC_LSE_IsReady+0x18>
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e000      	b.n	8004ecc <LL_RCC_LSE_IsReady+0x1a>
 8004eca:	2300      	movs	r3, #0
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr

08004ed6 <LL_RCC_LSI1_Enable>:
{
 8004ed6:	b480      	push	{r7}
 8004ed8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004eda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ede:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ee2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004ee6:	f043 0301 	orr.w	r3, r3, #1
 8004eea:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8004eee:	bf00      	nop
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr

08004ef8 <LL_RCC_LSI1_Disable>:
{
 8004ef8:	b480      	push	{r7}
 8004efa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004efc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f04:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004f08:	f023 0301 	bic.w	r3, r3, #1
 8004f0c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8004f10:	bf00      	nop
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr

08004f1a <LL_RCC_LSI1_IsReady>:
{
 8004f1a:	b480      	push	{r7}
 8004f1c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8004f1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f26:	f003 0302 	and.w	r3, r3, #2
 8004f2a:	2b02      	cmp	r3, #2
 8004f2c:	d101      	bne.n	8004f32 <LL_RCC_LSI1_IsReady+0x18>
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e000      	b.n	8004f34 <LL_RCC_LSI1_IsReady+0x1a>
 8004f32:	2300      	movs	r3, #0
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr

08004f3e <LL_RCC_LSI2_Enable>:
{
 8004f3e:	b480      	push	{r7}
 8004f40:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004f42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f4a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004f4e:	f043 0304 	orr.w	r3, r3, #4
 8004f52:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8004f56:	bf00      	nop
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr

08004f60 <LL_RCC_LSI2_Disable>:
{
 8004f60:	b480      	push	{r7}
 8004f62:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004f64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f68:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f6c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004f70:	f023 0304 	bic.w	r3, r3, #4
 8004f74:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8004f78:	bf00      	nop
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr

08004f82 <LL_RCC_LSI2_IsReady>:
{
 8004f82:	b480      	push	{r7}
 8004f84:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8004f86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f8e:	f003 0308 	and.w	r3, r3, #8
 8004f92:	2b08      	cmp	r3, #8
 8004f94:	d101      	bne.n	8004f9a <LL_RCC_LSI2_IsReady+0x18>
 8004f96:	2301      	movs	r3, #1
 8004f98:	e000      	b.n	8004f9c <LL_RCC_LSI2_IsReady+0x1a>
 8004f9a:	2300      	movs	r3, #0
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr

08004fa6 <LL_RCC_LSI2_SetTrimming>:
{
 8004fa6:	b480      	push	{r7}
 8004fa8:	b083      	sub	sp, #12
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8004fae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004fb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004fb6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	021b      	lsls	r3, r3, #8
 8004fbe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8004fc8:	bf00      	nop
 8004fca:	370c      	adds	r7, #12
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr

08004fd4 <LL_RCC_MSI_Enable>:
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004fd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004fe2:	f043 0301 	orr.w	r3, r3, #1
 8004fe6:	6013      	str	r3, [r2, #0]
}
 8004fe8:	bf00      	nop
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr

08004ff2 <LL_RCC_MSI_Disable>:
{
 8004ff2:	b480      	push	{r7}
 8004ff4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8004ff6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005000:	f023 0301 	bic.w	r3, r3, #1
 8005004:	6013      	str	r3, [r2, #0]
}
 8005006:	bf00      	nop
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr

08005010 <LL_RCC_MSI_IsReady>:
{
 8005010:	b480      	push	{r7}
 8005012:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005014:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 0302 	and.w	r3, r3, #2
 800501e:	2b02      	cmp	r3, #2
 8005020:	d101      	bne.n	8005026 <LL_RCC_MSI_IsReady+0x16>
 8005022:	2301      	movs	r3, #1
 8005024:	e000      	b.n	8005028 <LL_RCC_MSI_IsReady+0x18>
 8005026:	2300      	movs	r3, #0
}
 8005028:	4618      	mov	r0, r3
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr

08005032 <LL_RCC_MSI_SetRange>:
{
 8005032:	b480      	push	{r7}
 8005034:	b083      	sub	sp, #12
 8005036:	af00      	add	r7, sp, #0
 8005038:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800503a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005044:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	4313      	orrs	r3, r2
 800504c:	600b      	str	r3, [r1, #0]
}
 800504e:	bf00      	nop
 8005050:	370c      	adds	r7, #12
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr

0800505a <LL_RCC_MSI_GetRange>:
{
 800505a:	b480      	push	{r7}
 800505c:	b083      	sub	sp, #12
 800505e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8005060:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800506a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2bb0      	cmp	r3, #176	@ 0xb0
 8005070:	d901      	bls.n	8005076 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8005072:	23b0      	movs	r3, #176	@ 0xb0
 8005074:	607b      	str	r3, [r7, #4]
  return msiRange;
 8005076:	687b      	ldr	r3, [r7, #4]
}
 8005078:	4618      	mov	r0, r3
 800507a:	370c      	adds	r7, #12
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr

08005084 <LL_RCC_MSI_SetCalibTrimming>:
{
 8005084:	b480      	push	{r7}
 8005086:	b083      	sub	sp, #12
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800508c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	021b      	lsls	r3, r3, #8
 800509a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800509e:	4313      	orrs	r3, r2
 80050a0:	604b      	str	r3, [r1, #4]
}
 80050a2:	bf00      	nop
 80050a4:	370c      	adds	r7, #12
 80050a6:	46bd      	mov	sp, r7
 80050a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ac:	4770      	bx	lr

080050ae <LL_RCC_SetSysClkSource>:
{
 80050ae:	b480      	push	{r7}
 80050b0:	b083      	sub	sp, #12
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80050b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	f023 0203 	bic.w	r2, r3, #3
 80050c0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	608b      	str	r3, [r1, #8]
}
 80050ca:	bf00      	nop
 80050cc:	370c      	adds	r7, #12
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr

080050d6 <LL_RCC_GetSysClkSource>:
{
 80050d6:	b480      	push	{r7}
 80050d8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80050da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	f003 030c 	and.w	r3, r3, #12
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr

080050ee <LL_RCC_SetAHBPrescaler>:
{
 80050ee:	b480      	push	{r7}
 80050f0:	b083      	sub	sp, #12
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80050f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005100:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	4313      	orrs	r3, r2
 8005108:	608b      	str	r3, [r1, #8]
}
 800510a:	bf00      	nop
 800510c:	370c      	adds	r7, #12
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr

08005116 <LL_C2_RCC_SetAHBPrescaler>:
{
 8005116:	b480      	push	{r7}
 8005118:	b083      	sub	sp, #12
 800511a:	af00      	add	r7, sp, #0
 800511c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800511e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005122:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005126:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800512a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4313      	orrs	r3, r2
 8005132:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8005136:	bf00      	nop
 8005138:	370c      	adds	r7, #12
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr

08005142 <LL_RCC_SetAHB4Prescaler>:
{
 8005142:	b480      	push	{r7}
 8005144:	b083      	sub	sp, #12
 8005146:	af00      	add	r7, sp, #0
 8005148:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800514a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800514e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005152:	f023 020f 	bic.w	r2, r3, #15
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	091b      	lsrs	r3, r3, #4
 800515a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800515e:	4313      	orrs	r3, r2
 8005160:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8005164:	bf00      	nop
 8005166:	370c      	adds	r7, #12
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr

08005170 <LL_RCC_SetAPB1Prescaler>:
{
 8005170:	b480      	push	{r7}
 8005172:	b083      	sub	sp, #12
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8005178:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005182:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4313      	orrs	r3, r2
 800518a:	608b      	str	r3, [r1, #8]
}
 800518c:	bf00      	nop
 800518e:	370c      	adds	r7, #12
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr

08005198 <LL_RCC_SetAPB2Prescaler>:
{
 8005198:	b480      	push	{r7}
 800519a:	b083      	sub	sp, #12
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80051a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80051aa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4313      	orrs	r3, r2
 80051b2:	608b      	str	r3, [r1, #8]
}
 80051b4:	bf00      	nop
 80051b6:	370c      	adds	r7, #12
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr

080051c0 <LL_RCC_GetAHBPrescaler>:
{
 80051c0:	b480      	push	{r7}
 80051c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80051c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr

080051d8 <LL_RCC_GetAHB4Prescaler>:
{
 80051d8:	b480      	push	{r7}
 80051da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80051dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051e0:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80051e4:	011b      	lsls	r3, r3, #4
 80051e6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr

080051f4 <LL_RCC_GetAPB1Prescaler>:
{
 80051f4:	b480      	push	{r7}
 80051f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80051f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8005202:	4618      	mov	r0, r3
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr

0800520c <LL_RCC_GetAPB2Prescaler>:
{
 800520c:	b480      	push	{r7}
 800520e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005210:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 800521a:	4618      	mov	r0, r3
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr

08005224 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8005224:	b480      	push	{r7}
 8005226:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005228:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005232:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005236:	6013      	str	r3, [r2, #0]
}
 8005238:	bf00      	nop
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr

08005242 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8005242:	b480      	push	{r7}
 8005244:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005246:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005250:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005254:	6013      	str	r3, [r2, #0]
}
 8005256:	bf00      	nop
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr

08005260 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8005260:	b480      	push	{r7}
 8005262:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005264:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800526e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005272:	d101      	bne.n	8005278 <LL_RCC_PLL_IsReady+0x18>
 8005274:	2301      	movs	r3, #1
 8005276:	e000      	b.n	800527a <LL_RCC_PLL_IsReady+0x1a>
 8005278:	2300      	movs	r3, #0
}
 800527a:	4618      	mov	r0, r3
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr

08005284 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005284:	b480      	push	{r7}
 8005286:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005288:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800528c:	68db      	ldr	r3, [r3, #12]
 800528e:	0a1b      	lsrs	r3, r3, #8
 8005290:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8005294:	4618      	mov	r0, r3
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr

0800529e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800529e:	b480      	push	{r7}
 80052a0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80052a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr

080052b6 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80052b6:	b480      	push	{r7}
 80052b8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80052ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052be:	68db      	ldr	r3, [r3, #12]
 80052c0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr

080052ce <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80052ce:	b480      	push	{r7}
 80052d0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80052d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	f003 0303 	and.w	r3, r3, #3
}
 80052dc:	4618      	mov	r0, r3
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr

080052e6 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80052e6:	b480      	push	{r7}
 80052e8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80052ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80052f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052f8:	d101      	bne.n	80052fe <LL_RCC_IsActiveFlag_HPRE+0x18>
 80052fa:	2301      	movs	r3, #1
 80052fc:	e000      	b.n	8005300 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80052fe:	2300      	movs	r3, #0
}
 8005300:	4618      	mov	r0, r3
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr

0800530a <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800530a:	b480      	push	{r7}
 800530c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800530e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005312:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005316:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800531a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800531e:	d101      	bne.n	8005324 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8005320:	2301      	movs	r3, #1
 8005322:	e000      	b.n	8005326 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8005324:	2300      	movs	r3, #0
}
 8005326:	4618      	mov	r0, r3
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8005330:	b480      	push	{r7}
 8005332:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005334:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005338:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800533c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005340:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005344:	d101      	bne.n	800534a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8005346:	2301      	movs	r3, #1
 8005348:	e000      	b.n	800534c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800534a:	2300      	movs	r3, #0
}
 800534c:	4618      	mov	r0, r3
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr

08005356 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8005356:	b480      	push	{r7}
 8005358:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800535a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005364:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005368:	d101      	bne.n	800536e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800536a:	2301      	movs	r3, #1
 800536c:	e000      	b.n	8005370 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800536e:	2300      	movs	r3, #0
}
 8005370:	4618      	mov	r0, r3
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	4770      	bx	lr

0800537a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800537a:	b480      	push	{r7}
 800537c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800537e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005388:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800538c:	d101      	bne.n	8005392 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800538e:	2301      	movs	r3, #1
 8005390:	e000      	b.n	8005394 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8005392:	2300      	movs	r3, #0
}
 8005394:	4618      	mov	r0, r3
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr
	...

080053a0 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053a0:	b590      	push	{r4, r7, lr}
 80053a2:	b08d      	sub	sp, #52	@ 0x34
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d101      	bne.n	80053b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	e363      	b.n	8005a7a <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 0320 	and.w	r3, r3, #32
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	f000 808d 	beq.w	80054da <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053c0:	f7ff fe89 	bl	80050d6 <LL_RCC_GetSysClkSource>
 80053c4:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80053c6:	f7ff ff82 	bl	80052ce <LL_RCC_PLL_GetMainSource>
 80053ca:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80053cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d005      	beq.n	80053de <HAL_RCC_OscConfig+0x3e>
 80053d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053d4:	2b0c      	cmp	r3, #12
 80053d6:	d147      	bne.n	8005468 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80053d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d144      	bne.n	8005468 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	69db      	ldr	r3, [r3, #28]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d101      	bne.n	80053ea <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	e347      	b.n	8005a7a <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80053ee:	f7ff fe34 	bl	800505a <LL_RCC_MSI_GetRange>
 80053f2:	4603      	mov	r3, r0
 80053f4:	429c      	cmp	r4, r3
 80053f6:	d914      	bls.n	8005422 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053fc:	4618      	mov	r0, r3
 80053fe:	f000 fd2f 	bl	8005e60 <RCC_SetFlashLatencyFromMSIRange>
 8005402:	4603      	mov	r3, r0
 8005404:	2b00      	cmp	r3, #0
 8005406:	d001      	beq.n	800540c <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	e336      	b.n	8005a7a <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005410:	4618      	mov	r0, r3
 8005412:	f7ff fe0e 	bl	8005032 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6a1b      	ldr	r3, [r3, #32]
 800541a:	4618      	mov	r0, r3
 800541c:	f7ff fe32 	bl	8005084 <LL_RCC_MSI_SetCalibTrimming>
 8005420:	e013      	b.n	800544a <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005426:	4618      	mov	r0, r3
 8005428:	f7ff fe03 	bl	8005032 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6a1b      	ldr	r3, [r3, #32]
 8005430:	4618      	mov	r0, r3
 8005432:	f7ff fe27 	bl	8005084 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800543a:	4618      	mov	r0, r3
 800543c:	f000 fd10 	bl	8005e60 <RCC_SetFlashLatencyFromMSIRange>
 8005440:	4603      	mov	r3, r0
 8005442:	2b00      	cmp	r3, #0
 8005444:	d001      	beq.n	800544a <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	e317      	b.n	8005a7a <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800544a:	f000 fcc9 	bl	8005de0 <HAL_RCC_GetHCLKFreq>
 800544e:	4603      	mov	r3, r0
 8005450:	4aa4      	ldr	r2, [pc, #656]	@ (80056e4 <HAL_RCC_OscConfig+0x344>)
 8005452:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005454:	4ba4      	ldr	r3, [pc, #656]	@ (80056e8 <HAL_RCC_OscConfig+0x348>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4618      	mov	r0, r3
 800545a:	f7fe fb75 	bl	8003b48 <HAL_InitTick>
 800545e:	4603      	mov	r3, r0
 8005460:	2b00      	cmp	r3, #0
 8005462:	d039      	beq.n	80054d8 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	e308      	b.n	8005a7a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	69db      	ldr	r3, [r3, #28]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d01e      	beq.n	80054ae <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005470:	f7ff fdb0 	bl	8004fd4 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005474:	f7fe fbb6 	bl	8003be4 <HAL_GetTick>
 8005478:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800547a:	e008      	b.n	800548e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800547c:	f7fe fbb2 	bl	8003be4 <HAL_GetTick>
 8005480:	4602      	mov	r2, r0
 8005482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	2b02      	cmp	r3, #2
 8005488:	d901      	bls.n	800548e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	e2f5      	b.n	8005a7a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800548e:	f7ff fdbf 	bl	8005010 <LL_RCC_MSI_IsReady>
 8005492:	4603      	mov	r3, r0
 8005494:	2b00      	cmp	r3, #0
 8005496:	d0f1      	beq.n	800547c <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800549c:	4618      	mov	r0, r3
 800549e:	f7ff fdc8 	bl	8005032 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6a1b      	ldr	r3, [r3, #32]
 80054a6:	4618      	mov	r0, r3
 80054a8:	f7ff fdec 	bl	8005084 <LL_RCC_MSI_SetCalibTrimming>
 80054ac:	e015      	b.n	80054da <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80054ae:	f7ff fda0 	bl	8004ff2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80054b2:	f7fe fb97 	bl	8003be4 <HAL_GetTick>
 80054b6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80054b8:	e008      	b.n	80054cc <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80054ba:	f7fe fb93 	bl	8003be4 <HAL_GetTick>
 80054be:	4602      	mov	r2, r0
 80054c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054c2:	1ad3      	subs	r3, r2, r3
 80054c4:	2b02      	cmp	r3, #2
 80054c6:	d901      	bls.n	80054cc <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80054c8:	2303      	movs	r3, #3
 80054ca:	e2d6      	b.n	8005a7a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80054cc:	f7ff fda0 	bl	8005010 <LL_RCC_MSI_IsReady>
 80054d0:	4603      	mov	r3, r0
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d1f1      	bne.n	80054ba <HAL_RCC_OscConfig+0x11a>
 80054d6:	e000      	b.n	80054da <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80054d8:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f003 0301 	and.w	r3, r3, #1
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d047      	beq.n	8005576 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054e6:	f7ff fdf6 	bl	80050d6 <LL_RCC_GetSysClkSource>
 80054ea:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80054ec:	f7ff feef 	bl	80052ce <LL_RCC_PLL_GetMainSource>
 80054f0:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80054f2:	6a3b      	ldr	r3, [r7, #32]
 80054f4:	2b08      	cmp	r3, #8
 80054f6:	d005      	beq.n	8005504 <HAL_RCC_OscConfig+0x164>
 80054f8:	6a3b      	ldr	r3, [r7, #32]
 80054fa:	2b0c      	cmp	r3, #12
 80054fc:	d108      	bne.n	8005510 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80054fe:	69fb      	ldr	r3, [r7, #28]
 8005500:	2b03      	cmp	r3, #3
 8005502:	d105      	bne.n	8005510 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d134      	bne.n	8005576 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	e2b4      	b.n	8005a7a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005518:	d102      	bne.n	8005520 <HAL_RCC_OscConfig+0x180>
 800551a:	f7ff fbdd 	bl	8004cd8 <LL_RCC_HSE_Enable>
 800551e:	e001      	b.n	8005524 <HAL_RCC_OscConfig+0x184>
 8005520:	f7ff fbe9 	bl	8004cf6 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d012      	beq.n	8005552 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800552c:	f7fe fb5a 	bl	8003be4 <HAL_GetTick>
 8005530:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8005532:	e008      	b.n	8005546 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005534:	f7fe fb56 	bl	8003be4 <HAL_GetTick>
 8005538:	4602      	mov	r2, r0
 800553a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800553c:	1ad3      	subs	r3, r2, r3
 800553e:	2b64      	cmp	r3, #100	@ 0x64
 8005540:	d901      	bls.n	8005546 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8005542:	2303      	movs	r3, #3
 8005544:	e299      	b.n	8005a7a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8005546:	f7ff fbe5 	bl	8004d14 <LL_RCC_HSE_IsReady>
 800554a:	4603      	mov	r3, r0
 800554c:	2b00      	cmp	r3, #0
 800554e:	d0f1      	beq.n	8005534 <HAL_RCC_OscConfig+0x194>
 8005550:	e011      	b.n	8005576 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005552:	f7fe fb47 	bl	8003be4 <HAL_GetTick>
 8005556:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8005558:	e008      	b.n	800556c <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800555a:	f7fe fb43 	bl	8003be4 <HAL_GetTick>
 800555e:	4602      	mov	r2, r0
 8005560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005562:	1ad3      	subs	r3, r2, r3
 8005564:	2b64      	cmp	r3, #100	@ 0x64
 8005566:	d901      	bls.n	800556c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8005568:	2303      	movs	r3, #3
 800556a:	e286      	b.n	8005a7a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800556c:	f7ff fbd2 	bl	8004d14 <LL_RCC_HSE_IsReady>
 8005570:	4603      	mov	r3, r0
 8005572:	2b00      	cmp	r3, #0
 8005574:	d1f1      	bne.n	800555a <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 0302 	and.w	r3, r3, #2
 800557e:	2b00      	cmp	r3, #0
 8005580:	d04c      	beq.n	800561c <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005582:	f7ff fda8 	bl	80050d6 <LL_RCC_GetSysClkSource>
 8005586:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005588:	f7ff fea1 	bl	80052ce <LL_RCC_PLL_GetMainSource>
 800558c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800558e:	69bb      	ldr	r3, [r7, #24]
 8005590:	2b04      	cmp	r3, #4
 8005592:	d005      	beq.n	80055a0 <HAL_RCC_OscConfig+0x200>
 8005594:	69bb      	ldr	r3, [r7, #24]
 8005596:	2b0c      	cmp	r3, #12
 8005598:	d10e      	bne.n	80055b8 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	2b02      	cmp	r3, #2
 800559e:	d10b      	bne.n	80055b8 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d101      	bne.n	80055ac <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	e266      	b.n	8005a7a <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	691b      	ldr	r3, [r3, #16]
 80055b0:	4618      	mov	r0, r3
 80055b2:	f7ff fbf1 	bl	8004d98 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80055b6:	e031      	b.n	800561c <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d019      	beq.n	80055f4 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80055c0:	f7ff fbba 	bl	8004d38 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055c4:	f7fe fb0e 	bl	8003be4 <HAL_GetTick>
 80055c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80055ca:	e008      	b.n	80055de <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055cc:	f7fe fb0a 	bl	8003be4 <HAL_GetTick>
 80055d0:	4602      	mov	r2, r0
 80055d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055d4:	1ad3      	subs	r3, r2, r3
 80055d6:	2b02      	cmp	r3, #2
 80055d8:	d901      	bls.n	80055de <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80055da:	2303      	movs	r3, #3
 80055dc:	e24d      	b.n	8005a7a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80055de:	f7ff fbc9 	bl	8004d74 <LL_RCC_HSI_IsReady>
 80055e2:	4603      	mov	r3, r0
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d0f1      	beq.n	80055cc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	691b      	ldr	r3, [r3, #16]
 80055ec:	4618      	mov	r0, r3
 80055ee:	f7ff fbd3 	bl	8004d98 <LL_RCC_HSI_SetCalibTrimming>
 80055f2:	e013      	b.n	800561c <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055f4:	f7ff fbaf 	bl	8004d56 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055f8:	f7fe faf4 	bl	8003be4 <HAL_GetTick>
 80055fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80055fe:	e008      	b.n	8005612 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005600:	f7fe faf0 	bl	8003be4 <HAL_GetTick>
 8005604:	4602      	mov	r2, r0
 8005606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005608:	1ad3      	subs	r3, r2, r3
 800560a:	2b02      	cmp	r3, #2
 800560c:	d901      	bls.n	8005612 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800560e:	2303      	movs	r3, #3
 8005610:	e233      	b.n	8005a7a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8005612:	f7ff fbaf 	bl	8004d74 <LL_RCC_HSI_IsReady>
 8005616:	4603      	mov	r3, r0
 8005618:	2b00      	cmp	r3, #0
 800561a:	d1f1      	bne.n	8005600 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f003 0308 	and.w	r3, r3, #8
 8005624:	2b00      	cmp	r3, #0
 8005626:	d106      	bne.n	8005636 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8005630:	2b00      	cmp	r3, #0
 8005632:	f000 80a3 	beq.w	800577c <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	695b      	ldr	r3, [r3, #20]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d076      	beq.n	800572c <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f003 0310 	and.w	r3, r3, #16
 8005646:	2b00      	cmp	r3, #0
 8005648:	d046      	beq.n	80056d8 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800564a:	f7ff fc66 	bl	8004f1a <LL_RCC_LSI1_IsReady>
 800564e:	4603      	mov	r3, r0
 8005650:	2b00      	cmp	r3, #0
 8005652:	d113      	bne.n	800567c <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8005654:	f7ff fc3f 	bl	8004ed6 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005658:	f7fe fac4 	bl	8003be4 <HAL_GetTick>
 800565c:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800565e:	e008      	b.n	8005672 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005660:	f7fe fac0 	bl	8003be4 <HAL_GetTick>
 8005664:	4602      	mov	r2, r0
 8005666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005668:	1ad3      	subs	r3, r2, r3
 800566a:	2b02      	cmp	r3, #2
 800566c:	d901      	bls.n	8005672 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800566e:	2303      	movs	r3, #3
 8005670:	e203      	b.n	8005a7a <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8005672:	f7ff fc52 	bl	8004f1a <LL_RCC_LSI1_IsReady>
 8005676:	4603      	mov	r3, r0
 8005678:	2b00      	cmp	r3, #0
 800567a:	d0f1      	beq.n	8005660 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800567c:	f7ff fc5f 	bl	8004f3e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005680:	f7fe fab0 	bl	8003be4 <HAL_GetTick>
 8005684:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005686:	e008      	b.n	800569a <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005688:	f7fe faac 	bl	8003be4 <HAL_GetTick>
 800568c:	4602      	mov	r2, r0
 800568e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005690:	1ad3      	subs	r3, r2, r3
 8005692:	2b03      	cmp	r3, #3
 8005694:	d901      	bls.n	800569a <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8005696:	2303      	movs	r3, #3
 8005698:	e1ef      	b.n	8005a7a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800569a:	f7ff fc72 	bl	8004f82 <LL_RCC_LSI2_IsReady>
 800569e:	4603      	mov	r3, r0
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d0f1      	beq.n	8005688 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	699b      	ldr	r3, [r3, #24]
 80056a8:	4618      	mov	r0, r3
 80056aa:	f7ff fc7c 	bl	8004fa6 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80056ae:	f7ff fc23 	bl	8004ef8 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056b2:	f7fe fa97 	bl	8003be4 <HAL_GetTick>
 80056b6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80056b8:	e008      	b.n	80056cc <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80056ba:	f7fe fa93 	bl	8003be4 <HAL_GetTick>
 80056be:	4602      	mov	r2, r0
 80056c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c2:	1ad3      	subs	r3, r2, r3
 80056c4:	2b02      	cmp	r3, #2
 80056c6:	d901      	bls.n	80056cc <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80056c8:	2303      	movs	r3, #3
 80056ca:	e1d6      	b.n	8005a7a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80056cc:	f7ff fc25 	bl	8004f1a <LL_RCC_LSI1_IsReady>
 80056d0:	4603      	mov	r3, r0
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d1f1      	bne.n	80056ba <HAL_RCC_OscConfig+0x31a>
 80056d6:	e051      	b.n	800577c <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80056d8:	f7ff fbfd 	bl	8004ed6 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056dc:	f7fe fa82 	bl	8003be4 <HAL_GetTick>
 80056e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80056e2:	e00c      	b.n	80056fe <HAL_RCC_OscConfig+0x35e>
 80056e4:	20000014 	.word	0x20000014
 80056e8:	2000001c 	.word	0x2000001c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80056ec:	f7fe fa7a 	bl	8003be4 <HAL_GetTick>
 80056f0:	4602      	mov	r2, r0
 80056f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056f4:	1ad3      	subs	r3, r2, r3
 80056f6:	2b02      	cmp	r3, #2
 80056f8:	d901      	bls.n	80056fe <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80056fa:	2303      	movs	r3, #3
 80056fc:	e1bd      	b.n	8005a7a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80056fe:	f7ff fc0c 	bl	8004f1a <LL_RCC_LSI1_IsReady>
 8005702:	4603      	mov	r3, r0
 8005704:	2b00      	cmp	r3, #0
 8005706:	d0f1      	beq.n	80056ec <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8005708:	f7ff fc2a 	bl	8004f60 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800570c:	e008      	b.n	8005720 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800570e:	f7fe fa69 	bl	8003be4 <HAL_GetTick>
 8005712:	4602      	mov	r2, r0
 8005714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005716:	1ad3      	subs	r3, r2, r3
 8005718:	2b03      	cmp	r3, #3
 800571a:	d901      	bls.n	8005720 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800571c:	2303      	movs	r3, #3
 800571e:	e1ac      	b.n	8005a7a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005720:	f7ff fc2f 	bl	8004f82 <LL_RCC_LSI2_IsReady>
 8005724:	4603      	mov	r3, r0
 8005726:	2b00      	cmp	r3, #0
 8005728:	d1f1      	bne.n	800570e <HAL_RCC_OscConfig+0x36e>
 800572a:	e027      	b.n	800577c <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800572c:	f7ff fc18 	bl	8004f60 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005730:	f7fe fa58 	bl	8003be4 <HAL_GetTick>
 8005734:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005736:	e008      	b.n	800574a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005738:	f7fe fa54 	bl	8003be4 <HAL_GetTick>
 800573c:	4602      	mov	r2, r0
 800573e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005740:	1ad3      	subs	r3, r2, r3
 8005742:	2b03      	cmp	r3, #3
 8005744:	d901      	bls.n	800574a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005746:	2303      	movs	r3, #3
 8005748:	e197      	b.n	8005a7a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800574a:	f7ff fc1a 	bl	8004f82 <LL_RCC_LSI2_IsReady>
 800574e:	4603      	mov	r3, r0
 8005750:	2b00      	cmp	r3, #0
 8005752:	d1f1      	bne.n	8005738 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8005754:	f7ff fbd0 	bl	8004ef8 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005758:	f7fe fa44 	bl	8003be4 <HAL_GetTick>
 800575c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800575e:	e008      	b.n	8005772 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005760:	f7fe fa40 	bl	8003be4 <HAL_GetTick>
 8005764:	4602      	mov	r2, r0
 8005766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005768:	1ad3      	subs	r3, r2, r3
 800576a:	2b02      	cmp	r3, #2
 800576c:	d901      	bls.n	8005772 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800576e:	2303      	movs	r3, #3
 8005770:	e183      	b.n	8005a7a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8005772:	f7ff fbd2 	bl	8004f1a <LL_RCC_LSI1_IsReady>
 8005776:	4603      	mov	r3, r0
 8005778:	2b00      	cmp	r3, #0
 800577a:	d1f1      	bne.n	8005760 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f003 0304 	and.w	r3, r3, #4
 8005784:	2b00      	cmp	r3, #0
 8005786:	d05b      	beq.n	8005840 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005788:	4ba7      	ldr	r3, [pc, #668]	@ (8005a28 <HAL_RCC_OscConfig+0x688>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005790:	2b00      	cmp	r3, #0
 8005792:	d114      	bne.n	80057be <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005794:	f7ff fa70 	bl	8004c78 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005798:	f7fe fa24 	bl	8003be4 <HAL_GetTick>
 800579c:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800579e:	e008      	b.n	80057b2 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057a0:	f7fe fa20 	bl	8003be4 <HAL_GetTick>
 80057a4:	4602      	mov	r2, r0
 80057a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057a8:	1ad3      	subs	r3, r2, r3
 80057aa:	2b02      	cmp	r3, #2
 80057ac:	d901      	bls.n	80057b2 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80057ae:	2303      	movs	r3, #3
 80057b0:	e163      	b.n	8005a7a <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057b2:	4b9d      	ldr	r3, [pc, #628]	@ (8005a28 <HAL_RCC_OscConfig+0x688>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d0f0      	beq.n	80057a0 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	d102      	bne.n	80057cc <HAL_RCC_OscConfig+0x42c>
 80057c6:	f7ff fb30 	bl	8004e2a <LL_RCC_LSE_Enable>
 80057ca:	e00c      	b.n	80057e6 <HAL_RCC_OscConfig+0x446>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	2b05      	cmp	r3, #5
 80057d2:	d104      	bne.n	80057de <HAL_RCC_OscConfig+0x43e>
 80057d4:	f7ff fb4b 	bl	8004e6e <LL_RCC_LSE_EnableBypass>
 80057d8:	f7ff fb27 	bl	8004e2a <LL_RCC_LSE_Enable>
 80057dc:	e003      	b.n	80057e6 <HAL_RCC_OscConfig+0x446>
 80057de:	f7ff fb35 	bl	8004e4c <LL_RCC_LSE_Disable>
 80057e2:	f7ff fb55 	bl	8004e90 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d014      	beq.n	8005818 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057ee:	f7fe f9f9 	bl	8003be4 <HAL_GetTick>
 80057f2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80057f4:	e00a      	b.n	800580c <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057f6:	f7fe f9f5 	bl	8003be4 <HAL_GetTick>
 80057fa:	4602      	mov	r2, r0
 80057fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057fe:	1ad3      	subs	r3, r2, r3
 8005800:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005804:	4293      	cmp	r3, r2
 8005806:	d901      	bls.n	800580c <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8005808:	2303      	movs	r3, #3
 800580a:	e136      	b.n	8005a7a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 800580c:	f7ff fb51 	bl	8004eb2 <LL_RCC_LSE_IsReady>
 8005810:	4603      	mov	r3, r0
 8005812:	2b00      	cmp	r3, #0
 8005814:	d0ef      	beq.n	80057f6 <HAL_RCC_OscConfig+0x456>
 8005816:	e013      	b.n	8005840 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005818:	f7fe f9e4 	bl	8003be4 <HAL_GetTick>
 800581c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800581e:	e00a      	b.n	8005836 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005820:	f7fe f9e0 	bl	8003be4 <HAL_GetTick>
 8005824:	4602      	mov	r2, r0
 8005826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005828:	1ad3      	subs	r3, r2, r3
 800582a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800582e:	4293      	cmp	r3, r2
 8005830:	d901      	bls.n	8005836 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8005832:	2303      	movs	r3, #3
 8005834:	e121      	b.n	8005a7a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8005836:	f7ff fb3c 	bl	8004eb2 <LL_RCC_LSE_IsReady>
 800583a:	4603      	mov	r3, r0
 800583c:	2b00      	cmp	r3, #0
 800583e:	d1ef      	bne.n	8005820 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005848:	2b00      	cmp	r3, #0
 800584a:	d02c      	beq.n	80058a6 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005850:	2b00      	cmp	r3, #0
 8005852:	d014      	beq.n	800587e <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005854:	f7ff fab5 	bl	8004dc2 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005858:	f7fe f9c4 	bl	8003be4 <HAL_GetTick>
 800585c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800585e:	e008      	b.n	8005872 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005860:	f7fe f9c0 	bl	8003be4 <HAL_GetTick>
 8005864:	4602      	mov	r2, r0
 8005866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005868:	1ad3      	subs	r3, r2, r3
 800586a:	2b02      	cmp	r3, #2
 800586c:	d901      	bls.n	8005872 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800586e:	2303      	movs	r3, #3
 8005870:	e103      	b.n	8005a7a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8005872:	f7ff fac8 	bl	8004e06 <LL_RCC_HSI48_IsReady>
 8005876:	4603      	mov	r3, r0
 8005878:	2b00      	cmp	r3, #0
 800587a:	d0f1      	beq.n	8005860 <HAL_RCC_OscConfig+0x4c0>
 800587c:	e013      	b.n	80058a6 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800587e:	f7ff fab1 	bl	8004de4 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005882:	f7fe f9af 	bl	8003be4 <HAL_GetTick>
 8005886:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005888:	e008      	b.n	800589c <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800588a:	f7fe f9ab 	bl	8003be4 <HAL_GetTick>
 800588e:	4602      	mov	r2, r0
 8005890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005892:	1ad3      	subs	r3, r2, r3
 8005894:	2b02      	cmp	r3, #2
 8005896:	d901      	bls.n	800589c <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8005898:	2303      	movs	r3, #3
 800589a:	e0ee      	b.n	8005a7a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800589c:	f7ff fab3 	bl	8004e06 <LL_RCC_HSI48_IsReady>
 80058a0:	4603      	mov	r3, r0
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d1f1      	bne.n	800588a <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	f000 80e4 	beq.w	8005a78 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80058b0:	f7ff fc11 	bl	80050d6 <LL_RCC_GetSysClkSource>
 80058b4:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80058b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058c2:	2b02      	cmp	r3, #2
 80058c4:	f040 80b4 	bne.w	8005a30 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f003 0203 	and.w	r2, r3, #3
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d123      	bne.n	800591e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d11c      	bne.n	800591e <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	0a1b      	lsrs	r3, r3, #8
 80058e8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d114      	bne.n	800591e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80058fe:	429a      	cmp	r2, r3
 8005900:	d10d      	bne.n	800591e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800590c:	429a      	cmp	r2, r3
 800590e:	d106      	bne.n	800591e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800591a:	429a      	cmp	r2, r3
 800591c:	d05d      	beq.n	80059da <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	2b0c      	cmp	r3, #12
 8005922:	d058      	beq.n	80059d6 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005924:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800592e:	2b00      	cmp	r3, #0
 8005930:	d001      	beq.n	8005936 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	e0a1      	b.n	8005a7a <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005936:	f7ff fc84 	bl	8005242 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800593a:	f7fe f953 	bl	8003be4 <HAL_GetTick>
 800593e:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005940:	e008      	b.n	8005954 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005942:	f7fe f94f 	bl	8003be4 <HAL_GetTick>
 8005946:	4602      	mov	r2, r0
 8005948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800594a:	1ad3      	subs	r3, r2, r3
 800594c:	2b02      	cmp	r3, #2
 800594e:	d901      	bls.n	8005954 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8005950:	2303      	movs	r3, #3
 8005952:	e092      	b.n	8005a7a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005954:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800595e:	2b00      	cmp	r3, #0
 8005960:	d1ef      	bne.n	8005942 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005962:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005966:	68da      	ldr	r2, [r3, #12]
 8005968:	4b30      	ldr	r3, [pc, #192]	@ (8005a2c <HAL_RCC_OscConfig+0x68c>)
 800596a:	4013      	ands	r3, r2
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8005970:	687a      	ldr	r2, [r7, #4]
 8005972:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005974:	4311      	orrs	r1, r2
 8005976:	687a      	ldr	r2, [r7, #4]
 8005978:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800597a:	0212      	lsls	r2, r2, #8
 800597c:	4311      	orrs	r1, r2
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005982:	4311      	orrs	r1, r2
 8005984:	687a      	ldr	r2, [r7, #4]
 8005986:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005988:	4311      	orrs	r1, r2
 800598a:	687a      	ldr	r2, [r7, #4]
 800598c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800598e:	430a      	orrs	r2, r1
 8005990:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005994:	4313      	orrs	r3, r2
 8005996:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005998:	f7ff fc44 	bl	8005224 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800599c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059a0:	68db      	ldr	r3, [r3, #12]
 80059a2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80059a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80059aa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80059ac:	f7fe f91a 	bl	8003be4 <HAL_GetTick>
 80059b0:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059b2:	e008      	b.n	80059c6 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059b4:	f7fe f916 	bl	8003be4 <HAL_GetTick>
 80059b8:	4602      	mov	r2, r0
 80059ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059bc:	1ad3      	subs	r3, r2, r3
 80059be:	2b02      	cmp	r3, #2
 80059c0:	d901      	bls.n	80059c6 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80059c2:	2303      	movs	r3, #3
 80059c4:	e059      	b.n	8005a7a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d0ef      	beq.n	80059b4 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80059d4:	e050      	b.n	8005a78 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	e04f      	b.n	8005a7a <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d147      	bne.n	8005a78 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80059e8:	f7ff fc1c 	bl	8005224 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80059ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059f0:	68db      	ldr	r3, [r3, #12]
 80059f2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80059f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80059fa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80059fc:	f7fe f8f2 	bl	8003be4 <HAL_GetTick>
 8005a00:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a02:	e008      	b.n	8005a16 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a04:	f7fe f8ee 	bl	8003be4 <HAL_GetTick>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a0c:	1ad3      	subs	r3, r2, r3
 8005a0e:	2b02      	cmp	r3, #2
 8005a10:	d901      	bls.n	8005a16 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8005a12:	2303      	movs	r3, #3
 8005a14:	e031      	b.n	8005a7a <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d0ef      	beq.n	8005a04 <HAL_RCC_OscConfig+0x664>
 8005a24:	e028      	b.n	8005a78 <HAL_RCC_OscConfig+0x6d8>
 8005a26:	bf00      	nop
 8005a28:	58000400 	.word	0x58000400
 8005a2c:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	2b0c      	cmp	r3, #12
 8005a34:	d01e      	beq.n	8005a74 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a36:	f7ff fc04 	bl	8005242 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a3a:	f7fe f8d3 	bl	8003be4 <HAL_GetTick>
 8005a3e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a40:	e008      	b.n	8005a54 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a42:	f7fe f8cf 	bl	8003be4 <HAL_GetTick>
 8005a46:	4602      	mov	r2, r0
 8005a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a4a:	1ad3      	subs	r3, r2, r3
 8005a4c:	2b02      	cmp	r3, #2
 8005a4e:	d901      	bls.n	8005a54 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8005a50:	2303      	movs	r3, #3
 8005a52:	e012      	b.n	8005a7a <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d1ef      	bne.n	8005a42 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8005a62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a66:	68da      	ldr	r2, [r3, #12]
 8005a68:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005a6c:	4b05      	ldr	r3, [pc, #20]	@ (8005a84 <HAL_RCC_OscConfig+0x6e4>)
 8005a6e:	4013      	ands	r3, r2
 8005a70:	60cb      	str	r3, [r1, #12]
 8005a72:	e001      	b.n	8005a78 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005a74:	2301      	movs	r3, #1
 8005a76:	e000      	b.n	8005a7a <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8005a78:	2300      	movs	r3, #0
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3734      	adds	r7, #52	@ 0x34
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd90      	pop	{r4, r7, pc}
 8005a82:	bf00      	nop
 8005a84:	eefefffc 	.word	0xeefefffc

08005a88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b084      	sub	sp, #16
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d101      	bne.n	8005a9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e12d      	b.n	8005cf8 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005a9c:	4b98      	ldr	r3, [pc, #608]	@ (8005d00 <HAL_RCC_ClockConfig+0x278>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f003 0307 	and.w	r3, r3, #7
 8005aa4:	683a      	ldr	r2, [r7, #0]
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d91b      	bls.n	8005ae2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005aaa:	4b95      	ldr	r3, [pc, #596]	@ (8005d00 <HAL_RCC_ClockConfig+0x278>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f023 0207 	bic.w	r2, r3, #7
 8005ab2:	4993      	ldr	r1, [pc, #588]	@ (8005d00 <HAL_RCC_ClockConfig+0x278>)
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005aba:	f7fe f893 	bl	8003be4 <HAL_GetTick>
 8005abe:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ac0:	e008      	b.n	8005ad4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005ac2:	f7fe f88f 	bl	8003be4 <HAL_GetTick>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	1ad3      	subs	r3, r2, r3
 8005acc:	2b02      	cmp	r3, #2
 8005ace:	d901      	bls.n	8005ad4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8005ad0:	2303      	movs	r3, #3
 8005ad2:	e111      	b.n	8005cf8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ad4:	4b8a      	ldr	r3, [pc, #552]	@ (8005d00 <HAL_RCC_ClockConfig+0x278>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f003 0307 	and.w	r3, r3, #7
 8005adc:	683a      	ldr	r2, [r7, #0]
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d1ef      	bne.n	8005ac2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f003 0302 	and.w	r3, r3, #2
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d016      	beq.n	8005b1c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	4618      	mov	r0, r3
 8005af4:	f7ff fafb 	bl	80050ee <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005af8:	f7fe f874 	bl	8003be4 <HAL_GetTick>
 8005afc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005afe:	e008      	b.n	8005b12 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005b00:	f7fe f870 	bl	8003be4 <HAL_GetTick>
 8005b04:	4602      	mov	r2, r0
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	1ad3      	subs	r3, r2, r3
 8005b0a:	2b02      	cmp	r3, #2
 8005b0c:	d901      	bls.n	8005b12 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8005b0e:	2303      	movs	r3, #3
 8005b10:	e0f2      	b.n	8005cf8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005b12:	f7ff fbe8 	bl	80052e6 <LL_RCC_IsActiveFlag_HPRE>
 8005b16:	4603      	mov	r3, r0
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d0f1      	beq.n	8005b00 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f003 0320 	and.w	r3, r3, #32
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d016      	beq.n	8005b56 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	695b      	ldr	r3, [r3, #20]
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f7ff faf2 	bl	8005116 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005b32:	f7fe f857 	bl	8003be4 <HAL_GetTick>
 8005b36:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005b38:	e008      	b.n	8005b4c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005b3a:	f7fe f853 	bl	8003be4 <HAL_GetTick>
 8005b3e:	4602      	mov	r2, r0
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	1ad3      	subs	r3, r2, r3
 8005b44:	2b02      	cmp	r3, #2
 8005b46:	d901      	bls.n	8005b4c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8005b48:	2303      	movs	r3, #3
 8005b4a:	e0d5      	b.n	8005cf8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005b4c:	f7ff fbdd 	bl	800530a <LL_RCC_IsActiveFlag_C2HPRE>
 8005b50:	4603      	mov	r3, r0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d0f1      	beq.n	8005b3a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d016      	beq.n	8005b90 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	699b      	ldr	r3, [r3, #24]
 8005b66:	4618      	mov	r0, r3
 8005b68:	f7ff faeb 	bl	8005142 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005b6c:	f7fe f83a 	bl	8003be4 <HAL_GetTick>
 8005b70:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005b72:	e008      	b.n	8005b86 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005b74:	f7fe f836 	bl	8003be4 <HAL_GetTick>
 8005b78:	4602      	mov	r2, r0
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	1ad3      	subs	r3, r2, r3
 8005b7e:	2b02      	cmp	r3, #2
 8005b80:	d901      	bls.n	8005b86 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8005b82:	2303      	movs	r3, #3
 8005b84:	e0b8      	b.n	8005cf8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005b86:	f7ff fbd3 	bl	8005330 <LL_RCC_IsActiveFlag_SHDHPRE>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d0f1      	beq.n	8005b74 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f003 0304 	and.w	r3, r3, #4
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d016      	beq.n	8005bca <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	68db      	ldr	r3, [r3, #12]
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f7ff fae5 	bl	8005170 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005ba6:	f7fe f81d 	bl	8003be4 <HAL_GetTick>
 8005baa:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005bac:	e008      	b.n	8005bc0 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005bae:	f7fe f819 	bl	8003be4 <HAL_GetTick>
 8005bb2:	4602      	mov	r2, r0
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	1ad3      	subs	r3, r2, r3
 8005bb8:	2b02      	cmp	r3, #2
 8005bba:	d901      	bls.n	8005bc0 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8005bbc:	2303      	movs	r3, #3
 8005bbe:	e09b      	b.n	8005cf8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005bc0:	f7ff fbc9 	bl	8005356 <LL_RCC_IsActiveFlag_PPRE1>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d0f1      	beq.n	8005bae <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f003 0308 	and.w	r3, r3, #8
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d017      	beq.n	8005c06 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	691b      	ldr	r3, [r3, #16]
 8005bda:	00db      	lsls	r3, r3, #3
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f7ff fadb 	bl	8005198 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005be2:	f7fd ffff 	bl	8003be4 <HAL_GetTick>
 8005be6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005be8:	e008      	b.n	8005bfc <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005bea:	f7fd fffb 	bl	8003be4 <HAL_GetTick>
 8005bee:	4602      	mov	r2, r0
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	1ad3      	subs	r3, r2, r3
 8005bf4:	2b02      	cmp	r3, #2
 8005bf6:	d901      	bls.n	8005bfc <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8005bf8:	2303      	movs	r3, #3
 8005bfa:	e07d      	b.n	8005cf8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005bfc:	f7ff fbbd 	bl	800537a <LL_RCC_IsActiveFlag_PPRE2>
 8005c00:	4603      	mov	r3, r0
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d0f1      	beq.n	8005bea <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f003 0301 	and.w	r3, r3, #1
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d043      	beq.n	8005c9a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	2b02      	cmp	r3, #2
 8005c18:	d106      	bne.n	8005c28 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8005c1a:	f7ff f87b 	bl	8004d14 <LL_RCC_HSE_IsReady>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d11e      	bne.n	8005c62 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	e067      	b.n	8005cf8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	2b03      	cmp	r3, #3
 8005c2e:	d106      	bne.n	8005c3e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005c30:	f7ff fb16 	bl	8005260 <LL_RCC_PLL_IsReady>
 8005c34:	4603      	mov	r3, r0
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d113      	bne.n	8005c62 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e05c      	b.n	8005cf8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d106      	bne.n	8005c54 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8005c46:	f7ff f9e3 	bl	8005010 <LL_RCC_MSI_IsReady>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d108      	bne.n	8005c62 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005c50:	2301      	movs	r3, #1
 8005c52:	e051      	b.n	8005cf8 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8005c54:	f7ff f88e 	bl	8004d74 <LL_RCC_HSI_IsReady>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d101      	bne.n	8005c62 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e04a      	b.n	8005cf8 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	4618      	mov	r0, r3
 8005c68:	f7ff fa21 	bl	80050ae <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c6c:	f7fd ffba 	bl	8003be4 <HAL_GetTick>
 8005c70:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c72:	e00a      	b.n	8005c8a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c74:	f7fd ffb6 	bl	8003be4 <HAL_GetTick>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	1ad3      	subs	r3, r2, r3
 8005c7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d901      	bls.n	8005c8a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8005c86:	2303      	movs	r3, #3
 8005c88:	e036      	b.n	8005cf8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c8a:	f7ff fa24 	bl	80050d6 <LL_RCC_GetSysClkSource>
 8005c8e:	4602      	mov	r2, r0
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d1ec      	bne.n	8005c74 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005c9a:	4b19      	ldr	r3, [pc, #100]	@ (8005d00 <HAL_RCC_ClockConfig+0x278>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f003 0307 	and.w	r3, r3, #7
 8005ca2:	683a      	ldr	r2, [r7, #0]
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d21b      	bcs.n	8005ce0 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ca8:	4b15      	ldr	r3, [pc, #84]	@ (8005d00 <HAL_RCC_ClockConfig+0x278>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f023 0207 	bic.w	r2, r3, #7
 8005cb0:	4913      	ldr	r1, [pc, #76]	@ (8005d00 <HAL_RCC_ClockConfig+0x278>)
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cb8:	f7fd ff94 	bl	8003be4 <HAL_GetTick>
 8005cbc:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cbe:	e008      	b.n	8005cd2 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005cc0:	f7fd ff90 	bl	8003be4 <HAL_GetTick>
 8005cc4:	4602      	mov	r2, r0
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	1ad3      	subs	r3, r2, r3
 8005cca:	2b02      	cmp	r3, #2
 8005ccc:	d901      	bls.n	8005cd2 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8005cce:	2303      	movs	r3, #3
 8005cd0:	e012      	b.n	8005cf8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cd2:	4b0b      	ldr	r3, [pc, #44]	@ (8005d00 <HAL_RCC_ClockConfig+0x278>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f003 0307 	and.w	r3, r3, #7
 8005cda:	683a      	ldr	r2, [r7, #0]
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d1ef      	bne.n	8005cc0 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005ce0:	f000 f87e 	bl	8005de0 <HAL_RCC_GetHCLKFreq>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	4a07      	ldr	r2, [pc, #28]	@ (8005d04 <HAL_RCC_ClockConfig+0x27c>)
 8005ce8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8005cea:	f7fd ff87 	bl	8003bfc <HAL_GetTickPrio>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f7fd ff29 	bl	8003b48 <HAL_InitTick>
 8005cf6:	4603      	mov	r3, r0
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3710      	adds	r7, #16
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}
 8005d00:	58004000 	.word	0x58004000
 8005d04:	20000014 	.word	0x20000014

08005d08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d08:	b590      	push	{r4, r7, lr}
 8005d0a:	b085      	sub	sp, #20
 8005d0c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d0e:	f7ff f9e2 	bl	80050d6 <LL_RCC_GetSysClkSource>
 8005d12:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d10a      	bne.n	8005d30 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005d1a:	f7ff f99e 	bl	800505a <LL_RCC_MSI_GetRange>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	091b      	lsrs	r3, r3, #4
 8005d22:	f003 030f 	and.w	r3, r3, #15
 8005d26:	4a2b      	ldr	r2, [pc, #172]	@ (8005dd4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005d28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d2c:	60fb      	str	r3, [r7, #12]
 8005d2e:	e04b      	b.n	8005dc8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2b04      	cmp	r3, #4
 8005d34:	d102      	bne.n	8005d3c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005d36:	4b28      	ldr	r3, [pc, #160]	@ (8005dd8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005d38:	60fb      	str	r3, [r7, #12]
 8005d3a:	e045      	b.n	8005dc8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2b08      	cmp	r3, #8
 8005d40:	d10a      	bne.n	8005d58 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005d42:	f7fe ffb7 	bl	8004cb4 <LL_RCC_HSE_IsEnabledDiv2>
 8005d46:	4603      	mov	r3, r0
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d102      	bne.n	8005d52 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005d4c:	4b22      	ldr	r3, [pc, #136]	@ (8005dd8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005d4e:	60fb      	str	r3, [r7, #12]
 8005d50:	e03a      	b.n	8005dc8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8005d52:	4b22      	ldr	r3, [pc, #136]	@ (8005ddc <HAL_RCC_GetSysClockFreq+0xd4>)
 8005d54:	60fb      	str	r3, [r7, #12]
 8005d56:	e037      	b.n	8005dc8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8005d58:	f7ff fab9 	bl	80052ce <LL_RCC_PLL_GetMainSource>
 8005d5c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	2b02      	cmp	r3, #2
 8005d62:	d003      	beq.n	8005d6c <HAL_RCC_GetSysClockFreq+0x64>
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	2b03      	cmp	r3, #3
 8005d68:	d003      	beq.n	8005d72 <HAL_RCC_GetSysClockFreq+0x6a>
 8005d6a:	e00d      	b.n	8005d88 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005d6c:	4b1a      	ldr	r3, [pc, #104]	@ (8005dd8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005d6e:	60bb      	str	r3, [r7, #8]
        break;
 8005d70:	e015      	b.n	8005d9e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005d72:	f7fe ff9f 	bl	8004cb4 <LL_RCC_HSE_IsEnabledDiv2>
 8005d76:	4603      	mov	r3, r0
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d102      	bne.n	8005d82 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8005d7c:	4b16      	ldr	r3, [pc, #88]	@ (8005dd8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005d7e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005d80:	e00d      	b.n	8005d9e <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8005d82:	4b16      	ldr	r3, [pc, #88]	@ (8005ddc <HAL_RCC_GetSysClockFreq+0xd4>)
 8005d84:	60bb      	str	r3, [r7, #8]
        break;
 8005d86:	e00a      	b.n	8005d9e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005d88:	f7ff f967 	bl	800505a <LL_RCC_MSI_GetRange>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	091b      	lsrs	r3, r3, #4
 8005d90:	f003 030f 	and.w	r3, r3, #15
 8005d94:	4a0f      	ldr	r2, [pc, #60]	@ (8005dd4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005d96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d9a:	60bb      	str	r3, [r7, #8]
        break;
 8005d9c:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8005d9e:	f7ff fa71 	bl	8005284 <LL_RCC_PLL_GetN>
 8005da2:	4602      	mov	r2, r0
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	fb03 f402 	mul.w	r4, r3, r2
 8005daa:	f7ff fa84 	bl	80052b6 <LL_RCC_PLL_GetDivider>
 8005dae:	4603      	mov	r3, r0
 8005db0:	091b      	lsrs	r3, r3, #4
 8005db2:	3301      	adds	r3, #1
 8005db4:	fbb4 f4f3 	udiv	r4, r4, r3
 8005db8:	f7ff fa71 	bl	800529e <LL_RCC_PLL_GetR>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	0f5b      	lsrs	r3, r3, #29
 8005dc0:	3301      	adds	r3, #1
 8005dc2:	fbb4 f3f3 	udiv	r3, r4, r3
 8005dc6:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3714      	adds	r7, #20
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd90      	pop	{r4, r7, pc}
 8005dd2:	bf00      	nop
 8005dd4:	080108d4 	.word	0x080108d4
 8005dd8:	00f42400 	.word	0x00f42400
 8005ddc:	01e84800 	.word	0x01e84800

08005de0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005de0:	b598      	push	{r3, r4, r7, lr}
 8005de2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005de4:	f7ff ff90 	bl	8005d08 <HAL_RCC_GetSysClockFreq>
 8005de8:	4604      	mov	r4, r0
 8005dea:	f7ff f9e9 	bl	80051c0 <LL_RCC_GetAHBPrescaler>
 8005dee:	4603      	mov	r3, r0
 8005df0:	091b      	lsrs	r3, r3, #4
 8005df2:	f003 030f 	and.w	r3, r3, #15
 8005df6:	4a03      	ldr	r2, [pc, #12]	@ (8005e04 <HAL_RCC_GetHCLKFreq+0x24>)
 8005df8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dfc:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	bd98      	pop	{r3, r4, r7, pc}
 8005e04:	08010874 	.word	0x08010874

08005e08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e08:	b598      	push	{r3, r4, r7, lr}
 8005e0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005e0c:	f7ff ffe8 	bl	8005de0 <HAL_RCC_GetHCLKFreq>
 8005e10:	4604      	mov	r4, r0
 8005e12:	f7ff f9ef 	bl	80051f4 <LL_RCC_GetAPB1Prescaler>
 8005e16:	4603      	mov	r3, r0
 8005e18:	0a1b      	lsrs	r3, r3, #8
 8005e1a:	f003 0307 	and.w	r3, r3, #7
 8005e1e:	4a04      	ldr	r2, [pc, #16]	@ (8005e30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005e20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e24:	f003 031f 	and.w	r3, r3, #31
 8005e28:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	bd98      	pop	{r3, r4, r7, pc}
 8005e30:	080108b4 	.word	0x080108b4

08005e34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e34:	b598      	push	{r3, r4, r7, lr}
 8005e36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8005e38:	f7ff ffd2 	bl	8005de0 <HAL_RCC_GetHCLKFreq>
 8005e3c:	4604      	mov	r4, r0
 8005e3e:	f7ff f9e5 	bl	800520c <LL_RCC_GetAPB2Prescaler>
 8005e42:	4603      	mov	r3, r0
 8005e44:	0adb      	lsrs	r3, r3, #11
 8005e46:	f003 0307 	and.w	r3, r3, #7
 8005e4a:	4a04      	ldr	r2, [pc, #16]	@ (8005e5c <HAL_RCC_GetPCLK2Freq+0x28>)
 8005e4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e50:	f003 031f 	and.w	r3, r3, #31
 8005e54:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	bd98      	pop	{r3, r4, r7, pc}
 8005e5c:	080108b4 	.word	0x080108b4

08005e60 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005e60:	b590      	push	{r4, r7, lr}
 8005e62:	b085      	sub	sp, #20
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2bb0      	cmp	r3, #176	@ 0xb0
 8005e6c:	d903      	bls.n	8005e76 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8005e6e:	4b15      	ldr	r3, [pc, #84]	@ (8005ec4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005e70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e72:	60fb      	str	r3, [r7, #12]
 8005e74:	e007      	b.n	8005e86 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	091b      	lsrs	r3, r3, #4
 8005e7a:	f003 030f 	and.w	r3, r3, #15
 8005e7e:	4a11      	ldr	r2, [pc, #68]	@ (8005ec4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005e80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e84:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8005e86:	f7ff f9a7 	bl	80051d8 <LL_RCC_GetAHB4Prescaler>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	091b      	lsrs	r3, r3, #4
 8005e8e:	f003 030f 	and.w	r3, r3, #15
 8005e92:	4a0d      	ldr	r2, [pc, #52]	@ (8005ec8 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8005e94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e98:	68fa      	ldr	r2, [r7, #12]
 8005e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e9e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	4a0a      	ldr	r2, [pc, #40]	@ (8005ecc <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8005ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ea8:	0c9c      	lsrs	r4, r3, #18
 8005eaa:	f7fe fef5 	bl	8004c98 <HAL_PWREx_GetVoltageRange>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	4619      	mov	r1, r3
 8005eb2:	4620      	mov	r0, r4
 8005eb4:	f000 f80c 	bl	8005ed0 <RCC_SetFlashLatency>
 8005eb8:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3714      	adds	r7, #20
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd90      	pop	{r4, r7, pc}
 8005ec2:	bf00      	nop
 8005ec4:	080108d4 	.word	0x080108d4
 8005ec8:	08010874 	.word	0x08010874
 8005ecc:	431bde83 	.word	0x431bde83

08005ed0 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005ed0:	b590      	push	{r4, r7, lr}
 8005ed2:	b093      	sub	sp, #76	@ 0x4c
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8005eda:	4b37      	ldr	r3, [pc, #220]	@ (8005fb8 <RCC_SetFlashLatency+0xe8>)
 8005edc:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8005ee0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005ee2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8005ee6:	4a35      	ldr	r2, [pc, #212]	@ (8005fbc <RCC_SetFlashLatency+0xec>)
 8005ee8:	f107 031c 	add.w	r3, r7, #28
 8005eec:	ca07      	ldmia	r2, {r0, r1, r2}
 8005eee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8005ef2:	4b33      	ldr	r3, [pc, #204]	@ (8005fc0 <RCC_SetFlashLatency+0xf0>)
 8005ef4:	f107 040c 	add.w	r4, r7, #12
 8005ef8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005efa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005efe:	2300      	movs	r3, #0
 8005f00:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f08:	d11a      	bne.n	8005f40 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f0e:	e013      	b.n	8005f38 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005f10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f12:	009b      	lsls	r3, r3, #2
 8005f14:	3348      	adds	r3, #72	@ 0x48
 8005f16:	443b      	add	r3, r7
 8005f18:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8005f1c:	687a      	ldr	r2, [r7, #4]
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	d807      	bhi.n	8005f32 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005f22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f24:	009b      	lsls	r3, r3, #2
 8005f26:	3348      	adds	r3, #72	@ 0x48
 8005f28:	443b      	add	r3, r7
 8005f2a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005f2e:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8005f30:	e020      	b.n	8005f74 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005f32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f34:	3301      	adds	r3, #1
 8005f36:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f3a:	2b03      	cmp	r3, #3
 8005f3c:	d9e8      	bls.n	8005f10 <RCC_SetFlashLatency+0x40>
 8005f3e:	e019      	b.n	8005f74 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005f40:	2300      	movs	r3, #0
 8005f42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f44:	e013      	b.n	8005f6e <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8005f46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f48:	009b      	lsls	r3, r3, #2
 8005f4a:	3348      	adds	r3, #72	@ 0x48
 8005f4c:	443b      	add	r3, r7
 8005f4e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005f52:	687a      	ldr	r2, [r7, #4]
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d807      	bhi.n	8005f68 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005f58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f5a:	009b      	lsls	r3, r3, #2
 8005f5c:	3348      	adds	r3, #72	@ 0x48
 8005f5e:	443b      	add	r3, r7
 8005f60:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005f64:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8005f66:	e005      	b.n	8005f74 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005f68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f6a:	3301      	adds	r3, #1
 8005f6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f70:	2b02      	cmp	r3, #2
 8005f72:	d9e8      	bls.n	8005f46 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8005f74:	4b13      	ldr	r3, [pc, #76]	@ (8005fc4 <RCC_SetFlashLatency+0xf4>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f023 0207 	bic.w	r2, r3, #7
 8005f7c:	4911      	ldr	r1, [pc, #68]	@ (8005fc4 <RCC_SetFlashLatency+0xf4>)
 8005f7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f80:	4313      	orrs	r3, r2
 8005f82:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005f84:	f7fd fe2e 	bl	8003be4 <HAL_GetTick>
 8005f88:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005f8a:	e008      	b.n	8005f9e <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005f8c:	f7fd fe2a 	bl	8003be4 <HAL_GetTick>
 8005f90:	4602      	mov	r2, r0
 8005f92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f94:	1ad3      	subs	r3, r2, r3
 8005f96:	2b02      	cmp	r3, #2
 8005f98:	d901      	bls.n	8005f9e <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8005f9a:	2303      	movs	r3, #3
 8005f9c:	e007      	b.n	8005fae <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005f9e:	4b09      	ldr	r3, [pc, #36]	@ (8005fc4 <RCC_SetFlashLatency+0xf4>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f003 0307 	and.w	r3, r3, #7
 8005fa6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d1ef      	bne.n	8005f8c <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8005fac:	2300      	movs	r3, #0
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	374c      	adds	r7, #76	@ 0x4c
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd90      	pop	{r4, r7, pc}
 8005fb6:	bf00      	nop
 8005fb8:	0800f538 	.word	0x0800f538
 8005fbc:	0800f548 	.word	0x0800f548
 8005fc0:	0800f554 	.word	0x0800f554
 8005fc4:	58004000 	.word	0x58004000

08005fc8 <LL_RCC_LSE_IsEnabled>:
{
 8005fc8:	b480      	push	{r7}
 8005fca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8005fcc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fd4:	f003 0301 	and.w	r3, r3, #1
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	d101      	bne.n	8005fe0 <LL_RCC_LSE_IsEnabled+0x18>
 8005fdc:	2301      	movs	r3, #1
 8005fde:	e000      	b.n	8005fe2 <LL_RCC_LSE_IsEnabled+0x1a>
 8005fe0:	2300      	movs	r3, #0
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr

08005fec <LL_RCC_LSE_IsReady>:
{
 8005fec:	b480      	push	{r7}
 8005fee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005ff0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ff8:	f003 0302 	and.w	r3, r3, #2
 8005ffc:	2b02      	cmp	r3, #2
 8005ffe:	d101      	bne.n	8006004 <LL_RCC_LSE_IsReady+0x18>
 8006000:	2301      	movs	r3, #1
 8006002:	e000      	b.n	8006006 <LL_RCC_LSE_IsReady+0x1a>
 8006004:	2300      	movs	r3, #0
}
 8006006:	4618      	mov	r0, r3
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr

08006010 <LL_RCC_SetRFWKPClockSource>:
{
 8006010:	b480      	push	{r7}
 8006012:	b083      	sub	sp, #12
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8006018:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800601c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006020:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006024:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	4313      	orrs	r3, r2
 800602c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8006030:	bf00      	nop
 8006032:	370c      	adds	r7, #12
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr

0800603c <LL_RCC_SetSMPSClockSource>:
{
 800603c:	b480      	push	{r7}
 800603e:	b083      	sub	sp, #12
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8006044:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800604a:	f023 0203 	bic.w	r2, r3, #3
 800604e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	4313      	orrs	r3, r2
 8006056:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8006058:	bf00      	nop
 800605a:	370c      	adds	r7, #12
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr

08006064 <LL_RCC_SetSMPSPrescaler>:
{
 8006064:	b480      	push	{r7}
 8006066:	b083      	sub	sp, #12
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800606c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006072:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006076:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	4313      	orrs	r3, r2
 800607e:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8006080:	bf00      	nop
 8006082:	370c      	adds	r7, #12
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr

0800608c <LL_RCC_SetUSARTClockSource>:
{
 800608c:	b480      	push	{r7}
 800608e:	b083      	sub	sp, #12
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8006094:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006098:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800609c:	f023 0203 	bic.w	r2, r3, #3
 80060a0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	4313      	orrs	r3, r2
 80060a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80060ac:	bf00      	nop
 80060ae:	370c      	adds	r7, #12
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr

080060b8 <LL_RCC_SetLPUARTClockSource>:
{
 80060b8:	b480      	push	{r7}
 80060ba:	b083      	sub	sp, #12
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80060c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80060c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060c8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80060cc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	4313      	orrs	r3, r2
 80060d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80060d8:	bf00      	nop
 80060da:	370c      	adds	r7, #12
 80060dc:	46bd      	mov	sp, r7
 80060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e2:	4770      	bx	lr

080060e4 <LL_RCC_SetI2CClockSource>:
{
 80060e4:	b480      	push	{r7}
 80060e6:	b083      	sub	sp, #12
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80060ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80060f0:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	091b      	lsrs	r3, r3, #4
 80060f8:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80060fc:	43db      	mvns	r3, r3
 80060fe:	401a      	ands	r2, r3
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	011b      	lsls	r3, r3, #4
 8006104:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8006108:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800610c:	4313      	orrs	r3, r2
 800610e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006112:	bf00      	nop
 8006114:	370c      	adds	r7, #12
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr

0800611e <LL_RCC_SetLPTIMClockSource>:
{
 800611e:	b480      	push	{r7}
 8006120:	b083      	sub	sp, #12
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8006126:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800612a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	0c1b      	lsrs	r3, r3, #16
 8006132:	041b      	lsls	r3, r3, #16
 8006134:	43db      	mvns	r3, r3
 8006136:	401a      	ands	r2, r3
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	041b      	lsls	r3, r3, #16
 800613c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006140:	4313      	orrs	r3, r2
 8006142:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006146:	bf00      	nop
 8006148:	370c      	adds	r7, #12
 800614a:	46bd      	mov	sp, r7
 800614c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006150:	4770      	bx	lr

08006152 <LL_RCC_SetSAIClockSource>:
{
 8006152:	b480      	push	{r7}
 8006154:	b083      	sub	sp, #12
 8006156:	af00      	add	r7, sp, #0
 8006158:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800615a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800615e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006162:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006166:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	4313      	orrs	r3, r2
 800616e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006172:	bf00      	nop
 8006174:	370c      	adds	r7, #12
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr

0800617e <LL_RCC_SetRNGClockSource>:
{
 800617e:	b480      	push	{r7}
 8006180:	b083      	sub	sp, #12
 8006182:	af00      	add	r7, sp, #0
 8006184:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8006186:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800618a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800618e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8006192:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	4313      	orrs	r3, r2
 800619a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800619e:	bf00      	nop
 80061a0:	370c      	adds	r7, #12
 80061a2:	46bd      	mov	sp, r7
 80061a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a8:	4770      	bx	lr

080061aa <LL_RCC_SetCLK48ClockSource>:
{
 80061aa:	b480      	push	{r7}
 80061ac:	b083      	sub	sp, #12
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80061b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80061b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061ba:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80061be:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	4313      	orrs	r3, r2
 80061c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80061ca:	bf00      	nop
 80061cc:	370c      	adds	r7, #12
 80061ce:	46bd      	mov	sp, r7
 80061d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d4:	4770      	bx	lr

080061d6 <LL_RCC_SetUSBClockSource>:
{
 80061d6:	b580      	push	{r7, lr}
 80061d8:	b082      	sub	sp, #8
 80061da:	af00      	add	r7, sp, #0
 80061dc:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f7ff ffe3 	bl	80061aa <LL_RCC_SetCLK48ClockSource>
}
 80061e4:	bf00      	nop
 80061e6:	3708      	adds	r7, #8
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}

080061ec <LL_RCC_SetADCClockSource>:
{
 80061ec:	b480      	push	{r7}
 80061ee:	b083      	sub	sp, #12
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80061f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80061f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061fc:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006200:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	4313      	orrs	r3, r2
 8006208:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800620c:	bf00      	nop
 800620e:	370c      	adds	r7, #12
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr

08006218 <LL_RCC_SetRTCClockSource>:
{
 8006218:	b480      	push	{r7}
 800621a:	b083      	sub	sp, #12
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8006220:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006224:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006228:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800622c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	4313      	orrs	r3, r2
 8006234:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8006238:	bf00      	nop
 800623a:	370c      	adds	r7, #12
 800623c:	46bd      	mov	sp, r7
 800623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006242:	4770      	bx	lr

08006244 <LL_RCC_GetRTCClockSource>:
{
 8006244:	b480      	push	{r7}
 8006246:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006248:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800624c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006250:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8006254:	4618      	mov	r0, r3
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr

0800625e <LL_RCC_ForceBackupDomainReset>:
{
 800625e:	b480      	push	{r7}
 8006260:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006262:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006266:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800626a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800626e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006272:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006276:	bf00      	nop
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr

08006280 <LL_RCC_ReleaseBackupDomainReset>:
{
 8006280:	b480      	push	{r7}
 8006282:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006284:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006288:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800628c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006290:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006294:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006298:	bf00      	nop
 800629a:	46bd      	mov	sp, r7
 800629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a0:	4770      	bx	lr

080062a2 <LL_RCC_PLLSAI1_Enable>:
{
 80062a2:	b480      	push	{r7}
 80062a4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80062a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80062b0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80062b4:	6013      	str	r3, [r2, #0]
}
 80062b6:	bf00      	nop
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr

080062c0 <LL_RCC_PLLSAI1_Disable>:
{
 80062c0:	b480      	push	{r7}
 80062c2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80062c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80062ce:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80062d2:	6013      	str	r3, [r2, #0]
}
 80062d4:	bf00      	nop
 80062d6:	46bd      	mov	sp, r7
 80062d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062dc:	4770      	bx	lr

080062de <LL_RCC_PLLSAI1_IsReady>:
{
 80062de:	b480      	push	{r7}
 80062e0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80062e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80062ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80062f0:	d101      	bne.n	80062f6 <LL_RCC_PLLSAI1_IsReady+0x18>
 80062f2:	2301      	movs	r3, #1
 80062f4:	e000      	b.n	80062f8 <LL_RCC_PLLSAI1_IsReady+0x1a>
 80062f6:	2300      	movs	r3, #0
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr

08006302 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006302:	b580      	push	{r7, lr}
 8006304:	b088      	sub	sp, #32
 8006306:	af00      	add	r7, sp, #0
 8006308:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800630a:	2300      	movs	r3, #0
 800630c:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800630e:	2300      	movs	r3, #0
 8006310:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800631a:	2b00      	cmp	r3, #0
 800631c:	d034      	beq.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006322:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006326:	d021      	beq.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8006328:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800632c:	d81b      	bhi.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800632e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006332:	d01d      	beq.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8006334:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006338:	d815      	bhi.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800633a:	2b00      	cmp	r3, #0
 800633c:	d00b      	beq.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800633e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006342:	d110      	bne.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8006344:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006348:	68db      	ldr	r3, [r3, #12]
 800634a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800634e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006352:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8006354:	e00d      	b.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	3304      	adds	r3, #4
 800635a:	4618      	mov	r0, r3
 800635c:	f000 f947 	bl	80065ee <RCCEx_PLLSAI1_ConfigNP>
 8006360:	4603      	mov	r3, r0
 8006362:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006364:	e005      	b.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8006366:	2301      	movs	r3, #1
 8006368:	77fb      	strb	r3, [r7, #31]
        break;
 800636a:	e002      	b.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800636c:	bf00      	nop
 800636e:	e000      	b.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8006370:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006372:	7ffb      	ldrb	r3, [r7, #31]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d105      	bne.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800637c:	4618      	mov	r0, r3
 800637e:	f7ff fee8 	bl	8006152 <LL_RCC_SetSAIClockSource>
 8006382:	e001      	b.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006384:	7ffb      	ldrb	r3, [r7, #31]
 8006386:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006390:	2b00      	cmp	r3, #0
 8006392:	d046      	beq.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8006394:	f7ff ff56 	bl	8006244 <LL_RCC_GetRTCClockSource>
 8006398:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800639e:	69ba      	ldr	r2, [r7, #24]
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d03c      	beq.n	800641e <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80063a4:	f7fe fc68 	bl	8004c78 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80063a8:	69bb      	ldr	r3, [r7, #24]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d105      	bne.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063b2:	4618      	mov	r0, r3
 80063b4:	f7ff ff30 	bl	8006218 <LL_RCC_SetRTCClockSource>
 80063b8:	e02e      	b.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80063ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80063be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063c2:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80063c4:	f7ff ff4b 	bl	800625e <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80063c8:	f7ff ff5a 	bl	8006280 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063d6:	4313      	orrs	r3, r2
 80063d8:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80063da:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80063e4:	f7ff fdf0 	bl	8005fc8 <LL_RCC_LSE_IsEnabled>
 80063e8:	4603      	mov	r3, r0
 80063ea:	2b01      	cmp	r3, #1
 80063ec:	d114      	bne.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80063ee:	f7fd fbf9 	bl	8003be4 <HAL_GetTick>
 80063f2:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80063f4:	e00b      	b.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063f6:	f7fd fbf5 	bl	8003be4 <HAL_GetTick>
 80063fa:	4602      	mov	r2, r0
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	1ad3      	subs	r3, r2, r3
 8006400:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006404:	4293      	cmp	r3, r2
 8006406:	d902      	bls.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8006408:	2303      	movs	r3, #3
 800640a:	77fb      	strb	r3, [r7, #31]
              break;
 800640c:	e004      	b.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800640e:	f7ff fded 	bl	8005fec <LL_RCC_LSE_IsReady>
 8006412:	4603      	mov	r3, r0
 8006414:	2b01      	cmp	r3, #1
 8006416:	d1ee      	bne.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8006418:	7ffb      	ldrb	r3, [r7, #31]
 800641a:	77bb      	strb	r3, [r7, #30]
 800641c:	e001      	b.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800641e:	7ffb      	ldrb	r3, [r7, #31]
 8006420:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f003 0301 	and.w	r3, r3, #1
 800642a:	2b00      	cmp	r3, #0
 800642c:	d004      	beq.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	699b      	ldr	r3, [r3, #24]
 8006432:	4618      	mov	r0, r3
 8006434:	f7ff fe2a 	bl	800608c <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f003 0302 	and.w	r3, r3, #2
 8006440:	2b00      	cmp	r3, #0
 8006442:	d004      	beq.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	69db      	ldr	r3, [r3, #28]
 8006448:	4618      	mov	r0, r3
 800644a:	f7ff fe35 	bl	80060b8 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f003 0310 	and.w	r3, r3, #16
 8006456:	2b00      	cmp	r3, #0
 8006458:	d004      	beq.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800645e:	4618      	mov	r0, r3
 8006460:	f7ff fe5d 	bl	800611e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f003 0320 	and.w	r3, r3, #32
 800646c:	2b00      	cmp	r3, #0
 800646e:	d004      	beq.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006474:	4618      	mov	r0, r3
 8006476:	f7ff fe52 	bl	800611e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f003 0304 	and.w	r3, r3, #4
 8006482:	2b00      	cmp	r3, #0
 8006484:	d004      	beq.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6a1b      	ldr	r3, [r3, #32]
 800648a:	4618      	mov	r0, r3
 800648c:	f7ff fe2a 	bl	80060e4 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f003 0308 	and.w	r3, r3, #8
 8006498:	2b00      	cmp	r3, #0
 800649a:	d004      	beq.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064a0:	4618      	mov	r0, r3
 80064a2:	f7ff fe1f 	bl	80060e4 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d022      	beq.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064b6:	4618      	mov	r0, r3
 80064b8:	f7ff fe8d 	bl	80061d6 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80064c4:	d107      	bne.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80064c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064ca:	68db      	ldr	r3, [r3, #12]
 80064cc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80064d0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80064d4:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064da:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80064de:	d10b      	bne.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	3304      	adds	r3, #4
 80064e4:	4618      	mov	r0, r3
 80064e6:	f000 f8dd 	bl	80066a4 <RCCEx_PLLSAI1_ConfigNQ>
 80064ea:	4603      	mov	r3, r0
 80064ec:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80064ee:	7ffb      	ldrb	r3, [r7, #31]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d001      	beq.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80064f4:	7ffb      	ldrb	r3, [r7, #31]
 80064f6:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006500:	2b00      	cmp	r3, #0
 8006502:	d02b      	beq.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006508:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800650c:	d008      	beq.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006512:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006516:	d003      	beq.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800651c:	2b00      	cmp	r3, #0
 800651e:	d105      	bne.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006524:	4618      	mov	r0, r3
 8006526:	f7ff fe2a 	bl	800617e <LL_RCC_SetRNGClockSource>
 800652a:	e00a      	b.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006530:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006534:	60fb      	str	r3, [r7, #12]
 8006536:	2000      	movs	r0, #0
 8006538:	f7ff fe21 	bl	800617e <LL_RCC_SetRNGClockSource>
 800653c:	68f8      	ldr	r0, [r7, #12]
 800653e:	f7ff fe34 	bl	80061aa <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006546:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800654a:	d107      	bne.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800654c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006550:	68db      	ldr	r3, [r3, #12]
 8006552:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006556:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800655a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006564:	2b00      	cmp	r3, #0
 8006566:	d022      	beq.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800656c:	4618      	mov	r0, r3
 800656e:	f7ff fe3d 	bl	80061ec <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006576:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800657a:	d107      	bne.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800657c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006580:	68db      	ldr	r3, [r3, #12]
 8006582:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006586:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800658a:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006590:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006594:	d10b      	bne.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	3304      	adds	r3, #4
 800659a:	4618      	mov	r0, r3
 800659c:	f000 f8dd 	bl	800675a <RCCEx_PLLSAI1_ConfigNR>
 80065a0:	4603      	mov	r3, r0
 80065a2:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80065a4:	7ffb      	ldrb	r3, [r7, #31]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d001      	beq.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80065aa:	7ffb      	ldrb	r3, [r7, #31]
 80065ac:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d004      	beq.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065be:	4618      	mov	r0, r3
 80065c0:	f7ff fd26 	bl	8006010 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d009      	beq.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80065d4:	4618      	mov	r0, r3
 80065d6:	f7ff fd45 	bl	8006064 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065de:	4618      	mov	r0, r3
 80065e0:	f7ff fd2c 	bl	800603c <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80065e4:	7fbb      	ldrb	r3, [r7, #30]
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3720      	adds	r7, #32
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}

080065ee <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80065ee:	b580      	push	{r7, lr}
 80065f0:	b084      	sub	sp, #16
 80065f2:	af00      	add	r7, sp, #0
 80065f4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80065f6:	2300      	movs	r3, #0
 80065f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80065fa:	f7ff fe61 	bl	80062c0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80065fe:	f7fd faf1 	bl	8003be4 <HAL_GetTick>
 8006602:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006604:	e009      	b.n	800661a <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006606:	f7fd faed 	bl	8003be4 <HAL_GetTick>
 800660a:	4602      	mov	r2, r0
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	1ad3      	subs	r3, r2, r3
 8006610:	2b02      	cmp	r3, #2
 8006612:	d902      	bls.n	800661a <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8006614:	2303      	movs	r3, #3
 8006616:	73fb      	strb	r3, [r7, #15]
      break;
 8006618:	e004      	b.n	8006624 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800661a:	f7ff fe60 	bl	80062de <LL_RCC_PLLSAI1_IsReady>
 800661e:	4603      	mov	r3, r0
 8006620:	2b00      	cmp	r3, #0
 8006622:	d1f0      	bne.n	8006606 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8006624:	7bfb      	ldrb	r3, [r7, #15]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d137      	bne.n	800669a <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800662a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800662e:	691b      	ldr	r3, [r3, #16]
 8006630:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	021b      	lsls	r3, r3, #8
 800663a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800663e:	4313      	orrs	r3, r2
 8006640:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8006642:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006646:	691b      	ldr	r3, [r3, #16]
 8006648:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006654:	4313      	orrs	r3, r2
 8006656:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006658:	f7ff fe23 	bl	80062a2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800665c:	f7fd fac2 	bl	8003be4 <HAL_GetTick>
 8006660:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006662:	e009      	b.n	8006678 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006664:	f7fd fabe 	bl	8003be4 <HAL_GetTick>
 8006668:	4602      	mov	r2, r0
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	1ad3      	subs	r3, r2, r3
 800666e:	2b02      	cmp	r3, #2
 8006670:	d902      	bls.n	8006678 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8006672:	2303      	movs	r3, #3
 8006674:	73fb      	strb	r3, [r7, #15]
        break;
 8006676:	e004      	b.n	8006682 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006678:	f7ff fe31 	bl	80062de <LL_RCC_PLLSAI1_IsReady>
 800667c:	4603      	mov	r3, r0
 800667e:	2b01      	cmp	r3, #1
 8006680:	d1f0      	bne.n	8006664 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8006682:	7bfb      	ldrb	r3, [r7, #15]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d108      	bne.n	800669a <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006688:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800668c:	691a      	ldr	r2, [r3, #16]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	691b      	ldr	r3, [r3, #16]
 8006692:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006696:	4313      	orrs	r3, r2
 8006698:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800669a:	7bfb      	ldrb	r3, [r7, #15]
}
 800669c:	4618      	mov	r0, r3
 800669e:	3710      	adds	r7, #16
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}

080066a4 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b084      	sub	sp, #16
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80066ac:	2300      	movs	r3, #0
 80066ae:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80066b0:	f7ff fe06 	bl	80062c0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80066b4:	f7fd fa96 	bl	8003be4 <HAL_GetTick>
 80066b8:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80066ba:	e009      	b.n	80066d0 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80066bc:	f7fd fa92 	bl	8003be4 <HAL_GetTick>
 80066c0:	4602      	mov	r2, r0
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	1ad3      	subs	r3, r2, r3
 80066c6:	2b02      	cmp	r3, #2
 80066c8:	d902      	bls.n	80066d0 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80066ca:	2303      	movs	r3, #3
 80066cc:	73fb      	strb	r3, [r7, #15]
      break;
 80066ce:	e004      	b.n	80066da <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80066d0:	f7ff fe05 	bl	80062de <LL_RCC_PLLSAI1_IsReady>
 80066d4:	4603      	mov	r3, r0
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d1f0      	bne.n	80066bc <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80066da:	7bfb      	ldrb	r3, [r7, #15]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d137      	bne.n	8006750 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80066e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80066e4:	691b      	ldr	r3, [r3, #16]
 80066e6:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	021b      	lsls	r3, r3, #8
 80066f0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80066f4:	4313      	orrs	r3, r2
 80066f6:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80066f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80066fc:	691b      	ldr	r3, [r3, #16]
 80066fe:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800670a:	4313      	orrs	r3, r2
 800670c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800670e:	f7ff fdc8 	bl	80062a2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006712:	f7fd fa67 	bl	8003be4 <HAL_GetTick>
 8006716:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006718:	e009      	b.n	800672e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800671a:	f7fd fa63 	bl	8003be4 <HAL_GetTick>
 800671e:	4602      	mov	r2, r0
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	1ad3      	subs	r3, r2, r3
 8006724:	2b02      	cmp	r3, #2
 8006726:	d902      	bls.n	800672e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8006728:	2303      	movs	r3, #3
 800672a:	73fb      	strb	r3, [r7, #15]
        break;
 800672c:	e004      	b.n	8006738 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800672e:	f7ff fdd6 	bl	80062de <LL_RCC_PLLSAI1_IsReady>
 8006732:	4603      	mov	r3, r0
 8006734:	2b01      	cmp	r3, #1
 8006736:	d1f0      	bne.n	800671a <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8006738:	7bfb      	ldrb	r3, [r7, #15]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d108      	bne.n	8006750 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800673e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006742:	691a      	ldr	r2, [r3, #16]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	691b      	ldr	r3, [r3, #16]
 8006748:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800674c:	4313      	orrs	r3, r2
 800674e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006750:	7bfb      	ldrb	r3, [r7, #15]
}
 8006752:	4618      	mov	r0, r3
 8006754:	3710      	adds	r7, #16
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}

0800675a <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800675a:	b580      	push	{r7, lr}
 800675c:	b084      	sub	sp, #16
 800675e:	af00      	add	r7, sp, #0
 8006760:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006762:	2300      	movs	r3, #0
 8006764:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006766:	f7ff fdab 	bl	80062c0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800676a:	f7fd fa3b 	bl	8003be4 <HAL_GetTick>
 800676e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006770:	e009      	b.n	8006786 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006772:	f7fd fa37 	bl	8003be4 <HAL_GetTick>
 8006776:	4602      	mov	r2, r0
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	1ad3      	subs	r3, r2, r3
 800677c:	2b02      	cmp	r3, #2
 800677e:	d902      	bls.n	8006786 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8006780:	2303      	movs	r3, #3
 8006782:	73fb      	strb	r3, [r7, #15]
      break;
 8006784:	e004      	b.n	8006790 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006786:	f7ff fdaa 	bl	80062de <LL_RCC_PLLSAI1_IsReady>
 800678a:	4603      	mov	r3, r0
 800678c:	2b00      	cmp	r3, #0
 800678e:	d1f0      	bne.n	8006772 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8006790:	7bfb      	ldrb	r3, [r7, #15]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d137      	bne.n	8006806 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006796:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800679a:	691b      	ldr	r3, [r3, #16]
 800679c:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	021b      	lsls	r3, r3, #8
 80067a6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80067aa:	4313      	orrs	r3, r2
 80067ac:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80067ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80067b2:	691b      	ldr	r3, [r3, #16]
 80067b4:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	68db      	ldr	r3, [r3, #12]
 80067bc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80067c0:	4313      	orrs	r3, r2
 80067c2:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80067c4:	f7ff fd6d 	bl	80062a2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067c8:	f7fd fa0c 	bl	8003be4 <HAL_GetTick>
 80067cc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80067ce:	e009      	b.n	80067e4 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80067d0:	f7fd fa08 	bl	8003be4 <HAL_GetTick>
 80067d4:	4602      	mov	r2, r0
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	1ad3      	subs	r3, r2, r3
 80067da:	2b02      	cmp	r3, #2
 80067dc:	d902      	bls.n	80067e4 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80067de:	2303      	movs	r3, #3
 80067e0:	73fb      	strb	r3, [r7, #15]
        break;
 80067e2:	e004      	b.n	80067ee <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80067e4:	f7ff fd7b 	bl	80062de <LL_RCC_PLLSAI1_IsReady>
 80067e8:	4603      	mov	r3, r0
 80067ea:	2b01      	cmp	r3, #1
 80067ec:	d1f0      	bne.n	80067d0 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80067ee:	7bfb      	ldrb	r3, [r7, #15]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d108      	bne.n	8006806 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80067f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80067f8:	691a      	ldr	r2, [r3, #16]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	691b      	ldr	r3, [r3, #16]
 80067fe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006802:	4313      	orrs	r3, r2
 8006804:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006806:	7bfb      	ldrb	r3, [r7, #15]
}
 8006808:	4618      	mov	r0, r3
 800680a:	3710      	adds	r7, #16
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}

08006810 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b084      	sub	sp, #16
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006818:	2301      	movs	r3, #1
 800681a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d101      	bne.n	8006826 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	e07a      	b.n	800691c <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800682c:	b2db      	uxtb	r3, r3
 800682e:	2b00      	cmp	r3, #0
 8006830:	d106      	bne.n	8006840 <HAL_RTC_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2200      	movs	r2, #0
 8006836:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f7fc f9fc 	bl	8002c38 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2202      	movs	r2, #2
 8006844:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	68db      	ldr	r3, [r3, #12]
 800684e:	f003 0310 	and.w	r3, r3, #16
 8006852:	2b10      	cmp	r3, #16
 8006854:	d058      	beq.n	8006908 <HAL_RTC_Init+0xf8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	22ca      	movs	r2, #202	@ 0xca
 800685c:	625a      	str	r2, [r3, #36]	@ 0x24
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	2253      	movs	r2, #83	@ 0x53
 8006864:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f000 f882 	bl	8006970 <RTC_EnterInitMode>
 800686c:	4603      	mov	r3, r0
 800686e:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8006870:	7bfb      	ldrb	r3, [r7, #15]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d12c      	bne.n	80068d0 <HAL_RTC_Init+0xc0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	687a      	ldr	r2, [r7, #4]
 800687e:	6812      	ldr	r2, [r2, #0]
 8006880:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8006884:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006888:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	6899      	ldr	r1, [r3, #8]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	685a      	ldr	r2, [r3, #4]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	691b      	ldr	r3, [r3, #16]
 8006898:	431a      	orrs	r2, r3
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	699b      	ldr	r3, [r3, #24]
 800689e:	431a      	orrs	r2, r3
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	430a      	orrs	r2, r1
 80068a6:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	687a      	ldr	r2, [r7, #4]
 80068ae:	68d2      	ldr	r2, [r2, #12]
 80068b0:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	6919      	ldr	r1, [r3, #16]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	041a      	lsls	r2, r3, #16
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	430a      	orrs	r2, r1
 80068c4:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f000 f88a 	bl	80069e0 <RTC_ExitInitMode>
 80068cc:	4603      	mov	r3, r0
 80068ce:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80068d0:	7bfb      	ldrb	r3, [r7, #15]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d113      	bne.n	80068fe <HAL_RTC_Init+0xee>
    {
#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f022 0203 	bic.w	r2, r2, #3
 80068e4:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	69da      	ldr	r2, [r3, #28]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	695b      	ldr	r3, [r3, #20]
 80068f4:	431a      	orrs	r2, r3
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	430a      	orrs	r2, r1
 80068fc:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutRemap);
#endif /* RTC_OR_ALARMOUTTYPE */
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	22ff      	movs	r2, #255	@ 0xff
 8006904:	625a      	str	r2, [r3, #36]	@ 0x24
 8006906:	e001      	b.n	800690c <HAL_RTC_Init+0xfc>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8006908:	2300      	movs	r3, #0
 800690a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800690c:	7bfb      	ldrb	r3, [r7, #15]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d103      	bne.n	800691a <HAL_RTC_Init+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2201      	movs	r2, #1
 8006916:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 800691a:	7bfb      	ldrb	r3, [r7, #15]
}
 800691c:	4618      	mov	r0, r3
 800691e:	3710      	adds	r7, #16
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}

08006924 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b084      	sub	sp, #16
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800692c:	2300      	movs	r3, #0
 800692e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a0d      	ldr	r2, [pc, #52]	@ (800696c <HAL_RTC_WaitForSynchro+0x48>)
 8006936:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006938:	f7fd f954 	bl	8003be4 <HAL_GetTick>
 800693c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800693e:	e009      	b.n	8006954 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006940:	f7fd f950 	bl	8003be4 <HAL_GetTick>
 8006944:	4602      	mov	r2, r0
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	1ad3      	subs	r3, r2, r3
 800694a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800694e:	d901      	bls.n	8006954 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8006950:	2303      	movs	r3, #3
 8006952:	e007      	b.n	8006964 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	68db      	ldr	r3, [r3, #12]
 800695a:	f003 0320 	and.w	r3, r3, #32
 800695e:	2b00      	cmp	r3, #0
 8006960:	d0ee      	beq.n	8006940 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8006962:	2300      	movs	r3, #0
}
 8006964:	4618      	mov	r0, r3
 8006966:	3710      	adds	r7, #16
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}
 800696c:	0001ff5f 	.word	0x0001ff5f

08006970 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b084      	sub	sp, #16
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006978:	2300      	movs	r3, #0
 800697a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800697c:	2300      	movs	r3, #0
 800697e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	68db      	ldr	r3, [r3, #12]
 8006986:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800698a:	2b00      	cmp	r3, #0
 800698c:	d123      	bne.n	80069d6 <RTC_EnterInitMode+0x66>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	68da      	ldr	r2, [r3, #12]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800699c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800699e:	f7fd f921 	bl	8003be4 <HAL_GetTick>
 80069a2:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80069a4:	e00d      	b.n	80069c2 <RTC_EnterInitMode+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80069a6:	f7fd f91d 	bl	8003be4 <HAL_GetTick>
 80069aa:	4602      	mov	r2, r0
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	1ad3      	subs	r3, r2, r3
 80069b0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80069b4:	d905      	bls.n	80069c2 <RTC_EnterInitMode+0x52>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2204      	movs	r2, #4
 80069ba:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        status = HAL_ERROR;
 80069be:	2301      	movs	r3, #1
 80069c0:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	68db      	ldr	r3, [r3, #12]
 80069c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d102      	bne.n	80069d6 <RTC_EnterInitMode+0x66>
 80069d0:	7bfb      	ldrb	r3, [r7, #15]
 80069d2:	2b01      	cmp	r3, #1
 80069d4:	d1e7      	bne.n	80069a6 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80069d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80069d8:	4618      	mov	r0, r3
 80069da:	3710      	adds	r7, #16
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}

080069e0 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b084      	sub	sp, #16
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80069e8:	2300      	movs	r3, #0
 80069ea:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	68da      	ldr	r2, [r3, #12]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80069fa:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	f003 0320 	and.w	r3, r3, #32
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d10b      	bne.n	8006a22 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f7ff ff8a 	bl	8006924 <HAL_RTC_WaitForSynchro>
 8006a10:	4603      	mov	r3, r0
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d005      	beq.n	8006a22 <RTC_ExitInitMode+0x42>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2204      	movs	r2, #4
 8006a1a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_ERROR;
 8006a1e:	2301      	movs	r3, #1
 8006a20:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3710      	adds	r7, #16
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}

08006a2c <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b087      	sub	sp, #28
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	60f8      	str	r0, [r7, #12]
 8006a34:	60b9      	str	r1, [r7, #8]
 8006a36:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8006a38:	4b5f      	ldr	r3, [pc, #380]	@ (8006bb8 <HAL_RTCEx_SetWakeUpTimer_IT+0x18c>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a5f      	ldr	r2, [pc, #380]	@ (8006bbc <HAL_RTCEx_SetWakeUpTimer_IT+0x190>)
 8006a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8006a42:	0adb      	lsrs	r3, r3, #11
 8006a44:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006a48:	fb02 f303 	mul.w	r3, r2, r3
 8006a4c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d101      	bne.n	8006a5c <HAL_RTCEx_SetWakeUpTimer_IT+0x30>
 8006a58:	2302      	movs	r3, #2
 8006a5a:	e0a7      	b.n	8006bac <HAL_RTCEx_SetWakeUpTimer_IT+0x180>
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2201      	movs	r2, #1
 8006a60:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2202      	movs	r2, #2
 8006a68:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	22ca      	movs	r2, #202	@ 0xca
 8006a72:	625a      	str	r2, [r3, #36]	@ 0x24
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	2253      	movs	r2, #83	@ 0x53
 8006a7a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d01a      	beq.n	8006ac0 <HAL_RTCEx_SetWakeUpTimer_IT+0x94>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	3b01      	subs	r3, #1
 8006a8e:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d10d      	bne.n	8006ab2 <HAL_RTCEx_SetWakeUpTimer_IT+0x86>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	22ff      	movs	r2, #255	@ 0xff
 8006a9c:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2203      	movs	r2, #3
 8006aa2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8006aae:	2303      	movs	r3, #3
 8006ab0:	e07c      	b.n	8006bac <HAL_RTCEx_SetWakeUpTimer_IT+0x180>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	68db      	ldr	r3, [r3, #12]
 8006ab8:	f003 0304 	and.w	r3, r3, #4
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d1e4      	bne.n	8006a8a <HAL_RTCEx_SetWakeUpTimer_IT+0x5e>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	689a      	ldr	r2, [r3, #8]
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006ace:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	68db      	ldr	r3, [r3, #12]
 8006ad6:	b2da      	uxtb	r2, r3
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8006ae0:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8006ae2:	4b35      	ldr	r3, [pc, #212]	@ (8006bb8 <HAL_RTCEx_SetWakeUpTimer_IT+0x18c>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a35      	ldr	r2, [pc, #212]	@ (8006bbc <HAL_RTCEx_SetWakeUpTimer_IT+0x190>)
 8006ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8006aec:	0adb      	lsrs	r3, r3, #11
 8006aee:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006af2:	fb02 f303 	mul.w	r3, r2, r3
 8006af6:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	3b01      	subs	r3, #1
 8006afc:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d10d      	bne.n	8006b20 <HAL_RTCEx_SetWakeUpTimer_IT+0xf4>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	22ff      	movs	r2, #255	@ 0xff
 8006b0a:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	2203      	movs	r2, #3
 8006b10:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2200      	movs	r2, #0
 8006b18:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8006b1c:	2303      	movs	r3, #3
 8006b1e:	e045      	b.n	8006bac <HAL_RTCEx_SetWakeUpTimer_IT+0x180>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	68db      	ldr	r3, [r3, #12]
 8006b26:	f003 0304 	and.w	r3, r3, #4
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d0e4      	beq.n	8006af8 <HAL_RTCEx_SetWakeUpTimer_IT+0xcc>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	689a      	ldr	r2, [r3, #8]
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f022 0207 	bic.w	r2, r2, #7
 8006b3c:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	6899      	ldr	r1, [r3, #8]
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	430a      	orrs	r2, r1
 8006b4c:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	68ba      	ldr	r2, [r7, #8]
 8006b54:	615a      	str	r2, [r3, #20]

  /* Enable and configure the EXTI line associated to the RTC Wakeup Timer interrupt */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8006b56:	4b1a      	ldr	r3, [pc, #104]	@ (8006bc0 <HAL_RTCEx_SetWakeUpTimer_IT+0x194>)
 8006b58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b5c:	4a18      	ldr	r2, [pc, #96]	@ (8006bc0 <HAL_RTCEx_SetWakeUpTimer_IT+0x194>)
 8006b5e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006b62:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8006b66:	4b16      	ldr	r3, [pc, #88]	@ (8006bc0 <HAL_RTCEx_SetWakeUpTimer_IT+0x194>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a15      	ldr	r2, [pc, #84]	@ (8006bc0 <HAL_RTCEx_SetWakeUpTimer_IT+0x194>)
 8006b6c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006b70:	6013      	str	r3, [r2, #0]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	689a      	ldr	r2, [r3, #8]
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006b80:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	689a      	ldr	r2, [r3, #8]
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006b90:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	22ff      	movs	r2, #255	@ 0xff
 8006b98:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006baa:	2300      	movs	r3, #0
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	371c      	adds	r7, #28
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb6:	4770      	bx	lr
 8006bb8:	20000014 	.word	0x20000014
 8006bbc:	10624dd3 	.word	0x10624dd3
 8006bc0:	58000800 	.word	0x58000800

08006bc4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b084      	sub	sp, #16
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d101      	bne.n	8006bd6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	e095      	b.n	8006d02 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d108      	bne.n	8006bf0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006be6:	d009      	beq.n	8006bfc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2200      	movs	r2, #0
 8006bec:	61da      	str	r2, [r3, #28]
 8006bee:	e005      	b.n	8006bfc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006c08:	b2db      	uxtb	r3, r3
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d106      	bne.n	8006c1c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2200      	movs	r2, #0
 8006c12:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f7fc f842 	bl	8002ca0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2202      	movs	r2, #2
 8006c20:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	681a      	ldr	r2, [r3, #0]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006c32:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	68db      	ldr	r3, [r3, #12]
 8006c38:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006c3c:	d902      	bls.n	8006c44 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	60fb      	str	r3, [r7, #12]
 8006c42:	e002      	b.n	8006c4a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006c44:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006c48:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	68db      	ldr	r3, [r3, #12]
 8006c4e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006c52:	d007      	beq.n	8006c64 <HAL_SPI_Init+0xa0>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	68db      	ldr	r3, [r3, #12]
 8006c58:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006c5c:	d002      	beq.n	8006c64 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2200      	movs	r2, #0
 8006c62:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006c74:	431a      	orrs	r2, r3
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	691b      	ldr	r3, [r3, #16]
 8006c7a:	f003 0302 	and.w	r3, r3, #2
 8006c7e:	431a      	orrs	r2, r3
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	695b      	ldr	r3, [r3, #20]
 8006c84:	f003 0301 	and.w	r3, r3, #1
 8006c88:	431a      	orrs	r2, r3
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	699b      	ldr	r3, [r3, #24]
 8006c8e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006c92:	431a      	orrs	r2, r3
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	69db      	ldr	r3, [r3, #28]
 8006c98:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006c9c:	431a      	orrs	r2, r3
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6a1b      	ldr	r3, [r3, #32]
 8006ca2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ca6:	ea42 0103 	orr.w	r1, r2, r3
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cae:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	430a      	orrs	r2, r1
 8006cb8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	699b      	ldr	r3, [r3, #24]
 8006cbe:	0c1b      	lsrs	r3, r3, #16
 8006cc0:	f003 0204 	and.w	r2, r3, #4
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cc8:	f003 0310 	and.w	r3, r3, #16
 8006ccc:	431a      	orrs	r2, r3
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cd2:	f003 0308 	and.w	r3, r3, #8
 8006cd6:	431a      	orrs	r2, r3
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	68db      	ldr	r3, [r3, #12]
 8006cdc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006ce0:	ea42 0103 	orr.w	r1, r2, r3
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	430a      	orrs	r2, r1
 8006cf0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006d00:	2300      	movs	r3, #0
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	3710      	adds	r7, #16
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}

08006d0a <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8006d0a:	b580      	push	{r7, lr}
 8006d0c:	b082      	sub	sp, #8
 8006d0e:	af00      	add	r7, sp, #0
 8006d10:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d101      	bne.n	8006d1c <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006d18:	2301      	movs	r3, #1
 8006d1a:	e01a      	b.n	8006d52 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2202      	movs	r2, #2
 8006d20:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006d32:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f7fb ffe5 	bl	8002d04 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2200      	movs	r2, #0
 8006d44:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  return HAL_OK;
 8006d50:	2300      	movs	r3, #0
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3708      	adds	r7, #8
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}

08006d5a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006d5a:	b580      	push	{r7, lr}
 8006d5c:	b08a      	sub	sp, #40	@ 0x28
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	60f8      	str	r0, [r7, #12]
 8006d62:	60b9      	str	r1, [r7, #8]
 8006d64:	607a      	str	r2, [r7, #4]
 8006d66:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006d68:	2301      	movs	r3, #1
 8006d6a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006d6c:	f7fc ff3a 	bl	8003be4 <HAL_GetTick>
 8006d70:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006d78:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006d80:	887b      	ldrh	r3, [r7, #2]
 8006d82:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8006d84:	887b      	ldrh	r3, [r7, #2]
 8006d86:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006d88:	7ffb      	ldrb	r3, [r7, #31]
 8006d8a:	2b01      	cmp	r3, #1
 8006d8c:	d00c      	beq.n	8006da8 <HAL_SPI_TransmitReceive+0x4e>
 8006d8e:	69bb      	ldr	r3, [r7, #24]
 8006d90:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006d94:	d106      	bne.n	8006da4 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d102      	bne.n	8006da4 <HAL_SPI_TransmitReceive+0x4a>
 8006d9e:	7ffb      	ldrb	r3, [r7, #31]
 8006da0:	2b04      	cmp	r3, #4
 8006da2:	d001      	beq.n	8006da8 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8006da4:	2302      	movs	r3, #2
 8006da6:	e1f3      	b.n	8007190 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d005      	beq.n	8006dba <HAL_SPI_TransmitReceive+0x60>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d002      	beq.n	8006dba <HAL_SPI_TransmitReceive+0x60>
 8006db4:	887b      	ldrh	r3, [r7, #2]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d101      	bne.n	8006dbe <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8006dba:	2301      	movs	r3, #1
 8006dbc:	e1e8      	b.n	8007190 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	d101      	bne.n	8006dcc <HAL_SPI_TransmitReceive+0x72>
 8006dc8:	2302      	movs	r3, #2
 8006dca:	e1e1      	b.n	8007190 <HAL_SPI_TransmitReceive+0x436>
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	2201      	movs	r2, #1
 8006dd0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006dda:	b2db      	uxtb	r3, r3
 8006ddc:	2b04      	cmp	r3, #4
 8006dde:	d003      	beq.n	8006de8 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2205      	movs	r2, #5
 8006de4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	2200      	movs	r2, #0
 8006dec:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	687a      	ldr	r2, [r7, #4]
 8006df2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	887a      	ldrh	r2, [r7, #2]
 8006df8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	887a      	ldrh	r2, [r7, #2]
 8006e00:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	68ba      	ldr	r2, [r7, #8]
 8006e08:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	887a      	ldrh	r2, [r7, #2]
 8006e0e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	887a      	ldrh	r2, [r7, #2]
 8006e14:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	68db      	ldr	r3, [r3, #12]
 8006e26:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006e2a:	d802      	bhi.n	8006e32 <HAL_SPI_TransmitReceive+0xd8>
 8006e2c:	8abb      	ldrh	r3, [r7, #20]
 8006e2e:	2b01      	cmp	r3, #1
 8006e30:	d908      	bls.n	8006e44 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	685a      	ldr	r2, [r3, #4]
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006e40:	605a      	str	r2, [r3, #4]
 8006e42:	e007      	b.n	8006e54 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	685a      	ldr	r2, [r3, #4]
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006e52:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e5e:	2b40      	cmp	r3, #64	@ 0x40
 8006e60:	d007      	beq.n	8006e72 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	681a      	ldr	r2, [r3, #0]
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006e70:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	68db      	ldr	r3, [r3, #12]
 8006e76:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006e7a:	f240 8083 	bls.w	8006f84 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d002      	beq.n	8006e8c <HAL_SPI_TransmitReceive+0x132>
 8006e86:	8afb      	ldrh	r3, [r7, #22]
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d16f      	bne.n	8006f6c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e90:	881a      	ldrh	r2, [r3, #0]
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e9c:	1c9a      	adds	r2, r3, #2
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ea6:	b29b      	uxth	r3, r3
 8006ea8:	3b01      	subs	r3, #1
 8006eaa:	b29a      	uxth	r2, r3
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006eb0:	e05c      	b.n	8006f6c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	689b      	ldr	r3, [r3, #8]
 8006eb8:	f003 0302 	and.w	r3, r3, #2
 8006ebc:	2b02      	cmp	r3, #2
 8006ebe:	d11b      	bne.n	8006ef8 <HAL_SPI_TransmitReceive+0x19e>
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ec4:	b29b      	uxth	r3, r3
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d016      	beq.n	8006ef8 <HAL_SPI_TransmitReceive+0x19e>
 8006eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	d113      	bne.n	8006ef8 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ed4:	881a      	ldrh	r2, [r3, #0]
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ee0:	1c9a      	adds	r2, r3, #2
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006eea:	b29b      	uxth	r3, r3
 8006eec:	3b01      	subs	r3, #1
 8006eee:	b29a      	uxth	r2, r3
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	689b      	ldr	r3, [r3, #8]
 8006efe:	f003 0301 	and.w	r3, r3, #1
 8006f02:	2b01      	cmp	r3, #1
 8006f04:	d11c      	bne.n	8006f40 <HAL_SPI_TransmitReceive+0x1e6>
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006f0c:	b29b      	uxth	r3, r3
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d016      	beq.n	8006f40 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	68da      	ldr	r2, [r3, #12]
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f1c:	b292      	uxth	r2, r2
 8006f1e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f24:	1c9a      	adds	r2, r3, #2
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006f30:	b29b      	uxth	r3, r3
 8006f32:	3b01      	subs	r3, #1
 8006f34:	b29a      	uxth	r2, r3
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006f40:	f7fc fe50 	bl	8003be4 <HAL_GetTick>
 8006f44:	4602      	mov	r2, r0
 8006f46:	6a3b      	ldr	r3, [r7, #32]
 8006f48:	1ad3      	subs	r3, r2, r3
 8006f4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d80d      	bhi.n	8006f6c <HAL_SPI_TransmitReceive+0x212>
 8006f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f56:	d009      	beq.n	8006f6c <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	2200      	movs	r2, #0
 8006f64:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8006f68:	2303      	movs	r3, #3
 8006f6a:	e111      	b.n	8007190 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f70:	b29b      	uxth	r3, r3
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d19d      	bne.n	8006eb2 <HAL_SPI_TransmitReceive+0x158>
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006f7c:	b29b      	uxth	r3, r3
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d197      	bne.n	8006eb2 <HAL_SPI_TransmitReceive+0x158>
 8006f82:	e0e5      	b.n	8007150 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d003      	beq.n	8006f94 <HAL_SPI_TransmitReceive+0x23a>
 8006f8c:	8afb      	ldrh	r3, [r7, #22]
 8006f8e:	2b01      	cmp	r3, #1
 8006f90:	f040 80d1 	bne.w	8007136 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	2b01      	cmp	r3, #1
 8006f9c:	d912      	bls.n	8006fc4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fa2:	881a      	ldrh	r2, [r3, #0]
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fae:	1c9a      	adds	r2, r3, #2
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006fb8:	b29b      	uxth	r3, r3
 8006fba:	3b02      	subs	r3, #2
 8006fbc:	b29a      	uxth	r2, r3
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006fc2:	e0b8      	b.n	8007136 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	330c      	adds	r3, #12
 8006fce:	7812      	ldrb	r2, [r2, #0]
 8006fd0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fd6:	1c5a      	adds	r2, r3, #1
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006fe0:	b29b      	uxth	r3, r3
 8006fe2:	3b01      	subs	r3, #1
 8006fe4:	b29a      	uxth	r2, r3
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006fea:	e0a4      	b.n	8007136 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	689b      	ldr	r3, [r3, #8]
 8006ff2:	f003 0302 	and.w	r3, r3, #2
 8006ff6:	2b02      	cmp	r3, #2
 8006ff8:	d134      	bne.n	8007064 <HAL_SPI_TransmitReceive+0x30a>
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ffe:	b29b      	uxth	r3, r3
 8007000:	2b00      	cmp	r3, #0
 8007002:	d02f      	beq.n	8007064 <HAL_SPI_TransmitReceive+0x30a>
 8007004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007006:	2b01      	cmp	r3, #1
 8007008:	d12c      	bne.n	8007064 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800700e:	b29b      	uxth	r3, r3
 8007010:	2b01      	cmp	r3, #1
 8007012:	d912      	bls.n	800703a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007018:	881a      	ldrh	r2, [r3, #0]
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007024:	1c9a      	adds	r2, r3, #2
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800702e:	b29b      	uxth	r3, r3
 8007030:	3b02      	subs	r3, #2
 8007032:	b29a      	uxth	r2, r3
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007038:	e012      	b.n	8007060 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	330c      	adds	r3, #12
 8007044:	7812      	ldrb	r2, [r2, #0]
 8007046:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800704c:	1c5a      	adds	r2, r3, #1
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007056:	b29b      	uxth	r3, r3
 8007058:	3b01      	subs	r3, #1
 800705a:	b29a      	uxth	r2, r3
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007060:	2300      	movs	r3, #0
 8007062:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	689b      	ldr	r3, [r3, #8]
 800706a:	f003 0301 	and.w	r3, r3, #1
 800706e:	2b01      	cmp	r3, #1
 8007070:	d148      	bne.n	8007104 <HAL_SPI_TransmitReceive+0x3aa>
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007078:	b29b      	uxth	r3, r3
 800707a:	2b00      	cmp	r3, #0
 800707c:	d042      	beq.n	8007104 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007084:	b29b      	uxth	r3, r3
 8007086:	2b01      	cmp	r3, #1
 8007088:	d923      	bls.n	80070d2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	68da      	ldr	r2, [r3, #12]
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007094:	b292      	uxth	r2, r2
 8007096:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800709c:	1c9a      	adds	r2, r3, #2
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80070a8:	b29b      	uxth	r3, r3
 80070aa:	3b02      	subs	r3, #2
 80070ac:	b29a      	uxth	r2, r3
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80070ba:	b29b      	uxth	r3, r3
 80070bc:	2b01      	cmp	r3, #1
 80070be:	d81f      	bhi.n	8007100 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	685a      	ldr	r2, [r3, #4]
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80070ce:	605a      	str	r2, [r3, #4]
 80070d0:	e016      	b.n	8007100 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f103 020c 	add.w	r2, r3, #12
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070de:	7812      	ldrb	r2, [r2, #0]
 80070e0:	b2d2      	uxtb	r2, r2
 80070e2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070e8:	1c5a      	adds	r2, r3, #1
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80070f4:	b29b      	uxth	r3, r3
 80070f6:	3b01      	subs	r3, #1
 80070f8:	b29a      	uxth	r2, r3
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007100:	2301      	movs	r3, #1
 8007102:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007104:	f7fc fd6e 	bl	8003be4 <HAL_GetTick>
 8007108:	4602      	mov	r2, r0
 800710a:	6a3b      	ldr	r3, [r7, #32]
 800710c:	1ad3      	subs	r3, r2, r3
 800710e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007110:	429a      	cmp	r2, r3
 8007112:	d803      	bhi.n	800711c <HAL_SPI_TransmitReceive+0x3c2>
 8007114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800711a:	d102      	bne.n	8007122 <HAL_SPI_TransmitReceive+0x3c8>
 800711c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800711e:	2b00      	cmp	r3, #0
 8007120:	d109      	bne.n	8007136 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2201      	movs	r2, #1
 8007126:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2200      	movs	r2, #0
 800712e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8007132:	2303      	movs	r3, #3
 8007134:	e02c      	b.n	8007190 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800713a:	b29b      	uxth	r3, r3
 800713c:	2b00      	cmp	r3, #0
 800713e:	f47f af55 	bne.w	8006fec <HAL_SPI_TransmitReceive+0x292>
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007148:	b29b      	uxth	r3, r3
 800714a:	2b00      	cmp	r3, #0
 800714c:	f47f af4e 	bne.w	8006fec <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007150:	6a3a      	ldr	r2, [r7, #32]
 8007152:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007154:	68f8      	ldr	r0, [r7, #12]
 8007156:	f000 f93d 	bl	80073d4 <SPI_EndRxTxTransaction>
 800715a:	4603      	mov	r3, r0
 800715c:	2b00      	cmp	r3, #0
 800715e:	d008      	beq.n	8007172 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	2220      	movs	r2, #32
 8007164:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	2200      	movs	r2, #0
 800716a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800716e:	2301      	movs	r3, #1
 8007170:	e00e      	b.n	8007190 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2201      	movs	r2, #1
 8007176:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2200      	movs	r2, #0
 800717e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007186:	2b00      	cmp	r3, #0
 8007188:	d001      	beq.n	800718e <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 800718a:	2301      	movs	r3, #1
 800718c:	e000      	b.n	8007190 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800718e:	2300      	movs	r3, #0
  }
}
 8007190:	4618      	mov	r0, r3
 8007192:	3728      	adds	r7, #40	@ 0x28
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}

08007198 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b088      	sub	sp, #32
 800719c:	af00      	add	r7, sp, #0
 800719e:	60f8      	str	r0, [r7, #12]
 80071a0:	60b9      	str	r1, [r7, #8]
 80071a2:	603b      	str	r3, [r7, #0]
 80071a4:	4613      	mov	r3, r2
 80071a6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80071a8:	f7fc fd1c 	bl	8003be4 <HAL_GetTick>
 80071ac:	4602      	mov	r2, r0
 80071ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071b0:	1a9b      	subs	r3, r3, r2
 80071b2:	683a      	ldr	r2, [r7, #0]
 80071b4:	4413      	add	r3, r2
 80071b6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80071b8:	f7fc fd14 	bl	8003be4 <HAL_GetTick>
 80071bc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80071be:	4b39      	ldr	r3, [pc, #228]	@ (80072a4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	015b      	lsls	r3, r3, #5
 80071c4:	0d1b      	lsrs	r3, r3, #20
 80071c6:	69fa      	ldr	r2, [r7, #28]
 80071c8:	fb02 f303 	mul.w	r3, r2, r3
 80071cc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80071ce:	e054      	b.n	800727a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071d6:	d050      	beq.n	800727a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80071d8:	f7fc fd04 	bl	8003be4 <HAL_GetTick>
 80071dc:	4602      	mov	r2, r0
 80071de:	69bb      	ldr	r3, [r7, #24]
 80071e0:	1ad3      	subs	r3, r2, r3
 80071e2:	69fa      	ldr	r2, [r7, #28]
 80071e4:	429a      	cmp	r2, r3
 80071e6:	d902      	bls.n	80071ee <SPI_WaitFlagStateUntilTimeout+0x56>
 80071e8:	69fb      	ldr	r3, [r7, #28]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d13d      	bne.n	800726a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	685a      	ldr	r2, [r3, #4]
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80071fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	685b      	ldr	r3, [r3, #4]
 8007202:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007206:	d111      	bne.n	800722c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	689b      	ldr	r3, [r3, #8]
 800720c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007210:	d004      	beq.n	800721c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	689b      	ldr	r3, [r3, #8]
 8007216:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800721a:	d107      	bne.n	800722c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	681a      	ldr	r2, [r3, #0]
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800722a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007230:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007234:	d10f      	bne.n	8007256 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	681a      	ldr	r2, [r3, #0]
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007244:	601a      	str	r2, [r3, #0]
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	681a      	ldr	r2, [r3, #0]
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007254:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2201      	movs	r2, #1
 800725a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	2200      	movs	r2, #0
 8007262:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007266:	2303      	movs	r3, #3
 8007268:	e017      	b.n	800729a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d101      	bne.n	8007274 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007270:	2300      	movs	r3, #0
 8007272:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	3b01      	subs	r3, #1
 8007278:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	689a      	ldr	r2, [r3, #8]
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	4013      	ands	r3, r2
 8007284:	68ba      	ldr	r2, [r7, #8]
 8007286:	429a      	cmp	r2, r3
 8007288:	bf0c      	ite	eq
 800728a:	2301      	moveq	r3, #1
 800728c:	2300      	movne	r3, #0
 800728e:	b2db      	uxtb	r3, r3
 8007290:	461a      	mov	r2, r3
 8007292:	79fb      	ldrb	r3, [r7, #7]
 8007294:	429a      	cmp	r2, r3
 8007296:	d19b      	bne.n	80071d0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007298:	2300      	movs	r3, #0
}
 800729a:	4618      	mov	r0, r3
 800729c:	3720      	adds	r7, #32
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}
 80072a2:	bf00      	nop
 80072a4:	20000014 	.word	0x20000014

080072a8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b08a      	sub	sp, #40	@ 0x28
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	60f8      	str	r0, [r7, #12]
 80072b0:	60b9      	str	r1, [r7, #8]
 80072b2:	607a      	str	r2, [r7, #4]
 80072b4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80072b6:	2300      	movs	r3, #0
 80072b8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80072ba:	f7fc fc93 	bl	8003be4 <HAL_GetTick>
 80072be:	4602      	mov	r2, r0
 80072c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072c2:	1a9b      	subs	r3, r3, r2
 80072c4:	683a      	ldr	r2, [r7, #0]
 80072c6:	4413      	add	r3, r2
 80072c8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80072ca:	f7fc fc8b 	bl	8003be4 <HAL_GetTick>
 80072ce:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	330c      	adds	r3, #12
 80072d6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80072d8:	4b3d      	ldr	r3, [pc, #244]	@ (80073d0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80072da:	681a      	ldr	r2, [r3, #0]
 80072dc:	4613      	mov	r3, r2
 80072de:	009b      	lsls	r3, r3, #2
 80072e0:	4413      	add	r3, r2
 80072e2:	00da      	lsls	r2, r3, #3
 80072e4:	1ad3      	subs	r3, r2, r3
 80072e6:	0d1b      	lsrs	r3, r3, #20
 80072e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072ea:	fb02 f303 	mul.w	r3, r2, r3
 80072ee:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80072f0:	e060      	b.n	80073b4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80072f8:	d107      	bne.n	800730a <SPI_WaitFifoStateUntilTimeout+0x62>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d104      	bne.n	800730a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007300:	69fb      	ldr	r3, [r7, #28]
 8007302:	781b      	ldrb	r3, [r3, #0]
 8007304:	b2db      	uxtb	r3, r3
 8007306:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007308:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007310:	d050      	beq.n	80073b4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007312:	f7fc fc67 	bl	8003be4 <HAL_GetTick>
 8007316:	4602      	mov	r2, r0
 8007318:	6a3b      	ldr	r3, [r7, #32]
 800731a:	1ad3      	subs	r3, r2, r3
 800731c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800731e:	429a      	cmp	r2, r3
 8007320:	d902      	bls.n	8007328 <SPI_WaitFifoStateUntilTimeout+0x80>
 8007322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007324:	2b00      	cmp	r3, #0
 8007326:	d13d      	bne.n	80073a4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	685a      	ldr	r2, [r3, #4]
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007336:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	685b      	ldr	r3, [r3, #4]
 800733c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007340:	d111      	bne.n	8007366 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	689b      	ldr	r3, [r3, #8]
 8007346:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800734a:	d004      	beq.n	8007356 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	689b      	ldr	r3, [r3, #8]
 8007350:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007354:	d107      	bne.n	8007366 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	681a      	ldr	r2, [r3, #0]
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007364:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800736a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800736e:	d10f      	bne.n	8007390 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	681a      	ldr	r2, [r3, #0]
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800737e:	601a      	str	r2, [r3, #0]
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	681a      	ldr	r2, [r3, #0]
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800738e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2201      	movs	r2, #1
 8007394:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2200      	movs	r2, #0
 800739c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80073a0:	2303      	movs	r3, #3
 80073a2:	e010      	b.n	80073c6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80073a4:	69bb      	ldr	r3, [r7, #24]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d101      	bne.n	80073ae <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80073aa:	2300      	movs	r3, #0
 80073ac:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80073ae:	69bb      	ldr	r3, [r7, #24]
 80073b0:	3b01      	subs	r3, #1
 80073b2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	689a      	ldr	r2, [r3, #8]
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	4013      	ands	r3, r2
 80073be:	687a      	ldr	r2, [r7, #4]
 80073c0:	429a      	cmp	r2, r3
 80073c2:	d196      	bne.n	80072f2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80073c4:	2300      	movs	r3, #0
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3728      	adds	r7, #40	@ 0x28
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}
 80073ce:	bf00      	nop
 80073d0:	20000014 	.word	0x20000014

080073d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b086      	sub	sp, #24
 80073d8:	af02      	add	r7, sp, #8
 80073da:	60f8      	str	r0, [r7, #12]
 80073dc:	60b9      	str	r1, [r7, #8]
 80073de:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	9300      	str	r3, [sp, #0]
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	2200      	movs	r2, #0
 80073e8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80073ec:	68f8      	ldr	r0, [r7, #12]
 80073ee:	f7ff ff5b 	bl	80072a8 <SPI_WaitFifoStateUntilTimeout>
 80073f2:	4603      	mov	r3, r0
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d007      	beq.n	8007408 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80073fc:	f043 0220 	orr.w	r2, r3, #32
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007404:	2303      	movs	r3, #3
 8007406:	e027      	b.n	8007458 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	9300      	str	r3, [sp, #0]
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	2200      	movs	r2, #0
 8007410:	2180      	movs	r1, #128	@ 0x80
 8007412:	68f8      	ldr	r0, [r7, #12]
 8007414:	f7ff fec0 	bl	8007198 <SPI_WaitFlagStateUntilTimeout>
 8007418:	4603      	mov	r3, r0
 800741a:	2b00      	cmp	r3, #0
 800741c:	d007      	beq.n	800742e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007422:	f043 0220 	orr.w	r2, r3, #32
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800742a:	2303      	movs	r3, #3
 800742c:	e014      	b.n	8007458 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	9300      	str	r3, [sp, #0]
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	2200      	movs	r2, #0
 8007436:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800743a:	68f8      	ldr	r0, [r7, #12]
 800743c:	f7ff ff34 	bl	80072a8 <SPI_WaitFifoStateUntilTimeout>
 8007440:	4603      	mov	r3, r0
 8007442:	2b00      	cmp	r3, #0
 8007444:	d007      	beq.n	8007456 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800744a:	f043 0220 	orr.w	r2, r3, #32
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007452:	2303      	movs	r3, #3
 8007454:	e000      	b.n	8007458 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007456:	2300      	movs	r3, #0
}
 8007458:	4618      	mov	r0, r3
 800745a:	3710      	adds	r7, #16
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}

08007460 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b082      	sub	sp, #8
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d101      	bne.n	8007472 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800746e:	2301      	movs	r3, #1
 8007470:	e049      	b.n	8007506 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007478:	b2db      	uxtb	r3, r3
 800747a:	2b00      	cmp	r3, #0
 800747c:	d106      	bne.n	800748c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2200      	movs	r2, #0
 8007482:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f7fb fc56 	bl	8002d38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2202      	movs	r2, #2
 8007490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681a      	ldr	r2, [r3, #0]
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	3304      	adds	r3, #4
 800749c:	4619      	mov	r1, r3
 800749e:	4610      	mov	r0, r2
 80074a0:	f000 faac 	bl	80079fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2201      	movs	r2, #1
 80074a8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2201      	movs	r2, #1
 80074b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2201      	movs	r2, #1
 80074b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2201      	movs	r2, #1
 80074c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2201      	movs	r2, #1
 80074c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2201      	movs	r2, #1
 80074d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2201      	movs	r2, #1
 80074d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2201      	movs	r2, #1
 80074e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2201      	movs	r2, #1
 80074e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2201      	movs	r2, #1
 80074f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2201      	movs	r2, #1
 80074f8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2201      	movs	r2, #1
 8007500:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007504:	2300      	movs	r3, #0
}
 8007506:	4618      	mov	r0, r3
 8007508:	3708      	adds	r7, #8
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}
	...

08007510 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007510:	b480      	push	{r7}
 8007512:	b085      	sub	sp, #20
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800751e:	b2db      	uxtb	r3, r3
 8007520:	2b01      	cmp	r3, #1
 8007522:	d001      	beq.n	8007528 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007524:	2301      	movs	r3, #1
 8007526:	e036      	b.n	8007596 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2202      	movs	r2, #2
 800752c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	68da      	ldr	r2, [r3, #12]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f042 0201 	orr.w	r2, r2, #1
 800753e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4a17      	ldr	r2, [pc, #92]	@ (80075a4 <HAL_TIM_Base_Start_IT+0x94>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d004      	beq.n	8007554 <HAL_TIM_Base_Start_IT+0x44>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007552:	d115      	bne.n	8007580 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	689a      	ldr	r2, [r3, #8]
 800755a:	4b13      	ldr	r3, [pc, #76]	@ (80075a8 <HAL_TIM_Base_Start_IT+0x98>)
 800755c:	4013      	ands	r3, r2
 800755e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	2b06      	cmp	r3, #6
 8007564:	d015      	beq.n	8007592 <HAL_TIM_Base_Start_IT+0x82>
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800756c:	d011      	beq.n	8007592 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	681a      	ldr	r2, [r3, #0]
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f042 0201 	orr.w	r2, r2, #1
 800757c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800757e:	e008      	b.n	8007592 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	681a      	ldr	r2, [r3, #0]
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f042 0201 	orr.w	r2, r2, #1
 800758e:	601a      	str	r2, [r3, #0]
 8007590:	e000      	b.n	8007594 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007592:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007594:	2300      	movs	r3, #0
}
 8007596:	4618      	mov	r0, r3
 8007598:	3714      	adds	r7, #20
 800759a:	46bd      	mov	sp, r7
 800759c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a0:	4770      	bx	lr
 80075a2:	bf00      	nop
 80075a4:	40012c00 	.word	0x40012c00
 80075a8:	00010007 	.word	0x00010007

080075ac <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b083      	sub	sp, #12
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	68da      	ldr	r2, [r3, #12]
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f022 0201 	bic.w	r2, r2, #1
 80075c2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	6a1b      	ldr	r3, [r3, #32]
 80075ca:	f003 3311 	and.w	r3, r3, #286331153	@ 0x11111111
 80075ce:	f023 5388 	bic.w	r3, r3, #285212672	@ 0x11000000
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d10f      	bne.n	80075f6 <HAL_TIM_Base_Stop_IT+0x4a>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	6a1a      	ldr	r2, [r3, #32]
 80075dc:	f240 4344 	movw	r3, #1092	@ 0x444
 80075e0:	4013      	ands	r3, r2
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d107      	bne.n	80075f6 <HAL_TIM_Base_Stop_IT+0x4a>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	681a      	ldr	r2, [r3, #0]
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f022 0201 	bic.w	r2, r2, #1
 80075f4:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2201      	movs	r2, #1
 80075fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80075fe:	2300      	movs	r3, #0
}
 8007600:	4618      	mov	r0, r3
 8007602:	370c      	adds	r7, #12
 8007604:	46bd      	mov	sp, r7
 8007606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760a:	4770      	bx	lr

0800760c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b084      	sub	sp, #16
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	68db      	ldr	r3, [r3, #12]
 800761a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	691b      	ldr	r3, [r3, #16]
 8007622:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	f003 0302 	and.w	r3, r3, #2
 800762a:	2b00      	cmp	r3, #0
 800762c:	d020      	beq.n	8007670 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	f003 0302 	and.w	r3, r3, #2
 8007634:	2b00      	cmp	r3, #0
 8007636:	d01b      	beq.n	8007670 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f06f 0202 	mvn.w	r2, #2
 8007640:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2201      	movs	r2, #1
 8007646:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	699b      	ldr	r3, [r3, #24]
 800764e:	f003 0303 	and.w	r3, r3, #3
 8007652:	2b00      	cmp	r3, #0
 8007654:	d003      	beq.n	800765e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f000 f9b2 	bl	80079c0 <HAL_TIM_IC_CaptureCallback>
 800765c:	e005      	b.n	800766a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f000 f9a4 	bl	80079ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f000 f9b5 	bl	80079d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2200      	movs	r2, #0
 800766e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	f003 0304 	and.w	r3, r3, #4
 8007676:	2b00      	cmp	r3, #0
 8007678:	d020      	beq.n	80076bc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	f003 0304 	and.w	r3, r3, #4
 8007680:	2b00      	cmp	r3, #0
 8007682:	d01b      	beq.n	80076bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f06f 0204 	mvn.w	r2, #4
 800768c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2202      	movs	r2, #2
 8007692:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	699b      	ldr	r3, [r3, #24]
 800769a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d003      	beq.n	80076aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f000 f98c 	bl	80079c0 <HAL_TIM_IC_CaptureCallback>
 80076a8:	e005      	b.n	80076b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f000 f97e 	bl	80079ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f000 f98f 	bl	80079d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2200      	movs	r2, #0
 80076ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	f003 0308 	and.w	r3, r3, #8
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d020      	beq.n	8007708 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	f003 0308 	and.w	r3, r3, #8
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d01b      	beq.n	8007708 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f06f 0208 	mvn.w	r2, #8
 80076d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2204      	movs	r2, #4
 80076de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	69db      	ldr	r3, [r3, #28]
 80076e6:	f003 0303 	and.w	r3, r3, #3
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d003      	beq.n	80076f6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f000 f966 	bl	80079c0 <HAL_TIM_IC_CaptureCallback>
 80076f4:	e005      	b.n	8007702 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f000 f958 	bl	80079ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f000 f969 	bl	80079d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2200      	movs	r2, #0
 8007706:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	f003 0310 	and.w	r3, r3, #16
 800770e:	2b00      	cmp	r3, #0
 8007710:	d020      	beq.n	8007754 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	f003 0310 	and.w	r3, r3, #16
 8007718:	2b00      	cmp	r3, #0
 800771a:	d01b      	beq.n	8007754 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f06f 0210 	mvn.w	r2, #16
 8007724:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2208      	movs	r2, #8
 800772a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	69db      	ldr	r3, [r3, #28]
 8007732:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007736:	2b00      	cmp	r3, #0
 8007738:	d003      	beq.n	8007742 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f000 f940 	bl	80079c0 <HAL_TIM_IC_CaptureCallback>
 8007740:	e005      	b.n	800774e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f000 f932 	bl	80079ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f000 f943 	bl	80079d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2200      	movs	r2, #0
 8007752:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	f003 0301 	and.w	r3, r3, #1
 800775a:	2b00      	cmp	r3, #0
 800775c:	d00c      	beq.n	8007778 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	f003 0301 	and.w	r3, r3, #1
 8007764:	2b00      	cmp	r3, #0
 8007766:	d007      	beq.n	8007778 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f06f 0201 	mvn.w	r2, #1
 8007770:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f7fb f886 	bl	8002884 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800777e:	2b00      	cmp	r3, #0
 8007780:	d104      	bne.n	800778c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007788:	2b00      	cmp	r3, #0
 800778a:	d00c      	beq.n	80077a6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007792:	2b00      	cmp	r3, #0
 8007794:	d007      	beq.n	80077a6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800779e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f000 fa9b 	bl	8007cdc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d00c      	beq.n	80077ca <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d007      	beq.n	80077ca <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80077c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f000 fa93 	bl	8007cf0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d00c      	beq.n	80077ee <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d007      	beq.n	80077ee <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80077e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f000 f8fd 	bl	80079e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	f003 0320 	and.w	r3, r3, #32
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d00c      	beq.n	8007812 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	f003 0320 	and.w	r3, r3, #32
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d007      	beq.n	8007812 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f06f 0220 	mvn.w	r2, #32
 800780a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f000 fa5b 	bl	8007cc8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007812:	bf00      	nop
 8007814:	3710      	adds	r7, #16
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}

0800781a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800781a:	b580      	push	{r7, lr}
 800781c:	b084      	sub	sp, #16
 800781e:	af00      	add	r7, sp, #0
 8007820:	6078      	str	r0, [r7, #4]
 8007822:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007824:	2300      	movs	r3, #0
 8007826:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800782e:	2b01      	cmp	r3, #1
 8007830:	d101      	bne.n	8007836 <HAL_TIM_ConfigClockSource+0x1c>
 8007832:	2302      	movs	r3, #2
 8007834:	e0b6      	b.n	80079a4 <HAL_TIM_ConfigClockSource+0x18a>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2201      	movs	r2, #1
 800783a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2202      	movs	r2, #2
 8007842:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	689b      	ldr	r3, [r3, #8]
 800784c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8007854:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007858:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007860:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	68ba      	ldr	r2, [r7, #8]
 8007868:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007872:	d03e      	beq.n	80078f2 <HAL_TIM_ConfigClockSource+0xd8>
 8007874:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007878:	f200 8087 	bhi.w	800798a <HAL_TIM_ConfigClockSource+0x170>
 800787c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007880:	f000 8086 	beq.w	8007990 <HAL_TIM_ConfigClockSource+0x176>
 8007884:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007888:	d87f      	bhi.n	800798a <HAL_TIM_ConfigClockSource+0x170>
 800788a:	2b70      	cmp	r3, #112	@ 0x70
 800788c:	d01a      	beq.n	80078c4 <HAL_TIM_ConfigClockSource+0xaa>
 800788e:	2b70      	cmp	r3, #112	@ 0x70
 8007890:	d87b      	bhi.n	800798a <HAL_TIM_ConfigClockSource+0x170>
 8007892:	2b60      	cmp	r3, #96	@ 0x60
 8007894:	d050      	beq.n	8007938 <HAL_TIM_ConfigClockSource+0x11e>
 8007896:	2b60      	cmp	r3, #96	@ 0x60
 8007898:	d877      	bhi.n	800798a <HAL_TIM_ConfigClockSource+0x170>
 800789a:	2b50      	cmp	r3, #80	@ 0x50
 800789c:	d03c      	beq.n	8007918 <HAL_TIM_ConfigClockSource+0xfe>
 800789e:	2b50      	cmp	r3, #80	@ 0x50
 80078a0:	d873      	bhi.n	800798a <HAL_TIM_ConfigClockSource+0x170>
 80078a2:	2b40      	cmp	r3, #64	@ 0x40
 80078a4:	d058      	beq.n	8007958 <HAL_TIM_ConfigClockSource+0x13e>
 80078a6:	2b40      	cmp	r3, #64	@ 0x40
 80078a8:	d86f      	bhi.n	800798a <HAL_TIM_ConfigClockSource+0x170>
 80078aa:	2b30      	cmp	r3, #48	@ 0x30
 80078ac:	d064      	beq.n	8007978 <HAL_TIM_ConfigClockSource+0x15e>
 80078ae:	2b30      	cmp	r3, #48	@ 0x30
 80078b0:	d86b      	bhi.n	800798a <HAL_TIM_ConfigClockSource+0x170>
 80078b2:	2b20      	cmp	r3, #32
 80078b4:	d060      	beq.n	8007978 <HAL_TIM_ConfigClockSource+0x15e>
 80078b6:	2b20      	cmp	r3, #32
 80078b8:	d867      	bhi.n	800798a <HAL_TIM_ConfigClockSource+0x170>
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d05c      	beq.n	8007978 <HAL_TIM_ConfigClockSource+0x15e>
 80078be:	2b10      	cmp	r3, #16
 80078c0:	d05a      	beq.n	8007978 <HAL_TIM_ConfigClockSource+0x15e>
 80078c2:	e062      	b.n	800798a <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80078d4:	f000 f978 	bl	8007bc8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	689b      	ldr	r3, [r3, #8]
 80078de:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80078e6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	68ba      	ldr	r2, [r7, #8]
 80078ee:	609a      	str	r2, [r3, #8]
      break;
 80078f0:	e04f      	b.n	8007992 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007902:	f000 f961 	bl	8007bc8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	689a      	ldr	r2, [r3, #8]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007914:	609a      	str	r2, [r3, #8]
      break;
 8007916:	e03c      	b.n	8007992 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007924:	461a      	mov	r2, r3
 8007926:	f000 f8d3 	bl	8007ad0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	2150      	movs	r1, #80	@ 0x50
 8007930:	4618      	mov	r0, r3
 8007932:	f000 f92c 	bl	8007b8e <TIM_ITRx_SetConfig>
      break;
 8007936:	e02c      	b.n	8007992 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007944:	461a      	mov	r2, r3
 8007946:	f000 f8f2 	bl	8007b2e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	2160      	movs	r1, #96	@ 0x60
 8007950:	4618      	mov	r0, r3
 8007952:	f000 f91c 	bl	8007b8e <TIM_ITRx_SetConfig>
      break;
 8007956:	e01c      	b.n	8007992 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007964:	461a      	mov	r2, r3
 8007966:	f000 f8b3 	bl	8007ad0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	2140      	movs	r1, #64	@ 0x40
 8007970:	4618      	mov	r0, r3
 8007972:	f000 f90c 	bl	8007b8e <TIM_ITRx_SetConfig>
      break;
 8007976:	e00c      	b.n	8007992 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681a      	ldr	r2, [r3, #0]
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4619      	mov	r1, r3
 8007982:	4610      	mov	r0, r2
 8007984:	f000 f903 	bl	8007b8e <TIM_ITRx_SetConfig>
      break;
 8007988:	e003      	b.n	8007992 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800798a:	2301      	movs	r3, #1
 800798c:	73fb      	strb	r3, [r7, #15]
      break;
 800798e:	e000      	b.n	8007992 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8007990:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2201      	movs	r2, #1
 8007996:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2200      	movs	r2, #0
 800799e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80079a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	3710      	adds	r7, #16
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}

080079ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80079ac:	b480      	push	{r7}
 80079ae:	b083      	sub	sp, #12
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80079b4:	bf00      	nop
 80079b6:	370c      	adds	r7, #12
 80079b8:	46bd      	mov	sp, r7
 80079ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079be:	4770      	bx	lr

080079c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80079c0:	b480      	push	{r7}
 80079c2:	b083      	sub	sp, #12
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80079c8:	bf00      	nop
 80079ca:	370c      	adds	r7, #12
 80079cc:	46bd      	mov	sp, r7
 80079ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d2:	4770      	bx	lr

080079d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b083      	sub	sp, #12
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80079dc:	bf00      	nop
 80079de:	370c      	adds	r7, #12
 80079e0:	46bd      	mov	sp, r7
 80079e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e6:	4770      	bx	lr

080079e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b083      	sub	sp, #12
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80079f0:	bf00      	nop
 80079f2:	370c      	adds	r7, #12
 80079f4:	46bd      	mov	sp, r7
 80079f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fa:	4770      	bx	lr

080079fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b085      	sub	sp, #20
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
 8007a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	4a2d      	ldr	r2, [pc, #180]	@ (8007ac4 <TIM_Base_SetConfig+0xc8>)
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d003      	beq.n	8007a1c <TIM_Base_SetConfig+0x20>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a1a:	d108      	bne.n	8007a2e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	68fa      	ldr	r2, [r7, #12]
 8007a2a:	4313      	orrs	r3, r2
 8007a2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	4a24      	ldr	r2, [pc, #144]	@ (8007ac4 <TIM_Base_SetConfig+0xc8>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d00b      	beq.n	8007a4e <TIM_Base_SetConfig+0x52>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a3c:	d007      	beq.n	8007a4e <TIM_Base_SetConfig+0x52>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	4a21      	ldr	r2, [pc, #132]	@ (8007ac8 <TIM_Base_SetConfig+0xcc>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d003      	beq.n	8007a4e <TIM_Base_SetConfig+0x52>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	4a20      	ldr	r2, [pc, #128]	@ (8007acc <TIM_Base_SetConfig+0xd0>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d108      	bne.n	8007a60 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	68db      	ldr	r3, [r3, #12]
 8007a5a:	68fa      	ldr	r2, [r7, #12]
 8007a5c:	4313      	orrs	r3, r2
 8007a5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	695b      	ldr	r3, [r3, #20]
 8007a6a:	4313      	orrs	r3, r2
 8007a6c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	689a      	ldr	r2, [r3, #8]
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	681a      	ldr	r2, [r3, #0]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	4a10      	ldr	r2, [pc, #64]	@ (8007ac4 <TIM_Base_SetConfig+0xc8>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d007      	beq.n	8007a96 <TIM_Base_SetConfig+0x9a>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	4a0f      	ldr	r2, [pc, #60]	@ (8007ac8 <TIM_Base_SetConfig+0xcc>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d003      	beq.n	8007a96 <TIM_Base_SetConfig+0x9a>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	4a0e      	ldr	r2, [pc, #56]	@ (8007acc <TIM_Base_SetConfig+0xd0>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d103      	bne.n	8007a9e <TIM_Base_SetConfig+0xa2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	691a      	ldr	r2, [r3, #16]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f043 0204 	orr.w	r2, r3, #4
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2201      	movs	r2, #1
 8007aae:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	68fa      	ldr	r2, [r7, #12]
 8007ab4:	601a      	str	r2, [r3, #0]
}
 8007ab6:	bf00      	nop
 8007ab8:	3714      	adds	r7, #20
 8007aba:	46bd      	mov	sp, r7
 8007abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac0:	4770      	bx	lr
 8007ac2:	bf00      	nop
 8007ac4:	40012c00 	.word	0x40012c00
 8007ac8:	40014400 	.word	0x40014400
 8007acc:	40014800 	.word	0x40014800

08007ad0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b087      	sub	sp, #28
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	60f8      	str	r0, [r7, #12]
 8007ad8:	60b9      	str	r1, [r7, #8]
 8007ada:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	6a1b      	ldr	r3, [r3, #32]
 8007ae0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	6a1b      	ldr	r3, [r3, #32]
 8007ae6:	f023 0201 	bic.w	r2, r3, #1
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	699b      	ldr	r3, [r3, #24]
 8007af2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007afa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	011b      	lsls	r3, r3, #4
 8007b00:	693a      	ldr	r2, [r7, #16]
 8007b02:	4313      	orrs	r3, r2
 8007b04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	f023 030a 	bic.w	r3, r3, #10
 8007b0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007b0e:	697a      	ldr	r2, [r7, #20]
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	4313      	orrs	r3, r2
 8007b14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	693a      	ldr	r2, [r7, #16]
 8007b1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	697a      	ldr	r2, [r7, #20]
 8007b20:	621a      	str	r2, [r3, #32]
}
 8007b22:	bf00      	nop
 8007b24:	371c      	adds	r7, #28
 8007b26:	46bd      	mov	sp, r7
 8007b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2c:	4770      	bx	lr

08007b2e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b2e:	b480      	push	{r7}
 8007b30:	b087      	sub	sp, #28
 8007b32:	af00      	add	r7, sp, #0
 8007b34:	60f8      	str	r0, [r7, #12]
 8007b36:	60b9      	str	r1, [r7, #8]
 8007b38:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	6a1b      	ldr	r3, [r3, #32]
 8007b3e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	6a1b      	ldr	r3, [r3, #32]
 8007b44:	f023 0210 	bic.w	r2, r3, #16
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	699b      	ldr	r3, [r3, #24]
 8007b50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007b52:	693b      	ldr	r3, [r7, #16]
 8007b54:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007b58:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	031b      	lsls	r3, r3, #12
 8007b5e:	693a      	ldr	r2, [r7, #16]
 8007b60:	4313      	orrs	r3, r2
 8007b62:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007b64:	697b      	ldr	r3, [r7, #20]
 8007b66:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007b6a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	011b      	lsls	r3, r3, #4
 8007b70:	697a      	ldr	r2, [r7, #20]
 8007b72:	4313      	orrs	r3, r2
 8007b74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	693a      	ldr	r2, [r7, #16]
 8007b7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	697a      	ldr	r2, [r7, #20]
 8007b80:	621a      	str	r2, [r3, #32]
}
 8007b82:	bf00      	nop
 8007b84:	371c      	adds	r7, #28
 8007b86:	46bd      	mov	sp, r7
 8007b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8c:	4770      	bx	lr

08007b8e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007b8e:	b480      	push	{r7}
 8007b90:	b085      	sub	sp, #20
 8007b92:	af00      	add	r7, sp, #0
 8007b94:	6078      	str	r0, [r7, #4]
 8007b96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	689b      	ldr	r3, [r3, #8]
 8007b9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007ba4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ba8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007baa:	683a      	ldr	r2, [r7, #0]
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	4313      	orrs	r3, r2
 8007bb0:	f043 0307 	orr.w	r3, r3, #7
 8007bb4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	68fa      	ldr	r2, [r7, #12]
 8007bba:	609a      	str	r2, [r3, #8]
}
 8007bbc:	bf00      	nop
 8007bbe:	3714      	adds	r7, #20
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc6:	4770      	bx	lr

08007bc8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b087      	sub	sp, #28
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	60f8      	str	r0, [r7, #12]
 8007bd0:	60b9      	str	r1, [r7, #8]
 8007bd2:	607a      	str	r2, [r7, #4]
 8007bd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	689b      	ldr	r3, [r3, #8]
 8007bda:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007bdc:	697b      	ldr	r3, [r7, #20]
 8007bde:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007be2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	021a      	lsls	r2, r3, #8
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	431a      	orrs	r2, r3
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	697a      	ldr	r2, [r7, #20]
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	697a      	ldr	r2, [r7, #20]
 8007bfa:	609a      	str	r2, [r3, #8]
}
 8007bfc:	bf00      	nop
 8007bfe:	371c      	adds	r7, #28
 8007c00:	46bd      	mov	sp, r7
 8007c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c06:	4770      	bx	lr

08007c08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b085      	sub	sp, #20
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
 8007c10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007c18:	2b01      	cmp	r3, #1
 8007c1a:	d101      	bne.n	8007c20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007c1c:	2302      	movs	r3, #2
 8007c1e:	e04a      	b.n	8007cb6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2201      	movs	r2, #1
 8007c24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2202      	movs	r2, #2
 8007c2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	685b      	ldr	r3, [r3, #4]
 8007c36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	689b      	ldr	r3, [r3, #8]
 8007c3e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4a1f      	ldr	r2, [pc, #124]	@ (8007cc4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d108      	bne.n	8007c5c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007c50:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	685b      	ldr	r3, [r3, #4]
 8007c56:	68fa      	ldr	r2, [r7, #12]
 8007c58:	4313      	orrs	r3, r2
 8007c5a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	68fa      	ldr	r2, [r7, #12]
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	68fa      	ldr	r2, [r7, #12]
 8007c74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	4a12      	ldr	r2, [pc, #72]	@ (8007cc4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d004      	beq.n	8007c8a <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c88:	d10c      	bne.n	8007ca4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007c90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	689b      	ldr	r3, [r3, #8]
 8007c96:	68ba      	ldr	r2, [r7, #8]
 8007c98:	4313      	orrs	r3, r2
 8007c9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	68ba      	ldr	r2, [r7, #8]
 8007ca2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007cb4:	2300      	movs	r3, #0
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3714      	adds	r7, #20
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc0:	4770      	bx	lr
 8007cc2:	bf00      	nop
 8007cc4:	40012c00 	.word	0x40012c00

08007cc8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b083      	sub	sp, #12
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007cd0:	bf00      	nop
 8007cd2:	370c      	adds	r7, #12
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cda:	4770      	bx	lr

08007cdc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b083      	sub	sp, #12
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007ce4:	bf00      	nop
 8007ce6:	370c      	adds	r7, #12
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cee:	4770      	bx	lr

08007cf0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b083      	sub	sp, #12
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007cf8:	bf00      	nop
 8007cfa:	370c      	adds	r7, #12
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d02:	4770      	bx	lr

08007d04 <LL_RCC_GetUSARTClockSource>:
{
 8007d04:	b480      	push	{r7}
 8007d06:	b083      	sub	sp, #12
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8007d0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007d10:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	4013      	ands	r3, r2
}
 8007d18:	4618      	mov	r0, r3
 8007d1a:	370c      	adds	r7, #12
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d22:	4770      	bx	lr

08007d24 <LL_RCC_GetLPUARTClockSource>:
{
 8007d24:	b480      	push	{r7}
 8007d26:	b083      	sub	sp, #12
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8007d2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007d30:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	4013      	ands	r3, r2
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	370c      	adds	r7, #12
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d42:	4770      	bx	lr

08007d44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b082      	sub	sp, #8
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d101      	bne.n	8007d56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d52:	2301      	movs	r3, #1
 8007d54:	e050      	b.n	8007df8 <HAL_UART_Init+0xb4>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d114      	bne.n	8007d8a <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2200      	movs	r2, #0
 8007d64:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f000 fc67 	bl	800863c <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d103      	bne.n	8007d80 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	4a21      	ldr	r2, [pc, #132]	@ (8007e00 <HAL_UART_Init+0xbc>)
 8007d7c:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2224      	movs	r2, #36	@ 0x24
 8007d8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	681a      	ldr	r2, [r3, #0]
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f022 0201 	bic.w	r2, r2, #1
 8007da0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d002      	beq.n	8007db0 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f000 fec0 	bl	8008b30 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f000 fc95 	bl	80086e0 <UART_SetConfig>
 8007db6:	4603      	mov	r3, r0
 8007db8:	2b01      	cmp	r3, #1
 8007dba:	d101      	bne.n	8007dc0 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	e01b      	b.n	8007df8 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	685a      	ldr	r2, [r3, #4]
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007dce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	689a      	ldr	r2, [r3, #8]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007dde:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	681a      	ldr	r2, [r3, #0]
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f042 0201 	orr.w	r2, r2, #1
 8007dee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f000 ff3f 	bl	8008c74 <UART_CheckIdleState>
 8007df6:	4603      	mov	r3, r0
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	3708      	adds	r7, #8
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}
 8007e00:	08002a51 	.word	0x08002a51

08007e04 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b08a      	sub	sp, #40	@ 0x28
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	60f8      	str	r0, [r7, #12]
 8007e0c:	60b9      	str	r1, [r7, #8]
 8007e0e:	4613      	mov	r3, r2
 8007e10:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e18:	2b20      	cmp	r3, #32
 8007e1a:	d167      	bne.n	8007eec <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d002      	beq.n	8007e28 <HAL_UART_Transmit_DMA+0x24>
 8007e22:	88fb      	ldrh	r3, [r7, #6]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d101      	bne.n	8007e2c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8007e28:	2301      	movs	r3, #1
 8007e2a:	e060      	b.n	8007eee <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	68ba      	ldr	r2, [r7, #8]
 8007e30:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	88fa      	ldrh	r2, [r7, #6]
 8007e36:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	88fa      	ldrh	r2, [r7, #6]
 8007e3e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	2200      	movs	r2, #0
 8007e46:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	2221      	movs	r2, #33	@ 0x21
 8007e4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d028      	beq.n	8007eac <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007e5e:	4a26      	ldr	r2, [pc, #152]	@ (8007ef8 <HAL_UART_Transmit_DMA+0xf4>)
 8007e60:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007e66:	4a25      	ldr	r2, [pc, #148]	@ (8007efc <HAL_UART_Transmit_DMA+0xf8>)
 8007e68:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007e6e:	4a24      	ldr	r2, [pc, #144]	@ (8007f00 <HAL_UART_Transmit_DMA+0xfc>)
 8007e70:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007e76:	2200      	movs	r2, #0
 8007e78:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e82:	4619      	mov	r1, r3
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	3328      	adds	r3, #40	@ 0x28
 8007e8a:	461a      	mov	r2, r3
 8007e8c:	88fb      	ldrh	r3, [r7, #6]
 8007e8e:	f7fc f90f 	bl	80040b0 <HAL_DMA_Start_IT>
 8007e92:	4603      	mov	r3, r0
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d009      	beq.n	8007eac <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	2210      	movs	r2, #16
 8007e9c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	2220      	movs	r2, #32
 8007ea4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	e020      	b.n	8007eee <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	2240      	movs	r2, #64	@ 0x40
 8007eb2:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	3308      	adds	r3, #8
 8007eba:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	e853 3f00 	ldrex	r3, [r3]
 8007ec2:	613b      	str	r3, [r7, #16]
   return(result);
 8007ec4:	693b      	ldr	r3, [r7, #16]
 8007ec6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007eca:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	3308      	adds	r3, #8
 8007ed2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ed4:	623a      	str	r2, [r7, #32]
 8007ed6:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ed8:	69f9      	ldr	r1, [r7, #28]
 8007eda:	6a3a      	ldr	r2, [r7, #32]
 8007edc:	e841 2300 	strex	r3, r2, [r1]
 8007ee0:	61bb      	str	r3, [r7, #24]
   return(result);
 8007ee2:	69bb      	ldr	r3, [r7, #24]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d1e5      	bne.n	8007eb4 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8007ee8:	2300      	movs	r3, #0
 8007eea:	e000      	b.n	8007eee <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8007eec:	2302      	movs	r3, #2
  }
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	3728      	adds	r7, #40	@ 0x28
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}
 8007ef6:	bf00      	nop
 8007ef8:	08008ff1 	.word	0x08008ff1
 8007efc:	0800908f 	.word	0x0800908f
 8007f00:	080090af 	.word	0x080090af

08007f04 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b0ba      	sub	sp, #232	@ 0xe8
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	69db      	ldr	r3, [r3, #28]
 8007f12:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	689b      	ldr	r3, [r3, #8]
 8007f26:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007f2a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007f2e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007f32:	4013      	ands	r3, r2
 8007f34:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007f38:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d11b      	bne.n	8007f78 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007f40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f44:	f003 0320 	and.w	r3, r3, #32
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d015      	beq.n	8007f78 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007f4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f50:	f003 0320 	and.w	r3, r3, #32
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d105      	bne.n	8007f64 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007f58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007f5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d009      	beq.n	8007f78 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	f000 8312 	beq.w	8008592 <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	4798      	blx	r3
      }
      return;
 8007f76:	e30c      	b.n	8008592 <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007f78:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	f000 8129 	beq.w	80081d4 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007f82:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007f86:	4b90      	ldr	r3, [pc, #576]	@ (80081c8 <HAL_UART_IRQHandler+0x2c4>)
 8007f88:	4013      	ands	r3, r2
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d106      	bne.n	8007f9c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007f8e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007f92:	4b8e      	ldr	r3, [pc, #568]	@ (80081cc <HAL_UART_IRQHandler+0x2c8>)
 8007f94:	4013      	ands	r3, r2
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	f000 811c 	beq.w	80081d4 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007f9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007fa0:	f003 0301 	and.w	r3, r3, #1
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d011      	beq.n	8007fcc <HAL_UART_IRQHandler+0xc8>
 8007fa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007fac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d00b      	beq.n	8007fcc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	2201      	movs	r2, #1
 8007fba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007fc2:	f043 0201 	orr.w	r2, r3, #1
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007fcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007fd0:	f003 0302 	and.w	r3, r3, #2
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d011      	beq.n	8007ffc <HAL_UART_IRQHandler+0xf8>
 8007fd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007fdc:	f003 0301 	and.w	r3, r3, #1
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d00b      	beq.n	8007ffc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	2202      	movs	r2, #2
 8007fea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ff2:	f043 0204 	orr.w	r2, r3, #4
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007ffc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008000:	f003 0304 	and.w	r3, r3, #4
 8008004:	2b00      	cmp	r3, #0
 8008006:	d011      	beq.n	800802c <HAL_UART_IRQHandler+0x128>
 8008008:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800800c:	f003 0301 	and.w	r3, r3, #1
 8008010:	2b00      	cmp	r3, #0
 8008012:	d00b      	beq.n	800802c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	2204      	movs	r2, #4
 800801a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008022:	f043 0202 	orr.w	r2, r3, #2
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800802c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008030:	f003 0308 	and.w	r3, r3, #8
 8008034:	2b00      	cmp	r3, #0
 8008036:	d017      	beq.n	8008068 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008038:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800803c:	f003 0320 	and.w	r3, r3, #32
 8008040:	2b00      	cmp	r3, #0
 8008042:	d105      	bne.n	8008050 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008044:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008048:	4b5f      	ldr	r3, [pc, #380]	@ (80081c8 <HAL_UART_IRQHandler+0x2c4>)
 800804a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800804c:	2b00      	cmp	r3, #0
 800804e:	d00b      	beq.n	8008068 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	2208      	movs	r2, #8
 8008056:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800805e:	f043 0208 	orr.w	r2, r3, #8
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008068:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800806c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008070:	2b00      	cmp	r3, #0
 8008072:	d012      	beq.n	800809a <HAL_UART_IRQHandler+0x196>
 8008074:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008078:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800807c:	2b00      	cmp	r3, #0
 800807e:	d00c      	beq.n	800809a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008088:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008090:	f043 0220 	orr.w	r2, r3, #32
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	f000 8278 	beq.w	8008596 <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80080a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080aa:	f003 0320 	and.w	r3, r3, #32
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d013      	beq.n	80080da <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80080b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80080b6:	f003 0320 	and.w	r3, r3, #32
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d105      	bne.n	80080ca <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80080be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80080c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d007      	beq.n	80080da <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d003      	beq.n	80080da <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080e0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	689b      	ldr	r3, [r3, #8]
 80080ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080ee:	2b40      	cmp	r3, #64	@ 0x40
 80080f0:	d005      	beq.n	80080fe <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80080f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80080f6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d058      	beq.n	80081b0 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f000 ff10 	bl	8008f24 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	689b      	ldr	r3, [r3, #8]
 800810a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800810e:	2b40      	cmp	r3, #64	@ 0x40
 8008110:	d148      	bne.n	80081a4 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	3308      	adds	r3, #8
 8008118:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800811c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008120:	e853 3f00 	ldrex	r3, [r3]
 8008124:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008128:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800812c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008130:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	3308      	adds	r3, #8
 800813a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800813e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008142:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008146:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800814a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800814e:	e841 2300 	strex	r3, r2, [r1]
 8008152:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008156:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800815a:	2b00      	cmp	r3, #0
 800815c:	d1d9      	bne.n	8008112 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008164:	2b00      	cmp	r3, #0
 8008166:	d017      	beq.n	8008198 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800816e:	4a18      	ldr	r2, [pc, #96]	@ (80081d0 <HAL_UART_IRQHandler+0x2cc>)
 8008170:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008178:	4618      	mov	r0, r3
 800817a:	f7fc f873 	bl	8004264 <HAL_DMA_Abort_IT>
 800817e:	4603      	mov	r3, r0
 8008180:	2b00      	cmp	r3, #0
 8008182:	d01f      	beq.n	80081c4 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800818a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800818c:	687a      	ldr	r2, [r7, #4]
 800818e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8008192:	4610      	mov	r0, r2
 8008194:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008196:	e015      	b.n	80081c4 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081a2:	e00f      	b.n	80081c4 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081ae:	e009      	b.n	80081c4 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2200      	movs	r2, #0
 80081be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80081c2:	e1e8      	b.n	8008596 <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081c4:	bf00      	nop
    return;
 80081c6:	e1e6      	b.n	8008596 <HAL_UART_IRQHandler+0x692>
 80081c8:	10000001 	.word	0x10000001
 80081cc:	04000120 	.word	0x04000120
 80081d0:	08009133 	.word	0x08009133

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80081d8:	2b01      	cmp	r3, #1
 80081da:	f040 8176 	bne.w	80084ca <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80081de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081e2:	f003 0310 	and.w	r3, r3, #16
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	f000 816f 	beq.w	80084ca <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80081ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80081f0:	f003 0310 	and.w	r3, r3, #16
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	f000 8168 	beq.w	80084ca <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	2210      	movs	r2, #16
 8008200:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	689b      	ldr	r3, [r3, #8]
 8008208:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800820c:	2b40      	cmp	r3, #64	@ 0x40
 800820e:	f040 80dc 	bne.w	80083ca <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	685b      	ldr	r3, [r3, #4]
 800821c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008220:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008224:	2b00      	cmp	r3, #0
 8008226:	f000 80b1 	beq.w	800838c <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008230:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008234:	429a      	cmp	r2, r3
 8008236:	f080 80a9 	bcs.w	800838c <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008240:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f003 0320 	and.w	r3, r3, #32
 8008252:	2b00      	cmp	r3, #0
 8008254:	f040 8087 	bne.w	8008366 <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008260:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008264:	e853 3f00 	ldrex	r3, [r3]
 8008268:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800826c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008270:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008274:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	461a      	mov	r2, r3
 800827e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008282:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008286:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800828a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800828e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008292:	e841 2300 	strex	r3, r2, [r1]
 8008296:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800829a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d1da      	bne.n	8008258 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	3308      	adds	r3, #8
 80082a8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80082ac:	e853 3f00 	ldrex	r3, [r3]
 80082b0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80082b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80082b4:	f023 0301 	bic.w	r3, r3, #1
 80082b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	3308      	adds	r3, #8
 80082c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80082c6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80082ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082cc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80082ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80082d2:	e841 2300 	strex	r3, r2, [r1]
 80082d6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80082d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d1e1      	bne.n	80082a2 <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	3308      	adds	r3, #8
 80082e4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80082e8:	e853 3f00 	ldrex	r3, [r3]
 80082ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80082ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80082f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80082f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	3308      	adds	r3, #8
 80082fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008302:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008304:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008306:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008308:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800830a:	e841 2300 	strex	r3, r2, [r1]
 800830e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008310:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008312:	2b00      	cmp	r3, #0
 8008314:	d1e3      	bne.n	80082de <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2220      	movs	r2, #32
 800831a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2200      	movs	r2, #0
 8008322:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800832a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800832c:	e853 3f00 	ldrex	r3, [r3]
 8008330:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008332:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008334:	f023 0310 	bic.w	r3, r3, #16
 8008338:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	461a      	mov	r2, r3
 8008342:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008346:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008348:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800834a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800834c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800834e:	e841 2300 	strex	r3, r2, [r1]
 8008352:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008354:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008356:	2b00      	cmp	r3, #0
 8008358:	d1e4      	bne.n	8008324 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008360:	4618      	mov	r0, r3
 8008362:	f7fb ff20 	bl	80041a6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2202      	movs	r2, #2
 800836a:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008372:	687a      	ldr	r2, [r7, #4]
 8008374:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 8008378:	687a      	ldr	r2, [r7, #4]
 800837a:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 800837e:	b292      	uxth	r2, r2
 8008380:	1a8a      	subs	r2, r1, r2
 8008382:	b292      	uxth	r2, r2
 8008384:	4611      	mov	r1, r2
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800838a:	e106      	b.n	800859a <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008392:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008396:	429a      	cmp	r2, r3
 8008398:	f040 80ff 	bne.w	800859a <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f003 0320 	and.w	r3, r3, #32
 80083aa:	2b20      	cmp	r3, #32
 80083ac:	f040 80f5 	bne.w	800859a <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2202      	movs	r2, #2
 80083b4:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80083bc:	687a      	ldr	r2, [r7, #4]
 80083be:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 80083c2:	4611      	mov	r1, r2
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	4798      	blx	r3
      return;
 80083c8:	e0e7      	b.n	800859a <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80083d6:	b29b      	uxth	r3, r3
 80083d8:	1ad3      	subs	r3, r2, r3
 80083da:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80083e4:	b29b      	uxth	r3, r3
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	f000 80d9 	beq.w	800859e <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 80083ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	f000 80d4 	beq.w	800859e <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083fe:	e853 3f00 	ldrex	r3, [r3]
 8008402:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008404:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008406:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800840a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	461a      	mov	r2, r3
 8008414:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008418:	647b      	str	r3, [r7, #68]	@ 0x44
 800841a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800841c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800841e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008420:	e841 2300 	strex	r3, r2, [r1]
 8008424:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008426:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008428:	2b00      	cmp	r3, #0
 800842a:	d1e4      	bne.n	80083f6 <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	3308      	adds	r3, #8
 8008432:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008436:	e853 3f00 	ldrex	r3, [r3]
 800843a:	623b      	str	r3, [r7, #32]
   return(result);
 800843c:	6a3b      	ldr	r3, [r7, #32]
 800843e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008442:	f023 0301 	bic.w	r3, r3, #1
 8008446:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	3308      	adds	r3, #8
 8008450:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008454:	633a      	str	r2, [r7, #48]	@ 0x30
 8008456:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008458:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800845a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800845c:	e841 2300 	strex	r3, r2, [r1]
 8008460:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008464:	2b00      	cmp	r3, #0
 8008466:	d1e1      	bne.n	800842c <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2220      	movs	r2, #32
 800846c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2200      	movs	r2, #0
 8008474:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2200      	movs	r2, #0
 800847a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008482:	693b      	ldr	r3, [r7, #16]
 8008484:	e853 3f00 	ldrex	r3, [r3]
 8008488:	60fb      	str	r3, [r7, #12]
   return(result);
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	f023 0310 	bic.w	r3, r3, #16
 8008490:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	461a      	mov	r2, r3
 800849a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800849e:	61fb      	str	r3, [r7, #28]
 80084a0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084a2:	69b9      	ldr	r1, [r7, #24]
 80084a4:	69fa      	ldr	r2, [r7, #28]
 80084a6:	e841 2300 	strex	r3, r2, [r1]
 80084aa:	617b      	str	r3, [r7, #20]
   return(result);
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d1e4      	bne.n	800847c <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2202      	movs	r2, #2
 80084b6:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80084be:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 80084c2:	4611      	mov	r1, r2
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80084c8:	e069      	b.n	800859e <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80084ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d010      	beq.n	80084f8 <HAL_UART_IRQHandler+0x5f4>
 80084d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80084da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d00a      	beq.n	80084f8 <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80084ea:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80084f6:	e055      	b.n	80085a4 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80084f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008500:	2b00      	cmp	r3, #0
 8008502:	d014      	beq.n	800852e <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008504:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008508:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800850c:	2b00      	cmp	r3, #0
 800850e:	d105      	bne.n	800851c <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008510:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008514:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008518:	2b00      	cmp	r3, #0
 800851a:	d008      	beq.n	800852e <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008520:	2b00      	cmp	r3, #0
 8008522:	d03e      	beq.n	80085a2 <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	4798      	blx	r3
    }
    return;
 800852c:	e039      	b.n	80085a2 <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800852e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008532:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008536:	2b00      	cmp	r3, #0
 8008538:	d009      	beq.n	800854e <HAL_UART_IRQHandler+0x64a>
 800853a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800853e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008542:	2b00      	cmp	r3, #0
 8008544:	d003      	beq.n	800854e <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f000 fe07 	bl	800915a <UART_EndTransmit_IT>
    return;
 800854c:	e02a      	b.n	80085a4 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800854e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008552:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008556:	2b00      	cmp	r3, #0
 8008558:	d00b      	beq.n	8008572 <HAL_UART_IRQHandler+0x66e>
 800855a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800855e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008562:	2b00      	cmp	r3, #0
 8008564:	d005      	beq.n	8008572 <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008570:	e018      	b.n	80085a4 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008572:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008576:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800857a:	2b00      	cmp	r3, #0
 800857c:	d012      	beq.n	80085a4 <HAL_UART_IRQHandler+0x6a0>
 800857e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008582:	2b00      	cmp	r3, #0
 8008584:	da0e      	bge.n	80085a4 <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008590:	e008      	b.n	80085a4 <HAL_UART_IRQHandler+0x6a0>
      return;
 8008592:	bf00      	nop
 8008594:	e006      	b.n	80085a4 <HAL_UART_IRQHandler+0x6a0>
    return;
 8008596:	bf00      	nop
 8008598:	e004      	b.n	80085a4 <HAL_UART_IRQHandler+0x6a0>
      return;
 800859a:	bf00      	nop
 800859c:	e002      	b.n	80085a4 <HAL_UART_IRQHandler+0x6a0>
      return;
 800859e:	bf00      	nop
 80085a0:	e000      	b.n	80085a4 <HAL_UART_IRQHandler+0x6a0>
    return;
 80085a2:	bf00      	nop
  }
}
 80085a4:	37e8      	adds	r7, #232	@ 0xe8
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}
 80085aa:	bf00      	nop

080085ac <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80085ac:	b480      	push	{r7}
 80085ae:	b083      	sub	sp, #12
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80085b4:	bf00      	nop
 80085b6:	370c      	adds	r7, #12
 80085b8:	46bd      	mov	sp, r7
 80085ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085be:	4770      	bx	lr

080085c0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80085c0:	b480      	push	{r7}
 80085c2:	b083      	sub	sp, #12
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80085c8:	bf00      	nop
 80085ca:	370c      	adds	r7, #12
 80085cc:	46bd      	mov	sp, r7
 80085ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d2:	4770      	bx	lr

080085d4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80085d4:	b480      	push	{r7}
 80085d6:	b083      	sub	sp, #12
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80085dc:	bf00      	nop
 80085de:	370c      	adds	r7, #12
 80085e0:	46bd      	mov	sp, r7
 80085e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e6:	4770      	bx	lr

080085e8 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80085e8:	b480      	push	{r7}
 80085ea:	b083      	sub	sp, #12
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80085f0:	bf00      	nop
 80085f2:	370c      	adds	r7, #12
 80085f4:	46bd      	mov	sp, r7
 80085f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fa:	4770      	bx	lr

080085fc <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 80085fc:	b480      	push	{r7}
 80085fe:	b083      	sub	sp, #12
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8008604:	bf00      	nop
 8008606:	370c      	adds	r7, #12
 8008608:	46bd      	mov	sp, r7
 800860a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860e:	4770      	bx	lr

08008610 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8008610:	b480      	push	{r7}
 8008612:	b083      	sub	sp, #12
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8008618:	bf00      	nop
 800861a:	370c      	adds	r7, #12
 800861c:	46bd      	mov	sp, r7
 800861e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008622:	4770      	bx	lr

08008624 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008624:	b480      	push	{r7}
 8008626:	b083      	sub	sp, #12
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
 800862c:	460b      	mov	r3, r1
 800862e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008630:	bf00      	nop
 8008632:	370c      	adds	r7, #12
 8008634:	46bd      	mov	sp, r7
 8008636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863a:	4770      	bx	lr

0800863c <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800863c:	b480      	push	{r7}
 800863e:	b083      	sub	sp, #12
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	4a1a      	ldr	r2, [pc, #104]	@ (80086b0 <UART_InitCallbacksToDefault+0x74>)
 8008648:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	4a19      	ldr	r2, [pc, #100]	@ (80086b4 <UART_InitCallbacksToDefault+0x78>)
 8008650:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	4a18      	ldr	r2, [pc, #96]	@ (80086b8 <UART_InitCallbacksToDefault+0x7c>)
 8008658:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	4a17      	ldr	r2, [pc, #92]	@ (80086bc <UART_InitCallbacksToDefault+0x80>)
 8008660:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	4a16      	ldr	r2, [pc, #88]	@ (80086c0 <UART_InitCallbacksToDefault+0x84>)
 8008668:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	4a15      	ldr	r2, [pc, #84]	@ (80086c4 <UART_InitCallbacksToDefault+0x88>)
 8008670:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	4a14      	ldr	r2, [pc, #80]	@ (80086c8 <UART_InitCallbacksToDefault+0x8c>)
 8008678:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	4a13      	ldr	r2, [pc, #76]	@ (80086cc <UART_InitCallbacksToDefault+0x90>)
 8008680:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	4a12      	ldr	r2, [pc, #72]	@ (80086d0 <UART_InitCallbacksToDefault+0x94>)
 8008688:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	4a11      	ldr	r2, [pc, #68]	@ (80086d4 <UART_InitCallbacksToDefault+0x98>)
 8008690:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	4a10      	ldr	r2, [pc, #64]	@ (80086d8 <UART_InitCallbacksToDefault+0x9c>)
 8008698:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	4a0f      	ldr	r2, [pc, #60]	@ (80086dc <UART_InitCallbacksToDefault+0xa0>)
 80086a0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 80086a4:	bf00      	nop
 80086a6:	370c      	adds	r7, #12
 80086a8:	46bd      	mov	sp, r7
 80086aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ae:	4770      	bx	lr
 80086b0:	080085ad 	.word	0x080085ad
 80086b4:	08001dfd 	.word	0x08001dfd
 80086b8:	080085c1 	.word	0x080085c1
 80086bc:	08001dc1 	.word	0x08001dc1
 80086c0:	080085d5 	.word	0x080085d5
 80086c4:	080085e9 	.word	0x080085e9
 80086c8:	080085fd 	.word	0x080085fd
 80086cc:	08008611 	.word	0x08008611
 80086d0:	080091b5 	.word	0x080091b5
 80086d4:	080091c9 	.word	0x080091c9
 80086d8:	080091dd 	.word	0x080091dd
 80086dc:	08008625 	.word	0x08008625

080086e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80086e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80086e4:	b08c      	sub	sp, #48	@ 0x30
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80086ea:	2300      	movs	r3, #0
 80086ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80086f0:	697b      	ldr	r3, [r7, #20]
 80086f2:	689a      	ldr	r2, [r3, #8]
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	691b      	ldr	r3, [r3, #16]
 80086f8:	431a      	orrs	r2, r3
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	695b      	ldr	r3, [r3, #20]
 80086fe:	431a      	orrs	r2, r3
 8008700:	697b      	ldr	r3, [r7, #20]
 8008702:	69db      	ldr	r3, [r3, #28]
 8008704:	4313      	orrs	r3, r2
 8008706:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	681a      	ldr	r2, [r3, #0]
 800870e:	4baf      	ldr	r3, [pc, #700]	@ (80089cc <UART_SetConfig+0x2ec>)
 8008710:	4013      	ands	r3, r2
 8008712:	697a      	ldr	r2, [r7, #20]
 8008714:	6812      	ldr	r2, [r2, #0]
 8008716:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008718:	430b      	orrs	r3, r1
 800871a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800871c:	697b      	ldr	r3, [r7, #20]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	685b      	ldr	r3, [r3, #4]
 8008722:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	68da      	ldr	r2, [r3, #12]
 800872a:	697b      	ldr	r3, [r7, #20]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	430a      	orrs	r2, r1
 8008730:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008732:	697b      	ldr	r3, [r7, #20]
 8008734:	699b      	ldr	r3, [r3, #24]
 8008736:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008738:	697b      	ldr	r3, [r7, #20]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	4aa4      	ldr	r2, [pc, #656]	@ (80089d0 <UART_SetConfig+0x2f0>)
 800873e:	4293      	cmp	r3, r2
 8008740:	d004      	beq.n	800874c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008742:	697b      	ldr	r3, [r7, #20]
 8008744:	6a1b      	ldr	r3, [r3, #32]
 8008746:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008748:	4313      	orrs	r3, r2
 800874a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	689b      	ldr	r3, [r3, #8]
 8008752:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8008756:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800875a:	697a      	ldr	r2, [r7, #20]
 800875c:	6812      	ldr	r2, [r2, #0]
 800875e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008760:	430b      	orrs	r3, r1
 8008762:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008764:	697b      	ldr	r3, [r7, #20]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800876a:	f023 010f 	bic.w	r1, r3, #15
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	430a      	orrs	r2, r1
 8008778:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	4a95      	ldr	r2, [pc, #596]	@ (80089d4 <UART_SetConfig+0x2f4>)
 8008780:	4293      	cmp	r3, r2
 8008782:	d125      	bne.n	80087d0 <UART_SetConfig+0xf0>
 8008784:	2003      	movs	r0, #3
 8008786:	f7ff fabd 	bl	8007d04 <LL_RCC_GetUSARTClockSource>
 800878a:	4603      	mov	r3, r0
 800878c:	2b03      	cmp	r3, #3
 800878e:	d81b      	bhi.n	80087c8 <UART_SetConfig+0xe8>
 8008790:	a201      	add	r2, pc, #4	@ (adr r2, 8008798 <UART_SetConfig+0xb8>)
 8008792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008796:	bf00      	nop
 8008798:	080087a9 	.word	0x080087a9
 800879c:	080087b9 	.word	0x080087b9
 80087a0:	080087b1 	.word	0x080087b1
 80087a4:	080087c1 	.word	0x080087c1
 80087a8:	2301      	movs	r3, #1
 80087aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087ae:	e042      	b.n	8008836 <UART_SetConfig+0x156>
 80087b0:	2302      	movs	r3, #2
 80087b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087b6:	e03e      	b.n	8008836 <UART_SetConfig+0x156>
 80087b8:	2304      	movs	r3, #4
 80087ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087be:	e03a      	b.n	8008836 <UART_SetConfig+0x156>
 80087c0:	2308      	movs	r3, #8
 80087c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087c6:	e036      	b.n	8008836 <UART_SetConfig+0x156>
 80087c8:	2310      	movs	r3, #16
 80087ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087ce:	e032      	b.n	8008836 <UART_SetConfig+0x156>
 80087d0:	697b      	ldr	r3, [r7, #20]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	4a7e      	ldr	r2, [pc, #504]	@ (80089d0 <UART_SetConfig+0x2f0>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d12a      	bne.n	8008830 <UART_SetConfig+0x150>
 80087da:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 80087de:	f7ff faa1 	bl	8007d24 <LL_RCC_GetLPUARTClockSource>
 80087e2:	4603      	mov	r3, r0
 80087e4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80087e8:	d01a      	beq.n	8008820 <UART_SetConfig+0x140>
 80087ea:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80087ee:	d81b      	bhi.n	8008828 <UART_SetConfig+0x148>
 80087f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80087f4:	d00c      	beq.n	8008810 <UART_SetConfig+0x130>
 80087f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80087fa:	d815      	bhi.n	8008828 <UART_SetConfig+0x148>
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d003      	beq.n	8008808 <UART_SetConfig+0x128>
 8008800:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008804:	d008      	beq.n	8008818 <UART_SetConfig+0x138>
 8008806:	e00f      	b.n	8008828 <UART_SetConfig+0x148>
 8008808:	2300      	movs	r3, #0
 800880a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800880e:	e012      	b.n	8008836 <UART_SetConfig+0x156>
 8008810:	2302      	movs	r3, #2
 8008812:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008816:	e00e      	b.n	8008836 <UART_SetConfig+0x156>
 8008818:	2304      	movs	r3, #4
 800881a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800881e:	e00a      	b.n	8008836 <UART_SetConfig+0x156>
 8008820:	2308      	movs	r3, #8
 8008822:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008826:	e006      	b.n	8008836 <UART_SetConfig+0x156>
 8008828:	2310      	movs	r3, #16
 800882a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800882e:	e002      	b.n	8008836 <UART_SetConfig+0x156>
 8008830:	2310      	movs	r3, #16
 8008832:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008836:	697b      	ldr	r3, [r7, #20]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	4a65      	ldr	r2, [pc, #404]	@ (80089d0 <UART_SetConfig+0x2f0>)
 800883c:	4293      	cmp	r3, r2
 800883e:	f040 8097 	bne.w	8008970 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008842:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008846:	2b08      	cmp	r3, #8
 8008848:	d823      	bhi.n	8008892 <UART_SetConfig+0x1b2>
 800884a:	a201      	add	r2, pc, #4	@ (adr r2, 8008850 <UART_SetConfig+0x170>)
 800884c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008850:	08008875 	.word	0x08008875
 8008854:	08008893 	.word	0x08008893
 8008858:	0800887d 	.word	0x0800887d
 800885c:	08008893 	.word	0x08008893
 8008860:	08008883 	.word	0x08008883
 8008864:	08008893 	.word	0x08008893
 8008868:	08008893 	.word	0x08008893
 800886c:	08008893 	.word	0x08008893
 8008870:	0800888b 	.word	0x0800888b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008874:	f7fd fac8 	bl	8005e08 <HAL_RCC_GetPCLK1Freq>
 8008878:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800887a:	e010      	b.n	800889e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800887c:	4b56      	ldr	r3, [pc, #344]	@ (80089d8 <UART_SetConfig+0x2f8>)
 800887e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008880:	e00d      	b.n	800889e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008882:	f7fd fa41 	bl	8005d08 <HAL_RCC_GetSysClockFreq>
 8008886:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008888:	e009      	b.n	800889e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800888a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800888e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008890:	e005      	b.n	800889e <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8008892:	2300      	movs	r3, #0
 8008894:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008896:	2301      	movs	r3, #1
 8008898:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800889c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800889e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	f000 812b 	beq.w	8008afc <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80088a6:	697b      	ldr	r3, [r7, #20]
 80088a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088aa:	4a4c      	ldr	r2, [pc, #304]	@ (80089dc <UART_SetConfig+0x2fc>)
 80088ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80088b0:	461a      	mov	r2, r3
 80088b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80088b8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80088ba:	697b      	ldr	r3, [r7, #20]
 80088bc:	685a      	ldr	r2, [r3, #4]
 80088be:	4613      	mov	r3, r2
 80088c0:	005b      	lsls	r3, r3, #1
 80088c2:	4413      	add	r3, r2
 80088c4:	69ba      	ldr	r2, [r7, #24]
 80088c6:	429a      	cmp	r2, r3
 80088c8:	d305      	bcc.n	80088d6 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80088ca:	697b      	ldr	r3, [r7, #20]
 80088cc:	685b      	ldr	r3, [r3, #4]
 80088ce:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80088d0:	69ba      	ldr	r2, [r7, #24]
 80088d2:	429a      	cmp	r2, r3
 80088d4:	d903      	bls.n	80088de <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 80088d6:	2301      	movs	r3, #1
 80088d8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80088dc:	e10e      	b.n	8008afc <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80088de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088e0:	2200      	movs	r2, #0
 80088e2:	60bb      	str	r3, [r7, #8]
 80088e4:	60fa      	str	r2, [r7, #12]
 80088e6:	697b      	ldr	r3, [r7, #20]
 80088e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088ea:	4a3c      	ldr	r2, [pc, #240]	@ (80089dc <UART_SetConfig+0x2fc>)
 80088ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80088f0:	b29b      	uxth	r3, r3
 80088f2:	2200      	movs	r2, #0
 80088f4:	603b      	str	r3, [r7, #0]
 80088f6:	607a      	str	r2, [r7, #4]
 80088f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088fc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008900:	f7f7 ff7c 	bl	80007fc <__aeabi_uldivmod>
 8008904:	4602      	mov	r2, r0
 8008906:	460b      	mov	r3, r1
 8008908:	4610      	mov	r0, r2
 800890a:	4619      	mov	r1, r3
 800890c:	f04f 0200 	mov.w	r2, #0
 8008910:	f04f 0300 	mov.w	r3, #0
 8008914:	020b      	lsls	r3, r1, #8
 8008916:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800891a:	0202      	lsls	r2, r0, #8
 800891c:	6979      	ldr	r1, [r7, #20]
 800891e:	6849      	ldr	r1, [r1, #4]
 8008920:	0849      	lsrs	r1, r1, #1
 8008922:	2000      	movs	r0, #0
 8008924:	460c      	mov	r4, r1
 8008926:	4605      	mov	r5, r0
 8008928:	eb12 0804 	adds.w	r8, r2, r4
 800892c:	eb43 0905 	adc.w	r9, r3, r5
 8008930:	697b      	ldr	r3, [r7, #20]
 8008932:	685b      	ldr	r3, [r3, #4]
 8008934:	2200      	movs	r2, #0
 8008936:	469a      	mov	sl, r3
 8008938:	4693      	mov	fp, r2
 800893a:	4652      	mov	r2, sl
 800893c:	465b      	mov	r3, fp
 800893e:	4640      	mov	r0, r8
 8008940:	4649      	mov	r1, r9
 8008942:	f7f7 ff5b 	bl	80007fc <__aeabi_uldivmod>
 8008946:	4602      	mov	r2, r0
 8008948:	460b      	mov	r3, r1
 800894a:	4613      	mov	r3, r2
 800894c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800894e:	6a3b      	ldr	r3, [r7, #32]
 8008950:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008954:	d308      	bcc.n	8008968 <UART_SetConfig+0x288>
 8008956:	6a3b      	ldr	r3, [r7, #32]
 8008958:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800895c:	d204      	bcs.n	8008968 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 800895e:	697b      	ldr	r3, [r7, #20]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	6a3a      	ldr	r2, [r7, #32]
 8008964:	60da      	str	r2, [r3, #12]
 8008966:	e0c9      	b.n	8008afc <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8008968:	2301      	movs	r3, #1
 800896a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800896e:	e0c5      	b.n	8008afc <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008970:	697b      	ldr	r3, [r7, #20]
 8008972:	69db      	ldr	r3, [r3, #28]
 8008974:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008978:	d16d      	bne.n	8008a56 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800897a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800897e:	3b01      	subs	r3, #1
 8008980:	2b07      	cmp	r3, #7
 8008982:	d82d      	bhi.n	80089e0 <UART_SetConfig+0x300>
 8008984:	a201      	add	r2, pc, #4	@ (adr r2, 800898c <UART_SetConfig+0x2ac>)
 8008986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800898a:	bf00      	nop
 800898c:	080089ad 	.word	0x080089ad
 8008990:	080089b5 	.word	0x080089b5
 8008994:	080089e1 	.word	0x080089e1
 8008998:	080089bb 	.word	0x080089bb
 800899c:	080089e1 	.word	0x080089e1
 80089a0:	080089e1 	.word	0x080089e1
 80089a4:	080089e1 	.word	0x080089e1
 80089a8:	080089c3 	.word	0x080089c3
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80089ac:	f7fd fa42 	bl	8005e34 <HAL_RCC_GetPCLK2Freq>
 80089b0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80089b2:	e01b      	b.n	80089ec <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80089b4:	4b08      	ldr	r3, [pc, #32]	@ (80089d8 <UART_SetConfig+0x2f8>)
 80089b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80089b8:	e018      	b.n	80089ec <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80089ba:	f7fd f9a5 	bl	8005d08 <HAL_RCC_GetSysClockFreq>
 80089be:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80089c0:	e014      	b.n	80089ec <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80089c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80089c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80089c8:	e010      	b.n	80089ec <UART_SetConfig+0x30c>
 80089ca:	bf00      	nop
 80089cc:	cfff69f3 	.word	0xcfff69f3
 80089d0:	40008000 	.word	0x40008000
 80089d4:	40013800 	.word	0x40013800
 80089d8:	00f42400 	.word	0x00f42400
 80089dc:	08010914 	.word	0x08010914
      default:
        pclk = 0U;
 80089e0:	2300      	movs	r3, #0
 80089e2:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80089e4:	2301      	movs	r3, #1
 80089e6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80089ea:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80089ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	f000 8084 	beq.w	8008afc <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80089f4:	697b      	ldr	r3, [r7, #20]
 80089f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089f8:	4a4b      	ldr	r2, [pc, #300]	@ (8008b28 <UART_SetConfig+0x448>)
 80089fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80089fe:	461a      	mov	r2, r3
 8008a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a02:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a06:	005a      	lsls	r2, r3, #1
 8008a08:	697b      	ldr	r3, [r7, #20]
 8008a0a:	685b      	ldr	r3, [r3, #4]
 8008a0c:	085b      	lsrs	r3, r3, #1
 8008a0e:	441a      	add	r2, r3
 8008a10:	697b      	ldr	r3, [r7, #20]
 8008a12:	685b      	ldr	r3, [r3, #4]
 8008a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a18:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a1a:	6a3b      	ldr	r3, [r7, #32]
 8008a1c:	2b0f      	cmp	r3, #15
 8008a1e:	d916      	bls.n	8008a4e <UART_SetConfig+0x36e>
 8008a20:	6a3b      	ldr	r3, [r7, #32]
 8008a22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008a26:	d212      	bcs.n	8008a4e <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008a28:	6a3b      	ldr	r3, [r7, #32]
 8008a2a:	b29b      	uxth	r3, r3
 8008a2c:	f023 030f 	bic.w	r3, r3, #15
 8008a30:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008a32:	6a3b      	ldr	r3, [r7, #32]
 8008a34:	085b      	lsrs	r3, r3, #1
 8008a36:	b29b      	uxth	r3, r3
 8008a38:	f003 0307 	and.w	r3, r3, #7
 8008a3c:	b29a      	uxth	r2, r3
 8008a3e:	8bfb      	ldrh	r3, [r7, #30]
 8008a40:	4313      	orrs	r3, r2
 8008a42:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008a44:	697b      	ldr	r3, [r7, #20]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	8bfa      	ldrh	r2, [r7, #30]
 8008a4a:	60da      	str	r2, [r3, #12]
 8008a4c:	e056      	b.n	8008afc <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8008a4e:	2301      	movs	r3, #1
 8008a50:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008a54:	e052      	b.n	8008afc <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008a56:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008a5a:	3b01      	subs	r3, #1
 8008a5c:	2b07      	cmp	r3, #7
 8008a5e:	d822      	bhi.n	8008aa6 <UART_SetConfig+0x3c6>
 8008a60:	a201      	add	r2, pc, #4	@ (adr r2, 8008a68 <UART_SetConfig+0x388>)
 8008a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a66:	bf00      	nop
 8008a68:	08008a89 	.word	0x08008a89
 8008a6c:	08008a91 	.word	0x08008a91
 8008a70:	08008aa7 	.word	0x08008aa7
 8008a74:	08008a97 	.word	0x08008a97
 8008a78:	08008aa7 	.word	0x08008aa7
 8008a7c:	08008aa7 	.word	0x08008aa7
 8008a80:	08008aa7 	.word	0x08008aa7
 8008a84:	08008a9f 	.word	0x08008a9f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a88:	f7fd f9d4 	bl	8005e34 <HAL_RCC_GetPCLK2Freq>
 8008a8c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008a8e:	e010      	b.n	8008ab2 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a90:	4b26      	ldr	r3, [pc, #152]	@ (8008b2c <UART_SetConfig+0x44c>)
 8008a92:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008a94:	e00d      	b.n	8008ab2 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a96:	f7fd f937 	bl	8005d08 <HAL_RCC_GetSysClockFreq>
 8008a9a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008a9c:	e009      	b.n	8008ab2 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008aa2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008aa4:	e005      	b.n	8008ab2 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008aaa:	2301      	movs	r3, #1
 8008aac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008ab0:	bf00      	nop
    }

    if (pclk != 0U)
 8008ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d021      	beq.n	8008afc <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ab8:	697b      	ldr	r3, [r7, #20]
 8008aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008abc:	4a1a      	ldr	r2, [pc, #104]	@ (8008b28 <UART_SetConfig+0x448>)
 8008abe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ac2:	461a      	mov	r2, r3
 8008ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ac6:	fbb3 f2f2 	udiv	r2, r3, r2
 8008aca:	697b      	ldr	r3, [r7, #20]
 8008acc:	685b      	ldr	r3, [r3, #4]
 8008ace:	085b      	lsrs	r3, r3, #1
 8008ad0:	441a      	add	r2, r3
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	685b      	ldr	r3, [r3, #4]
 8008ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ada:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008adc:	6a3b      	ldr	r3, [r7, #32]
 8008ade:	2b0f      	cmp	r3, #15
 8008ae0:	d909      	bls.n	8008af6 <UART_SetConfig+0x416>
 8008ae2:	6a3b      	ldr	r3, [r7, #32]
 8008ae4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ae8:	d205      	bcs.n	8008af6 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008aea:	6a3b      	ldr	r3, [r7, #32]
 8008aec:	b29a      	uxth	r2, r3
 8008aee:	697b      	ldr	r3, [r7, #20]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	60da      	str	r2, [r3, #12]
 8008af4:	e002      	b.n	8008afc <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8008af6:	2301      	movs	r3, #1
 8008af8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008afc:	697b      	ldr	r3, [r7, #20]
 8008afe:	2201      	movs	r2, #1
 8008b00:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008b04:	697b      	ldr	r3, [r7, #20]
 8008b06:	2201      	movs	r2, #1
 8008b08:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008b0c:	697b      	ldr	r3, [r7, #20]
 8008b0e:	2200      	movs	r2, #0
 8008b10:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008b12:	697b      	ldr	r3, [r7, #20]
 8008b14:	2200      	movs	r2, #0
 8008b16:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008b18:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	3730      	adds	r7, #48	@ 0x30
 8008b20:	46bd      	mov	sp, r7
 8008b22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008b26:	bf00      	nop
 8008b28:	08010914 	.word	0x08010914
 8008b2c:	00f42400 	.word	0x00f42400

08008b30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008b30:	b480      	push	{r7}
 8008b32:	b083      	sub	sp, #12
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b3c:	f003 0308 	and.w	r3, r3, #8
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d00a      	beq.n	8008b5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	685b      	ldr	r3, [r3, #4]
 8008b4a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	430a      	orrs	r2, r1
 8008b58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b5e:	f003 0301 	and.w	r3, r3, #1
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d00a      	beq.n	8008b7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	685b      	ldr	r3, [r3, #4]
 8008b6c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	430a      	orrs	r2, r1
 8008b7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b80:	f003 0302 	and.w	r3, r3, #2
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d00a      	beq.n	8008b9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	685b      	ldr	r3, [r3, #4]
 8008b8e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	430a      	orrs	r2, r1
 8008b9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ba2:	f003 0304 	and.w	r3, r3, #4
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d00a      	beq.n	8008bc0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	685b      	ldr	r3, [r3, #4]
 8008bb0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	430a      	orrs	r2, r1
 8008bbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bc4:	f003 0310 	and.w	r3, r3, #16
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d00a      	beq.n	8008be2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	689b      	ldr	r3, [r3, #8]
 8008bd2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	430a      	orrs	r2, r1
 8008be0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008be6:	f003 0320 	and.w	r3, r3, #32
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d00a      	beq.n	8008c04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	689b      	ldr	r3, [r3, #8]
 8008bf4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	430a      	orrs	r2, r1
 8008c02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d01a      	beq.n	8008c46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	685b      	ldr	r3, [r3, #4]
 8008c16:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	430a      	orrs	r2, r1
 8008c24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008c2e:	d10a      	bne.n	8008c46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	685b      	ldr	r3, [r3, #4]
 8008c36:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	430a      	orrs	r2, r1
 8008c44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d00a      	beq.n	8008c68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	685b      	ldr	r3, [r3, #4]
 8008c58:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	430a      	orrs	r2, r1
 8008c66:	605a      	str	r2, [r3, #4]
  }
}
 8008c68:	bf00      	nop
 8008c6a:	370c      	adds	r7, #12
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c72:	4770      	bx	lr

08008c74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b098      	sub	sp, #96	@ 0x60
 8008c78:	af02      	add	r7, sp, #8
 8008c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2200      	movs	r2, #0
 8008c80:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008c84:	f7fa ffae 	bl	8003be4 <HAL_GetTick>
 8008c88:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f003 0308 	and.w	r3, r3, #8
 8008c94:	2b08      	cmp	r3, #8
 8008c96:	d12f      	bne.n	8008cf8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c98:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008c9c:	9300      	str	r3, [sp, #0]
 8008c9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f000 f88e 	bl	8008dc8 <UART_WaitOnFlagUntilTimeout>
 8008cac:	4603      	mov	r3, r0
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d022      	beq.n	8008cf8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cba:	e853 3f00 	ldrex	r3, [r3]
 8008cbe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008cc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cc2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008cc6:	653b      	str	r3, [r7, #80]	@ 0x50
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	461a      	mov	r2, r3
 8008cce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008cd0:	647b      	str	r3, [r7, #68]	@ 0x44
 8008cd2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cd4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008cd6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008cd8:	e841 2300 	strex	r3, r2, [r1]
 8008cdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008cde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d1e6      	bne.n	8008cb2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2220      	movs	r2, #32
 8008ce8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2200      	movs	r2, #0
 8008cf0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008cf4:	2303      	movs	r3, #3
 8008cf6:	e063      	b.n	8008dc0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f003 0304 	and.w	r3, r3, #4
 8008d02:	2b04      	cmp	r3, #4
 8008d04:	d149      	bne.n	8008d9a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d06:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008d0a:	9300      	str	r3, [sp, #0]
 8008d0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008d0e:	2200      	movs	r2, #0
 8008d10:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	f000 f857 	bl	8008dc8 <UART_WaitOnFlagUntilTimeout>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d03c      	beq.n	8008d9a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d28:	e853 3f00 	ldrex	r3, [r3]
 8008d2c:	623b      	str	r3, [r7, #32]
   return(result);
 8008d2e:	6a3b      	ldr	r3, [r7, #32]
 8008d30:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008d34:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	461a      	mov	r2, r3
 8008d3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d3e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008d40:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d42:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008d44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d46:	e841 2300 	strex	r3, r2, [r1]
 8008d4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008d4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d1e6      	bne.n	8008d20 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	3308      	adds	r3, #8
 8008d58:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d5a:	693b      	ldr	r3, [r7, #16]
 8008d5c:	e853 3f00 	ldrex	r3, [r3]
 8008d60:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	f023 0301 	bic.w	r3, r3, #1
 8008d68:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	3308      	adds	r3, #8
 8008d70:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008d72:	61fa      	str	r2, [r7, #28]
 8008d74:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d76:	69b9      	ldr	r1, [r7, #24]
 8008d78:	69fa      	ldr	r2, [r7, #28]
 8008d7a:	e841 2300 	strex	r3, r2, [r1]
 8008d7e:	617b      	str	r3, [r7, #20]
   return(result);
 8008d80:	697b      	ldr	r3, [r7, #20]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d1e5      	bne.n	8008d52 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2220      	movs	r2, #32
 8008d8a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2200      	movs	r2, #0
 8008d92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d96:	2303      	movs	r3, #3
 8008d98:	e012      	b.n	8008dc0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2220      	movs	r2, #32
 8008d9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2220      	movs	r2, #32
 8008da6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2200      	movs	r2, #0
 8008dae:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2200      	movs	r2, #0
 8008db4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2200      	movs	r2, #0
 8008dba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008dbe:	2300      	movs	r3, #0
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	3758      	adds	r7, #88	@ 0x58
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}

08008dc8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b084      	sub	sp, #16
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	60f8      	str	r0, [r7, #12]
 8008dd0:	60b9      	str	r1, [r7, #8]
 8008dd2:	603b      	str	r3, [r7, #0]
 8008dd4:	4613      	mov	r3, r2
 8008dd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008dd8:	e04f      	b.n	8008e7a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008dda:	69bb      	ldr	r3, [r7, #24]
 8008ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008de0:	d04b      	beq.n	8008e7a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008de2:	f7fa feff 	bl	8003be4 <HAL_GetTick>
 8008de6:	4602      	mov	r2, r0
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	1ad3      	subs	r3, r2, r3
 8008dec:	69ba      	ldr	r2, [r7, #24]
 8008dee:	429a      	cmp	r2, r3
 8008df0:	d302      	bcc.n	8008df8 <UART_WaitOnFlagUntilTimeout+0x30>
 8008df2:	69bb      	ldr	r3, [r7, #24]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d101      	bne.n	8008dfc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008df8:	2303      	movs	r3, #3
 8008dfa:	e04e      	b.n	8008e9a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f003 0304 	and.w	r3, r3, #4
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d037      	beq.n	8008e7a <UART_WaitOnFlagUntilTimeout+0xb2>
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	2b80      	cmp	r3, #128	@ 0x80
 8008e0e:	d034      	beq.n	8008e7a <UART_WaitOnFlagUntilTimeout+0xb2>
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	2b40      	cmp	r3, #64	@ 0x40
 8008e14:	d031      	beq.n	8008e7a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	69db      	ldr	r3, [r3, #28]
 8008e1c:	f003 0308 	and.w	r3, r3, #8
 8008e20:	2b08      	cmp	r3, #8
 8008e22:	d110      	bne.n	8008e46 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	2208      	movs	r2, #8
 8008e2a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008e2c:	68f8      	ldr	r0, [r7, #12]
 8008e2e:	f000 f879 	bl	8008f24 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	2208      	movs	r2, #8
 8008e36:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008e42:	2301      	movs	r3, #1
 8008e44:	e029      	b.n	8008e9a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	69db      	ldr	r3, [r3, #28]
 8008e4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008e50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008e54:	d111      	bne.n	8008e7a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008e5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008e60:	68f8      	ldr	r0, [r7, #12]
 8008e62:	f000 f85f 	bl	8008f24 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	2220      	movs	r2, #32
 8008e6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	2200      	movs	r2, #0
 8008e72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008e76:	2303      	movs	r3, #3
 8008e78:	e00f      	b.n	8008e9a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	69da      	ldr	r2, [r3, #28]
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	4013      	ands	r3, r2
 8008e84:	68ba      	ldr	r2, [r7, #8]
 8008e86:	429a      	cmp	r2, r3
 8008e88:	bf0c      	ite	eq
 8008e8a:	2301      	moveq	r3, #1
 8008e8c:	2300      	movne	r3, #0
 8008e8e:	b2db      	uxtb	r3, r3
 8008e90:	461a      	mov	r2, r3
 8008e92:	79fb      	ldrb	r3, [r7, #7]
 8008e94:	429a      	cmp	r2, r3
 8008e96:	d0a0      	beq.n	8008dda <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008e98:	2300      	movs	r3, #0
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	3710      	adds	r7, #16
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}

08008ea2 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008ea2:	b480      	push	{r7}
 8008ea4:	b08f      	sub	sp, #60	@ 0x3c
 8008ea6:	af00      	add	r7, sp, #0
 8008ea8:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eb0:	6a3b      	ldr	r3, [r7, #32]
 8008eb2:	e853 3f00 	ldrex	r3, [r3]
 8008eb6:	61fb      	str	r3, [r7, #28]
   return(result);
 8008eb8:	69fb      	ldr	r3, [r7, #28]
 8008eba:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008ebe:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	461a      	mov	r2, r3
 8008ec6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ec8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008eca:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ecc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008ece:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008ed0:	e841 2300 	strex	r3, r2, [r1]
 8008ed4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d1e6      	bne.n	8008eaa <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	3308      	adds	r3, #8
 8008ee2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	e853 3f00 	ldrex	r3, [r3]
 8008eea:	60bb      	str	r3, [r7, #8]
   return(result);
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8008ef2:	633b      	str	r3, [r7, #48]	@ 0x30
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	3308      	adds	r3, #8
 8008efa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008efc:	61ba      	str	r2, [r7, #24]
 8008efe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f00:	6979      	ldr	r1, [r7, #20]
 8008f02:	69ba      	ldr	r2, [r7, #24]
 8008f04:	e841 2300 	strex	r3, r2, [r1]
 8008f08:	613b      	str	r3, [r7, #16]
   return(result);
 8008f0a:	693b      	ldr	r3, [r7, #16]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d1e5      	bne.n	8008edc <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2220      	movs	r2, #32
 8008f14:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8008f18:	bf00      	nop
 8008f1a:	373c      	adds	r7, #60	@ 0x3c
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f22:	4770      	bx	lr

08008f24 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008f24:	b480      	push	{r7}
 8008f26:	b095      	sub	sp, #84	@ 0x54
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f34:	e853 3f00 	ldrex	r3, [r3]
 8008f38:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f3c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008f40:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	461a      	mov	r2, r3
 8008f48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f4a:	643b      	str	r3, [r7, #64]	@ 0x40
 8008f4c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f4e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008f50:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008f52:	e841 2300 	strex	r3, r2, [r1]
 8008f56:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008f58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d1e6      	bne.n	8008f2c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	3308      	adds	r3, #8
 8008f64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f66:	6a3b      	ldr	r3, [r7, #32]
 8008f68:	e853 3f00 	ldrex	r3, [r3]
 8008f6c:	61fb      	str	r3, [r7, #28]
   return(result);
 8008f6e:	69fb      	ldr	r3, [r7, #28]
 8008f70:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008f74:	f023 0301 	bic.w	r3, r3, #1
 8008f78:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	3308      	adds	r3, #8
 8008f80:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008f82:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008f84:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f86:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008f88:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008f8a:	e841 2300 	strex	r3, r2, [r1]
 8008f8e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d1e3      	bne.n	8008f5e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f9a:	2b01      	cmp	r3, #1
 8008f9c:	d118      	bne.n	8008fd0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	e853 3f00 	ldrex	r3, [r3]
 8008faa:	60bb      	str	r3, [r7, #8]
   return(result);
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	f023 0310 	bic.w	r3, r3, #16
 8008fb2:	647b      	str	r3, [r7, #68]	@ 0x44
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	461a      	mov	r2, r3
 8008fba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008fbc:	61bb      	str	r3, [r7, #24]
 8008fbe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fc0:	6979      	ldr	r1, [r7, #20]
 8008fc2:	69ba      	ldr	r2, [r7, #24]
 8008fc4:	e841 2300 	strex	r3, r2, [r1]
 8008fc8:	613b      	str	r3, [r7, #16]
   return(result);
 8008fca:	693b      	ldr	r3, [r7, #16]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d1e6      	bne.n	8008f9e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2220      	movs	r2, #32
 8008fd4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2200      	movs	r2, #0
 8008fdc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008fe4:	bf00      	nop
 8008fe6:	3754      	adds	r7, #84	@ 0x54
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fee:	4770      	bx	lr

08008ff0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b090      	sub	sp, #64	@ 0x40
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ffc:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	f003 0320 	and.w	r3, r3, #32
 8009008:	2b00      	cmp	r3, #0
 800900a:	d137      	bne.n	800907c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800900c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800900e:	2200      	movs	r2, #0
 8009010:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009014:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	3308      	adds	r3, #8
 800901a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800901c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800901e:	e853 3f00 	ldrex	r3, [r3]
 8009022:	623b      	str	r3, [r7, #32]
   return(result);
 8009024:	6a3b      	ldr	r3, [r7, #32]
 8009026:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800902a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800902c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	3308      	adds	r3, #8
 8009032:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009034:	633a      	str	r2, [r7, #48]	@ 0x30
 8009036:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009038:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800903a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800903c:	e841 2300 	strex	r3, r2, [r1]
 8009040:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009044:	2b00      	cmp	r3, #0
 8009046:	d1e5      	bne.n	8009014 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009048:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800904e:	693b      	ldr	r3, [r7, #16]
 8009050:	e853 3f00 	ldrex	r3, [r3]
 8009054:	60fb      	str	r3, [r7, #12]
   return(result);
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800905c:	637b      	str	r3, [r7, #52]	@ 0x34
 800905e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	461a      	mov	r2, r3
 8009064:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009066:	61fb      	str	r3, [r7, #28]
 8009068:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800906a:	69b9      	ldr	r1, [r7, #24]
 800906c:	69fa      	ldr	r2, [r7, #28]
 800906e:	e841 2300 	strex	r3, r2, [r1]
 8009072:	617b      	str	r3, [r7, #20]
   return(result);
 8009074:	697b      	ldr	r3, [r7, #20]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d1e6      	bne.n	8009048 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800907a:	e004      	b.n	8009086 <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 800907c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800907e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009082:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8009084:	4798      	blx	r3
}
 8009086:	bf00      	nop
 8009088:	3740      	adds	r7, #64	@ 0x40
 800908a:	46bd      	mov	sp, r7
 800908c:	bd80      	pop	{r7, pc}

0800908e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800908e:	b580      	push	{r7, lr}
 8009090:	b084      	sub	sp, #16
 8009092:	af00      	add	r7, sp, #0
 8009094:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800909a:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80090a2:	68f8      	ldr	r0, [r7, #12]
 80090a4:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80090a6:	bf00      	nop
 80090a8:	3710      	adds	r7, #16
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}

080090ae <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80090ae:	b580      	push	{r7, lr}
 80090b0:	b086      	sub	sp, #24
 80090b2:	af00      	add	r7, sp, #0
 80090b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090ba:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80090bc:	697b      	ldr	r3, [r7, #20]
 80090be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80090c2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80090c4:	697b      	ldr	r3, [r7, #20]
 80090c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80090ca:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80090cc:	697b      	ldr	r3, [r7, #20]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	689b      	ldr	r3, [r3, #8]
 80090d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80090d6:	2b80      	cmp	r3, #128	@ 0x80
 80090d8:	d109      	bne.n	80090ee <UART_DMAError+0x40>
 80090da:	693b      	ldr	r3, [r7, #16]
 80090dc:	2b21      	cmp	r3, #33	@ 0x21
 80090de:	d106      	bne.n	80090ee <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80090e0:	697b      	ldr	r3, [r7, #20]
 80090e2:	2200      	movs	r2, #0
 80090e4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 80090e8:	6978      	ldr	r0, [r7, #20]
 80090ea:	f7ff feda 	bl	8008ea2 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80090ee:	697b      	ldr	r3, [r7, #20]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	689b      	ldr	r3, [r3, #8]
 80090f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090f8:	2b40      	cmp	r3, #64	@ 0x40
 80090fa:	d109      	bne.n	8009110 <UART_DMAError+0x62>
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	2b22      	cmp	r3, #34	@ 0x22
 8009100:	d106      	bne.n	8009110 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009102:	697b      	ldr	r3, [r7, #20]
 8009104:	2200      	movs	r2, #0
 8009106:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800910a:	6978      	ldr	r0, [r7, #20]
 800910c:	f7ff ff0a 	bl	8008f24 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009110:	697b      	ldr	r3, [r7, #20]
 8009112:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009116:	f043 0210 	orr.w	r2, r3, #16
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8009120:	697b      	ldr	r3, [r7, #20]
 8009122:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009126:	6978      	ldr	r0, [r7, #20]
 8009128:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800912a:	bf00      	nop
 800912c:	3718      	adds	r7, #24
 800912e:	46bd      	mov	sp, r7
 8009130:	bd80      	pop	{r7, pc}

08009132 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009132:	b580      	push	{r7, lr}
 8009134:	b084      	sub	sp, #16
 8009136:	af00      	add	r7, sp, #0
 8009138:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800913e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	2200      	movs	r2, #0
 8009144:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800914e:	68f8      	ldr	r0, [r7, #12]
 8009150:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009152:	bf00      	nop
 8009154:	3710      	adds	r7, #16
 8009156:	46bd      	mov	sp, r7
 8009158:	bd80      	pop	{r7, pc}

0800915a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800915a:	b580      	push	{r7, lr}
 800915c:	b088      	sub	sp, #32
 800915e:	af00      	add	r7, sp, #0
 8009160:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	e853 3f00 	ldrex	r3, [r3]
 800916e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009176:	61fb      	str	r3, [r7, #28]
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	461a      	mov	r2, r3
 800917e:	69fb      	ldr	r3, [r7, #28]
 8009180:	61bb      	str	r3, [r7, #24]
 8009182:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009184:	6979      	ldr	r1, [r7, #20]
 8009186:	69ba      	ldr	r2, [r7, #24]
 8009188:	e841 2300 	strex	r3, r2, [r1]
 800918c:	613b      	str	r3, [r7, #16]
   return(result);
 800918e:	693b      	ldr	r3, [r7, #16]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d1e6      	bne.n	8009162 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2220      	movs	r2, #32
 8009198:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2200      	movs	r2, #0
 80091a0:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80091ac:	bf00      	nop
 80091ae:	3720      	adds	r7, #32
 80091b0:	46bd      	mov	sp, r7
 80091b2:	bd80      	pop	{r7, pc}

080091b4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80091b4:	b480      	push	{r7}
 80091b6:	b083      	sub	sp, #12
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80091bc:	bf00      	nop
 80091be:	370c      	adds	r7, #12
 80091c0:	46bd      	mov	sp, r7
 80091c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c6:	4770      	bx	lr

080091c8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80091c8:	b480      	push	{r7}
 80091ca:	b083      	sub	sp, #12
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80091d0:	bf00      	nop
 80091d2:	370c      	adds	r7, #12
 80091d4:	46bd      	mov	sp, r7
 80091d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091da:	4770      	bx	lr

080091dc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80091dc:	b480      	push	{r7}
 80091de:	b083      	sub	sp, #12
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80091e4:	bf00      	nop
 80091e6:	370c      	adds	r7, #12
 80091e8:	46bd      	mov	sp, r7
 80091ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ee:	4770      	bx	lr

080091f0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80091f0:	b480      	push	{r7}
 80091f2:	b085      	sub	sp, #20
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80091fe:	2b01      	cmp	r3, #1
 8009200:	d101      	bne.n	8009206 <HAL_UARTEx_DisableFifoMode+0x16>
 8009202:	2302      	movs	r3, #2
 8009204:	e027      	b.n	8009256 <HAL_UARTEx_DisableFifoMode+0x66>
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2201      	movs	r2, #1
 800920a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2224      	movs	r2, #36	@ 0x24
 8009212:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	681a      	ldr	r2, [r3, #0]
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f022 0201 	bic.w	r2, r2, #1
 800922c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009234:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2200      	movs	r2, #0
 800923a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	68fa      	ldr	r2, [r7, #12]
 8009242:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2220      	movs	r2, #32
 8009248:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2200      	movs	r2, #0
 8009250:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009254:	2300      	movs	r3, #0
}
 8009256:	4618      	mov	r0, r3
 8009258:	3714      	adds	r7, #20
 800925a:	46bd      	mov	sp, r7
 800925c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009260:	4770      	bx	lr

08009262 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009262:	b580      	push	{r7, lr}
 8009264:	b084      	sub	sp, #16
 8009266:	af00      	add	r7, sp, #0
 8009268:	6078      	str	r0, [r7, #4]
 800926a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009272:	2b01      	cmp	r3, #1
 8009274:	d101      	bne.n	800927a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009276:	2302      	movs	r3, #2
 8009278:	e02d      	b.n	80092d6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2201      	movs	r2, #1
 800927e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2224      	movs	r2, #36	@ 0x24
 8009286:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	681a      	ldr	r2, [r3, #0]
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	f022 0201 	bic.w	r2, r2, #1
 80092a0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	689b      	ldr	r3, [r3, #8]
 80092a8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	683a      	ldr	r2, [r7, #0]
 80092b2:	430a      	orrs	r2, r1
 80092b4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f000 f850 	bl	800935c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	68fa      	ldr	r2, [r7, #12]
 80092c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2220      	movs	r2, #32
 80092c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2200      	movs	r2, #0
 80092d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80092d4:	2300      	movs	r3, #0
}
 80092d6:	4618      	mov	r0, r3
 80092d8:	3710      	adds	r7, #16
 80092da:	46bd      	mov	sp, r7
 80092dc:	bd80      	pop	{r7, pc}

080092de <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80092de:	b580      	push	{r7, lr}
 80092e0:	b084      	sub	sp, #16
 80092e2:	af00      	add	r7, sp, #0
 80092e4:	6078      	str	r0, [r7, #4]
 80092e6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80092ee:	2b01      	cmp	r3, #1
 80092f0:	d101      	bne.n	80092f6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80092f2:	2302      	movs	r3, #2
 80092f4:	e02d      	b.n	8009352 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2201      	movs	r2, #1
 80092fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2224      	movs	r2, #36	@ 0x24
 8009302:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	681a      	ldr	r2, [r3, #0]
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f022 0201 	bic.w	r2, r2, #1
 800931c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	689b      	ldr	r3, [r3, #8]
 8009324:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	683a      	ldr	r2, [r7, #0]
 800932e:	430a      	orrs	r2, r1
 8009330:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	f000 f812 	bl	800935c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	68fa      	ldr	r2, [r7, #12]
 800933e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2220      	movs	r2, #32
 8009344:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2200      	movs	r2, #0
 800934c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009350:	2300      	movs	r3, #0
}
 8009352:	4618      	mov	r0, r3
 8009354:	3710      	adds	r7, #16
 8009356:	46bd      	mov	sp, r7
 8009358:	bd80      	pop	{r7, pc}
	...

0800935c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800935c:	b480      	push	{r7}
 800935e:	b085      	sub	sp, #20
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009368:	2b00      	cmp	r3, #0
 800936a:	d108      	bne.n	800937e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2201      	movs	r2, #1
 8009370:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2201      	movs	r2, #1
 8009378:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800937c:	e031      	b.n	80093e2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800937e:	2308      	movs	r3, #8
 8009380:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009382:	2308      	movs	r3, #8
 8009384:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	689b      	ldr	r3, [r3, #8]
 800938c:	0e5b      	lsrs	r3, r3, #25
 800938e:	b2db      	uxtb	r3, r3
 8009390:	f003 0307 	and.w	r3, r3, #7
 8009394:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	689b      	ldr	r3, [r3, #8]
 800939c:	0f5b      	lsrs	r3, r3, #29
 800939e:	b2db      	uxtb	r3, r3
 80093a0:	f003 0307 	and.w	r3, r3, #7
 80093a4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80093a6:	7bbb      	ldrb	r3, [r7, #14]
 80093a8:	7b3a      	ldrb	r2, [r7, #12]
 80093aa:	4911      	ldr	r1, [pc, #68]	@ (80093f0 <UARTEx_SetNbDataToProcess+0x94>)
 80093ac:	5c8a      	ldrb	r2, [r1, r2]
 80093ae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80093b2:	7b3a      	ldrb	r2, [r7, #12]
 80093b4:	490f      	ldr	r1, [pc, #60]	@ (80093f4 <UARTEx_SetNbDataToProcess+0x98>)
 80093b6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80093b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80093bc:	b29a      	uxth	r2, r3
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80093c4:	7bfb      	ldrb	r3, [r7, #15]
 80093c6:	7b7a      	ldrb	r2, [r7, #13]
 80093c8:	4909      	ldr	r1, [pc, #36]	@ (80093f0 <UARTEx_SetNbDataToProcess+0x94>)
 80093ca:	5c8a      	ldrb	r2, [r1, r2]
 80093cc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80093d0:	7b7a      	ldrb	r2, [r7, #13]
 80093d2:	4908      	ldr	r1, [pc, #32]	@ (80093f4 <UARTEx_SetNbDataToProcess+0x98>)
 80093d4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80093d6:	fb93 f3f2 	sdiv	r3, r3, r2
 80093da:	b29a      	uxth	r2, r3
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80093e2:	bf00      	nop
 80093e4:	3714      	adds	r7, #20
 80093e6:	46bd      	mov	sp, r7
 80093e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ec:	4770      	bx	lr
 80093ee:	bf00      	nop
 80093f0:	0801092c 	.word	0x0801092c
 80093f4:	08010934 	.word	0x08010934

080093f8 <ParseDMXData>:
 * @brief Parses incoming DMX data and executes corresponding commands.
 * @param data Pointer to the incoming data buffer.
 * @param length Length of the data buffer.
 * @return ParseResult Result of the parsing operation.
 */
ParseResult ParseDMXData(const uint8_t* data, uint8_t length) {
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b08a      	sub	sp, #40	@ 0x28
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
 8009400:	460b      	mov	r3, r1
 8009402:	70fb      	strb	r3, [r7, #3]
    if (length < 1 || data == NULL) {
 8009404:	78fb      	ldrb	r3, [r7, #3]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d002      	beq.n	8009410 <ParseDMXData+0x18>
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d101      	bne.n	8009414 <ParseDMXData+0x1c>
        return PARSE_ERROR;  // Invalid input
 8009410:	2301      	movs	r3, #1
 8009412:	e13e      	b.n	8009692 <ParseDMXData+0x29a>
    }

    uint8_t cmdType = data[0];
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	781b      	ldrb	r3, [r3, #0]
 8009418:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    switch (cmdType) {
 800941c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009420:	2b10      	cmp	r3, #16
 8009422:	dc2b      	bgt.n	800947c <ParseDMXData+0x84>
 8009424:	2b00      	cmp	r3, #0
 8009426:	f2c0 8131 	blt.w	800968c <ParseDMXData+0x294>
 800942a:	2b10      	cmp	r3, #16
 800942c:	f200 812e 	bhi.w	800968c <ParseDMXData+0x294>
 8009430:	a201      	add	r2, pc, #4	@ (adr r2, 8009438 <ParseDMXData+0x40>)
 8009432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009436:	bf00      	nop
 8009438:	08009485 	.word	0x08009485
 800943c:	080094c7 	.word	0x080094c7
 8009440:	08009567 	.word	0x08009567
 8009444:	0800968d 	.word	0x0800968d
 8009448:	0800968d 	.word	0x0800968d
 800944c:	0800968d 	.word	0x0800968d
 8009450:	0800968d 	.word	0x0800968d
 8009454:	0800968d 	.word	0x0800968d
 8009458:	0800968d 	.word	0x0800968d
 800945c:	0800968d 	.word	0x0800968d
 8009460:	0800968d 	.word	0x0800968d
 8009464:	0800968d 	.word	0x0800968d
 8009468:	0800968d 	.word	0x0800968d
 800946c:	0800968d 	.word	0x0800968d
 8009470:	0800968d 	.word	0x0800968d
 8009474:	0800968d 	.word	0x0800968d
 8009478:	080095fb 	.word	0x080095fb
 800947c:	2bff      	cmp	r3, #255	@ 0xff
 800947e:	f000 8102 	beq.w	8009686 <ParseDMXData+0x28e>
 8009482:	e103      	b.n	800968c <ParseDMXData+0x294>
        case CMD_CONTROL:
            {
                if (length < 2) {
 8009484:	78fb      	ldrb	r3, [r7, #3]
 8009486:	2b01      	cmp	r3, #1
 8009488:	d801      	bhi.n	800948e <ParseDMXData+0x96>
                    return PARSE_BUFFER_OVERFLOW;  // Not enough data for CMD_CONTROL
 800948a:	2303      	movs	r3, #3
 800948c:	e101      	b.n	8009692 <ParseDMXData+0x29a>
                }

                if (data[1] == 0) {
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	3301      	adds	r3, #1
 8009492:	781b      	ldrb	r3, [r3, #0]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d107      	bne.n	80094a8 <ParseDMXData+0xb0>
                    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8009498:	2200      	movs	r2, #0
 800949a:	2101      	movs	r1, #1
 800949c:	487f      	ldr	r0, [pc, #508]	@ (800969c <ParseDMXData+0x2a4>)
 800949e:	f7fb faf7 	bl	8004a90 <HAL_GPIO_WritePin>
                    DMX512_StopTask();
 80094a2:	f7f9 ff87 	bl	80033b4 <DMX512_StopTask>
                    DMX512_StartTask();
                } else {
                    return PARSE_INVALID_COMMAND;  // Invalid control value
                }
            }
            break;
 80094a6:	e0f3      	b.n	8009690 <ParseDMXData+0x298>
                } else if (data[1] == 1) {
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	3301      	adds	r3, #1
 80094ac:	781b      	ldrb	r3, [r3, #0]
 80094ae:	2b01      	cmp	r3, #1
 80094b0:	d107      	bne.n	80094c2 <ParseDMXData+0xca>
                    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80094b2:	2201      	movs	r2, #1
 80094b4:	2101      	movs	r1, #1
 80094b6:	4879      	ldr	r0, [pc, #484]	@ (800969c <ParseDMXData+0x2a4>)
 80094b8:	f7fb faea 	bl	8004a90 <HAL_GPIO_WritePin>
                    DMX512_StartTask();
 80094bc:	f7f9 ff6e 	bl	800339c <DMX512_StartTask>
            break;
 80094c0:	e0e6      	b.n	8009690 <ParseDMXData+0x298>
                    return PARSE_INVALID_COMMAND;  // Invalid control value
 80094c2:	2302      	movs	r3, #2
 80094c4:	e0e5      	b.n	8009692 <ParseDMXData+0x29a>

        case CMD_SET_MULTIPLE_VALUES:
            {
                if (length < 2) {
 80094c6:	78fb      	ldrb	r3, [r7, #3]
 80094c8:	2b01      	cmp	r3, #1
 80094ca:	d801      	bhi.n	80094d0 <ParseDMXData+0xd8>
                    return PARSE_BUFFER_OVERFLOW;  // Not enough data for CMD_SET_MULTIPLE_VALUES
 80094cc:	2303      	movs	r3, #3
 80094ce:	e0e0      	b.n	8009692 <ParseDMXData+0x29a>
                }

                uint8_t channelCount = data[1];
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	3301      	adds	r3, #1
 80094d4:	781b      	ldrb	r3, [r3, #0]
 80094d6:	74fb      	strb	r3, [r7, #19]
                if (length < 2 + (channelCount * 3)) {
 80094d8:	7cfa      	ldrb	r2, [r7, #19]
 80094da:	4613      	mov	r3, r2
 80094dc:	005b      	lsls	r3, r3, #1
 80094de:	4413      	add	r3, r2
 80094e0:	1c5a      	adds	r2, r3, #1
 80094e2:	78fb      	ldrb	r3, [r7, #3]
 80094e4:	429a      	cmp	r2, r3
 80094e6:	db01      	blt.n	80094ec <ParseDMXData+0xf4>
                    return PARSE_BUFFER_OVERFLOW;  // Not enough data for all channels
 80094e8:	2303      	movs	r3, #3
 80094ea:	e0d2      	b.n	8009692 <ParseDMXData+0x29a>
                }

                for (uint8_t i = 0; i < channelCount; i++) {
 80094ec:	2300      	movs	r3, #0
 80094ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80094f2:	e032      	b.n	800955a <ParseDMXData+0x162>
                    uint8_t offset = 2 + i * 3;
 80094f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80094f8:	461a      	mov	r2, r3
 80094fa:	0052      	lsls	r2, r2, #1
 80094fc:	4413      	add	r3, r2
 80094fe:	b2db      	uxtb	r3, r3
 8009500:	3302      	adds	r3, #2
 8009502:	74bb      	strb	r3, [r7, #18]
                    uint8_t value = data[offset];
 8009504:	7cbb      	ldrb	r3, [r7, #18]
 8009506:	687a      	ldr	r2, [r7, #4]
 8009508:	4413      	add	r3, r2
 800950a:	781b      	ldrb	r3, [r3, #0]
 800950c:	747b      	strb	r3, [r7, #17]
                    uint16_t channel = (data[offset + 1] << 8) | data[offset + 2];
 800950e:	7cbb      	ldrb	r3, [r7, #18]
 8009510:	3301      	adds	r3, #1
 8009512:	687a      	ldr	r2, [r7, #4]
 8009514:	4413      	add	r3, r2
 8009516:	781b      	ldrb	r3, [r3, #0]
 8009518:	b21b      	sxth	r3, r3
 800951a:	021b      	lsls	r3, r3, #8
 800951c:	b21a      	sxth	r2, r3
 800951e:	7cbb      	ldrb	r3, [r7, #18]
 8009520:	3302      	adds	r3, #2
 8009522:	6879      	ldr	r1, [r7, #4]
 8009524:	440b      	add	r3, r1
 8009526:	781b      	ldrb	r3, [r3, #0]
 8009528:	b21b      	sxth	r3, r3
 800952a:	4313      	orrs	r3, r2
 800952c:	b21b      	sxth	r3, r3
 800952e:	81fb      	strh	r3, [r7, #14]

                    if (channel >= 1 && channel <= 512) {
 8009530:	89fb      	ldrh	r3, [r7, #14]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d00f      	beq.n	8009556 <ParseDMXData+0x15e>
 8009536:	89fb      	ldrh	r3, [r7, #14]
 8009538:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800953c:	d80b      	bhi.n	8009556 <ParseDMXData+0x15e>
                        DMX512_SetChannel(channel, value);
 800953e:	7c7a      	ldrb	r2, [r7, #17]
 8009540:	89fb      	ldrh	r3, [r7, #14]
 8009542:	4611      	mov	r1, r2
 8009544:	4618      	mov	r0, r3
 8009546:	f7f9 fe67 	bl	8003218 <DMX512_SetChannel>
                for (uint8_t i = 0; i < channelCount; i++) {
 800954a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800954e:	3301      	adds	r3, #1
 8009550:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009554:	e001      	b.n	800955a <ParseDMXData+0x162>
                    } else {
                        return PARSE_INVALID_CHANNEL;  // Invalid channel number
 8009556:	2304      	movs	r3, #4
 8009558:	e09b      	b.n	8009692 <ParseDMXData+0x29a>
                for (uint8_t i = 0; i < channelCount; i++) {
 800955a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800955e:	7cfb      	ldrb	r3, [r7, #19]
 8009560:	429a      	cmp	r2, r3
 8009562:	d3c7      	bcc.n	80094f4 <ParseDMXData+0xfc>
                    }
                }
            }
            break;
 8009564:	e094      	b.n	8009690 <ParseDMXData+0x298>

        case CMD_SET_CHANNELS:
            {
                if (length < 2) {
 8009566:	78fb      	ldrb	r3, [r7, #3]
 8009568:	2b01      	cmp	r3, #1
 800956a:	d801      	bhi.n	8009570 <ParseDMXData+0x178>
                    return PARSE_BUFFER_OVERFLOW;  // Not enough data for CMD_SET_CHANNELS
 800956c:	2303      	movs	r3, #3
 800956e:	e090      	b.n	8009692 <ParseDMXData+0x29a>
                }

                uint8_t channelCount = data[1];
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	3301      	adds	r3, #1
 8009574:	781b      	ldrb	r3, [r3, #0]
 8009576:	75fb      	strb	r3, [r7, #23]
                uint8_t value = data[2];
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	3302      	adds	r3, #2
 800957c:	781b      	ldrb	r3, [r3, #0]
 800957e:	75bb      	strb	r3, [r7, #22]

                if (length < 2 + (channelCount * 2)) {
 8009580:	78fa      	ldrb	r2, [r7, #3]
 8009582:	7dfb      	ldrb	r3, [r7, #23]
 8009584:	3301      	adds	r3, #1
 8009586:	005b      	lsls	r3, r3, #1
 8009588:	429a      	cmp	r2, r3
 800958a:	da01      	bge.n	8009590 <ParseDMXData+0x198>
                    return PARSE_BUFFER_OVERFLOW;  // Not enough data for all channels
 800958c:	2303      	movs	r3, #3
 800958e:	e080      	b.n	8009692 <ParseDMXData+0x29a>
                }

                for (uint8_t i = 0; i < channelCount; i++) {
 8009590:	2300      	movs	r3, #0
 8009592:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8009596:	e02a      	b.n	80095ee <ParseDMXData+0x1f6>
                    uint16_t channel = (data[3 + (i * 2)] << 8) | data[3 + (i * 2) + 1];
 8009598:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800959c:	005b      	lsls	r3, r3, #1
 800959e:	3303      	adds	r3, #3
 80095a0:	461a      	mov	r2, r3
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	4413      	add	r3, r2
 80095a6:	781b      	ldrb	r3, [r3, #0]
 80095a8:	b21b      	sxth	r3, r3
 80095aa:	021b      	lsls	r3, r3, #8
 80095ac:	b21a      	sxth	r2, r3
 80095ae:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80095b2:	005b      	lsls	r3, r3, #1
 80095b4:	3304      	adds	r3, #4
 80095b6:	6879      	ldr	r1, [r7, #4]
 80095b8:	440b      	add	r3, r1
 80095ba:	781b      	ldrb	r3, [r3, #0]
 80095bc:	b21b      	sxth	r3, r3
 80095be:	4313      	orrs	r3, r2
 80095c0:	b21b      	sxth	r3, r3
 80095c2:	82bb      	strh	r3, [r7, #20]

                    if (channel >= 1 && channel <= 512) {
 80095c4:	8abb      	ldrh	r3, [r7, #20]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d00f      	beq.n	80095ea <ParseDMXData+0x1f2>
 80095ca:	8abb      	ldrh	r3, [r7, #20]
 80095cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80095d0:	d80b      	bhi.n	80095ea <ParseDMXData+0x1f2>
                        DMX512_SetChannel(channel, value);
 80095d2:	7dba      	ldrb	r2, [r7, #22]
 80095d4:	8abb      	ldrh	r3, [r7, #20]
 80095d6:	4611      	mov	r1, r2
 80095d8:	4618      	mov	r0, r3
 80095da:	f7f9 fe1d 	bl	8003218 <DMX512_SetChannel>
                for (uint8_t i = 0; i < channelCount; i++) {
 80095de:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80095e2:	3301      	adds	r3, #1
 80095e4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80095e8:	e001      	b.n	80095ee <ParseDMXData+0x1f6>
                    } else {
                        return PARSE_INVALID_CHANNEL;  // Invalid channel number
 80095ea:	2304      	movs	r3, #4
 80095ec:	e051      	b.n	8009692 <ParseDMXData+0x29a>
                for (uint8_t i = 0; i < channelCount; i++) {
 80095ee:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80095f2:	7dfb      	ldrb	r3, [r7, #23]
 80095f4:	429a      	cmp	r2, r3
 80095f6:	d3cf      	bcc.n	8009598 <ParseDMXData+0x1a0>
                    }
                }
            }
            break;
 80095f8:	e04a      	b.n	8009690 <ParseDMXData+0x298>

        case CMD_SYNC:
            {
                uint8_t* dmx_buf = (uint8_t*)DMX512_GetBuffer();
 80095fa:	f7f9 fef3 	bl	80033e4 <DMX512_GetBuffer>
 80095fe:	61f8      	str	r0, [r7, #28]
                if (length < 2) {
 8009600:	78fb      	ldrb	r3, [r7, #3]
 8009602:	2b01      	cmp	r3, #1
 8009604:	d801      	bhi.n	800960a <ParseDMXData+0x212>
                    return PARSE_BUFFER_OVERFLOW;  // Not enough data for CMD_SYNC
 8009606:	2303      	movs	r3, #3
 8009608:	e043      	b.n	8009692 <ParseDMXData+0x29a>
                }

                uint8_t packet_num = data[1];
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	3301      	adds	r3, #1
 800960e:	781b      	ldrb	r3, [r3, #0]
 8009610:	76fb      	strb	r3, [r7, #27]
                uint16_t start_channel = packet_num * 30 + 1;
 8009612:	7efb      	ldrb	r3, [r7, #27]
 8009614:	b29b      	uxth	r3, r3
 8009616:	461a      	mov	r2, r3
 8009618:	0112      	lsls	r2, r2, #4
 800961a:	1ad3      	subs	r3, r2, r3
 800961c:	005b      	lsls	r3, r3, #1
 800961e:	b29b      	uxth	r3, r3
 8009620:	3301      	adds	r3, #1
 8009622:	833b      	strh	r3, [r7, #24]

                uint8_t values_in_packet = length - 2;
 8009624:	78fb      	ldrb	r3, [r7, #3]
 8009626:	3b02      	subs	r3, #2
 8009628:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
                if (start_channel + values_in_packet - 1 > 512) {
 800962c:	8b3a      	ldrh	r2, [r7, #24]
 800962e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009632:	4413      	add	r3, r2
 8009634:	f240 2201 	movw	r2, #513	@ 0x201
 8009638:	4293      	cmp	r3, r2
 800963a:	dd05      	ble.n	8009648 <ParseDMXData+0x250>
                    values_in_packet = 512 - start_channel + 1;
 800963c:	8b3b      	ldrh	r3, [r7, #24]
 800963e:	b2db      	uxtb	r3, r3
 8009640:	f1c3 0301 	rsb	r3, r3, #1
 8009644:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
                }

                for (uint8_t i = 0; i < values_in_packet; i++) {
 8009648:	2300      	movs	r3, #0
 800964a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 800964e:	e013      	b.n	8009678 <ParseDMXData+0x280>
                    dmx_buf[start_channel + i] = data[2 + i];
 8009650:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009654:	3302      	adds	r3, #2
 8009656:	461a      	mov	r2, r3
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	441a      	add	r2, r3
 800965c:	8b39      	ldrh	r1, [r7, #24]
 800965e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009662:	440b      	add	r3, r1
 8009664:	4619      	mov	r1, r3
 8009666:	69fb      	ldr	r3, [r7, #28]
 8009668:	440b      	add	r3, r1
 800966a:	7812      	ldrb	r2, [r2, #0]
 800966c:	701a      	strb	r2, [r3, #0]
                for (uint8_t i = 0; i < values_in_packet; i++) {
 800966e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009672:	3301      	adds	r3, #1
 8009674:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8009678:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800967c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009680:	429a      	cmp	r2, r3
 8009682:	d3e5      	bcc.n	8009650 <ParseDMXData+0x258>
                }
            }
            break;
 8009684:	e004      	b.n	8009690 <ParseDMXData+0x298>

        case CMD_RESET:
            {
                DMX512_ResetBuffer();
 8009686:	f7f9 fea1 	bl	80033cc <DMX512_ResetBuffer>
            }
            break;
 800968a:	e001      	b.n	8009690 <ParseDMXData+0x298>

        default:
            return PARSE_INVALID_COMMAND;  // Unknown command
 800968c:	2302      	movs	r3, #2
 800968e:	e000      	b.n	8009692 <ParseDMXData+0x29a>
    }

    return PARSE_SUCCESS;  // Parsing completed successfully
 8009690:	2300      	movs	r3, #0
}
 8009692:	4618      	mov	r0, r3
 8009694:	3728      	adds	r7, #40	@ 0x28
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}
 800969a:	bf00      	nop
 800969c:	48000400 	.word	0x48000400

080096a0 <SendBLEDataViaNRF24>:
 * @param txAddr Pointer to the 5-byte TX address (e.g., "DMX01").
 * @param data Pointer to the data buffer to send.
 * @param len Length of the data buffer.
 * @return NR24Res_TypeDef Result of the transmission operation.
 */
NR24Res_TypeDef SendBLEDataViaNRF24(uint8_t *txAddr, uint8_t *data, uint8_t len) {
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b092      	sub	sp, #72	@ 0x48
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	60f8      	str	r0, [r7, #12]
 80096a8:	60b9      	str	r1, [r7, #8]
 80096aa:	4613      	mov	r3, r2
 80096ac:	71fb      	strb	r3, [r7, #7]
    if (len <= NRF24_PACKET_SIZE) {
 80096ae:	79fb      	ldrb	r3, [r7, #7]
 80096b0:	2b20      	cmp	r3, #32
 80096b2:	d80b      	bhi.n	80096cc <SendBLEDataViaNRF24+0x2c>
        // Single-packet transmission
        NR24Res_TypeDef result = NRF24_SendData(txAddr, data, len);
 80096b4:	79fb      	ldrb	r3, [r7, #7]
 80096b6:	461a      	mov	r2, r3
 80096b8:	68b9      	ldr	r1, [r7, #8]
 80096ba:	68f8      	ldr	r0, [r7, #12]
 80096bc:	f7f9 ffe4 	bl	8003688 <NRF24_SendData>
 80096c0:	4603      	mov	r3, r0
 80096c2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        return result;
 80096c6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80096ca:	e129      	b.n	8009920 <SendBLEDataViaNRF24+0x280>
    } else {
        // Multi-packet transmission for large data
        uint8_t cmdType = data[0];
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	781b      	ldrb	r3, [r3, #0]
 80096d0:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

        switch (cmdType) {
 80096d4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80096d8:	2b01      	cmp	r3, #1
 80096da:	d003      	beq.n	80096e4 <SendBLEDataViaNRF24+0x44>
 80096dc:	2b02      	cmp	r3, #2
 80096de:	f000 808f 	beq.w	8009800 <SendBLEDataViaNRF24+0x160>
 80096e2:	e11c      	b.n	800991e <SendBLEDataViaNRF24+0x27e>
            case CMD_SET_MULTIPLE_VALUES:
                {
                    // Validate command structure
                    if (len < 2) return NRF24_ERROR;
 80096e4:	79fb      	ldrb	r3, [r7, #7]
 80096e6:	2b01      	cmp	r3, #1
 80096e8:	d801      	bhi.n	80096ee <SendBLEDataViaNRF24+0x4e>
 80096ea:	2302      	movs	r3, #2
 80096ec:	e118      	b.n	8009920 <SendBLEDataViaNRF24+0x280>
                    uint8_t channelCount = data[1];
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	785b      	ldrb	r3, [r3, #1]
 80096f2:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
                    if (len < 2 + (channelCount * 3)) return NRF24_ERROR;
 80096f6:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 80096fa:	4613      	mov	r3, r2
 80096fc:	005b      	lsls	r3, r3, #1
 80096fe:	4413      	add	r3, r2
 8009700:	1c5a      	adds	r2, r3, #1
 8009702:	79fb      	ldrb	r3, [r7, #7]
 8009704:	429a      	cmp	r2, r3
 8009706:	db01      	blt.n	800970c <SendBLEDataViaNRF24+0x6c>
 8009708:	2302      	movs	r3, #2
 800970a:	e109      	b.n	8009920 <SendBLEDataViaNRF24+0x280>

                    // Split into 10-channel packets
                    uint8_t packets = (channelCount + 9) / 10;
 800970c:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8009710:	3309      	adds	r3, #9
 8009712:	4a85      	ldr	r2, [pc, #532]	@ (8009928 <SendBLEDataViaNRF24+0x288>)
 8009714:	fb82 1203 	smull	r1, r2, r2, r3
 8009718:	1092      	asrs	r2, r2, #2
 800971a:	17db      	asrs	r3, r3, #31
 800971c:	1ad3      	subs	r3, r2, r3
 800971e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
                    uint8_t nrfPacket[NRF24_PACKET_SIZE];

                    for (uint8_t packet = 0; packet < packets; packet++) {
 8009722:	2300      	movs	r3, #0
 8009724:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8009728:	e062      	b.n	80097f0 <SendBLEDataViaNRF24+0x150>
                        uint8_t channelsInPacket = 10;
 800972a:	230a      	movs	r3, #10
 800972c:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
                        if (packet == packets - 1 && channelCount % 10 != 0) {
 8009730:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8009734:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8009738:	3b01      	subs	r3, #1
 800973a:	429a      	cmp	r2, r3
 800973c:	d11a      	bne.n	8009774 <SendBLEDataViaNRF24+0xd4>
 800973e:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8009742:	4b7a      	ldr	r3, [pc, #488]	@ (800992c <SendBLEDataViaNRF24+0x28c>)
 8009744:	fba3 1302 	umull	r1, r3, r3, r2
 8009748:	08d9      	lsrs	r1, r3, #3
 800974a:	460b      	mov	r3, r1
 800974c:	009b      	lsls	r3, r3, #2
 800974e:	440b      	add	r3, r1
 8009750:	005b      	lsls	r3, r3, #1
 8009752:	1ad3      	subs	r3, r2, r3
 8009754:	b2db      	uxtb	r3, r3
 8009756:	2b00      	cmp	r3, #0
 8009758:	d00c      	beq.n	8009774 <SendBLEDataViaNRF24+0xd4>
                            channelsInPacket = channelCount % 10;
 800975a:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800975e:	4b73      	ldr	r3, [pc, #460]	@ (800992c <SendBLEDataViaNRF24+0x28c>)
 8009760:	fba3 1302 	umull	r1, r3, r3, r2
 8009764:	08d9      	lsrs	r1, r3, #3
 8009766:	460b      	mov	r3, r1
 8009768:	009b      	lsls	r3, r3, #2
 800976a:	440b      	add	r3, r1
 800976c:	005b      	lsls	r3, r3, #1
 800976e:	1ad3      	subs	r3, r2, r3
 8009770:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
                        }

                        // Build packet
                        nrfPacket[0] = CMD_SET_MULTIPLE_VALUES;
 8009774:	2301      	movs	r3, #1
 8009776:	743b      	strb	r3, [r7, #16]
                        nrfPacket[1] = channelsInPacket;
 8009778:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800977c:	747b      	strb	r3, [r7, #17]
                        uint16_t startOffset = 2 + (packet * 30);
 800977e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009782:	b29b      	uxth	r3, r3
 8009784:	461a      	mov	r2, r3
 8009786:	0112      	lsls	r2, r2, #4
 8009788:	1ad3      	subs	r3, r2, r3
 800978a:	005b      	lsls	r3, r3, #1
 800978c:	b29b      	uxth	r3, r3
 800978e:	3302      	adds	r3, #2
 8009790:	86fb      	strh	r3, [r7, #54]	@ 0x36
                        memcpy(&nrfPacket[2], &data[startOffset], channelsInPacket * 3);
 8009792:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009794:	68ba      	ldr	r2, [r7, #8]
 8009796:	18d1      	adds	r1, r2, r3
 8009798:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 800979c:	4613      	mov	r3, r2
 800979e:	005b      	lsls	r3, r3, #1
 80097a0:	4413      	add	r3, r2
 80097a2:	461a      	mov	r2, r3
 80097a4:	f107 0310 	add.w	r3, r7, #16
 80097a8:	3302      	adds	r3, #2
 80097aa:	4618      	mov	r0, r3
 80097ac:	f004 ffc1 	bl	800e732 <memcpy>

                        // Send packet
                        uint8_t payloadLength = 2 + (channelsInPacket * 3);
 80097b0:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80097b4:	461a      	mov	r2, r3
 80097b6:	0052      	lsls	r2, r2, #1
 80097b8:	4413      	add	r3, r2
 80097ba:	b2db      	uxtb	r3, r3
 80097bc:	3302      	adds	r3, #2
 80097be:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
                        NR24Res_TypeDef result = NRF24_SendData(txAddr, nrfPacket, payloadLength);
 80097c2:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 80097c6:	f107 0310 	add.w	r3, r7, #16
 80097ca:	4619      	mov	r1, r3
 80097cc:	68f8      	ldr	r0, [r7, #12]
 80097ce:	f7f9 ff5b 	bl	8003688 <NRF24_SendData>
 80097d2:	4603      	mov	r3, r0
 80097d4:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

                        if (result != NRF24_SUCCESS) {
 80097d8:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d002      	beq.n	80097e6 <SendBLEDataViaNRF24+0x146>
                            return result;
 80097e0:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80097e4:	e09c      	b.n	8009920 <SendBLEDataViaNRF24+0x280>
                    for (uint8_t packet = 0; packet < packets; packet++) {
 80097e6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80097ea:	3301      	adds	r3, #1
 80097ec:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80097f0:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 80097f4:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80097f8:	429a      	cmp	r2, r3
 80097fa:	d396      	bcc.n	800972a <SendBLEDataViaNRF24+0x8a>
                        }
                    }
                    return NRF24_SUCCESS;
 80097fc:	2300      	movs	r3, #0
 80097fe:	e08f      	b.n	8009920 <SendBLEDataViaNRF24+0x280>
                break;

            case CMD_SET_CHANNELS:
                {
                    // Validate command structure
                    if (len < 2) return NRF24_ERROR;
 8009800:	79fb      	ldrb	r3, [r7, #7]
 8009802:	2b01      	cmp	r3, #1
 8009804:	d801      	bhi.n	800980a <SendBLEDataViaNRF24+0x16a>
 8009806:	2302      	movs	r3, #2
 8009808:	e08a      	b.n	8009920 <SendBLEDataViaNRF24+0x280>
                    uint8_t channelCount = data[1];
 800980a:	68bb      	ldr	r3, [r7, #8]
 800980c:	785b      	ldrb	r3, [r3, #1]
 800980e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
                    uint8_t value = data[2];
 8009812:	68bb      	ldr	r3, [r7, #8]
 8009814:	789b      	ldrb	r3, [r3, #2]
 8009816:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
                    if (len < 2 + (channelCount * 2)) return NRF24_ERROR;
 800981a:	79fa      	ldrb	r2, [r7, #7]
 800981c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8009820:	3301      	adds	r3, #1
 8009822:	005b      	lsls	r3, r3, #1
 8009824:	429a      	cmp	r2, r3
 8009826:	da01      	bge.n	800982c <SendBLEDataViaNRF24+0x18c>
 8009828:	2302      	movs	r3, #2
 800982a:	e079      	b.n	8009920 <SendBLEDataViaNRF24+0x280>

                    // Split into 14-channel packets
                    uint8_t channelsPerPacket = 14;
 800982c:	230e      	movs	r3, #14
 800982e:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
                    uint8_t packets = (channelCount + channelsPerPacket - 1) / channelsPerPacket;
 8009832:	f897 2042 	ldrb.w	r2, [r7, #66]	@ 0x42
 8009836:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800983a:	4413      	add	r3, r2
 800983c:	1e5a      	subs	r2, r3, #1
 800983e:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8009842:	fb92 f3f3 	sdiv	r3, r2, r3
 8009846:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
                    uint8_t nrfPacket[NRF24_PACKET_SIZE];

                    for (uint8_t packet = 0; packet < packets; packet++) {
 800984a:	2300      	movs	r3, #0
 800984c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8009850:	e05d      	b.n	800990e <SendBLEDataViaNRF24+0x26e>
                        uint8_t channelsInPacket = (packet == packets - 1) ? (channelCount % channelsPerPacket) : channelsPerPacket;
 8009852:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8009856:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800985a:	3b01      	subs	r3, #1
 800985c:	429a      	cmp	r2, r3
 800985e:	d10a      	bne.n	8009876 <SendBLEDataViaNRF24+0x1d6>
 8009860:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8009864:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 8009868:	fbb3 f1f2 	udiv	r1, r3, r2
 800986c:	fb01 f202 	mul.w	r2, r1, r2
 8009870:	1a9b      	subs	r3, r3, r2
 8009872:	b2db      	uxtb	r3, r3
 8009874:	e001      	b.n	800987a <SendBLEDataViaNRF24+0x1da>
 8009876:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800987a:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
                        if (channelsInPacket == 0) channelsInPacket = channelsPerPacket;
 800987e:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8009882:	2b00      	cmp	r3, #0
 8009884:	d103      	bne.n	800988e <SendBLEDataViaNRF24+0x1ee>
 8009886:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800988a:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44

                        // Build packet
                        nrfPacket[0] = CMD_SET_CHANNELS;
 800988e:	2302      	movs	r3, #2
 8009890:	743b      	strb	r3, [r7, #16]
                        nrfPacket[1] = channelsInPacket;
 8009892:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8009896:	747b      	strb	r3, [r7, #17]
                        nrfPacket[2] = value;
 8009898:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 800989c:	74bb      	strb	r3, [r7, #18]
                        uint16_t startOffset = 3 + (packet * channelsPerPacket * 2);
 800989e:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80098a2:	b29a      	uxth	r2, r3
 80098a4:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80098a8:	b29b      	uxth	r3, r3
 80098aa:	fb12 f303 	smulbb	r3, r2, r3
 80098ae:	b29b      	uxth	r3, r3
 80098b0:	005b      	lsls	r3, r3, #1
 80098b2:	b29b      	uxth	r3, r3
 80098b4:	3303      	adds	r3, #3
 80098b6:	87bb      	strh	r3, [r7, #60]	@ 0x3c
                        memcpy(&nrfPacket[3], &data[startOffset], channelsInPacket * 2);
 80098b8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80098ba:	68ba      	ldr	r2, [r7, #8]
 80098bc:	18d1      	adds	r1, r2, r3
 80098be:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80098c2:	005b      	lsls	r3, r3, #1
 80098c4:	461a      	mov	r2, r3
 80098c6:	f107 0310 	add.w	r3, r7, #16
 80098ca:	3303      	adds	r3, #3
 80098cc:	4618      	mov	r0, r3
 80098ce:	f004 ff30 	bl	800e732 <memcpy>

                        // Send packet
                        uint8_t payloadLength = 3 + (channelsInPacket * 2);
 80098d2:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80098d6:	005b      	lsls	r3, r3, #1
 80098d8:	b2db      	uxtb	r3, r3
 80098da:	3303      	adds	r3, #3
 80098dc:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
                        NR24Res_TypeDef result = NRF24_SendData(txAddr, nrfPacket, payloadLength);
 80098e0:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 80098e4:	f107 0310 	add.w	r3, r7, #16
 80098e8:	4619      	mov	r1, r3
 80098ea:	68f8      	ldr	r0, [r7, #12]
 80098ec:	f7f9 fecc 	bl	8003688 <NRF24_SendData>
 80098f0:	4603      	mov	r3, r0
 80098f2:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a

                        if (result != NRF24_SUCCESS) {
 80098f6:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d002      	beq.n	8009904 <SendBLEDataViaNRF24+0x264>
                            return result;
 80098fe:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8009902:	e00d      	b.n	8009920 <SendBLEDataViaNRF24+0x280>
                    for (uint8_t packet = 0; packet < packets; packet++) {
 8009904:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8009908:	3301      	adds	r3, #1
 800990a:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 800990e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8009912:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009916:	429a      	cmp	r2, r3
 8009918:	d39b      	bcc.n	8009852 <SendBLEDataViaNRF24+0x1b2>
                        }
                    }
                    return NRF24_SUCCESS;
 800991a:	2300      	movs	r3, #0
 800991c:	e000      	b.n	8009920 <SendBLEDataViaNRF24+0x280>
                }
                break;

            default:
                // Unknown command
                return NRF24_ERROR;
 800991e:	2302      	movs	r3, #2
        }
    }
}
 8009920:	4618      	mov	r0, r3
 8009922:	3748      	adds	r7, #72	@ 0x48
 8009924:	46bd      	mov	sp, r7
 8009926:	bd80      	pop	{r7, pc}
 8009928:	66666667 	.word	0x66666667
 800992c:	cccccccd 	.word	0xcccccccd

08009930 <SendSyncMessages>:
 * Splits the DMX buffer into 18 packets (30 channels per packet).
 * @param txAddr Pointer to the 5-byte TX address (e.g., "DMX01").
 * @param dmx_buffer Pointer to the DMX buffer (Start Code + 512 channels).
 * @return NR24Res_TypeDef Result of the transmission operation.
 */
NR24Res_TypeDef SendSyncMessages(uint8_t *txAddr, const uint8_t* dmx_buffer) {
 8009930:	b580      	push	{r7, lr}
 8009932:	b08c      	sub	sp, #48	@ 0x30
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
 8009938:	6039      	str	r1, [r7, #0]
    uint8_t sync_data[NRF24_PACKET_SIZE];
    sync_data[0] = CMD_SYNC;  // Command ID
 800993a:	2310      	movs	r3, #16
 800993c:	723b      	strb	r3, [r7, #8]

    for (uint8_t packet = 0; packet < 18; packet++) {
 800993e:	2300      	movs	r3, #0
 8009940:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8009944:	e039      	b.n	80099ba <SendSyncMessages+0x8a>
        sync_data[1] = packet;  // Packet number
 8009946:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800994a:	727b      	strb	r3, [r7, #9]

        uint16_t start_idx = (packet * 30) + 1;
 800994c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009950:	b29b      	uxth	r3, r3
 8009952:	461a      	mov	r2, r3
 8009954:	0112      	lsls	r2, r2, #4
 8009956:	1ad3      	subs	r3, r2, r3
 8009958:	005b      	lsls	r3, r3, #1
 800995a:	b29b      	uxth	r3, r3
 800995c:	3301      	adds	r3, #1
 800995e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
        uint8_t channels_to_send = (packet == 17) ? 2 : 30;
 8009960:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009964:	2b11      	cmp	r3, #17
 8009966:	d101      	bne.n	800996c <SendSyncMessages+0x3c>
 8009968:	2302      	movs	r3, #2
 800996a:	e000      	b.n	800996e <SendSyncMessages+0x3e>
 800996c:	231e      	movs	r3, #30
 800996e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

        memcpy(&sync_data[2], &dmx_buffer[start_idx], channels_to_send);
 8009972:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8009974:	683a      	ldr	r2, [r7, #0]
 8009976:	18d1      	adds	r1, r2, r3
 8009978:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800997c:	f107 0308 	add.w	r3, r7, #8
 8009980:	3302      	adds	r3, #2
 8009982:	4618      	mov	r0, r3
 8009984:	f004 fed5 	bl	800e732 <memcpy>

        NR24Res_TypeDef result = NRF24_SendData(txAddr, sync_data, 2 + channels_to_send);
 8009988:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800998c:	3302      	adds	r3, #2
 800998e:	b2da      	uxtb	r2, r3
 8009990:	f107 0308 	add.w	r3, r7, #8
 8009994:	4619      	mov	r1, r3
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f7f9 fe76 	bl	8003688 <NRF24_SendData>
 800999c:	4603      	mov	r3, r0
 800999e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

        if (result != NRF24_SUCCESS) {
 80099a2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d002      	beq.n	80099b0 <SendSyncMessages+0x80>
            return result;
 80099aa:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80099ae:	e009      	b.n	80099c4 <SendSyncMessages+0x94>
    for (uint8_t packet = 0; packet < 18; packet++) {
 80099b0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80099b4:	3301      	adds	r3, #1
 80099b6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80099ba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80099be:	2b11      	cmp	r3, #17
 80099c0:	d9c1      	bls.n	8009946 <SendSyncMessages+0x16>
        }
    }
    return NRF24_SUCCESS;
 80099c2:	2300      	movs	r3, #0
}
 80099c4:	4618      	mov	r0, r3
 80099c6:	3730      	adds	r7, #48	@ 0x30
 80099c8:	46bd      	mov	sp, r7
 80099ca:	bd80      	pop	{r7, pc}

080099cc <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b088      	sub	sp, #32
 80099d0:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80099d2:	2300      	movs	r3, #0
 80099d4:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80099d6:	f107 0308 	add.w	r3, r7, #8
 80099da:	2218      	movs	r2, #24
 80099dc:	2100      	movs	r1, #0
 80099de:	4618      	mov	r0, r3
 80099e0:	f001 f9ec 	bl	800adbc <Osal_MemSet>
  rq.ogf = 0x3f;
 80099e4:	233f      	movs	r3, #63	@ 0x3f
 80099e6:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 80099e8:	2381      	movs	r3, #129	@ 0x81
 80099ea:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80099ec:	1dfb      	adds	r3, r7, #7
 80099ee:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80099f0:	2301      	movs	r3, #1
 80099f2:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80099f4:	f107 0308 	add.w	r3, r7, #8
 80099f8:	2100      	movs	r1, #0
 80099fa:	4618      	mov	r0, r3
 80099fc:	f001 fc68 	bl	800b2d0 <hci_send_req>
 8009a00:	4603      	mov	r3, r0
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	da01      	bge.n	8009a0a <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8009a06:	23ff      	movs	r3, #255	@ 0xff
 8009a08:	e000      	b.n	8009a0c <aci_gap_set_non_discoverable+0x40>
  return status;
 8009a0a:	79fb      	ldrb	r3, [r7, #7]
}
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	3720      	adds	r7, #32
 8009a10:	46bd      	mov	sp, r7
 8009a12:	bd80      	pop	{r7, pc}

08009a14 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 8009a14:	b5b0      	push	{r4, r5, r7, lr}
 8009a16:	b0ce      	sub	sp, #312	@ 0x138
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	4605      	mov	r5, r0
 8009a1c:	460c      	mov	r4, r1
 8009a1e:	4610      	mov	r0, r2
 8009a20:	4619      	mov	r1, r3
 8009a22:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009a26:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8009a2a:	462a      	mov	r2, r5
 8009a2c:	701a      	strb	r2, [r3, #0]
 8009a2e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009a32:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8009a36:	4622      	mov	r2, r4
 8009a38:	801a      	strh	r2, [r3, #0]
 8009a3a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009a3e:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 8009a42:	4602      	mov	r2, r0
 8009a44:	801a      	strh	r2, [r3, #0]
 8009a46:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009a4a:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8009a4e:	460a      	mov	r2, r1
 8009a50:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8009a52:	f107 0310 	add.w	r3, r7, #16
 8009a56:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8009a5a:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 8009a5e:	3308      	adds	r3, #8
 8009a60:	f107 0210 	add.w	r2, r7, #16
 8009a64:	4413      	add	r3, r2
 8009a66:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8009a6a:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8009a6e:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8009a72:	4413      	add	r3, r2
 8009a74:	3309      	adds	r3, #9
 8009a76:	f107 0210 	add.w	r2, r7, #16
 8009a7a:	4413      	add	r3, r2
 8009a7c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8009a80:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009a84:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8009a88:	2200      	movs	r2, #0
 8009a8a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 8009a92:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009a96:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8009a9a:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8009a9e:	7812      	ldrb	r2, [r2, #0]
 8009aa0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009aa2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009aa6:	3301      	adds	r3, #1
 8009aa8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8009aac:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009ab0:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8009ab4:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 8009ab8:	8812      	ldrh	r2, [r2, #0]
 8009aba:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8009abe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009ac2:	3302      	adds	r3, #2
 8009ac4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8009ac8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009acc:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8009ad0:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 8009ad4:	8812      	ldrh	r2, [r2, #0]
 8009ad6:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8009ada:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009ade:	3302      	adds	r3, #2
 8009ae0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8009ae4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009ae8:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8009aec:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8009af0:	7812      	ldrb	r2, [r2, #0]
 8009af2:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8009af4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009af8:	3301      	adds	r3, #1
 8009afa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8009afe:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009b02:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8009b06:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8009b08:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009b0c:	3301      	adds	r3, #1
 8009b0e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8009b12:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009b16:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8009b1a:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8009b1c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009b20:	3301      	adds	r3, #1
 8009b22:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8009b26:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009b2a:	3308      	adds	r3, #8
 8009b2c:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8009b30:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 8009b34:	4618      	mov	r0, r3
 8009b36:	f001 f931 	bl	800ad9c <Osal_MemCpy>
    index_input += Local_Name_Length;
 8009b3a:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 8009b3e:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8009b42:	4413      	add	r3, r2
 8009b44:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8009b48:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009b4c:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8009b50:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8009b52:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009b56:	3301      	adds	r3, #1
 8009b58:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8009b5c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009b60:	3301      	adds	r3, #1
 8009b62:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8009b66:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	f001 f916 	bl	800ad9c <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8009b70:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8009b74:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8009b78:	4413      	add	r3, r2
 8009b7a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 8009b7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009b82:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 8009b86:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8009b88:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009b8c:	3302      	adds	r3, #2
 8009b8e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 8009b92:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009b96:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 8009b9a:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8009b9c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009ba0:	3302      	adds	r3, #2
 8009ba2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009ba6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009baa:	2218      	movs	r2, #24
 8009bac:	2100      	movs	r1, #0
 8009bae:	4618      	mov	r0, r3
 8009bb0:	f001 f904 	bl	800adbc <Osal_MemSet>
  rq.ogf = 0x3f;
 8009bb4:	233f      	movs	r3, #63	@ 0x3f
 8009bb6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 8009bba:	2383      	movs	r3, #131	@ 0x83
 8009bbc:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009bc0:	f107 0310 	add.w	r3, r7, #16
 8009bc4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009bc8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009bcc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8009bd0:	f107 030f 	add.w	r3, r7, #15
 8009bd4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8009bd8:	2301      	movs	r3, #1
 8009bda:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009bde:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009be2:	2100      	movs	r1, #0
 8009be4:	4618      	mov	r0, r3
 8009be6:	f001 fb73 	bl	800b2d0 <hci_send_req>
 8009bea:	4603      	mov	r3, r0
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	da01      	bge.n	8009bf4 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8009bf0:	23ff      	movs	r3, #255	@ 0xff
 8009bf2:	e004      	b.n	8009bfe <aci_gap_set_discoverable+0x1ea>
  return status;
 8009bf4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009bf8:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8009bfc:	781b      	ldrb	r3, [r3, #0]
}
 8009bfe:	4618      	mov	r0, r3
 8009c00:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8009c04:	46bd      	mov	sp, r7
 8009c06:	bdb0      	pop	{r4, r5, r7, pc}

08009c08 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b0cc      	sub	sp, #304	@ 0x130
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	4602      	mov	r2, r0
 8009c10:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009c14:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8009c18:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8009c1a:	f107 0310 	add.w	r3, r7, #16
 8009c1e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8009c22:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009c26:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009c2e:	2300      	movs	r3, #0
 8009c30:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 8009c34:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009c38:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009c3c:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8009c40:	7812      	ldrb	r2, [r2, #0]
 8009c42:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009c44:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009c48:	3301      	adds	r3, #1
 8009c4a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009c4e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009c52:	2218      	movs	r2, #24
 8009c54:	2100      	movs	r1, #0
 8009c56:	4618      	mov	r0, r3
 8009c58:	f001 f8b0 	bl	800adbc <Osal_MemSet>
  rq.ogf = 0x3f;
 8009c5c:	233f      	movs	r3, #63	@ 0x3f
 8009c5e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 8009c62:	2385      	movs	r3, #133	@ 0x85
 8009c64:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009c68:	f107 0310 	add.w	r3, r7, #16
 8009c6c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009c70:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009c74:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8009c78:	f107 030f 	add.w	r3, r7, #15
 8009c7c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8009c80:	2301      	movs	r3, #1
 8009c82:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009c86:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009c8a:	2100      	movs	r1, #0
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	f001 fb1f 	bl	800b2d0 <hci_send_req>
 8009c92:	4603      	mov	r3, r0
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	da01      	bge.n	8009c9c <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8009c98:	23ff      	movs	r3, #255	@ 0xff
 8009c9a:	e004      	b.n	8009ca6 <aci_gap_set_io_capability+0x9e>
  return status;
 8009c9c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009ca0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009ca4:	781b      	ldrb	r3, [r3, #0]
}
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bd80      	pop	{r7, pc}

08009cb0 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8009cb0:	b5b0      	push	{r4, r5, r7, lr}
 8009cb2:	b0cc      	sub	sp, #304	@ 0x130
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	4605      	mov	r5, r0
 8009cb8:	460c      	mov	r4, r1
 8009cba:	4610      	mov	r0, r2
 8009cbc:	4619      	mov	r1, r3
 8009cbe:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009cc2:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8009cc6:	462a      	mov	r2, r5
 8009cc8:	701a      	strb	r2, [r3, #0]
 8009cca:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009cce:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8009cd2:	4622      	mov	r2, r4
 8009cd4:	701a      	strb	r2, [r3, #0]
 8009cd6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009cda:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8009cde:	4602      	mov	r2, r0
 8009ce0:	701a      	strb	r2, [r3, #0]
 8009ce2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009ce6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009cea:	460a      	mov	r2, r1
 8009cec:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8009cee:	f107 0310 	add.w	r3, r7, #16
 8009cf2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8009cf6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009cfa:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009cfe:	2200      	movs	r2, #0
 8009d00:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009d02:	2300      	movs	r3, #0
 8009d04:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8009d08:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009d0c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009d10:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8009d14:	7812      	ldrb	r2, [r2, #0]
 8009d16:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009d18:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009d1c:	3301      	adds	r3, #1
 8009d1e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 8009d22:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009d26:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009d2a:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8009d2e:	7812      	ldrb	r2, [r2, #0]
 8009d30:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009d32:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009d36:	3301      	adds	r3, #1
 8009d38:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 8009d3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009d40:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009d44:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8009d48:	7812      	ldrb	r2, [r2, #0]
 8009d4a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8009d4c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009d50:	3301      	adds	r3, #1
 8009d52:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8009d56:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009d5a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009d5e:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8009d62:	7812      	ldrb	r2, [r2, #0]
 8009d64:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8009d66:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009d6a:	3301      	adds	r3, #1
 8009d6c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8009d70:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009d74:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 8009d78:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8009d7a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009d7e:	3301      	adds	r3, #1
 8009d80:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8009d84:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009d88:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 8009d8c:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8009d8e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009d92:	3301      	adds	r3, #1
 8009d94:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8009d98:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009d9c:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8009da0:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8009da2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009da6:	3301      	adds	r3, #1
 8009da8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8009dac:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009db0:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8009db4:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8009db8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009dbc:	3304      	adds	r3, #4
 8009dbe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8009dc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009dc6:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 8009dca:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8009dcc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009dd0:	3301      	adds	r3, #1
 8009dd2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009dd6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009dda:	2218      	movs	r2, #24
 8009ddc:	2100      	movs	r1, #0
 8009dde:	4618      	mov	r0, r3
 8009de0:	f000 ffec 	bl	800adbc <Osal_MemSet>
  rq.ogf = 0x3f;
 8009de4:	233f      	movs	r3, #63	@ 0x3f
 8009de6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 8009dea:	2386      	movs	r3, #134	@ 0x86
 8009dec:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009df0:	f107 0310 	add.w	r3, r7, #16
 8009df4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009df8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009dfc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8009e00:	f107 030f 	add.w	r3, r7, #15
 8009e04:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8009e08:	2301      	movs	r3, #1
 8009e0a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009e0e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009e12:	2100      	movs	r1, #0
 8009e14:	4618      	mov	r0, r3
 8009e16:	f001 fa5b 	bl	800b2d0 <hci_send_req>
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	da01      	bge.n	8009e24 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8009e20:	23ff      	movs	r3, #255	@ 0xff
 8009e22:	e004      	b.n	8009e2e <aci_gap_set_authentication_requirement+0x17e>
  return status;
 8009e24:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009e28:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009e2c:	781b      	ldrb	r3, [r3, #0]
}
 8009e2e:	4618      	mov	r0, r3
 8009e30:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8009e34:	46bd      	mov	sp, r7
 8009e36:	bdb0      	pop	{r4, r5, r7, pc}

08009e38 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b0cc      	sub	sp, #304	@ 0x130
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	4602      	mov	r2, r0
 8009e40:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009e44:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8009e48:	6019      	str	r1, [r3, #0]
 8009e4a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009e4e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8009e52:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 8009e54:	f107 0310 	add.w	r3, r7, #16
 8009e58:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8009e5c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009e60:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009e64:	2200      	movs	r2, #0
 8009e66:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009e68:	2300      	movs	r3, #0
 8009e6a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8009e6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009e72:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009e76:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8009e7a:	8812      	ldrh	r2, [r2, #0]
 8009e7c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009e7e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009e82:	3302      	adds	r3, #2
 8009e84:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Pass_Key = Pass_Key;
 8009e88:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009e8c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009e90:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8009e94:	6812      	ldr	r2, [r2, #0]
 8009e96:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 8009e9a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009e9e:	3304      	adds	r3, #4
 8009ea0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009ea4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009ea8:	2218      	movs	r2, #24
 8009eaa:	2100      	movs	r1, #0
 8009eac:	4618      	mov	r0, r3
 8009eae:	f000 ff85 	bl	800adbc <Osal_MemSet>
  rq.ogf = 0x3f;
 8009eb2:	233f      	movs	r3, #63	@ 0x3f
 8009eb4:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x088;
 8009eb8:	2388      	movs	r3, #136	@ 0x88
 8009eba:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009ebe:	f107 0310 	add.w	r3, r7, #16
 8009ec2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009ec6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009eca:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8009ece:	f107 030f 	add.w	r3, r7, #15
 8009ed2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8009ed6:	2301      	movs	r3, #1
 8009ed8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009edc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009ee0:	2100      	movs	r1, #0
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	f001 f9f4 	bl	800b2d0 <hci_send_req>
 8009ee8:	4603      	mov	r3, r0
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	da01      	bge.n	8009ef2 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 8009eee:	23ff      	movs	r3, #255	@ 0xff
 8009ef0:	e004      	b.n	8009efc <aci_gap_pass_key_resp+0xc4>
  return status;
 8009ef2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009ef6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009efa:	781b      	ldrb	r3, [r3, #0]
}
 8009efc:	4618      	mov	r0, r3
 8009efe:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bd80      	pop	{r7, pc}

08009f06 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8009f06:	b590      	push	{r4, r7, lr}
 8009f08:	b0cd      	sub	sp, #308	@ 0x134
 8009f0a:	af00      	add	r7, sp, #0
 8009f0c:	4604      	mov	r4, r0
 8009f0e:	4608      	mov	r0, r1
 8009f10:	4611      	mov	r1, r2
 8009f12:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009f16:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8009f1a:	6013      	str	r3, [r2, #0]
 8009f1c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009f20:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8009f24:	4622      	mov	r2, r4
 8009f26:	701a      	strb	r2, [r3, #0]
 8009f28:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009f2c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8009f30:	4602      	mov	r2, r0
 8009f32:	701a      	strb	r2, [r3, #0]
 8009f34:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009f38:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8009f3c:	460a      	mov	r2, r1
 8009f3e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8009f40:	f107 0310 	add.w	r3, r7, #16
 8009f44:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8009f48:	f107 0308 	add.w	r3, r7, #8
 8009f4c:	2207      	movs	r2, #7
 8009f4e:	2100      	movs	r1, #0
 8009f50:	4618      	mov	r0, r3
 8009f52:	f000 ff33 	bl	800adbc <Osal_MemSet>
  int index_input = 0;
 8009f56:	2300      	movs	r3, #0
 8009f58:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 8009f5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009f60:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009f64:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8009f68:	7812      	ldrb	r2, [r2, #0]
 8009f6a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009f6c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009f70:	3301      	adds	r3, #1
 8009f72:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 8009f76:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009f7a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009f7e:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8009f82:	7812      	ldrb	r2, [r2, #0]
 8009f84:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009f86:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009f8a:	3301      	adds	r3, #1
 8009f8c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 8009f90:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009f94:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009f98:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8009f9c:	7812      	ldrb	r2, [r2, #0]
 8009f9e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8009fa0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009fa4:	3301      	adds	r3, #1
 8009fa6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009faa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009fae:	2218      	movs	r2, #24
 8009fb0:	2100      	movs	r1, #0
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	f000 ff02 	bl	800adbc <Osal_MemSet>
  rq.ogf = 0x3f;
 8009fb8:	233f      	movs	r3, #63	@ 0x3f
 8009fba:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 8009fbe:	238a      	movs	r3, #138	@ 0x8a
 8009fc0:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009fc4:	f107 0310 	add.w	r3, r7, #16
 8009fc8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009fcc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009fd0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8009fd4:	f107 0308 	add.w	r3, r7, #8
 8009fd8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 8009fdc:	2307      	movs	r3, #7
 8009fde:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009fe2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009fe6:	2100      	movs	r1, #0
 8009fe8:	4618      	mov	r0, r3
 8009fea:	f001 f971 	bl	800b2d0 <hci_send_req>
 8009fee:	4603      	mov	r3, r0
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	da01      	bge.n	8009ff8 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8009ff4:	23ff      	movs	r3, #255	@ 0xff
 8009ff6:	e02e      	b.n	800a056 <aci_gap_init+0x150>
  if ( resp.Status )
 8009ff8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009ffc:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800a000:	781b      	ldrb	r3, [r3, #0]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d005      	beq.n	800a012 <aci_gap_init+0x10c>
    return resp.Status;
 800a006:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a00a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800a00e:	781b      	ldrb	r3, [r3, #0]
 800a010:	e021      	b.n	800a056 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 800a012:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a016:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800a01a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a01e:	b29a      	uxth	r2, r3
 800a020:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a024:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 800a02c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a030:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800a034:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800a038:	b29a      	uxth	r2, r3
 800a03a:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800a03e:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 800a040:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a044:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800a048:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800a04c:	b29a      	uxth	r2, r3
 800a04e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800a052:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800a054:	2300      	movs	r3, #0
}
 800a056:	4618      	mov	r0, r3
 800a058:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 800a05c:	46bd      	mov	sp, r7
 800a05e:	bd90      	pop	{r4, r7, pc}

0800a060 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b0cc      	sub	sp, #304	@ 0x130
 800a064:	af00      	add	r7, sp, #0
 800a066:	4602      	mov	r2, r0
 800a068:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a06c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800a070:	6019      	str	r1, [r3, #0]
 800a072:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a076:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800a07a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 800a07c:	f107 0310 	add.w	r3, r7, #16
 800a080:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800a084:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a088:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a08c:	2200      	movs	r2, #0
 800a08e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a090:	2300      	movs	r3, #0
 800a092:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 800a096:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a09a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a09e:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800a0a2:	7812      	ldrb	r2, [r2, #0]
 800a0a4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a0a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a0aa:	3301      	adds	r3, #1
 800a0ac:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 800a0b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a0b4:	1c58      	adds	r0, r3, #1
 800a0b6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a0ba:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800a0be:	781a      	ldrb	r2, [r3, #0]
 800a0c0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a0c4:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800a0c8:	6819      	ldr	r1, [r3, #0]
 800a0ca:	f000 fe67 	bl	800ad9c <Osal_MemCpy>
  index_input += AdvDataLen;
 800a0ce:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a0d2:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800a0d6:	781b      	ldrb	r3, [r3, #0]
 800a0d8:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800a0dc:	4413      	add	r3, r2
 800a0de:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a0e2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a0e6:	2218      	movs	r2, #24
 800a0e8:	2100      	movs	r1, #0
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	f000 fe66 	bl	800adbc <Osal_MemSet>
  rq.ogf = 0x3f;
 800a0f0:	233f      	movs	r3, #63	@ 0x3f
 800a0f2:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 800a0f6:	238e      	movs	r3, #142	@ 0x8e
 800a0f8:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800a0fc:	f107 0310 	add.w	r3, r7, #16
 800a100:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800a104:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a108:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800a10c:	f107 030f 	add.w	r3, r7, #15
 800a110:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800a114:	2301      	movs	r3, #1
 800a116:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a11a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a11e:	2100      	movs	r1, #0
 800a120:	4618      	mov	r0, r3
 800a122:	f001 f8d5 	bl	800b2d0 <hci_send_req>
 800a126:	4603      	mov	r3, r0
 800a128:	2b00      	cmp	r3, #0
 800a12a:	da01      	bge.n	800a130 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 800a12c:	23ff      	movs	r3, #255	@ 0xff
 800a12e:	e004      	b.n	800a13a <aci_gap_update_adv_data+0xda>
  return status;
 800a130:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a134:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a138:	781b      	ldrb	r3, [r3, #0]
}
 800a13a:	4618      	mov	r0, r3
 800a13c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800a140:	46bd      	mov	sp, r7
 800a142:	bd80      	pop	{r7, pc}

0800a144 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b088      	sub	sp, #32
 800a148:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800a14a:	2300      	movs	r3, #0
 800a14c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a14e:	f107 0308 	add.w	r3, r7, #8
 800a152:	2218      	movs	r2, #24
 800a154:	2100      	movs	r1, #0
 800a156:	4618      	mov	r0, r3
 800a158:	f000 fe30 	bl	800adbc <Osal_MemSet>
  rq.ogf = 0x3f;
 800a15c:	233f      	movs	r3, #63	@ 0x3f
 800a15e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800a160:	2392      	movs	r3, #146	@ 0x92
 800a162:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800a164:	1dfb      	adds	r3, r7, #7
 800a166:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800a168:	2301      	movs	r3, #1
 800a16a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a16c:	f107 0308 	add.w	r3, r7, #8
 800a170:	2100      	movs	r1, #0
 800a172:	4618      	mov	r0, r3
 800a174:	f001 f8ac 	bl	800b2d0 <hci_send_req>
 800a178:	4603      	mov	r3, r0
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	da01      	bge.n	800a182 <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 800a17e:	23ff      	movs	r3, #255	@ 0xff
 800a180:	e000      	b.n	800a184 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 800a182:	79fb      	ldrb	r3, [r7, #7]
}
 800a184:	4618      	mov	r0, r3
 800a186:	3720      	adds	r7, #32
 800a188:	46bd      	mov	sp, r7
 800a18a:	bd80      	pop	{r7, pc}

0800a18c <aci_gap_terminate>:

tBleStatus aci_gap_terminate( uint16_t Connection_Handle,
                              uint8_t Reason )
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b0cc      	sub	sp, #304	@ 0x130
 800a190:	af00      	add	r7, sp, #0
 800a192:	4602      	mov	r2, r0
 800a194:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a198:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a19c:	801a      	strh	r2, [r3, #0]
 800a19e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a1a2:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800a1a6:	460a      	mov	r2, r1
 800a1a8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_terminate_cp0 *cp0 = (aci_gap_terminate_cp0*)(cmd_buffer);
 800a1aa:	f107 0310 	add.w	r3, r7, #16
 800a1ae:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800a1b2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a1b6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a1be:	2300      	movs	r3, #0
 800a1c0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800a1c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a1c8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a1cc:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800a1d0:	8812      	ldrh	r2, [r2, #0]
 800a1d2:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a1d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a1d8:	3302      	adds	r3, #2
 800a1da:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Reason = Reason;
 800a1de:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a1e2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a1e6:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800a1ea:	7812      	ldrb	r2, [r2, #0]
 800a1ec:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800a1ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a1f2:	3301      	adds	r3, #1
 800a1f4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a1f8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a1fc:	2218      	movs	r2, #24
 800a1fe:	2100      	movs	r1, #0
 800a200:	4618      	mov	r0, r3
 800a202:	f000 fddb 	bl	800adbc <Osal_MemSet>
  rq.ogf = 0x3f;
 800a206:	233f      	movs	r3, #63	@ 0x3f
 800a208:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x093;
 800a20c:	2393      	movs	r3, #147	@ 0x93
 800a20e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.event = 0x0F;
 800a212:	230f      	movs	r3, #15
 800a214:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  rq.cparam = cmd_buffer;
 800a218:	f107 0310 	add.w	r3, r7, #16
 800a21c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800a220:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a224:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800a228:	f107 030f 	add.w	r3, r7, #15
 800a22c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800a230:	2301      	movs	r3, #1
 800a232:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a236:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a23a:	2100      	movs	r1, #0
 800a23c:	4618      	mov	r0, r3
 800a23e:	f001 f847 	bl	800b2d0 <hci_send_req>
 800a242:	4603      	mov	r3, r0
 800a244:	2b00      	cmp	r3, #0
 800a246:	da01      	bge.n	800a24c <aci_gap_terminate+0xc0>
    return BLE_STATUS_TIMEOUT;
 800a248:	23ff      	movs	r3, #255	@ 0xff
 800a24a:	e004      	b.n	800a256 <aci_gap_terminate+0xca>
  return status;
 800a24c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a250:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a254:	781b      	ldrb	r3, [r3, #0]
}
 800a256:	4618      	mov	r0, r3
 800a258:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800a25c:	46bd      	mov	sp, r7
 800a25e:	bd80      	pop	{r7, pc}

0800a260 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b0cc      	sub	sp, #304	@ 0x130
 800a264:	af00      	add	r7, sp, #0
 800a266:	4602      	mov	r2, r0
 800a268:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a26c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a270:	801a      	strh	r2, [r3, #0]
 800a272:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a276:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800a27a:	460a      	mov	r2, r1
 800a27c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 800a27e:	f107 0310 	add.w	r3, r7, #16
 800a282:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800a286:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a28a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a28e:	2200      	movs	r2, #0
 800a290:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a292:	2300      	movs	r3, #0
 800a294:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800a298:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a29c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a2a0:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800a2a4:	8812      	ldrh	r2, [r2, #0]
 800a2a6:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a2a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a2ac:	3302      	adds	r3, #2
 800a2ae:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 800a2b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a2b6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a2ba:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800a2be:	7812      	ldrb	r2, [r2, #0]
 800a2c0:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800a2c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a2c6:	3301      	adds	r3, #1
 800a2c8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a2cc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a2d0:	2218      	movs	r2, #24
 800a2d2:	2100      	movs	r1, #0
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	f000 fd71 	bl	800adbc <Osal_MemSet>
  rq.ogf = 0x3f;
 800a2da:	233f      	movs	r3, #63	@ 0x3f
 800a2dc:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x0a5;
 800a2e0:	23a5      	movs	r3, #165	@ 0xa5
 800a2e2:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800a2e6:	f107 0310 	add.w	r3, r7, #16
 800a2ea:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800a2ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a2f2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800a2f6:	f107 030f 	add.w	r3, r7, #15
 800a2fa:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800a2fe:	2301      	movs	r3, #1
 800a300:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a304:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a308:	2100      	movs	r1, #0
 800a30a:	4618      	mov	r0, r3
 800a30c:	f000 ffe0 	bl	800b2d0 <hci_send_req>
 800a310:	4603      	mov	r3, r0
 800a312:	2b00      	cmp	r3, #0
 800a314:	da01      	bge.n	800a31a <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 800a316:	23ff      	movs	r3, #255	@ 0xff
 800a318:	e004      	b.n	800a324 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 800a31a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a31e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a322:	781b      	ldrb	r3, [r3, #0]
}
 800a324:	4618      	mov	r0, r3
 800a326:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800a32a:	46bd      	mov	sp, r7
 800a32c:	bd80      	pop	{r7, pc}

0800a32e <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 800a32e:	b580      	push	{r7, lr}
 800a330:	b088      	sub	sp, #32
 800a332:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800a334:	2300      	movs	r3, #0
 800a336:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a338:	f107 0308 	add.w	r3, r7, #8
 800a33c:	2218      	movs	r2, #24
 800a33e:	2100      	movs	r1, #0
 800a340:	4618      	mov	r0, r3
 800a342:	f000 fd3b 	bl	800adbc <Osal_MemSet>
  rq.ogf = 0x3f;
 800a346:	233f      	movs	r3, #63	@ 0x3f
 800a348:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800a34a:	f240 1301 	movw	r3, #257	@ 0x101
 800a34e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800a350:	1dfb      	adds	r3, r7, #7
 800a352:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800a354:	2301      	movs	r3, #1
 800a356:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a358:	f107 0308 	add.w	r3, r7, #8
 800a35c:	2100      	movs	r1, #0
 800a35e:	4618      	mov	r0, r3
 800a360:	f000 ffb6 	bl	800b2d0 <hci_send_req>
 800a364:	4603      	mov	r3, r0
 800a366:	2b00      	cmp	r3, #0
 800a368:	da01      	bge.n	800a36e <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800a36a:	23ff      	movs	r3, #255	@ 0xff
 800a36c:	e000      	b.n	800a370 <aci_gatt_init+0x42>
  return status;
 800a36e:	79fb      	ldrb	r3, [r7, #7]
}
 800a370:	4618      	mov	r0, r3
 800a372:	3720      	adds	r7, #32
 800a374:	46bd      	mov	sp, r7
 800a376:	bd80      	pop	{r7, pc}

0800a378 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 800a378:	b590      	push	{r4, r7, lr}
 800a37a:	b0cf      	sub	sp, #316	@ 0x13c
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	4604      	mov	r4, r0
 800a380:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 800a384:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 800a388:	6001      	str	r1, [r0, #0]
 800a38a:	4610      	mov	r0, r2
 800a38c:	4619      	mov	r1, r3
 800a38e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a392:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800a396:	4622      	mov	r2, r4
 800a398:	701a      	strb	r2, [r3, #0]
 800a39a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a39e:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800a3a2:	4602      	mov	r2, r0
 800a3a4:	701a      	strb	r2, [r3, #0]
 800a3a6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a3aa:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800a3ae:	460a      	mov	r2, r1
 800a3b0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 800a3b2:	f107 0310 	add.w	r3, r7, #16
 800a3b6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800a3ba:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a3be:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800a3c2:	781b      	ldrb	r3, [r3, #0]
 800a3c4:	2b01      	cmp	r3, #1
 800a3c6:	d00a      	beq.n	800a3de <aci_gatt_add_service+0x66>
 800a3c8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a3cc:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800a3d0:	781b      	ldrb	r3, [r3, #0]
 800a3d2:	2b02      	cmp	r3, #2
 800a3d4:	d101      	bne.n	800a3da <aci_gatt_add_service+0x62>
 800a3d6:	2311      	movs	r3, #17
 800a3d8:	e002      	b.n	800a3e0 <aci_gatt_add_service+0x68>
 800a3da:	2301      	movs	r3, #1
 800a3dc:	e000      	b.n	800a3e0 <aci_gatt_add_service+0x68>
 800a3de:	2303      	movs	r3, #3
 800a3e0:	f107 0210 	add.w	r2, r7, #16
 800a3e4:	4413      	add	r3, r2
 800a3e6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800a3ea:	f107 030c 	add.w	r3, r7, #12
 800a3ee:	2203      	movs	r2, #3
 800a3f0:	2100      	movs	r1, #0
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	f000 fce2 	bl	800adbc <Osal_MemSet>
  int index_input = 0;
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 800a3fe:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a402:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800a406:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 800a40a:	7812      	ldrb	r2, [r2, #0]
 800a40c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a40e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a412:	3301      	adds	r3, #1
 800a414:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 800a418:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a41c:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800a420:	781b      	ldrb	r3, [r3, #0]
 800a422:	2b01      	cmp	r3, #1
 800a424:	d002      	beq.n	800a42c <aci_gatt_add_service+0xb4>
 800a426:	2b02      	cmp	r3, #2
 800a428:	d004      	beq.n	800a434 <aci_gatt_add_service+0xbc>
 800a42a:	e007      	b.n	800a43c <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 800a42c:	2302      	movs	r3, #2
 800a42e:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 800a432:	e005      	b.n	800a440 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 800a434:	2310      	movs	r3, #16
 800a436:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 800a43a:	e001      	b.n	800a440 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 800a43c:	2397      	movs	r3, #151	@ 0x97
 800a43e:	e06c      	b.n	800a51a <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 800a440:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a444:	1c58      	adds	r0, r3, #1
 800a446:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 800a44a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a44e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800a452:	6819      	ldr	r1, [r3, #0]
 800a454:	f000 fca2 	bl	800ad9c <Osal_MemCpy>
    index_input += size;
 800a458:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 800a45c:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800a460:	4413      	add	r3, r2
 800a462:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 800a466:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a46a:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800a46e:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800a472:	7812      	ldrb	r2, [r2, #0]
 800a474:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800a476:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a47a:	3301      	adds	r3, #1
 800a47c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 800a480:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a484:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800a488:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 800a48c:	7812      	ldrb	r2, [r2, #0]
 800a48e:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800a490:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a494:	3301      	adds	r3, #1
 800a496:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a49a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a49e:	2218      	movs	r2, #24
 800a4a0:	2100      	movs	r1, #0
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	f000 fc8a 	bl	800adbc <Osal_MemSet>
  rq.ogf = 0x3f;
 800a4a8:	233f      	movs	r3, #63	@ 0x3f
 800a4aa:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 800a4ae:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800a4b2:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800a4b6:	f107 0310 	add.w	r3, r7, #16
 800a4ba:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800a4be:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a4c2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 800a4c6:	f107 030c 	add.w	r3, r7, #12
 800a4ca:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 800a4ce:	2303      	movs	r3, #3
 800a4d0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a4d4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a4d8:	2100      	movs	r1, #0
 800a4da:	4618      	mov	r0, r3
 800a4dc:	f000 fef8 	bl	800b2d0 <hci_send_req>
 800a4e0:	4603      	mov	r3, r0
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	da01      	bge.n	800a4ea <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 800a4e6:	23ff      	movs	r3, #255	@ 0xff
 800a4e8:	e017      	b.n	800a51a <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 800a4ea:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a4ee:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800a4f2:	781b      	ldrb	r3, [r3, #0]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d005      	beq.n	800a504 <aci_gatt_add_service+0x18c>
    return resp.Status;
 800a4f8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a4fc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800a500:	781b      	ldrb	r3, [r3, #0]
 800a502:	e00a      	b.n	800a51a <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 800a504:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a508:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800a50c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a510:	b29a      	uxth	r2, r3
 800a512:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800a516:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800a518:	2300      	movs	r3, #0
}
 800a51a:	4618      	mov	r0, r3
 800a51c:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 800a520:	46bd      	mov	sp, r7
 800a522:	bd90      	pop	{r4, r7, pc}

0800a524 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 800a524:	b590      	push	{r4, r7, lr}
 800a526:	b0d1      	sub	sp, #324	@ 0x144
 800a528:	af00      	add	r7, sp, #0
 800a52a:	4604      	mov	r4, r0
 800a52c:	4608      	mov	r0, r1
 800a52e:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 800a532:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 800a536:	600a      	str	r2, [r1, #0]
 800a538:	4619      	mov	r1, r3
 800a53a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800a53e:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800a542:	4622      	mov	r2, r4
 800a544:	801a      	strh	r2, [r3, #0]
 800a546:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800a54a:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800a54e:	4602      	mov	r2, r0
 800a550:	701a      	strb	r2, [r3, #0]
 800a552:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800a556:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 800a55a:	460a      	mov	r2, r1
 800a55c:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800a55e:	f107 0318 	add.w	r3, r7, #24
 800a562:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800a566:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800a56a:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800a56e:	781b      	ldrb	r3, [r3, #0]
 800a570:	2b01      	cmp	r3, #1
 800a572:	d00a      	beq.n	800a58a <aci_gatt_add_char+0x66>
 800a574:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800a578:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800a57c:	781b      	ldrb	r3, [r3, #0]
 800a57e:	2b02      	cmp	r3, #2
 800a580:	d101      	bne.n	800a586 <aci_gatt_add_char+0x62>
 800a582:	2313      	movs	r3, #19
 800a584:	e002      	b.n	800a58c <aci_gatt_add_char+0x68>
 800a586:	2303      	movs	r3, #3
 800a588:	e000      	b.n	800a58c <aci_gatt_add_char+0x68>
 800a58a:	2305      	movs	r3, #5
 800a58c:	f107 0218 	add.w	r2, r7, #24
 800a590:	4413      	add	r3, r2
 800a592:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800a596:	f107 0314 	add.w	r3, r7, #20
 800a59a:	2203      	movs	r2, #3
 800a59c:	2100      	movs	r1, #0
 800a59e:	4618      	mov	r0, r3
 800a5a0:	f000 fc0c 	bl	800adbc <Osal_MemSet>
  int index_input = 0;
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 800a5aa:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800a5ae:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800a5b2:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800a5b6:	8812      	ldrh	r2, [r2, #0]
 800a5b8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a5ba:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a5be:	3302      	adds	r3, #2
 800a5c0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 800a5c4:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800a5c8:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800a5cc:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 800a5d0:	7812      	ldrb	r2, [r2, #0]
 800a5d2:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800a5d4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a5d8:	3301      	adds	r3, #1
 800a5da:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 800a5de:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800a5e2:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800a5e6:	781b      	ldrb	r3, [r3, #0]
 800a5e8:	2b01      	cmp	r3, #1
 800a5ea:	d002      	beq.n	800a5f2 <aci_gatt_add_char+0xce>
 800a5ec:	2b02      	cmp	r3, #2
 800a5ee:	d004      	beq.n	800a5fa <aci_gatt_add_char+0xd6>
 800a5f0:	e007      	b.n	800a602 <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 800a5f2:	2302      	movs	r3, #2
 800a5f4:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 800a5f8:	e005      	b.n	800a606 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 800a5fa:	2310      	movs	r3, #16
 800a5fc:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 800a600:	e001      	b.n	800a606 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 800a602:	2397      	movs	r3, #151	@ 0x97
 800a604:	e091      	b.n	800a72a <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 800a606:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800a60a:	1cd8      	adds	r0, r3, #3
 800a60c:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 800a610:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800a614:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800a618:	6819      	ldr	r1, [r3, #0]
 800a61a:	f000 fbbf 	bl	800ad9c <Osal_MemCpy>
    index_input += size;
 800a61e:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 800a622:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800a626:	4413      	add	r3, r2
 800a628:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 800a62c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800a630:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800a634:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 800a638:	8812      	ldrh	r2, [r2, #0]
 800a63a:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800a63c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a640:	3302      	adds	r3, #2
 800a642:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 800a646:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800a64a:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 800a64e:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800a650:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a654:	3301      	adds	r3, #1
 800a656:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 800a65a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800a65e:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800a662:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800a664:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a668:	3301      	adds	r3, #1
 800a66a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 800a66e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800a672:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 800a676:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800a678:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a67c:	3301      	adds	r3, #1
 800a67e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 800a682:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800a686:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 800a68a:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800a68c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a690:	3301      	adds	r3, #1
 800a692:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 800a696:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800a69a:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 800a69e:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800a6a0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a6a4:	3301      	adds	r3, #1
 800a6a6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a6aa:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800a6ae:	2218      	movs	r2, #24
 800a6b0:	2100      	movs	r1, #0
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	f000 fb82 	bl	800adbc <Osal_MemSet>
  rq.ogf = 0x3f;
 800a6b8:	233f      	movs	r3, #63	@ 0x3f
 800a6ba:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 800a6be:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800a6c2:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 800a6c6:	f107 0318 	add.w	r3, r7, #24
 800a6ca:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 800a6ce:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a6d2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 800a6d6:	f107 0314 	add.w	r3, r7, #20
 800a6da:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 800a6de:	2303      	movs	r3, #3
 800a6e0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a6e4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800a6e8:	2100      	movs	r1, #0
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	f000 fdf0 	bl	800b2d0 <hci_send_req>
 800a6f0:	4603      	mov	r3, r0
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	da01      	bge.n	800a6fa <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 800a6f6:	23ff      	movs	r3, #255	@ 0xff
 800a6f8:	e017      	b.n	800a72a <aci_gatt_add_char+0x206>
  if ( resp.Status )
 800a6fa:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800a6fe:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800a702:	781b      	ldrb	r3, [r3, #0]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d005      	beq.n	800a714 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 800a708:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800a70c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800a710:	781b      	ldrb	r3, [r3, #0]
 800a712:	e00a      	b.n	800a72a <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 800a714:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800a718:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800a71c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a720:	b29a      	uxth	r2, r3
 800a722:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800a726:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800a728:	2300      	movs	r3, #0
}
 800a72a:	4618      	mov	r0, r3
 800a72c:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 800a730:	46bd      	mov	sp, r7
 800a732:	bd90      	pop	{r4, r7, pc}

0800a734 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 800a734:	b5b0      	push	{r4, r5, r7, lr}
 800a736:	b0cc      	sub	sp, #304	@ 0x130
 800a738:	af00      	add	r7, sp, #0
 800a73a:	4605      	mov	r5, r0
 800a73c:	460c      	mov	r4, r1
 800a73e:	4610      	mov	r0, r2
 800a740:	4619      	mov	r1, r3
 800a742:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a746:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a74a:	462a      	mov	r2, r5
 800a74c:	801a      	strh	r2, [r3, #0]
 800a74e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a752:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800a756:	4622      	mov	r2, r4
 800a758:	801a      	strh	r2, [r3, #0]
 800a75a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a75e:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 800a762:	4602      	mov	r2, r0
 800a764:	701a      	strb	r2, [r3, #0]
 800a766:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a76a:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800a76e:	460a      	mov	r2, r1
 800a770:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800a772:	f107 0310 	add.w	r3, r7, #16
 800a776:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800a77a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a77e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a782:	2200      	movs	r2, #0
 800a784:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a786:	2300      	movs	r3, #0
 800a788:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 800a78c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a790:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a794:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800a798:	8812      	ldrh	r2, [r2, #0]
 800a79a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a79c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a7a0:	3302      	adds	r3, #2
 800a7a2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 800a7a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a7aa:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a7ae:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800a7b2:	8812      	ldrh	r2, [r2, #0]
 800a7b4:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800a7b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a7ba:	3302      	adds	r3, #2
 800a7bc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 800a7c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a7c4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a7c8:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 800a7cc:	7812      	ldrb	r2, [r2, #0]
 800a7ce:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800a7d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a7d4:	3301      	adds	r3, #1
 800a7d6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 800a7da:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a7de:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a7e2:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 800a7e6:	7812      	ldrb	r2, [r2, #0]
 800a7e8:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800a7ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a7ee:	3301      	adds	r3, #1
 800a7f0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800a7f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a7f8:	1d98      	adds	r0, r3, #6
 800a7fa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a7fe:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800a802:	781b      	ldrb	r3, [r3, #0]
 800a804:	461a      	mov	r2, r3
 800a806:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800a80a:	f000 fac7 	bl	800ad9c <Osal_MemCpy>
  index_input += Char_Value_Length;
 800a80e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a812:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800a816:	781b      	ldrb	r3, [r3, #0]
 800a818:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800a81c:	4413      	add	r3, r2
 800a81e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a822:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a826:	2218      	movs	r2, #24
 800a828:	2100      	movs	r1, #0
 800a82a:	4618      	mov	r0, r3
 800a82c:	f000 fac6 	bl	800adbc <Osal_MemSet>
  rq.ogf = 0x3f;
 800a830:	233f      	movs	r3, #63	@ 0x3f
 800a832:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 800a836:	f44f 7383 	mov.w	r3, #262	@ 0x106
 800a83a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800a83e:	f107 0310 	add.w	r3, r7, #16
 800a842:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800a846:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a84a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800a84e:	f107 030f 	add.w	r3, r7, #15
 800a852:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800a856:	2301      	movs	r3, #1
 800a858:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a85c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a860:	2100      	movs	r1, #0
 800a862:	4618      	mov	r0, r3
 800a864:	f000 fd34 	bl	800b2d0 <hci_send_req>
 800a868:	4603      	mov	r3, r0
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	da01      	bge.n	800a872 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 800a86e:	23ff      	movs	r3, #255	@ 0xff
 800a870:	e004      	b.n	800a87c <aci_gatt_update_char_value+0x148>
  return status;
 800a872:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a876:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a87a:	781b      	ldrb	r3, [r3, #0]
}
 800a87c:	4618      	mov	r0, r3
 800a87e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800a882:	46bd      	mov	sp, r7
 800a884:	bdb0      	pop	{r4, r5, r7, pc}

0800a886 <aci_gatt_confirm_indication>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_confirm_indication( uint16_t Connection_Handle )
{
 800a886:	b580      	push	{r7, lr}
 800a888:	b0cc      	sub	sp, #304	@ 0x130
 800a88a:	af00      	add	r7, sp, #0
 800a88c:	4602      	mov	r2, r0
 800a88e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a892:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a896:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_confirm_indication_cp0 *cp0 = (aci_gatt_confirm_indication_cp0*)(cmd_buffer);
 800a898:	f107 0310 	add.w	r3, r7, #16
 800a89c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800a8a0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a8a4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800a8b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a8b6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a8ba:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800a8be:	8812      	ldrh	r2, [r2, #0]
 800a8c0:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a8c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a8c6:	3302      	adds	r3, #2
 800a8c8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a8cc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a8d0:	2218      	movs	r2, #24
 800a8d2:	2100      	movs	r1, #0
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	f000 fa71 	bl	800adbc <Osal_MemSet>
  rq.ogf = 0x3f;
 800a8da:	233f      	movs	r3, #63	@ 0x3f
 800a8dc:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x125;
 800a8e0:	f240 1325 	movw	r3, #293	@ 0x125
 800a8e4:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800a8e8:	f107 0310 	add.w	r3, r7, #16
 800a8ec:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800a8f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a8f4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800a8f8:	f107 030f 	add.w	r3, r7, #15
 800a8fc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800a900:	2301      	movs	r3, #1
 800a902:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a906:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a90a:	2100      	movs	r1, #0
 800a90c:	4618      	mov	r0, r3
 800a90e:	f000 fcdf 	bl	800b2d0 <hci_send_req>
 800a912:	4603      	mov	r3, r0
 800a914:	2b00      	cmp	r3, #0
 800a916:	da01      	bge.n	800a91c <aci_gatt_confirm_indication+0x96>
    return BLE_STATUS_TIMEOUT;
 800a918:	23ff      	movs	r3, #255	@ 0xff
 800a91a:	e004      	b.n	800a926 <aci_gatt_confirm_indication+0xa0>
  return status;
 800a91c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a920:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a924:	781b      	ldrb	r3, [r3, #0]
}
 800a926:	4618      	mov	r0, r3
 800a928:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800a92c:	46bd      	mov	sp, r7
 800a92e:	bd80      	pop	{r7, pc}

0800a930 <aci_gatt_allow_read>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_allow_read( uint16_t Connection_Handle )
{
 800a930:	b580      	push	{r7, lr}
 800a932:	b0cc      	sub	sp, #304	@ 0x130
 800a934:	af00      	add	r7, sp, #0
 800a936:	4602      	mov	r2, r0
 800a938:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a93c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a940:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_allow_read_cp0 *cp0 = (aci_gatt_allow_read_cp0*)(cmd_buffer);
 800a942:	f107 0310 	add.w	r3, r7, #16
 800a946:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800a94a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a94e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a952:	2200      	movs	r2, #0
 800a954:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a956:	2300      	movs	r3, #0
 800a958:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800a95c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a960:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a964:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800a968:	8812      	ldrh	r2, [r2, #0]
 800a96a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a96c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a970:	3302      	adds	r3, #2
 800a972:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a976:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a97a:	2218      	movs	r2, #24
 800a97c:	2100      	movs	r1, #0
 800a97e:	4618      	mov	r0, r3
 800a980:	f000 fa1c 	bl	800adbc <Osal_MemSet>
  rq.ogf = 0x3f;
 800a984:	233f      	movs	r3, #63	@ 0x3f
 800a986:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x127;
 800a98a:	f240 1327 	movw	r3, #295	@ 0x127
 800a98e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800a992:	f107 0310 	add.w	r3, r7, #16
 800a996:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800a99a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a99e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800a9a2:	f107 030f 	add.w	r3, r7, #15
 800a9a6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800a9aa:	2301      	movs	r3, #1
 800a9ac:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a9b0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a9b4:	2100      	movs	r1, #0
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	f000 fc8a 	bl	800b2d0 <hci_send_req>
 800a9bc:	4603      	mov	r3, r0
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	da01      	bge.n	800a9c6 <aci_gatt_allow_read+0x96>
    return BLE_STATUS_TIMEOUT;
 800a9c2:	23ff      	movs	r3, #255	@ 0xff
 800a9c4:	e004      	b.n	800a9d0 <aci_gatt_allow_read+0xa0>
  return status;
 800a9c6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a9ca:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a9ce:	781b      	ldrb	r3, [r3, #0]
}
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	bd80      	pop	{r7, pc}

0800a9da <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800a9da:	b580      	push	{r7, lr}
 800a9dc:	b0cc      	sub	sp, #304	@ 0x130
 800a9de:	af00      	add	r7, sp, #0
 800a9e0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a9e4:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800a9e8:	601a      	str	r2, [r3, #0]
 800a9ea:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a9ee:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800a9f2:	4602      	mov	r2, r0
 800a9f4:	701a      	strb	r2, [r3, #0]
 800a9f6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a9fa:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a9fe:	460a      	mov	r2, r1
 800aa00:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800aa02:	f107 0310 	add.w	r3, r7, #16
 800aa06:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800aa0a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800aa0e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800aa12:	2200      	movs	r2, #0
 800aa14:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800aa16:	2300      	movs	r3, #0
 800aa18:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 800aa1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800aa20:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800aa24:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800aa28:	7812      	ldrb	r2, [r2, #0]
 800aa2a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800aa2c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800aa30:	3301      	adds	r3, #1
 800aa32:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 800aa36:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800aa3a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800aa3e:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800aa42:	7812      	ldrb	r2, [r2, #0]
 800aa44:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800aa46:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800aa4a:	3301      	adds	r3, #1
 800aa4c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 800aa50:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800aa54:	1c98      	adds	r0, r3, #2
 800aa56:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800aa5a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800aa5e:	781a      	ldrb	r2, [r3, #0]
 800aa60:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800aa64:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800aa68:	6819      	ldr	r1, [r3, #0]
 800aa6a:	f000 f997 	bl	800ad9c <Osal_MemCpy>
  index_input += Length;
 800aa6e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800aa72:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800aa76:	781b      	ldrb	r3, [r3, #0]
 800aa78:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800aa7c:	4413      	add	r3, r2
 800aa7e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800aa82:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800aa86:	2218      	movs	r2, #24
 800aa88:	2100      	movs	r1, #0
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	f000 f996 	bl	800adbc <Osal_MemSet>
  rq.ogf = 0x3f;
 800aa90:	233f      	movs	r3, #63	@ 0x3f
 800aa92:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 800aa96:	230c      	movs	r3, #12
 800aa98:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800aa9c:	f107 0310 	add.w	r3, r7, #16
 800aaa0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800aaa4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800aaa8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800aaac:	f107 030f 	add.w	r3, r7, #15
 800aab0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800aab4:	2301      	movs	r3, #1
 800aab6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800aaba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800aabe:	2100      	movs	r1, #0
 800aac0:	4618      	mov	r0, r3
 800aac2:	f000 fc05 	bl	800b2d0 <hci_send_req>
 800aac6:	4603      	mov	r3, r0
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	da01      	bge.n	800aad0 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 800aacc:	23ff      	movs	r3, #255	@ 0xff
 800aace:	e004      	b.n	800aada <aci_hal_write_config_data+0x100>
  return status;
 800aad0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800aad4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800aad8:	781b      	ldrb	r3, [r3, #0]
}
 800aada:	4618      	mov	r0, r3
 800aadc:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800aae0:	46bd      	mov	sp, r7
 800aae2:	bd80      	pop	{r7, pc}

0800aae4 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b0cc      	sub	sp, #304	@ 0x130
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	4602      	mov	r2, r0
 800aaec:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800aaf0:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800aaf4:	701a      	strb	r2, [r3, #0]
 800aaf6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800aafa:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800aafe:	460a      	mov	r2, r1
 800ab00:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800ab02:	f107 0310 	add.w	r3, r7, #16
 800ab06:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800ab0a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ab0e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800ab12:	2200      	movs	r2, #0
 800ab14:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800ab16:	2300      	movs	r3, #0
 800ab18:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 800ab1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ab20:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800ab24:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800ab28:	7812      	ldrb	r2, [r2, #0]
 800ab2a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800ab2c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ab30:	3301      	adds	r3, #1
 800ab32:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 800ab36:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ab3a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800ab3e:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800ab42:	7812      	ldrb	r2, [r2, #0]
 800ab44:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800ab46:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ab4a:	3301      	adds	r3, #1
 800ab4c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ab50:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ab54:	2218      	movs	r2, #24
 800ab56:	2100      	movs	r1, #0
 800ab58:	4618      	mov	r0, r3
 800ab5a:	f000 f92f 	bl	800adbc <Osal_MemSet>
  rq.ogf = 0x3f;
 800ab5e:	233f      	movs	r3, #63	@ 0x3f
 800ab60:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 800ab64:	230f      	movs	r3, #15
 800ab66:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800ab6a:	f107 0310 	add.w	r3, r7, #16
 800ab6e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800ab72:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ab76:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800ab7a:	f107 030f 	add.w	r3, r7, #15
 800ab7e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800ab82:	2301      	movs	r3, #1
 800ab84:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ab88:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ab8c:	2100      	movs	r1, #0
 800ab8e:	4618      	mov	r0, r3
 800ab90:	f000 fb9e 	bl	800b2d0 <hci_send_req>
 800ab94:	4603      	mov	r3, r0
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	da01      	bge.n	800ab9e <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 800ab9a:	23ff      	movs	r3, #255	@ 0xff
 800ab9c:	e004      	b.n	800aba8 <aci_hal_set_tx_power_level+0xc4>
  return status;
 800ab9e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800aba2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800aba6:	781b      	ldrb	r3, [r3, #0]
}
 800aba8:	4618      	mov	r0, r3
 800abaa:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800abae:	46bd      	mov	sp, r7
 800abb0:	bd80      	pop	{r7, pc}

0800abb2 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 800abb2:	b580      	push	{r7, lr}
 800abb4:	b0cc      	sub	sp, #304	@ 0x130
 800abb6:	af00      	add	r7, sp, #0
 800abb8:	4602      	mov	r2, r0
 800abba:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800abbe:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800abc2:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 800abc4:	f107 0310 	add.w	r3, r7, #16
 800abc8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800abcc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800abd0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800abd4:	2200      	movs	r2, #0
 800abd6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800abd8:	2300      	movs	r3, #0
 800abda:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 800abde:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800abe2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800abe6:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800abea:	8812      	ldrh	r2, [r2, #0]
 800abec:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800abee:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800abf2:	3302      	adds	r3, #2
 800abf4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800abf8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800abfc:	2218      	movs	r2, #24
 800abfe:	2100      	movs	r1, #0
 800ac00:	4618      	mov	r0, r3
 800ac02:	f000 f8db 	bl	800adbc <Osal_MemSet>
  rq.ogf = 0x3f;
 800ac06:	233f      	movs	r3, #63	@ 0x3f
 800ac08:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 800ac0c:	2318      	movs	r3, #24
 800ac0e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800ac12:	f107 0310 	add.w	r3, r7, #16
 800ac16:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800ac1a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ac1e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800ac22:	f107 030f 	add.w	r3, r7, #15
 800ac26:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800ac2a:	2301      	movs	r3, #1
 800ac2c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ac30:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ac34:	2100      	movs	r1, #0
 800ac36:	4618      	mov	r0, r3
 800ac38:	f000 fb4a 	bl	800b2d0 <hci_send_req>
 800ac3c:	4603      	mov	r3, r0
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	da01      	bge.n	800ac46 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 800ac42:	23ff      	movs	r3, #255	@ 0xff
 800ac44:	e004      	b.n	800ac50 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 800ac46:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ac4a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800ac4e:	781b      	ldrb	r3, [r3, #0]
}
 800ac50:	4618      	mov	r0, r3
 800ac52:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800ac56:	46bd      	mov	sp, r7
 800ac58:	bd80      	pop	{r7, pc}

0800ac5a <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800ac5a:	b580      	push	{r7, lr}
 800ac5c:	b088      	sub	sp, #32
 800ac5e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800ac60:	2300      	movs	r3, #0
 800ac62:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ac64:	f107 0308 	add.w	r3, r7, #8
 800ac68:	2218      	movs	r2, #24
 800ac6a:	2100      	movs	r1, #0
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	f000 f8a5 	bl	800adbc <Osal_MemSet>
  rq.ogf = 0x03;
 800ac72:	2303      	movs	r3, #3
 800ac74:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800ac76:	2303      	movs	r3, #3
 800ac78:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800ac7a:	1dfb      	adds	r3, r7, #7
 800ac7c:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800ac7e:	2301      	movs	r3, #1
 800ac80:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ac82:	f107 0308 	add.w	r3, r7, #8
 800ac86:	2100      	movs	r1, #0
 800ac88:	4618      	mov	r0, r3
 800ac8a:	f000 fb21 	bl	800b2d0 <hci_send_req>
 800ac8e:	4603      	mov	r3, r0
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	da01      	bge.n	800ac98 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800ac94:	23ff      	movs	r3, #255	@ 0xff
 800ac96:	e000      	b.n	800ac9a <hci_reset+0x40>
  return status;
 800ac98:	79fb      	ldrb	r3, [r7, #7]
}
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	3720      	adds	r7, #32
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	bd80      	pop	{r7, pc}

0800aca2 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800aca2:	b590      	push	{r4, r7, lr}
 800aca4:	b0cd      	sub	sp, #308	@ 0x134
 800aca6:	af00      	add	r7, sp, #0
 800aca8:	4604      	mov	r4, r0
 800acaa:	4608      	mov	r0, r1
 800acac:	4611      	mov	r1, r2
 800acae:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800acb2:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800acb6:	4622      	mov	r2, r4
 800acb8:	701a      	strb	r2, [r3, #0]
 800acba:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800acbe:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800acc2:	4602      	mov	r2, r0
 800acc4:	701a      	strb	r2, [r3, #0]
 800acc6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800acca:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800acce:	460a      	mov	r2, r1
 800acd0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800acd2:	f107 0310 	add.w	r3, r7, #16
 800acd6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800acda:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800acde:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800ace2:	2200      	movs	r2, #0
 800ace4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800ace6:	2300      	movs	r3, #0
 800ace8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 800acec:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800acf0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800acf4:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800acf8:	7812      	ldrb	r2, [r2, #0]
 800acfa:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800acfc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ad00:	3301      	adds	r3, #1
 800ad02:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 800ad06:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ad0a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800ad0e:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800ad12:	7812      	ldrb	r2, [r2, #0]
 800ad14:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800ad16:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ad1a:	3301      	adds	r3, #1
 800ad1c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 800ad20:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ad24:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800ad28:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800ad2c:	7812      	ldrb	r2, [r2, #0]
 800ad2e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800ad30:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ad34:	3301      	adds	r3, #1
 800ad36:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ad3a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ad3e:	2218      	movs	r2, #24
 800ad40:	2100      	movs	r1, #0
 800ad42:	4618      	mov	r0, r3
 800ad44:	f000 f83a 	bl	800adbc <Osal_MemSet>
  rq.ogf = 0x08;
 800ad48:	2308      	movs	r3, #8
 800ad4a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 800ad4e:	2331      	movs	r3, #49	@ 0x31
 800ad50:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800ad54:	f107 0310 	add.w	r3, r7, #16
 800ad58:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800ad5c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ad60:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800ad64:	f107 030f 	add.w	r3, r7, #15
 800ad68:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800ad6c:	2301      	movs	r3, #1
 800ad6e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ad72:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ad76:	2100      	movs	r1, #0
 800ad78:	4618      	mov	r0, r3
 800ad7a:	f000 faa9 	bl	800b2d0 <hci_send_req>
 800ad7e:	4603      	mov	r3, r0
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	da01      	bge.n	800ad88 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 800ad84:	23ff      	movs	r3, #255	@ 0xff
 800ad86:	e004      	b.n	800ad92 <hci_le_set_default_phy+0xf0>
  return status;
 800ad88:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ad8c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800ad90:	781b      	ldrb	r3, [r3, #0]
}
 800ad92:	4618      	mov	r0, r3
 800ad94:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	bd90      	pop	{r4, r7, pc}

0800ad9c <Osal_MemCpy>:
 * Osal_MemCpy
 *
 */

void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b084      	sub	sp, #16
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	60f8      	str	r0, [r7, #12]
 800ada4:	60b9      	str	r1, [r7, #8]
 800ada6:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size );
 800ada8:	687a      	ldr	r2, [r7, #4]
 800adaa:	68b9      	ldr	r1, [r7, #8]
 800adac:	68f8      	ldr	r0, [r7, #12]
 800adae:	f003 fcc0 	bl	800e732 <memcpy>
 800adb2:	4603      	mov	r3, r0
}
 800adb4:	4618      	mov	r0, r3
 800adb6:	3710      	adds	r7, #16
 800adb8:	46bd      	mov	sp, r7
 800adba:	bd80      	pop	{r7, pc}

0800adbc <Osal_MemSet>:
 * Osal_MemSet
 *
 */

void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b084      	sub	sp, #16
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	60f8      	str	r0, [r7, #12]
 800adc4:	60b9      	str	r1, [r7, #8]
 800adc6:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800adc8:	687a      	ldr	r2, [r7, #4]
 800adca:	68b9      	ldr	r1, [r7, #8]
 800adcc:	68f8      	ldr	r0, [r7, #12]
 800adce:	f003 fc35 	bl	800e63c <memset>
 800add2:	4603      	mov	r3, r0
}
 800add4:	4618      	mov	r0, r3
 800add6:	3710      	adds	r7, #16
 800add8:	46bd      	mov	sp, r7
 800adda:	bd80      	pop	{r7, pc}

0800addc <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 800addc:	b480      	push	{r7}
 800adde:	af00      	add	r7, sp, #0
  return;
 800ade0:	bf00      	nop
}
 800ade2:	46bd      	mov	sp, r7
 800ade4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade8:	4770      	bx	lr

0800adea <BLS_Init>:

__WEAK void BLS_Init( void )
{
 800adea:	b480      	push	{r7}
 800adec:	af00      	add	r7, sp, #0
  return;
 800adee:	bf00      	nop
}
 800adf0:	46bd      	mov	sp, r7
 800adf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf6:	4770      	bx	lr

0800adf8 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 800adf8:	b480      	push	{r7}
 800adfa:	af00      	add	r7, sp, #0
  return;
 800adfc:	bf00      	nop
}
 800adfe:	46bd      	mov	sp, r7
 800ae00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae04:	4770      	bx	lr

0800ae06 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 800ae06:	b480      	push	{r7}
 800ae08:	af00      	add	r7, sp, #0
  return;
 800ae0a:	bf00      	nop
}
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae12:	4770      	bx	lr

0800ae14 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 800ae14:	b480      	push	{r7}
 800ae16:	af00      	add	r7, sp, #0
  return;
 800ae18:	bf00      	nop
}
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae20:	4770      	bx	lr

0800ae22 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800ae22:	b480      	push	{r7}
 800ae24:	af00      	add	r7, sp, #0
  return;
 800ae26:	bf00      	nop
}
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2e:	4770      	bx	lr

0800ae30 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 800ae30:	b480      	push	{r7}
 800ae32:	af00      	add	r7, sp, #0
  return;
 800ae34:	bf00      	nop
}
 800ae36:	46bd      	mov	sp, r7
 800ae38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3c:	4770      	bx	lr

0800ae3e <HTS_Init>:
__WEAK void HTS_Init( void )
{
 800ae3e:	b480      	push	{r7}
 800ae40:	af00      	add	r7, sp, #0
  return;
 800ae42:	bf00      	nop
}
 800ae44:	46bd      	mov	sp, r7
 800ae46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4a:	4770      	bx	lr

0800ae4c <IAS_Init>:
__WEAK void IAS_Init( void )
{
 800ae4c:	b480      	push	{r7}
 800ae4e:	af00      	add	r7, sp, #0
  return;
 800ae50:	bf00      	nop
}
 800ae52:	46bd      	mov	sp, r7
 800ae54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae58:	4770      	bx	lr

0800ae5a <LLS_Init>:
__WEAK void LLS_Init( void )
{
 800ae5a:	b480      	push	{r7}
 800ae5c:	af00      	add	r7, sp, #0
  return;
 800ae5e:	bf00      	nop
}
 800ae60:	46bd      	mov	sp, r7
 800ae62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae66:	4770      	bx	lr

0800ae68 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 800ae68:	b480      	push	{r7}
 800ae6a:	af00      	add	r7, sp, #0
  return;
 800ae6c:	bf00      	nop
}
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae74:	4770      	bx	lr

0800ae76 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 800ae76:	b480      	push	{r7}
 800ae78:	af00      	add	r7, sp, #0
  return;
 800ae7a:	bf00      	nop
}
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae82:	4770      	bx	lr

0800ae84 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 800ae84:	b480      	push	{r7}
 800ae86:	af00      	add	r7, sp, #0
  return;
 800ae88:	bf00      	nop
}
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae90:	4770      	bx	lr

0800ae92 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 800ae92:	b480      	push	{r7}
 800ae94:	af00      	add	r7, sp, #0
  return;
 800ae96:	bf00      	nop
}
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9e:	4770      	bx	lr

0800aea0 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 800aea0:	b480      	push	{r7}
 800aea2:	af00      	add	r7, sp, #0
  return;
 800aea4:	bf00      	nop
}
 800aea6:	46bd      	mov	sp, r7
 800aea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeac:	4770      	bx	lr

0800aeae <MESH_Init>:
__WEAK void MESH_Init( void )
{
 800aeae:	b480      	push	{r7}
 800aeb0:	af00      	add	r7, sp, #0
  return;
 800aeb2:	bf00      	nop
}
 800aeb4:	46bd      	mov	sp, r7
 800aeb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeba:	4770      	bx	lr

0800aebc <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 800aebc:	b480      	push	{r7}
 800aebe:	af00      	add	r7, sp, #0
  return;
 800aec0:	bf00      	nop
}
 800aec2:	46bd      	mov	sp, r7
 800aec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec8:	4770      	bx	lr
	...

0800aecc <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800aed0:	4b04      	ldr	r3, [pc, #16]	@ (800aee4 <SVCCTL_Init+0x18>)
 800aed2:	2200      	movs	r2, #0
 800aed4:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800aed6:	4b04      	ldr	r3, [pc, #16]	@ (800aee8 <SVCCTL_Init+0x1c>)
 800aed8:	2200      	movs	r2, #0
 800aeda:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800aedc:	f000 f806 	bl	800aeec <SVCCTL_SvcInit>

  return;
 800aee0:	bf00      	nop
}
 800aee2:	bd80      	pop	{r7, pc}
 800aee4:	20000094 	.word	0x20000094
 800aee8:	200000b4 	.word	0x200000b4

0800aeec <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	af00      	add	r7, sp, #0
  BAS_Init();
 800aef0:	f7ff ff74 	bl	800addc <BAS_Init>

  BLS_Init();
 800aef4:	f7ff ff79 	bl	800adea <BLS_Init>

  CRS_STM_Init();
 800aef8:	f7ff ff7e 	bl	800adf8 <CRS_STM_Init>

  DIS_Init();
 800aefc:	f7ff ff83 	bl	800ae06 <DIS_Init>

  EDS_STM_Init();
 800af00:	f7ff ff88 	bl	800ae14 <EDS_STM_Init>

  HIDS_Init();
 800af04:	f7ff ff8d 	bl	800ae22 <HIDS_Init>

  HRS_Init();
 800af08:	f7ff ff92 	bl	800ae30 <HRS_Init>

  HTS_Init();
 800af0c:	f7ff ff97 	bl	800ae3e <HTS_Init>

  IAS_Init();
 800af10:	f7ff ff9c 	bl	800ae4c <IAS_Init>

  LLS_Init();
 800af14:	f7ff ffa1 	bl	800ae5a <LLS_Init>

  TPS_Init();
 800af18:	f7ff ffa6 	bl	800ae68 <TPS_Init>

  MOTENV_STM_Init();
 800af1c:	f7ff ffab 	bl	800ae76 <MOTENV_STM_Init>

  P2PS_STM_Init();
 800af20:	f7ff ffb0 	bl	800ae84 <P2PS_STM_Init>

  ZDD_STM_Init();
 800af24:	f7ff ffb5 	bl	800ae92 <ZDD_STM_Init>

  OTAS_STM_Init();
 800af28:	f7ff ffba 	bl	800aea0 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800af2c:	f7ff ffc6 	bl	800aebc <BVOPUS_STM_Init>

  MESH_Init();
 800af30:	f7ff ffbd 	bl	800aeae <MESH_Init>

  SVCCTL_InitCustomSvc();
 800af34:	f002 faf8 	bl	800d528 <SVCCTL_InitCustomSvc>
  
  return;
 800af38:	bf00      	nop
}
 800af3a:	bd80      	pop	{r7, pc}

0800af3c <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800af3c:	b480      	push	{r7}
 800af3e:	b083      	sub	sp, #12
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800af44:	4b09      	ldr	r3, [pc, #36]	@ (800af6c <SVCCTL_RegisterSvcHandler+0x30>)
 800af46:	7f1b      	ldrb	r3, [r3, #28]
 800af48:	4619      	mov	r1, r3
 800af4a:	4a08      	ldr	r2, [pc, #32]	@ (800af6c <SVCCTL_RegisterSvcHandler+0x30>)
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800af52:	4b06      	ldr	r3, [pc, #24]	@ (800af6c <SVCCTL_RegisterSvcHandler+0x30>)
 800af54:	7f1b      	ldrb	r3, [r3, #28]
 800af56:	3301      	adds	r3, #1
 800af58:	b2da      	uxtb	r2, r3
 800af5a:	4b04      	ldr	r3, [pc, #16]	@ (800af6c <SVCCTL_RegisterSvcHandler+0x30>)
 800af5c:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800af5e:	bf00      	nop
}
 800af60:	370c      	adds	r7, #12
 800af62:	46bd      	mov	sp, r7
 800af64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af68:	4770      	bx	lr
 800af6a:	bf00      	nop
 800af6c:	20000094 	.word	0x20000094

0800af70 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800af70:	b580      	push	{r7, lr}
 800af72:	b086      	sub	sp, #24
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	3301      	adds	r3, #1
 800af7c:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800af7e:	2300      	movs	r3, #0
 800af80:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800af82:	693b      	ldr	r3, [r7, #16]
 800af84:	781b      	ldrb	r3, [r3, #0]
 800af86:	2bff      	cmp	r3, #255	@ 0xff
 800af88:	d125      	bne.n	800afd6 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800af8a:	693b      	ldr	r3, [r7, #16]
 800af8c:	3302      	adds	r3, #2
 800af8e:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	881b      	ldrh	r3, [r3, #0]
 800af94:	b29b      	uxth	r3, r3
 800af96:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800af9a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800af9e:	d118      	bne.n	800afd2 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800afa0:	2300      	movs	r3, #0
 800afa2:	757b      	strb	r3, [r7, #21]
 800afa4:	e00d      	b.n	800afc2 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800afa6:	7d7b      	ldrb	r3, [r7, #21]
 800afa8:	4a1a      	ldr	r2, [pc, #104]	@ (800b014 <SVCCTL_UserEvtRx+0xa4>)
 800afaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800afae:	6878      	ldr	r0, [r7, #4]
 800afb0:	4798      	blx	r3
 800afb2:	4603      	mov	r3, r0
 800afb4:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800afb6:	7dfb      	ldrb	r3, [r7, #23]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d108      	bne.n	800afce <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800afbc:	7d7b      	ldrb	r3, [r7, #21]
 800afbe:	3301      	adds	r3, #1
 800afc0:	757b      	strb	r3, [r7, #21]
 800afc2:	4b14      	ldr	r3, [pc, #80]	@ (800b014 <SVCCTL_UserEvtRx+0xa4>)
 800afc4:	7f1b      	ldrb	r3, [r3, #28]
 800afc6:	7d7a      	ldrb	r2, [r7, #21]
 800afc8:	429a      	cmp	r2, r3
 800afca:	d3ec      	bcc.n	800afa6 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 800afcc:	e002      	b.n	800afd4 <SVCCTL_UserEvtRx+0x64>
              break;
 800afce:	bf00      	nop
          break;
 800afd0:	e000      	b.n	800afd4 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 800afd2:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800afd4:	e000      	b.n	800afd8 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 800afd6:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 800afd8:	7dfb      	ldrb	r3, [r7, #23]
 800afda:	2b02      	cmp	r3, #2
 800afdc:	d00f      	beq.n	800affe <SVCCTL_UserEvtRx+0x8e>
 800afde:	2b02      	cmp	r3, #2
 800afe0:	dc10      	bgt.n	800b004 <SVCCTL_UserEvtRx+0x94>
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d002      	beq.n	800afec <SVCCTL_UserEvtRx+0x7c>
 800afe6:	2b01      	cmp	r3, #1
 800afe8:	d006      	beq.n	800aff8 <SVCCTL_UserEvtRx+0x88>
 800afea:	e00b      	b.n	800b004 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800afec:	6878      	ldr	r0, [r7, #4]
 800afee:	f001 fc15 	bl	800c81c <SVCCTL_App_Notification>
 800aff2:	4603      	mov	r3, r0
 800aff4:	75bb      	strb	r3, [r7, #22]
      break;
 800aff6:	e008      	b.n	800b00a <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800aff8:	2301      	movs	r3, #1
 800affa:	75bb      	strb	r3, [r7, #22]
      break;
 800affc:	e005      	b.n	800b00a <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800affe:	2300      	movs	r3, #0
 800b000:	75bb      	strb	r3, [r7, #22]
      break;
 800b002:	e002      	b.n	800b00a <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800b004:	2301      	movs	r3, #1
 800b006:	75bb      	strb	r3, [r7, #22]
      break;
 800b008:	bf00      	nop
  }

  return (return_status);
 800b00a:	7dbb      	ldrb	r3, [r7, #22]
}
 800b00c:	4618      	mov	r0, r3
 800b00e:	3718      	adds	r7, #24
 800b010:	46bd      	mov	sp, r7
 800b012:	bd80      	pop	{r7, pc}
 800b014:	20000094 	.word	0x20000094

0800b018 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800b018:	b580      	push	{r7, lr}
 800b01a:	b088      	sub	sp, #32
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800b020:	f107 030c 	add.w	r3, r7, #12
 800b024:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800b02c:	69fb      	ldr	r3, [r7, #28]
 800b02e:	212e      	movs	r1, #46	@ 0x2e
 800b030:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 800b034:	f000 fae8 	bl	800b608 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800b038:	69fb      	ldr	r3, [r7, #28]
 800b03a:	330b      	adds	r3, #11
 800b03c:	78db      	ldrb	r3, [r3, #3]
}
 800b03e:	4618      	mov	r0, r3
 800b040:	3720      	adds	r7, #32
 800b042:	46bd      	mov	sp, r7
 800b044:	bd80      	pop	{r7, pc}

0800b046 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800b046:	b580      	push	{r7, lr}
 800b048:	b088      	sub	sp, #32
 800b04a:	af00      	add	r7, sp, #0
 800b04c:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800b04e:	f107 030c 	add.w	r3, r7, #12
 800b052:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800b05a:	69fb      	ldr	r3, [r7, #28]
 800b05c:	210f      	movs	r1, #15
 800b05e:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 800b062:	f000 fad1 	bl	800b608 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800b066:	69fb      	ldr	r3, [r7, #28]
 800b068:	330b      	adds	r3, #11
 800b06a:	78db      	ldrb	r3, [r3, #3]
}
 800b06c:	4618      	mov	r0, r3
 800b06e:	3720      	adds	r7, #32
 800b070:	46bd      	mov	sp, r7
 800b072:	bd80      	pop	{r7, pc}

0800b074 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 800b074:	b580      	push	{r7, lr}
 800b076:	b088      	sub	sp, #32
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800b07c:	f107 030c 	add.w	r3, r7, #12
 800b080:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 800b082:	69fb      	ldr	r3, [r7, #28]
 800b084:	687a      	ldr	r2, [r7, #4]
 800b086:	2110      	movs	r1, #16
 800b088:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 800b08c:	f000 fabc 	bl	800b608 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800b090:	69fb      	ldr	r3, [r7, #28]
 800b092:	330b      	adds	r3, #11
 800b094:	78db      	ldrb	r3, [r3, #3]
}
 800b096:	4618      	mov	r0, r3
 800b098:	3720      	adds	r7, #32
 800b09a:	46bd      	mov	sp, r7
 800b09c:	bd80      	pop	{r7, pc}
	...

0800b0a0 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800b0a0:	b480      	push	{r7}
 800b0a2:	b08b      	sub	sp, #44	@ 0x2c
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800b0bc:	2300      	movs	r3, #0
 800b0be:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800b0c8:	4b4a      	ldr	r3, [pc, #296]	@ (800b1f4 <SHCI_GetWirelessFwInfo+0x154>)
 800b0ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b0cc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800b0d0:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800b0d2:	693b      	ldr	r3, [r7, #16]
 800b0d4:	009b      	lsls	r3, r3, #2
 800b0d6:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800b0da:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800b0e2:	68bb      	ldr	r3, [r7, #8]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	4a44      	ldr	r2, [pc, #272]	@ (800b1f8 <SHCI_GetWirelessFwInfo+0x158>)
 800b0e8:	4293      	cmp	r3, r2
 800b0ea:	d10f      	bne.n	800b10c <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800b0ec:	68bb      	ldr	r3, [r7, #8]
 800b0ee:	695b      	ldr	r3, [r3, #20]
 800b0f0:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800b0f2:	68bb      	ldr	r3, [r7, #8]
 800b0f4:	699b      	ldr	r3, [r3, #24]
 800b0f6:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800b0f8:	68bb      	ldr	r3, [r7, #8]
 800b0fa:	69db      	ldr	r3, [r3, #28]
 800b0fc:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800b0fe:	68bb      	ldr	r3, [r7, #8]
 800b100:	68db      	ldr	r3, [r3, #12]
 800b102:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800b104:	68bb      	ldr	r3, [r7, #8]
 800b106:	691b      	ldr	r3, [r3, #16]
 800b108:	617b      	str	r3, [r7, #20]
 800b10a:	e01a      	b.n	800b142 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800b10c:	693b      	ldr	r3, [r7, #16]
 800b10e:	009b      	lsls	r3, r3, #2
 800b110:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800b114:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 800b118:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	691b      	ldr	r3, [r3, #16]
 800b120:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	695b      	ldr	r3, [r3, #20]
 800b128:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	699b      	ldr	r3, [r3, #24]
 800b130:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	685b      	ldr	r3, [r3, #4]
 800b138:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	689b      	ldr	r3, [r3, #8]
 800b140:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800b142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b144:	0e1b      	lsrs	r3, r3, #24
 800b146:	b2da      	uxtb	r2, r3
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800b14c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b14e:	0c1b      	lsrs	r3, r3, #16
 800b150:	b2da      	uxtb	r2, r3
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800b156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b158:	0a1b      	lsrs	r3, r3, #8
 800b15a:	b2da      	uxtb	r2, r3
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800b160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b162:	091b      	lsrs	r3, r3, #4
 800b164:	b2db      	uxtb	r3, r3
 800b166:	f003 030f 	and.w	r3, r3, #15
 800b16a:	b2da      	uxtb	r2, r3
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800b170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b172:	b2db      	uxtb	r3, r3
 800b174:	f003 030f 	and.w	r3, r3, #15
 800b178:	b2da      	uxtb	r2, r3
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800b17e:	6a3b      	ldr	r3, [r7, #32]
 800b180:	0e1b      	lsrs	r3, r3, #24
 800b182:	b2da      	uxtb	r2, r3
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800b188:	6a3b      	ldr	r3, [r7, #32]
 800b18a:	0c1b      	lsrs	r3, r3, #16
 800b18c:	b2da      	uxtb	r2, r3
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800b192:	6a3b      	ldr	r3, [r7, #32]
 800b194:	0a1b      	lsrs	r3, r3, #8
 800b196:	b2da      	uxtb	r2, r3
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800b19c:	6a3b      	ldr	r3, [r7, #32]
 800b19e:	b2da      	uxtb	r2, r3
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800b1a4:	69fb      	ldr	r3, [r7, #28]
 800b1a6:	b2da      	uxtb	r2, r3
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800b1ac:	69bb      	ldr	r3, [r7, #24]
 800b1ae:	0e1b      	lsrs	r3, r3, #24
 800b1b0:	b2da      	uxtb	r2, r3
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800b1b6:	69bb      	ldr	r3, [r7, #24]
 800b1b8:	0c1b      	lsrs	r3, r3, #16
 800b1ba:	b2da      	uxtb	r2, r3
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800b1c0:	69bb      	ldr	r3, [r7, #24]
 800b1c2:	0a1b      	lsrs	r3, r3, #8
 800b1c4:	b2da      	uxtb	r2, r3
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800b1ca:	697b      	ldr	r3, [r7, #20]
 800b1cc:	0e1b      	lsrs	r3, r3, #24
 800b1ce:	b2da      	uxtb	r2, r3
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800b1d4:	697b      	ldr	r3, [r7, #20]
 800b1d6:	0c1b      	lsrs	r3, r3, #16
 800b1d8:	b2da      	uxtb	r2, r3
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800b1de:	697b      	ldr	r3, [r7, #20]
 800b1e0:	b2da      	uxtb	r2, r3
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800b1e6:	2300      	movs	r3, #0
}
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	372c      	adds	r7, #44	@ 0x2c
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f2:	4770      	bx	lr
 800b1f4:	58004000 	.word	0x58004000
 800b1f8:	a94656b9 	.word	0xa94656b9

0800b1fc <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b082      	sub	sp, #8
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
 800b204:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800b206:	683b      	ldr	r3, [r7, #0]
 800b208:	685b      	ldr	r3, [r3, #4]
 800b20a:	4a08      	ldr	r2, [pc, #32]	@ (800b22c <hci_init+0x30>)
 800b20c:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800b20e:	4a08      	ldr	r2, [pc, #32]	@ (800b230 <hci_init+0x34>)
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800b214:	4806      	ldr	r0, [pc, #24]	@ (800b230 <hci_init+0x34>)
 800b216:	f000 f979 	bl	800b50c <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800b21a:	683b      	ldr	r3, [r7, #0]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	4618      	mov	r0, r3
 800b220:	f000 f8da 	bl	800b3d8 <TlInit>

  return;
 800b224:	bf00      	nop
}
 800b226:	3708      	adds	r7, #8
 800b228:	46bd      	mov	sp, r7
 800b22a:	bd80      	pop	{r7, pc}
 800b22c:	20000c44 	.word	0x20000c44
 800b230:	20000c1c 	.word	0x20000c1c

0800b234 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800b234:	b580      	push	{r7, lr}
 800b236:	b084      	sub	sp, #16
 800b238:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800b23a:	4822      	ldr	r0, [pc, #136]	@ (800b2c4 <hci_user_evt_proc+0x90>)
 800b23c:	f000 fdd2 	bl	800bde4 <LST_is_empty>
 800b240:	4603      	mov	r3, r0
 800b242:	2b00      	cmp	r3, #0
 800b244:	d12b      	bne.n	800b29e <hci_user_evt_proc+0x6a>
 800b246:	4b20      	ldr	r3, [pc, #128]	@ (800b2c8 <hci_user_evt_proc+0x94>)
 800b248:	781b      	ldrb	r3, [r3, #0]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d027      	beq.n	800b29e <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800b24e:	f107 030c 	add.w	r3, r7, #12
 800b252:	4619      	mov	r1, r3
 800b254:	481b      	ldr	r0, [pc, #108]	@ (800b2c4 <hci_user_evt_proc+0x90>)
 800b256:	f000 fe54 	bl	800bf02 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800b25a:	4b1c      	ldr	r3, [pc, #112]	@ (800b2cc <hci_user_evt_proc+0x98>)
 800b25c:	69db      	ldr	r3, [r3, #28]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d00c      	beq.n	800b27c <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800b266:	2301      	movs	r3, #1
 800b268:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800b26a:	4b18      	ldr	r3, [pc, #96]	@ (800b2cc <hci_user_evt_proc+0x98>)
 800b26c:	69db      	ldr	r3, [r3, #28]
 800b26e:	1d3a      	adds	r2, r7, #4
 800b270:	4610      	mov	r0, r2
 800b272:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800b274:	793a      	ldrb	r2, [r7, #4]
 800b276:	4b14      	ldr	r3, [pc, #80]	@ (800b2c8 <hci_user_evt_proc+0x94>)
 800b278:	701a      	strb	r2, [r3, #0]
 800b27a:	e002      	b.n	800b282 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800b27c:	4b12      	ldr	r3, [pc, #72]	@ (800b2c8 <hci_user_evt_proc+0x94>)
 800b27e:	2201      	movs	r2, #1
 800b280:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800b282:	4b11      	ldr	r3, [pc, #68]	@ (800b2c8 <hci_user_evt_proc+0x94>)
 800b284:	781b      	ldrb	r3, [r3, #0]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d004      	beq.n	800b294 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	4618      	mov	r0, r3
 800b28e:	f000 fc0d 	bl	800baac <TL_MM_EvtDone>
 800b292:	e004      	b.n	800b29e <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	4619      	mov	r1, r3
 800b298:	480a      	ldr	r0, [pc, #40]	@ (800b2c4 <hci_user_evt_proc+0x90>)
 800b29a:	f000 fdc5 	bl	800be28 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800b29e:	4809      	ldr	r0, [pc, #36]	@ (800b2c4 <hci_user_evt_proc+0x90>)
 800b2a0:	f000 fda0 	bl	800bde4 <LST_is_empty>
 800b2a4:	4603      	mov	r3, r0
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d107      	bne.n	800b2ba <hci_user_evt_proc+0x86>
 800b2aa:	4b07      	ldr	r3, [pc, #28]	@ (800b2c8 <hci_user_evt_proc+0x94>)
 800b2ac:	781b      	ldrb	r3, [r3, #0]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d003      	beq.n	800b2ba <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800b2b2:	4804      	ldr	r0, [pc, #16]	@ (800b2c4 <hci_user_evt_proc+0x90>)
 800b2b4:	f001 ff6e 	bl	800d194 <hci_notify_asynch_evt>
  }


  return;
 800b2b8:	bf00      	nop
 800b2ba:	bf00      	nop
}
 800b2bc:	3710      	adds	r7, #16
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	bd80      	pop	{r7, pc}
 800b2c2:	bf00      	nop
 800b2c4:	200000bc 	.word	0x200000bc
 800b2c8:	200000c8 	.word	0x200000c8
 800b2cc:	20000c1c 	.word	0x20000c1c

0800b2d0 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	b088      	sub	sp, #32
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	6078      	str	r0, [r7, #4]
 800b2d8:	460b      	mov	r3, r1
 800b2da:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800b2dc:	2000      	movs	r0, #0
 800b2de:	f000 f8d1 	bl	800b484 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	885b      	ldrh	r3, [r3, #2]
 800b2ea:	b21b      	sxth	r3, r3
 800b2ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b2f0:	b21a      	sxth	r2, r3
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	881b      	ldrh	r3, [r3, #0]
 800b2f6:	b21b      	sxth	r3, r3
 800b2f8:	029b      	lsls	r3, r3, #10
 800b2fa:	b21b      	sxth	r3, r3
 800b2fc:	4313      	orrs	r3, r2
 800b2fe:	b21b      	sxth	r3, r3
 800b300:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 800b302:	4b33      	ldr	r3, [pc, #204]	@ (800b3d0 <hci_send_req+0x100>)
 800b304:	2201      	movs	r2, #1
 800b306:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	68db      	ldr	r3, [r3, #12]
 800b30c:	b2d9      	uxtb	r1, r3
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	689a      	ldr	r2, [r3, #8]
 800b312:	8bbb      	ldrh	r3, [r7, #28]
 800b314:	4618      	mov	r0, r3
 800b316:	f000 f88f 	bl	800b438 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800b31a:	e04e      	b.n	800b3ba <hci_send_req+0xea>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800b31c:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 800b320:	f001 ff4f 	bl	800d1c2 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800b324:	e043      	b.n	800b3ae <hci_send_req+0xde>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800b326:	f107 030c 	add.w	r3, r7, #12
 800b32a:	4619      	mov	r1, r3
 800b32c:	4829      	ldr	r0, [pc, #164]	@ (800b3d4 <hci_send_req+0x104>)
 800b32e:	f000 fde8 	bl	800bf02 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	7a5b      	ldrb	r3, [r3, #9]
 800b336:	2b0f      	cmp	r3, #15
 800b338:	d114      	bne.n	800b364 <hci_send_req+0x94>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	330b      	adds	r3, #11
 800b33e:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800b340:	693b      	ldr	r3, [r7, #16]
 800b342:	885b      	ldrh	r3, [r3, #2]
 800b344:	b29b      	uxth	r3, r3
 800b346:	8bba      	ldrh	r2, [r7, #28]
 800b348:	429a      	cmp	r2, r3
 800b34a:	d104      	bne.n	800b356 <hci_send_req+0x86>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	691b      	ldr	r3, [r3, #16]
 800b350:	693a      	ldr	r2, [r7, #16]
 800b352:	7812      	ldrb	r2, [r2, #0]
 800b354:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800b356:	693b      	ldr	r3, [r7, #16]
 800b358:	785b      	ldrb	r3, [r3, #1]
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d027      	beq.n	800b3ae <hci_send_req+0xde>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800b35e:	2301      	movs	r3, #1
 800b360:	77fb      	strb	r3, [r7, #31]
 800b362:	e024      	b.n	800b3ae <hci_send_req+0xde>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	330b      	adds	r3, #11
 800b368:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800b36a:	69bb      	ldr	r3, [r7, #24]
 800b36c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800b370:	b29b      	uxth	r3, r3
 800b372:	8bba      	ldrh	r2, [r7, #28]
 800b374:	429a      	cmp	r2, r3
 800b376:	d114      	bne.n	800b3a2 <hci_send_req+0xd2>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	7a9b      	ldrb	r3, [r3, #10]
 800b37c:	3b03      	subs	r3, #3
 800b37e:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	695a      	ldr	r2, [r3, #20]
 800b384:	7dfb      	ldrb	r3, [r7, #23]
 800b386:	429a      	cmp	r2, r3
 800b388:	bfa8      	it	ge
 800b38a:	461a      	movge	r2, r3
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	6918      	ldr	r0, [r3, #16]
 800b394:	69bb      	ldr	r3, [r7, #24]
 800b396:	1cd9      	adds	r1, r3, #3
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	695b      	ldr	r3, [r3, #20]
 800b39c:	461a      	mov	r2, r3
 800b39e:	f003 f9c8 	bl	800e732 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800b3a2:	69bb      	ldr	r3, [r7, #24]
 800b3a4:	781b      	ldrb	r3, [r3, #0]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d001      	beq.n	800b3ae <hci_send_req+0xde>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800b3aa:	2301      	movs	r3, #1
 800b3ac:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800b3ae:	4809      	ldr	r0, [pc, #36]	@ (800b3d4 <hci_send_req+0x104>)
 800b3b0:	f000 fd18 	bl	800bde4 <LST_is_empty>
 800b3b4:	4603      	mov	r3, r0
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d0b5      	beq.n	800b326 <hci_send_req+0x56>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800b3ba:	7ffb      	ldrb	r3, [r7, #31]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d0ad      	beq.n	800b31c <hci_send_req+0x4c>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800b3c0:	2001      	movs	r0, #1
 800b3c2:	f000 f85f 	bl	800b484 <NotifyCmdStatus>

  return 0;
 800b3c6:	2300      	movs	r3, #0
}
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	3720      	adds	r7, #32
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	bd80      	pop	{r7, pc}
 800b3d0:	20000c48 	.word	0x20000c48
 800b3d4:	20000c3c 	.word	0x20000c3c

0800b3d8 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800b3d8:	b580      	push	{r7, lr}
 800b3da:	b086      	sub	sp, #24
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800b3e0:	480f      	ldr	r0, [pc, #60]	@ (800b420 <TlInit+0x48>)
 800b3e2:	f000 fcef 	bl	800bdc4 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800b3e6:	4a0f      	ldr	r2, [pc, #60]	@ (800b424 <TlInit+0x4c>)
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800b3ec:	480e      	ldr	r0, [pc, #56]	@ (800b428 <TlInit+0x50>)
 800b3ee:	f000 fce9 	bl	800bdc4 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800b3f2:	4b0e      	ldr	r3, [pc, #56]	@ (800b42c <TlInit+0x54>)
 800b3f4:	2201      	movs	r2, #1
 800b3f6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800b3f8:	4b0d      	ldr	r3, [pc, #52]	@ (800b430 <TlInit+0x58>)
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d00a      	beq.n	800b416 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800b404:	4b0b      	ldr	r3, [pc, #44]	@ (800b434 <TlInit+0x5c>)
 800b406:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800b408:	4b09      	ldr	r3, [pc, #36]	@ (800b430 <TlInit+0x58>)
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	f107 0208 	add.w	r2, r7, #8
 800b410:	4610      	mov	r0, r2
 800b412:	4798      	blx	r3
  }

  return;
 800b414:	bf00      	nop
 800b416:	bf00      	nop
}
 800b418:	3718      	adds	r7, #24
 800b41a:	46bd      	mov	sp, r7
 800b41c:	bd80      	pop	{r7, pc}
 800b41e:	bf00      	nop
 800b420:	20000c3c 	.word	0x20000c3c
 800b424:	200000c4 	.word	0x200000c4
 800b428:	200000bc 	.word	0x200000bc
 800b42c:	200000c8 	.word	0x200000c8
 800b430:	20000c1c 	.word	0x20000c1c
 800b434:	0800b4c5 	.word	0x0800b4c5

0800b438 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	b082      	sub	sp, #8
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	4603      	mov	r3, r0
 800b440:	603a      	str	r2, [r7, #0]
 800b442:	80fb      	strh	r3, [r7, #6]
 800b444:	460b      	mov	r3, r1
 800b446:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800b448:	4b0c      	ldr	r3, [pc, #48]	@ (800b47c <SendCmd+0x44>)
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	88fa      	ldrh	r2, [r7, #6]
 800b44e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800b452:	4b0a      	ldr	r3, [pc, #40]	@ (800b47c <SendCmd+0x44>)
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	797a      	ldrb	r2, [r7, #5]
 800b458:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800b45a:	4b08      	ldr	r3, [pc, #32]	@ (800b47c <SendCmd+0x44>)
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	330c      	adds	r3, #12
 800b460:	797a      	ldrb	r2, [r7, #5]
 800b462:	6839      	ldr	r1, [r7, #0]
 800b464:	4618      	mov	r0, r3
 800b466:	f003 f964 	bl	800e732 <memcpy>

  hciContext.io.Send(0,0);
 800b46a:	4b05      	ldr	r3, [pc, #20]	@ (800b480 <SendCmd+0x48>)
 800b46c:	691b      	ldr	r3, [r3, #16]
 800b46e:	2100      	movs	r1, #0
 800b470:	2000      	movs	r0, #0
 800b472:	4798      	blx	r3

  return;
 800b474:	bf00      	nop
}
 800b476:	3708      	adds	r7, #8
 800b478:	46bd      	mov	sp, r7
 800b47a:	bd80      	pop	{r7, pc}
 800b47c:	200000c4 	.word	0x200000c4
 800b480:	20000c1c 	.word	0x20000c1c

0800b484 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b082      	sub	sp, #8
 800b488:	af00      	add	r7, sp, #0
 800b48a:	4603      	mov	r3, r0
 800b48c:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800b48e:	79fb      	ldrb	r3, [r7, #7]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d108      	bne.n	800b4a6 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800b494:	4b0a      	ldr	r3, [pc, #40]	@ (800b4c0 <NotifyCmdStatus+0x3c>)
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d00d      	beq.n	800b4b8 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800b49c:	4b08      	ldr	r3, [pc, #32]	@ (800b4c0 <NotifyCmdStatus+0x3c>)
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	2000      	movs	r0, #0
 800b4a2:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800b4a4:	e008      	b.n	800b4b8 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800b4a6:	4b06      	ldr	r3, [pc, #24]	@ (800b4c0 <NotifyCmdStatus+0x3c>)
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d004      	beq.n	800b4b8 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800b4ae:	4b04      	ldr	r3, [pc, #16]	@ (800b4c0 <NotifyCmdStatus+0x3c>)
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	2001      	movs	r0, #1
 800b4b4:	4798      	blx	r3
  return;
 800b4b6:	bf00      	nop
 800b4b8:	bf00      	nop
}
 800b4ba:	3708      	adds	r7, #8
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	bd80      	pop	{r7, pc}
 800b4c0:	20000c44 	.word	0x20000c44

0800b4c4 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b082      	sub	sp, #8
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	7a5b      	ldrb	r3, [r3, #9]
 800b4d0:	2b0f      	cmp	r3, #15
 800b4d2:	d003      	beq.n	800b4dc <TlEvtReceived+0x18>
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	7a5b      	ldrb	r3, [r3, #9]
 800b4d8:	2b0e      	cmp	r3, #14
 800b4da:	d107      	bne.n	800b4ec <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800b4dc:	6879      	ldr	r1, [r7, #4]
 800b4de:	4809      	ldr	r0, [pc, #36]	@ (800b504 <TlEvtReceived+0x40>)
 800b4e0:	f000 fcc8 	bl	800be74 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800b4e4:	2000      	movs	r0, #0
 800b4e6:	f001 fe61 	bl	800d1ac <hci_cmd_resp_release>
 800b4ea:	e006      	b.n	800b4fa <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800b4ec:	6879      	ldr	r1, [r7, #4]
 800b4ee:	4806      	ldr	r0, [pc, #24]	@ (800b508 <TlEvtReceived+0x44>)
 800b4f0:	f000 fcc0 	bl	800be74 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800b4f4:	4804      	ldr	r0, [pc, #16]	@ (800b508 <TlEvtReceived+0x44>)
 800b4f6:	f001 fe4d 	bl	800d194 <hci_notify_asynch_evt>
  }

  return;
 800b4fa:	bf00      	nop
}
 800b4fc:	3708      	adds	r7, #8
 800b4fe:	46bd      	mov	sp, r7
 800b500:	bd80      	pop	{r7, pc}
 800b502:	bf00      	nop
 800b504:	20000c3c 	.word	0x20000c3c
 800b508:	200000bc 	.word	0x200000bc

0800b50c <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800b50c:	b480      	push	{r7}
 800b50e:	b083      	sub	sp, #12
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	4a05      	ldr	r2, [pc, #20]	@ (800b52c <hci_register_io_bus+0x20>)
 800b518:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	4a04      	ldr	r2, [pc, #16]	@ (800b530 <hci_register_io_bus+0x24>)
 800b51e:	611a      	str	r2, [r3, #16]

  return;
 800b520:	bf00      	nop
}
 800b522:	370c      	adds	r7, #12
 800b524:	46bd      	mov	sp, r7
 800b526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52a:	4770      	bx	lr
 800b52c:	0800b825 	.word	0x0800b825
 800b530:	0800b88d 	.word	0x0800b88d

0800b534 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800b534:	b580      	push	{r7, lr}
 800b536:	b082      	sub	sp, #8
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
 800b53c:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800b53e:	683b      	ldr	r3, [r7, #0]
 800b540:	685b      	ldr	r3, [r3, #4]
 800b542:	4a08      	ldr	r2, [pc, #32]	@ (800b564 <shci_init+0x30>)
 800b544:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800b546:	4a08      	ldr	r2, [pc, #32]	@ (800b568 <shci_init+0x34>)
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800b54c:	4806      	ldr	r0, [pc, #24]	@ (800b568 <shci_init+0x34>)
 800b54e:	f000 f915 	bl	800b77c <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800b552:	683b      	ldr	r3, [r7, #0]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	4618      	mov	r0, r3
 800b558:	f000 f898 	bl	800b68c <TlInit>

  return;
 800b55c:	bf00      	nop
}
 800b55e:	3708      	adds	r7, #8
 800b560:	46bd      	mov	sp, r7
 800b562:	bd80      	pop	{r7, pc}
 800b564:	20000c6c 	.word	0x20000c6c
 800b568:	20000c4c 	.word	0x20000c4c

0800b56c <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	b084      	sub	sp, #16
 800b570:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800b572:	4822      	ldr	r0, [pc, #136]	@ (800b5fc <shci_user_evt_proc+0x90>)
 800b574:	f000 fc36 	bl	800bde4 <LST_is_empty>
 800b578:	4603      	mov	r3, r0
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d12b      	bne.n	800b5d6 <shci_user_evt_proc+0x6a>
 800b57e:	4b20      	ldr	r3, [pc, #128]	@ (800b600 <shci_user_evt_proc+0x94>)
 800b580:	781b      	ldrb	r3, [r3, #0]
 800b582:	2b00      	cmp	r3, #0
 800b584:	d027      	beq.n	800b5d6 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800b586:	f107 030c 	add.w	r3, r7, #12
 800b58a:	4619      	mov	r1, r3
 800b58c:	481b      	ldr	r0, [pc, #108]	@ (800b5fc <shci_user_evt_proc+0x90>)
 800b58e:	f000 fcb8 	bl	800bf02 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800b592:	4b1c      	ldr	r3, [pc, #112]	@ (800b604 <shci_user_evt_proc+0x98>)
 800b594:	69db      	ldr	r3, [r3, #28]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d00c      	beq.n	800b5b4 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800b59e:	2301      	movs	r3, #1
 800b5a0:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800b5a2:	4b18      	ldr	r3, [pc, #96]	@ (800b604 <shci_user_evt_proc+0x98>)
 800b5a4:	69db      	ldr	r3, [r3, #28]
 800b5a6:	1d3a      	adds	r2, r7, #4
 800b5a8:	4610      	mov	r0, r2
 800b5aa:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800b5ac:	793a      	ldrb	r2, [r7, #4]
 800b5ae:	4b14      	ldr	r3, [pc, #80]	@ (800b600 <shci_user_evt_proc+0x94>)
 800b5b0:	701a      	strb	r2, [r3, #0]
 800b5b2:	e002      	b.n	800b5ba <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800b5b4:	4b12      	ldr	r3, [pc, #72]	@ (800b600 <shci_user_evt_proc+0x94>)
 800b5b6:	2201      	movs	r2, #1
 800b5b8:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800b5ba:	4b11      	ldr	r3, [pc, #68]	@ (800b600 <shci_user_evt_proc+0x94>)
 800b5bc:	781b      	ldrb	r3, [r3, #0]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d004      	beq.n	800b5cc <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	f000 fa71 	bl	800baac <TL_MM_EvtDone>
 800b5ca:	e004      	b.n	800b5d6 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	4619      	mov	r1, r3
 800b5d0:	480a      	ldr	r0, [pc, #40]	@ (800b5fc <shci_user_evt_proc+0x90>)
 800b5d2:	f000 fc29 	bl	800be28 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800b5d6:	4809      	ldr	r0, [pc, #36]	@ (800b5fc <shci_user_evt_proc+0x90>)
 800b5d8:	f000 fc04 	bl	800bde4 <LST_is_empty>
 800b5dc:	4603      	mov	r3, r0
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d107      	bne.n	800b5f2 <shci_user_evt_proc+0x86>
 800b5e2:	4b07      	ldr	r3, [pc, #28]	@ (800b600 <shci_user_evt_proc+0x94>)
 800b5e4:	781b      	ldrb	r3, [r3, #0]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d003      	beq.n	800b5f2 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800b5ea:	4804      	ldr	r0, [pc, #16]	@ (800b5fc <shci_user_evt_proc+0x90>)
 800b5ec:	f7f5 fd7a 	bl	80010e4 <shci_notify_asynch_evt>
  }


  return;
 800b5f0:	bf00      	nop
 800b5f2:	bf00      	nop
}
 800b5f4:	3710      	adds	r7, #16
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	bd80      	pop	{r7, pc}
 800b5fa:	bf00      	nop
 800b5fc:	200000cc 	.word	0x200000cc
 800b600:	200000dc 	.word	0x200000dc
 800b604:	20000c4c 	.word	0x20000c4c

0800b608 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800b608:	b580      	push	{r7, lr}
 800b60a:	b084      	sub	sp, #16
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	60ba      	str	r2, [r7, #8]
 800b610:	607b      	str	r3, [r7, #4]
 800b612:	4603      	mov	r3, r0
 800b614:	81fb      	strh	r3, [r7, #14]
 800b616:	460b      	mov	r3, r1
 800b618:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800b61a:	2000      	movs	r0, #0
 800b61c:	f000 f868 	bl	800b6f0 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800b620:	4b17      	ldr	r3, [pc, #92]	@ (800b680 <shci_send+0x78>)
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	89fa      	ldrh	r2, [r7, #14]
 800b626:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800b62a:	4b15      	ldr	r3, [pc, #84]	@ (800b680 <shci_send+0x78>)
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	7b7a      	ldrb	r2, [r7, #13]
 800b630:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800b632:	4b13      	ldr	r3, [pc, #76]	@ (800b680 <shci_send+0x78>)
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	330c      	adds	r3, #12
 800b638:	7b7a      	ldrb	r2, [r7, #13]
 800b63a:	68b9      	ldr	r1, [r7, #8]
 800b63c:	4618      	mov	r0, r3
 800b63e:	f003 f878 	bl	800e732 <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 800b642:	4b10      	ldr	r3, [pc, #64]	@ (800b684 <shci_send+0x7c>)
 800b644:	2201      	movs	r2, #1
 800b646:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 800b648:	4b0f      	ldr	r3, [pc, #60]	@ (800b688 <shci_send+0x80>)
 800b64a:	691b      	ldr	r3, [r3, #16]
 800b64c:	2100      	movs	r1, #0
 800b64e:	2000      	movs	r0, #0
 800b650:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800b652:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 800b656:	f7f5 fd5c 	bl	8001112 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	f103 0008 	add.w	r0, r3, #8
 800b660:	4b07      	ldr	r3, [pc, #28]	@ (800b680 <shci_send+0x78>)
 800b662:	6819      	ldr	r1, [r3, #0]
 800b664:	4b06      	ldr	r3, [pc, #24]	@ (800b680 <shci_send+0x78>)
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	789b      	ldrb	r3, [r3, #2]
 800b66a:	3303      	adds	r3, #3
 800b66c:	461a      	mov	r2, r3
 800b66e:	f003 f860 	bl	800e732 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800b672:	2001      	movs	r0, #1
 800b674:	f000 f83c 	bl	800b6f0 <Cmd_SetStatus>

  return;
 800b678:	bf00      	nop
}
 800b67a:	3710      	adds	r7, #16
 800b67c:	46bd      	mov	sp, r7
 800b67e:	bd80      	pop	{r7, pc}
 800b680:	200000d8 	.word	0x200000d8
 800b684:	20000c70 	.word	0x20000c70
 800b688:	20000c4c 	.word	0x20000c4c

0800b68c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b086      	sub	sp, #24
 800b690:	af00      	add	r7, sp, #0
 800b692:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800b694:	4a10      	ldr	r2, [pc, #64]	@ (800b6d8 <TlInit+0x4c>)
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800b69a:	4810      	ldr	r0, [pc, #64]	@ (800b6dc <TlInit+0x50>)
 800b69c:	f000 fb92 	bl	800bdc4 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800b6a0:	2001      	movs	r0, #1
 800b6a2:	f000 f825 	bl	800b6f0 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800b6a6:	4b0e      	ldr	r3, [pc, #56]	@ (800b6e0 <TlInit+0x54>)
 800b6a8:	2201      	movs	r2, #1
 800b6aa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800b6ac:	4b0d      	ldr	r3, [pc, #52]	@ (800b6e4 <TlInit+0x58>)
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d00c      	beq.n	800b6ce <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800b6b8:	4b0b      	ldr	r3, [pc, #44]	@ (800b6e8 <TlInit+0x5c>)
 800b6ba:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800b6bc:	4b0b      	ldr	r3, [pc, #44]	@ (800b6ec <TlInit+0x60>)
 800b6be:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800b6c0:	4b08      	ldr	r3, [pc, #32]	@ (800b6e4 <TlInit+0x58>)
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	f107 020c 	add.w	r2, r7, #12
 800b6c8:	4610      	mov	r0, r2
 800b6ca:	4798      	blx	r3
  }

  return;
 800b6cc:	bf00      	nop
 800b6ce:	bf00      	nop
}
 800b6d0:	3718      	adds	r7, #24
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	bd80      	pop	{r7, pc}
 800b6d6:	bf00      	nop
 800b6d8:	200000d8 	.word	0x200000d8
 800b6dc:	200000cc 	.word	0x200000cc
 800b6e0:	200000dc 	.word	0x200000dc
 800b6e4:	20000c4c 	.word	0x20000c4c
 800b6e8:	0800b741 	.word	0x0800b741
 800b6ec:	0800b759 	.word	0x0800b759

0800b6f0 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b082      	sub	sp, #8
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	4603      	mov	r3, r0
 800b6f8:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800b6fa:	79fb      	ldrb	r3, [r7, #7]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d10b      	bne.n	800b718 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800b700:	4b0d      	ldr	r3, [pc, #52]	@ (800b738 <Cmd_SetStatus+0x48>)
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	2b00      	cmp	r3, #0
 800b706:	d003      	beq.n	800b710 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800b708:	4b0b      	ldr	r3, [pc, #44]	@ (800b738 <Cmd_SetStatus+0x48>)
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	2000      	movs	r0, #0
 800b70e:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800b710:	4b0a      	ldr	r3, [pc, #40]	@ (800b73c <Cmd_SetStatus+0x4c>)
 800b712:	2200      	movs	r2, #0
 800b714:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800b716:	e00b      	b.n	800b730 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800b718:	4b08      	ldr	r3, [pc, #32]	@ (800b73c <Cmd_SetStatus+0x4c>)
 800b71a:	2201      	movs	r2, #1
 800b71c:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800b71e:	4b06      	ldr	r3, [pc, #24]	@ (800b738 <Cmd_SetStatus+0x48>)
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	2b00      	cmp	r3, #0
 800b724:	d004      	beq.n	800b730 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800b726:	4b04      	ldr	r3, [pc, #16]	@ (800b738 <Cmd_SetStatus+0x48>)
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	2001      	movs	r0, #1
 800b72c:	4798      	blx	r3
  return;
 800b72e:	bf00      	nop
 800b730:	bf00      	nop
}
 800b732:	3708      	adds	r7, #8
 800b734:	46bd      	mov	sp, r7
 800b736:	bd80      	pop	{r7, pc}
 800b738:	20000c6c 	.word	0x20000c6c
 800b73c:	200000d4 	.word	0x200000d4

0800b740 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800b740:	b580      	push	{r7, lr}
 800b742:	b082      	sub	sp, #8
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800b748:	2000      	movs	r0, #0
 800b74a:	f7f5 fcd7 	bl	80010fc <shci_cmd_resp_release>

  return;
 800b74e:	bf00      	nop
}
 800b750:	3708      	adds	r7, #8
 800b752:	46bd      	mov	sp, r7
 800b754:	bd80      	pop	{r7, pc}
	...

0800b758 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b082      	sub	sp, #8
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800b760:	6879      	ldr	r1, [r7, #4]
 800b762:	4805      	ldr	r0, [pc, #20]	@ (800b778 <TlUserEvtReceived+0x20>)
 800b764:	f000 fb86 	bl	800be74 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800b768:	4803      	ldr	r0, [pc, #12]	@ (800b778 <TlUserEvtReceived+0x20>)
 800b76a:	f7f5 fcbb 	bl	80010e4 <shci_notify_asynch_evt>

  return;
 800b76e:	bf00      	nop
}
 800b770:	3708      	adds	r7, #8
 800b772:	46bd      	mov	sp, r7
 800b774:	bd80      	pop	{r7, pc}
 800b776:	bf00      	nop
 800b778:	200000cc 	.word	0x200000cc

0800b77c <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800b77c:	b480      	push	{r7}
 800b77e:	b083      	sub	sp, #12
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	4a05      	ldr	r2, [pc, #20]	@ (800b79c <shci_register_io_bus+0x20>)
 800b788:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	4a04      	ldr	r2, [pc, #16]	@ (800b7a0 <shci_register_io_bus+0x24>)
 800b78e:	611a      	str	r2, [r3, #16]

  return;
 800b790:	bf00      	nop
}
 800b792:	370c      	adds	r7, #12
 800b794:	46bd      	mov	sp, r7
 800b796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79a:	4770      	bx	lr
 800b79c:	0800b939 	.word	0x0800b939
 800b7a0:	0800b98d 	.word	0x0800b98d

0800b7a4 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 800b7a4:	b580      	push	{r7, lr}
 800b7a6:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800b7a8:	f002 f96e 	bl	800da88 <HW_IPCC_Enable>

  return;
 800b7ac:	bf00      	nop
}
 800b7ae:	bd80      	pop	{r7, pc}

0800b7b0 <TL_Init>:


void TL_Init( void )
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800b7b4:	4b10      	ldr	r3, [pc, #64]	@ (800b7f8 <TL_Init+0x48>)
 800b7b6:	4a11      	ldr	r2, [pc, #68]	@ (800b7fc <TL_Init+0x4c>)
 800b7b8:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800b7ba:	4b0f      	ldr	r3, [pc, #60]	@ (800b7f8 <TL_Init+0x48>)
 800b7bc:	4a10      	ldr	r2, [pc, #64]	@ (800b800 <TL_Init+0x50>)
 800b7be:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800b7c0:	4b0d      	ldr	r3, [pc, #52]	@ (800b7f8 <TL_Init+0x48>)
 800b7c2:	4a10      	ldr	r2, [pc, #64]	@ (800b804 <TL_Init+0x54>)
 800b7c4:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800b7c6:	4b0c      	ldr	r3, [pc, #48]	@ (800b7f8 <TL_Init+0x48>)
 800b7c8:	4a0f      	ldr	r2, [pc, #60]	@ (800b808 <TL_Init+0x58>)
 800b7ca:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800b7cc:	4b0a      	ldr	r3, [pc, #40]	@ (800b7f8 <TL_Init+0x48>)
 800b7ce:	4a0f      	ldr	r2, [pc, #60]	@ (800b80c <TL_Init+0x5c>)
 800b7d0:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800b7d2:	4b09      	ldr	r3, [pc, #36]	@ (800b7f8 <TL_Init+0x48>)
 800b7d4:	4a0e      	ldr	r2, [pc, #56]	@ (800b810 <TL_Init+0x60>)
 800b7d6:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800b7d8:	4b07      	ldr	r3, [pc, #28]	@ (800b7f8 <TL_Init+0x48>)
 800b7da:	4a0e      	ldr	r2, [pc, #56]	@ (800b814 <TL_Init+0x64>)
 800b7dc:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800b7de:	4b06      	ldr	r3, [pc, #24]	@ (800b7f8 <TL_Init+0x48>)
 800b7e0:	4a0d      	ldr	r2, [pc, #52]	@ (800b818 <TL_Init+0x68>)
 800b7e2:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800b7e4:	4b04      	ldr	r3, [pc, #16]	@ (800b7f8 <TL_Init+0x48>)
 800b7e6:	4a0d      	ldr	r2, [pc, #52]	@ (800b81c <TL_Init+0x6c>)
 800b7e8:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800b7ea:	4b03      	ldr	r3, [pc, #12]	@ (800b7f8 <TL_Init+0x48>)
 800b7ec:	4a0c      	ldr	r2, [pc, #48]	@ (800b820 <TL_Init+0x70>)
 800b7ee:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800b7f0:	f002 f95e 	bl	800dab0 <HW_IPCC_Init>

  return;
 800b7f4:	bf00      	nop
}
 800b7f6:	bd80      	pop	{r7, pc}
 800b7f8:	20030000 	.word	0x20030000
 800b7fc:	20030028 	.word	0x20030028
 800b800:	20030048 	.word	0x20030048
 800b804:	20030058 	.word	0x20030058
 800b808:	20030068 	.word	0x20030068
 800b80c:	20030070 	.word	0x20030070
 800b810:	20030078 	.word	0x20030078
 800b814:	20030080 	.word	0x20030080
 800b818:	2003009c 	.word	0x2003009c
 800b81c:	200300a0 	.word	0x200300a0
 800b820:	200300ac 	.word	0x200300ac

0800b824 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800b824:	b580      	push	{r7, lr}
 800b826:	b084      	sub	sp, #16
 800b828:	af00      	add	r7, sp, #0
 800b82a:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800b830:	4811      	ldr	r0, [pc, #68]	@ (800b878 <TL_BLE_Init+0x54>)
 800b832:	f000 fac7 	bl	800bdc4 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800b836:	4b11      	ldr	r3, [pc, #68]	@ (800b87c <TL_BLE_Init+0x58>)
 800b838:	685b      	ldr	r3, [r3, #4]
 800b83a:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	689a      	ldr	r2, [r3, #8]
 800b840:	68bb      	ldr	r3, [r7, #8]
 800b842:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	68da      	ldr	r2, [r3, #12]
 800b848:	68bb      	ldr	r3, [r7, #8]
 800b84a:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800b84c:	68bb      	ldr	r3, [r7, #8]
 800b84e:	4a0c      	ldr	r2, [pc, #48]	@ (800b880 <TL_BLE_Init+0x5c>)
 800b850:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800b852:	68bb      	ldr	r3, [r7, #8]
 800b854:	4a08      	ldr	r2, [pc, #32]	@ (800b878 <TL_BLE_Init+0x54>)
 800b856:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800b858:	f002 f940 	bl	800dadc <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	4a08      	ldr	r2, [pc, #32]	@ (800b884 <TL_BLE_Init+0x60>)
 800b862:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	685b      	ldr	r3, [r3, #4]
 800b868:	4a07      	ldr	r2, [pc, #28]	@ (800b888 <TL_BLE_Init+0x64>)
 800b86a:	6013      	str	r3, [r2, #0]

  return 0;
 800b86c:	2300      	movs	r3, #0
}
 800b86e:	4618      	mov	r0, r3
 800b870:	3710      	adds	r7, #16
 800b872:	46bd      	mov	sp, r7
 800b874:	bd80      	pop	{r7, pc}
 800b876:	bf00      	nop
 800b878:	200300c8 	.word	0x200300c8
 800b87c:	20030000 	.word	0x20030000
 800b880:	20030a58 	.word	0x20030a58
 800b884:	20000c7c 	.word	0x20000c7c
 800b888:	20000c80 	.word	0x20000c80

0800b88c <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800b88c:	b580      	push	{r7, lr}
 800b88e:	b082      	sub	sp, #8
 800b890:	af00      	add	r7, sp, #0
 800b892:	6078      	str	r0, [r7, #4]
 800b894:	460b      	mov	r3, r1
 800b896:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800b898:	4b09      	ldr	r3, [pc, #36]	@ (800b8c0 <TL_BLE_SendCmd+0x34>)
 800b89a:	685b      	ldr	r3, [r3, #4]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	2201      	movs	r2, #1
 800b8a0:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800b8a2:	4b07      	ldr	r3, [pc, #28]	@ (800b8c0 <TL_BLE_SendCmd+0x34>)
 800b8a4:	685b      	ldr	r3, [r3, #4]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	4619      	mov	r1, r3
 800b8aa:	2001      	movs	r0, #1
 800b8ac:	f000 f96c 	bl	800bb88 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800b8b0:	f002 f92e 	bl	800db10 <HW_IPCC_BLE_SendCmd>

  return 0;
 800b8b4:	2300      	movs	r3, #0
}
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	3708      	adds	r7, #8
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	bd80      	pop	{r7, pc}
 800b8be:	bf00      	nop
 800b8c0:	20030000 	.word	0x20030000

0800b8c4 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	b082      	sub	sp, #8
 800b8c8:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800b8ca:	e01c      	b.n	800b906 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800b8cc:	1d3b      	adds	r3, r7, #4
 800b8ce:	4619      	mov	r1, r3
 800b8d0:	4812      	ldr	r0, [pc, #72]	@ (800b91c <HW_IPCC_BLE_RxEvtNot+0x58>)
 800b8d2:	f000 fb16 	bl	800bf02 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	7a5b      	ldrb	r3, [r3, #9]
 800b8da:	2b0f      	cmp	r3, #15
 800b8dc:	d003      	beq.n	800b8e6 <HW_IPCC_BLE_RxEvtNot+0x22>
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	7a5b      	ldrb	r3, [r3, #9]
 800b8e2:	2b0e      	cmp	r3, #14
 800b8e4:	d105      	bne.n	800b8f2 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	4619      	mov	r1, r3
 800b8ea:	2002      	movs	r0, #2
 800b8ec:	f000 f94c 	bl	800bb88 <OutputDbgTrace>
 800b8f0:	e004      	b.n	800b8fc <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	4619      	mov	r1, r3
 800b8f6:	2003      	movs	r0, #3
 800b8f8:	f000 f946 	bl	800bb88 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800b8fc:	4b08      	ldr	r3, [pc, #32]	@ (800b920 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	687a      	ldr	r2, [r7, #4]
 800b902:	4610      	mov	r0, r2
 800b904:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800b906:	4805      	ldr	r0, [pc, #20]	@ (800b91c <HW_IPCC_BLE_RxEvtNot+0x58>)
 800b908:	f000 fa6c 	bl	800bde4 <LST_is_empty>
 800b90c:	4603      	mov	r3, r0
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d0dc      	beq.n	800b8cc <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800b912:	bf00      	nop
}
 800b914:	3708      	adds	r7, #8
 800b916:	46bd      	mov	sp, r7
 800b918:	bd80      	pop	{r7, pc}
 800b91a:	bf00      	nop
 800b91c:	200300c8 	.word	0x200300c8
 800b920:	20000c7c 	.word	0x20000c7c

0800b924 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800b924:	b580      	push	{r7, lr}
 800b926:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800b928:	4b02      	ldr	r3, [pc, #8]	@ (800b934 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	4798      	blx	r3

  return;
 800b92e:	bf00      	nop
}
 800b930:	bd80      	pop	{r7, pc}
 800b932:	bf00      	nop
 800b934:	20000c80 	.word	0x20000c80

0800b938 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	b084      	sub	sp, #16
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800b944:	480d      	ldr	r0, [pc, #52]	@ (800b97c <TL_SYS_Init+0x44>)
 800b946:	f000 fa3d 	bl	800bdc4 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800b94a:	4b0d      	ldr	r3, [pc, #52]	@ (800b980 <TL_SYS_Init+0x48>)
 800b94c:	68db      	ldr	r3, [r3, #12]
 800b94e:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	689a      	ldr	r2, [r3, #8]
 800b954:	68bb      	ldr	r3, [r7, #8]
 800b956:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800b958:	68bb      	ldr	r3, [r7, #8]
 800b95a:	4a08      	ldr	r2, [pc, #32]	@ (800b97c <TL_SYS_Init+0x44>)
 800b95c:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800b95e:	f002 f909 	bl	800db74 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	4a07      	ldr	r2, [pc, #28]	@ (800b984 <TL_SYS_Init+0x4c>)
 800b968:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	685b      	ldr	r3, [r3, #4]
 800b96e:	4a06      	ldr	r2, [pc, #24]	@ (800b988 <TL_SYS_Init+0x50>)
 800b970:	6013      	str	r3, [r2, #0]

  return 0;
 800b972:	2300      	movs	r3, #0
}
 800b974:	4618      	mov	r0, r3
 800b976:	3710      	adds	r7, #16
 800b978:	46bd      	mov	sp, r7
 800b97a:	bd80      	pop	{r7, pc}
 800b97c:	200300d0 	.word	0x200300d0
 800b980:	20030000 	.word	0x20030000
 800b984:	20000c84 	.word	0x20000c84
 800b988:	20000c88 	.word	0x20000c88

0800b98c <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b082      	sub	sp, #8
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
 800b994:	460b      	mov	r3, r1
 800b996:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800b998:	4b09      	ldr	r3, [pc, #36]	@ (800b9c0 <TL_SYS_SendCmd+0x34>)
 800b99a:	68db      	ldr	r3, [r3, #12]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	2210      	movs	r2, #16
 800b9a0:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800b9a2:	4b07      	ldr	r3, [pc, #28]	@ (800b9c0 <TL_SYS_SendCmd+0x34>)
 800b9a4:	68db      	ldr	r3, [r3, #12]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	4619      	mov	r1, r3
 800b9aa:	2004      	movs	r0, #4
 800b9ac:	f000 f8ec 	bl	800bb88 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800b9b0:	f002 f8fa 	bl	800dba8 <HW_IPCC_SYS_SendCmd>

  return 0;
 800b9b4:	2300      	movs	r3, #0
}
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	3708      	adds	r7, #8
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	bd80      	pop	{r7, pc}
 800b9be:	bf00      	nop
 800b9c0:	20030000 	.word	0x20030000

0800b9c4 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800b9c8:	4b07      	ldr	r3, [pc, #28]	@ (800b9e8 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800b9ca:	68db      	ldr	r3, [r3, #12]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	4619      	mov	r1, r3
 800b9d0:	2005      	movs	r0, #5
 800b9d2:	f000 f8d9 	bl	800bb88 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800b9d6:	4b05      	ldr	r3, [pc, #20]	@ (800b9ec <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	4a03      	ldr	r2, [pc, #12]	@ (800b9e8 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800b9dc:	68d2      	ldr	r2, [r2, #12]
 800b9de:	6812      	ldr	r2, [r2, #0]
 800b9e0:	4610      	mov	r0, r2
 800b9e2:	4798      	blx	r3

  return;
 800b9e4:	bf00      	nop
}
 800b9e6:	bd80      	pop	{r7, pc}
 800b9e8:	20030000 	.word	0x20030000
 800b9ec:	20000c84 	.word	0x20000c84

0800b9f0 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b082      	sub	sp, #8
 800b9f4:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800b9f6:	e00e      	b.n	800ba16 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800b9f8:	1d3b      	adds	r3, r7, #4
 800b9fa:	4619      	mov	r1, r3
 800b9fc:	480b      	ldr	r0, [pc, #44]	@ (800ba2c <HW_IPCC_SYS_EvtNot+0x3c>)
 800b9fe:	f000 fa80 	bl	800bf02 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	4619      	mov	r1, r3
 800ba06:	2006      	movs	r0, #6
 800ba08:	f000 f8be 	bl	800bb88 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800ba0c:	4b08      	ldr	r3, [pc, #32]	@ (800ba30 <HW_IPCC_SYS_EvtNot+0x40>)
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	687a      	ldr	r2, [r7, #4]
 800ba12:	4610      	mov	r0, r2
 800ba14:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800ba16:	4805      	ldr	r0, [pc, #20]	@ (800ba2c <HW_IPCC_SYS_EvtNot+0x3c>)
 800ba18:	f000 f9e4 	bl	800bde4 <LST_is_empty>
 800ba1c:	4603      	mov	r3, r0
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d0ea      	beq.n	800b9f8 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800ba22:	bf00      	nop
}
 800ba24:	3708      	adds	r7, #8
 800ba26:	46bd      	mov	sp, r7
 800ba28:	bd80      	pop	{r7, pc}
 800ba2a:	bf00      	nop
 800ba2c:	200300d0 	.word	0x200300d0
 800ba30:	20000c88 	.word	0x20000c88

0800ba34 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800ba34:	b580      	push	{r7, lr}
 800ba36:	b082      	sub	sp, #8
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800ba3c:	4817      	ldr	r0, [pc, #92]	@ (800ba9c <TL_MM_Init+0x68>)
 800ba3e:	f000 f9c1 	bl	800bdc4 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800ba42:	4817      	ldr	r0, [pc, #92]	@ (800baa0 <TL_MM_Init+0x6c>)
 800ba44:	f000 f9be 	bl	800bdc4 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800ba48:	4b16      	ldr	r3, [pc, #88]	@ (800baa4 <TL_MM_Init+0x70>)
 800ba4a:	691b      	ldr	r3, [r3, #16]
 800ba4c:	4a16      	ldr	r2, [pc, #88]	@ (800baa8 <TL_MM_Init+0x74>)
 800ba4e:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800ba50:	4b15      	ldr	r3, [pc, #84]	@ (800baa8 <TL_MM_Init+0x74>)
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	687a      	ldr	r2, [r7, #4]
 800ba56:	6892      	ldr	r2, [r2, #8]
 800ba58:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800ba5a:	4b13      	ldr	r3, [pc, #76]	@ (800baa8 <TL_MM_Init+0x74>)
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	687a      	ldr	r2, [r7, #4]
 800ba60:	68d2      	ldr	r2, [r2, #12]
 800ba62:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800ba64:	4b10      	ldr	r3, [pc, #64]	@ (800baa8 <TL_MM_Init+0x74>)
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	4a0c      	ldr	r2, [pc, #48]	@ (800ba9c <TL_MM_Init+0x68>)
 800ba6a:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800ba6c:	4b0e      	ldr	r3, [pc, #56]	@ (800baa8 <TL_MM_Init+0x74>)
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	687a      	ldr	r2, [r7, #4]
 800ba72:	6812      	ldr	r2, [r2, #0]
 800ba74:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800ba76:	4b0c      	ldr	r3, [pc, #48]	@ (800baa8 <TL_MM_Init+0x74>)
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	687a      	ldr	r2, [r7, #4]
 800ba7c:	6852      	ldr	r2, [r2, #4]
 800ba7e:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800ba80:	4b09      	ldr	r3, [pc, #36]	@ (800baa8 <TL_MM_Init+0x74>)
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	687a      	ldr	r2, [r7, #4]
 800ba86:	6912      	ldr	r2, [r2, #16]
 800ba88:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800ba8a:	4b07      	ldr	r3, [pc, #28]	@ (800baa8 <TL_MM_Init+0x74>)
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	687a      	ldr	r2, [r7, #4]
 800ba90:	6952      	ldr	r2, [r2, #20]
 800ba92:	619a      	str	r2, [r3, #24]

  return;
 800ba94:	bf00      	nop
}
 800ba96:	3708      	adds	r7, #8
 800ba98:	46bd      	mov	sp, r7
 800ba9a:	bd80      	pop	{r7, pc}
 800ba9c:	200300b8 	.word	0x200300b8
 800baa0:	20000c74 	.word	0x20000c74
 800baa4:	20030000 	.word	0x20030000
 800baa8:	20000c8c 	.word	0x20000c8c

0800baac <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800baac:	b580      	push	{r7, lr}
 800baae:	b082      	sub	sp, #8
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800bab4:	6879      	ldr	r1, [r7, #4]
 800bab6:	4807      	ldr	r0, [pc, #28]	@ (800bad4 <TL_MM_EvtDone+0x28>)
 800bab8:	f000 f9dc 	bl	800be74 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800babc:	6879      	ldr	r1, [r7, #4]
 800babe:	2000      	movs	r0, #0
 800bac0:	f000 f862 	bl	800bb88 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800bac4:	4804      	ldr	r0, [pc, #16]	@ (800bad8 <TL_MM_EvtDone+0x2c>)
 800bac6:	f002 f8b5 	bl	800dc34 <HW_IPCC_MM_SendFreeBuf>

  return;
 800baca:	bf00      	nop
}
 800bacc:	3708      	adds	r7, #8
 800bace:	46bd      	mov	sp, r7
 800bad0:	bd80      	pop	{r7, pc}
 800bad2:	bf00      	nop
 800bad4:	20000c74 	.word	0x20000c74
 800bad8:	0800badd 	.word	0x0800badd

0800badc <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800badc:	b580      	push	{r7, lr}
 800bade:	b082      	sub	sp, #8
 800bae0:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800bae2:	e00c      	b.n	800bafe <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800bae4:	1d3b      	adds	r3, r7, #4
 800bae6:	4619      	mov	r1, r3
 800bae8:	480a      	ldr	r0, [pc, #40]	@ (800bb14 <SendFreeBuf+0x38>)
 800baea:	f000 fa0a 	bl	800bf02 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800baee:	4b0a      	ldr	r3, [pc, #40]	@ (800bb18 <SendFreeBuf+0x3c>)
 800baf0:	691b      	ldr	r3, [r3, #16]
 800baf2:	691b      	ldr	r3, [r3, #16]
 800baf4:	687a      	ldr	r2, [r7, #4]
 800baf6:	4611      	mov	r1, r2
 800baf8:	4618      	mov	r0, r3
 800bafa:	f000 f9bb 	bl	800be74 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800bafe:	4805      	ldr	r0, [pc, #20]	@ (800bb14 <SendFreeBuf+0x38>)
 800bb00:	f000 f970 	bl	800bde4 <LST_is_empty>
 800bb04:	4603      	mov	r3, r0
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d0ec      	beq.n	800bae4 <SendFreeBuf+0x8>
  }

  return;
 800bb0a:	bf00      	nop
}
 800bb0c:	3708      	adds	r7, #8
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	bd80      	pop	{r7, pc}
 800bb12:	bf00      	nop
 800bb14:	20000c74 	.word	0x20000c74
 800bb18:	20030000 	.word	0x20030000

0800bb1c <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800bb20:	4805      	ldr	r0, [pc, #20]	@ (800bb38 <TL_TRACES_Init+0x1c>)
 800bb22:	f000 f94f 	bl	800bdc4 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800bb26:	4b05      	ldr	r3, [pc, #20]	@ (800bb3c <TL_TRACES_Init+0x20>)
 800bb28:	695b      	ldr	r3, [r3, #20]
 800bb2a:	4a03      	ldr	r2, [pc, #12]	@ (800bb38 <TL_TRACES_Init+0x1c>)
 800bb2c:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800bb2e:	f002 f8d3 	bl	800dcd8 <HW_IPCC_TRACES_Init>

  return;
 800bb32:	bf00      	nop
}
 800bb34:	bd80      	pop	{r7, pc}
 800bb36:	bf00      	nop
 800bb38:	200300c0 	.word	0x200300c0
 800bb3c:	20030000 	.word	0x20030000

0800bb40 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800bb40:	b580      	push	{r7, lr}
 800bb42:	b082      	sub	sp, #8
 800bb44:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800bb46:	e008      	b.n	800bb5a <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800bb48:	1d3b      	adds	r3, r7, #4
 800bb4a:	4619      	mov	r1, r3
 800bb4c:	4808      	ldr	r0, [pc, #32]	@ (800bb70 <HW_IPCC_TRACES_EvtNot+0x30>)
 800bb4e:	f000 f9d8 	bl	800bf02 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	4618      	mov	r0, r3
 800bb56:	f000 f80d 	bl	800bb74 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800bb5a:	4805      	ldr	r0, [pc, #20]	@ (800bb70 <HW_IPCC_TRACES_EvtNot+0x30>)
 800bb5c:	f000 f942 	bl	800bde4 <LST_is_empty>
 800bb60:	4603      	mov	r3, r0
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d0f0      	beq.n	800bb48 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800bb66:	bf00      	nop
}
 800bb68:	3708      	adds	r7, #8
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	bd80      	pop	{r7, pc}
 800bb6e:	bf00      	nop
 800bb70:	200300c0 	.word	0x200300c0

0800bb74 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800bb74:	b480      	push	{r7}
 800bb76:	b083      	sub	sp, #12
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800bb7c:	bf00      	nop
 800bb7e:	370c      	adds	r7, #12
 800bb80:	46bd      	mov	sp, r7
 800bb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb86:	4770      	bx	lr

0800bb88 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800bb88:	b480      	push	{r7}
 800bb8a:	b087      	sub	sp, #28
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	4603      	mov	r3, r0
 800bb90:	6039      	str	r1, [r7, #0]
 800bb92:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;
  TL_EvtSerial_t *p_cmd_rsp_packet;

  switch(packet_type)
 800bb94:	79fb      	ldrb	r3, [r7, #7]
 800bb96:	2b06      	cmp	r3, #6
 800bb98:	d845      	bhi.n	800bc26 <OutputDbgTrace+0x9e>
 800bb9a:	a201      	add	r2, pc, #4	@ (adr r2, 800bba0 <OutputDbgTrace+0x18>)
 800bb9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bba0:	0800bbbd 	.word	0x0800bbbd
 800bba4:	0800bbe1 	.word	0x0800bbe1
 800bba8:	0800bbe7 	.word	0x0800bbe7
 800bbac:	0800bbfb 	.word	0x0800bbfb
 800bbb0:	0800bc07 	.word	0x0800bc07
 800bbb4:	0800bc0d 	.word	0x0800bc0d
 800bbb8:	0800bc1b 	.word	0x0800bc1b
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800bbbc:	683b      	ldr	r3, [r7, #0]
 800bbbe:	617b      	str	r3, [r7, #20]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800bbc0:	697b      	ldr	r3, [r7, #20]
 800bbc2:	7a5b      	ldrb	r3, [r3, #9]
 800bbc4:	2bff      	cmp	r3, #255	@ 0xff
 800bbc6:	d005      	beq.n	800bbd4 <OutputDbgTrace+0x4c>
 800bbc8:	2bff      	cmp	r3, #255	@ 0xff
 800bbca:	dc05      	bgt.n	800bbd8 <OutputDbgTrace+0x50>
 800bbcc:	2b0e      	cmp	r3, #14
 800bbce:	d005      	beq.n	800bbdc <OutputDbgTrace+0x54>
 800bbd0:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800bbd2:	e001      	b.n	800bbd8 <OutputDbgTrace+0x50>
          break;
 800bbd4:	bf00      	nop
 800bbd6:	e027      	b.n	800bc28 <OutputDbgTrace+0xa0>
          break;
 800bbd8:	bf00      	nop
 800bbda:	e025      	b.n	800bc28 <OutputDbgTrace+0xa0>
          break;
 800bbdc:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800bbde:	e023      	b.n	800bc28 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800bbe0:	683b      	ldr	r3, [r7, #0]
 800bbe2:	60fb      	str	r3, [r7, #12]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800bbe4:	e020      	b.n	800bc28 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800bbe6:	683b      	ldr	r3, [r7, #0]
 800bbe8:	617b      	str	r3, [r7, #20]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800bbea:	697b      	ldr	r3, [r7, #20]
 800bbec:	7a5b      	ldrb	r3, [r3, #9]
 800bbee:	2b0e      	cmp	r3, #14
 800bbf0:	d001      	beq.n	800bbf6 <OutputDbgTrace+0x6e>
 800bbf2:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800bbf4:	e000      	b.n	800bbf8 <OutputDbgTrace+0x70>
          break;
 800bbf6:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800bbf8:	e016      	b.n	800bc28 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800bbfa:	683b      	ldr	r3, [r7, #0]
 800bbfc:	617b      	str	r3, [r7, #20]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800bbfe:	697b      	ldr	r3, [r7, #20]
 800bc00:	7a5b      	ldrb	r3, [r3, #9]
 800bc02:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800bc04:	e010      	b.n	800bc28 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800bc06:	683b      	ldr	r3, [r7, #0]
 800bc08:	60fb      	str	r3, [r7, #12]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800bc0a:	e00d      	b.n	800bc28 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_cmd_rsp_packet = (TL_EvtSerial_t*)buffer;
 800bc0c:	683b      	ldr	r3, [r7, #0]
 800bc0e:	613b      	str	r3, [r7, #16]
      switch(p_cmd_rsp_packet->evt.evtcode)
 800bc10:	693b      	ldr	r3, [r7, #16]
 800bc12:	785b      	ldrb	r3, [r3, #1]
 800bc14:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_cmd_rsp_packet->evt.evtcode);
          break;
 800bc16:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_rsp_packet->evt, p_cmd_rsp_packet->evt.plen+TL_EVT_HDR_SIZE);
      break;
 800bc18:	e006      	b.n	800bc28 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800bc1a:	683b      	ldr	r3, [r7, #0]
 800bc1c:	617b      	str	r3, [r7, #20]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800bc1e:	697b      	ldr	r3, [r7, #20]
 800bc20:	7a5b      	ldrb	r3, [r3, #9]
 800bc22:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800bc24:	e000      	b.n	800bc28 <OutputDbgTrace+0xa0>

    default:
      break;
 800bc26:	bf00      	nop
  }

  return;
 800bc28:	bf00      	nop
}
 800bc2a:	371c      	adds	r7, #28
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc32:	4770      	bx	lr

0800bc34 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 800bc34:	b580      	push	{r7, lr}
 800bc36:	b086      	sub	sp, #24
 800bc38:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bc3a:	f3ef 8310 	mrs	r3, PRIMASK
 800bc3e:	60fb      	str	r3, [r7, #12]
  return(result);
 800bc40:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 800bc42:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800bc44:	b672      	cpsid	i
}
 800bc46:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 800bc48:	1cbb      	adds	r3, r7, #2
 800bc4a:	4619      	mov	r1, r3
 800bc4c:	4812      	ldr	r0, [pc, #72]	@ (800bc98 <DbgTrace_TxCpltCallback+0x64>)
 800bc4e:	f000 fb9d 	bl	800c38c <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 800bc52:	1cbb      	adds	r3, r7, #2
 800bc54:	4619      	mov	r1, r3
 800bc56:	4810      	ldr	r0, [pc, #64]	@ (800bc98 <DbgTrace_TxCpltCallback+0x64>)
 800bc58:	f000 fc87 	bl	800c56a <CircularQueue_Sense>
 800bc5c:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 800bc5e:	693b      	ldr	r3, [r7, #16]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d00c      	beq.n	800bc7e <DbgTrace_TxCpltCallback+0x4a>
 800bc64:	697b      	ldr	r3, [r7, #20]
 800bc66:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bc68:	68bb      	ldr	r3, [r7, #8]
 800bc6a:	f383 8810 	msr	PRIMASK, r3
}
 800bc6e:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 800bc70:	887b      	ldrh	r3, [r7, #2]
 800bc72:	4a0a      	ldr	r2, [pc, #40]	@ (800bc9c <DbgTrace_TxCpltCallback+0x68>)
 800bc74:	4619      	mov	r1, r3
 800bc76:	6938      	ldr	r0, [r7, #16]
 800bc78:	f7f4 ff72 	bl	8000b60 <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 800bc7c:	e008      	b.n	800bc90 <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 800bc7e:	4b08      	ldr	r3, [pc, #32]	@ (800bca0 <DbgTrace_TxCpltCallback+0x6c>)
 800bc80:	2201      	movs	r2, #1
 800bc82:	701a      	strb	r2, [r3, #0]
 800bc84:	697b      	ldr	r3, [r7, #20]
 800bc86:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	f383 8810 	msr	PRIMASK, r3
}
 800bc8e:	bf00      	nop
}
 800bc90:	bf00      	nop
 800bc92:	3718      	adds	r7, #24
 800bc94:	46bd      	mov	sp, r7
 800bc96:	bd80      	pop	{r7, pc}
 800bc98:	20000c90 	.word	0x20000c90
 800bc9c:	0800bc35 	.word	0x0800bc35
 800bca0:	20000021 	.word	0x20000021

0800bca4 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 800bca4:	b580      	push	{r7, lr}
 800bca6:	b084      	sub	sp, #16
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	60f8      	str	r0, [r7, #12]
 800bcac:	60b9      	str	r1, [r7, #8]
 800bcae:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 800bcb0:	687a      	ldr	r2, [r7, #4]
 800bcb2:	68b9      	ldr	r1, [r7, #8]
 800bcb4:	68f8      	ldr	r0, [r7, #12]
 800bcb6:	f000 f805 	bl	800bcc4 <DbgTraceWrite>
 800bcba:	4603      	mov	r3, r0
}
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	3710      	adds	r7, #16
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	bd80      	pop	{r7, pc}

0800bcc4 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	b08a      	sub	sp, #40	@ 0x28
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	60f8      	str	r0, [r7, #12]
 800bccc:	60b9      	str	r1, [r7, #8]
 800bcce:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bcd4:	f3ef 8310 	mrs	r3, PRIMASK
 800bcd8:	61bb      	str	r3, [r7, #24]
  return(result);
 800bcda:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 800bcdc:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bce4:	d102      	bne.n	800bcec <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 800bce6:	2300      	movs	r3, #0
 800bce8:	627b      	str	r3, [r7, #36]	@ 0x24
 800bcea:	e037      	b.n	800bd5c <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	2b01      	cmp	r3, #1
 800bcf0:	d006      	beq.n	800bd00 <DbgTraceWrite+0x3c>
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	2b02      	cmp	r3, #2
 800bcf6:	d003      	beq.n	800bd00 <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 800bcf8:	f04f 33ff 	mov.w	r3, #4294967295
 800bcfc:	627b      	str	r3, [r7, #36]	@ 0x24
 800bcfe:	e02d      	b.n	800bd5c <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d02a      	beq.n	800bd5c <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800bd0a:	b672      	cpsid	i
}
 800bd0c:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	b29a      	uxth	r2, r3
 800bd12:	2301      	movs	r3, #1
 800bd14:	68b9      	ldr	r1, [r7, #8]
 800bd16:	4814      	ldr	r0, [pc, #80]	@ (800bd68 <DbgTraceWrite+0xa4>)
 800bd18:	f000 f912 	bl	800bf40 <CircularQueue_Add>
 800bd1c:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 800bd1e:	69fb      	ldr	r3, [r7, #28]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d015      	beq.n	800bd50 <DbgTraceWrite+0x8c>
 800bd24:	4b11      	ldr	r3, [pc, #68]	@ (800bd6c <DbgTraceWrite+0xa8>)
 800bd26:	781b      	ldrb	r3, [r3, #0]
 800bd28:	b2db      	uxtb	r3, r3
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d010      	beq.n	800bd50 <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 800bd2e:	4b0f      	ldr	r3, [pc, #60]	@ (800bd6c <DbgTraceWrite+0xa8>)
 800bd30:	2200      	movs	r2, #0
 800bd32:	701a      	strb	r2, [r3, #0]
 800bd34:	6a3b      	ldr	r3, [r7, #32]
 800bd36:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bd38:	697b      	ldr	r3, [r7, #20]
 800bd3a:	f383 8810 	msr	PRIMASK, r3
}
 800bd3e:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	b29b      	uxth	r3, r3
 800bd44:	4a0a      	ldr	r2, [pc, #40]	@ (800bd70 <DbgTraceWrite+0xac>)
 800bd46:	4619      	mov	r1, r3
 800bd48:	69f8      	ldr	r0, [r7, #28]
 800bd4a:	f7f4 ff09 	bl	8000b60 <DbgOutputTraces>
 800bd4e:	e005      	b.n	800bd5c <DbgTraceWrite+0x98>
 800bd50:	6a3b      	ldr	r3, [r7, #32]
 800bd52:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bd54:	693b      	ldr	r3, [r7, #16]
 800bd56:	f383 8810 	msr	PRIMASK, r3
}
 800bd5a:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 800bd5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800bd5e:	4618      	mov	r0, r3
 800bd60:	3728      	adds	r7, #40	@ 0x28
 800bd62:	46bd      	mov	sp, r7
 800bd64:	bd80      	pop	{r7, pc}
 800bd66:	bf00      	nop
 800bd68:	20000c90 	.word	0x20000c90
 800bd6c:	20000021 	.word	0x20000021
 800bd70:	0800bc35 	.word	0x0800bc35

0800bd74 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800bd74:	b480      	push	{r7}
 800bd76:	b085      	sub	sp, #20
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	4603      	mov	r3, r0
 800bd7c:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800bd7e:	4b0f      	ldr	r3, [pc, #60]	@ (800bdbc <OTP_Read+0x48>)
 800bd80:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800bd82:	e002      	b.n	800bd8a <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	3b08      	subs	r3, #8
 800bd88:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	3307      	adds	r3, #7
 800bd8e:	781b      	ldrb	r3, [r3, #0]
 800bd90:	79fa      	ldrb	r2, [r7, #7]
 800bd92:	429a      	cmp	r2, r3
 800bd94:	d003      	beq.n	800bd9e <OTP_Read+0x2a>
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	4a09      	ldr	r2, [pc, #36]	@ (800bdc0 <OTP_Read+0x4c>)
 800bd9a:	4293      	cmp	r3, r2
 800bd9c:	d1f2      	bne.n	800bd84 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	3307      	adds	r3, #7
 800bda2:	781b      	ldrb	r3, [r3, #0]
 800bda4:	79fa      	ldrb	r2, [r7, #7]
 800bda6:	429a      	cmp	r2, r3
 800bda8:	d001      	beq.n	800bdae <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800bdaa:	2300      	movs	r3, #0
 800bdac:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800bdae:	68fb      	ldr	r3, [r7, #12]
}
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	3714      	adds	r7, #20
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdba:	4770      	bx	lr
 800bdbc:	1fff73f8 	.word	0x1fff73f8
 800bdc0:	1fff7000 	.word	0x1fff7000

0800bdc4 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800bdc4:	b480      	push	{r7}
 800bdc6:	b083      	sub	sp, #12
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	687a      	ldr	r2, [r7, #4]
 800bdd0:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	687a      	ldr	r2, [r7, #4]
 800bdd6:	605a      	str	r2, [r3, #4]
}
 800bdd8:	bf00      	nop
 800bdda:	370c      	adds	r7, #12
 800bddc:	46bd      	mov	sp, r7
 800bdde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde2:	4770      	bx	lr

0800bde4 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800bde4:	b480      	push	{r7}
 800bde6:	b087      	sub	sp, #28
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bdec:	f3ef 8310 	mrs	r3, PRIMASK
 800bdf0:	60fb      	str	r3, [r7, #12]
  return(result);
 800bdf2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800bdf4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800bdf6:	b672      	cpsid	i
}
 800bdf8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	687a      	ldr	r2, [r7, #4]
 800be00:	429a      	cmp	r2, r3
 800be02:	d102      	bne.n	800be0a <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800be04:	2301      	movs	r3, #1
 800be06:	75fb      	strb	r3, [r7, #23]
 800be08:	e001      	b.n	800be0e <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800be0a:	2300      	movs	r3, #0
 800be0c:	75fb      	strb	r3, [r7, #23]
 800be0e:	693b      	ldr	r3, [r7, #16]
 800be10:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800be12:	68bb      	ldr	r3, [r7, #8]
 800be14:	f383 8810 	msr	PRIMASK, r3
}
 800be18:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800be1a:	7dfb      	ldrb	r3, [r7, #23]
}
 800be1c:	4618      	mov	r0, r3
 800be1e:	371c      	adds	r7, #28
 800be20:	46bd      	mov	sp, r7
 800be22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be26:	4770      	bx	lr

0800be28 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800be28:	b480      	push	{r7}
 800be2a:	b087      	sub	sp, #28
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
 800be30:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800be32:	f3ef 8310 	mrs	r3, PRIMASK
 800be36:	60fb      	str	r3, [r7, #12]
  return(result);
 800be38:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800be3a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800be3c:	b672      	cpsid	i
}
 800be3e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	681a      	ldr	r2, [r3, #0]
 800be44:	683b      	ldr	r3, [r7, #0]
 800be46:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800be48:	683b      	ldr	r3, [r7, #0]
 800be4a:	687a      	ldr	r2, [r7, #4]
 800be4c:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	683a      	ldr	r2, [r7, #0]
 800be52:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800be54:	683b      	ldr	r3, [r7, #0]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	683a      	ldr	r2, [r7, #0]
 800be5a:	605a      	str	r2, [r3, #4]
 800be5c:	697b      	ldr	r3, [r7, #20]
 800be5e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800be60:	693b      	ldr	r3, [r7, #16]
 800be62:	f383 8810 	msr	PRIMASK, r3
}
 800be66:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800be68:	bf00      	nop
 800be6a:	371c      	adds	r7, #28
 800be6c:	46bd      	mov	sp, r7
 800be6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be72:	4770      	bx	lr

0800be74 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800be74:	b480      	push	{r7}
 800be76:	b087      	sub	sp, #28
 800be78:	af00      	add	r7, sp, #0
 800be7a:	6078      	str	r0, [r7, #4]
 800be7c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800be7e:	f3ef 8310 	mrs	r3, PRIMASK
 800be82:	60fb      	str	r3, [r7, #12]
  return(result);
 800be84:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800be86:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800be88:	b672      	cpsid	i
}
 800be8a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800be8c:	683b      	ldr	r3, [r7, #0]
 800be8e:	687a      	ldr	r2, [r7, #4]
 800be90:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	685a      	ldr	r2, [r3, #4]
 800be96:	683b      	ldr	r3, [r7, #0]
 800be98:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	683a      	ldr	r2, [r7, #0]
 800be9e:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800bea0:	683b      	ldr	r3, [r7, #0]
 800bea2:	685b      	ldr	r3, [r3, #4]
 800bea4:	683a      	ldr	r2, [r7, #0]
 800bea6:	601a      	str	r2, [r3, #0]
 800bea8:	697b      	ldr	r3, [r7, #20]
 800beaa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800beac:	693b      	ldr	r3, [r7, #16]
 800beae:	f383 8810 	msr	PRIMASK, r3
}
 800beb2:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800beb4:	bf00      	nop
 800beb6:	371c      	adds	r7, #28
 800beb8:	46bd      	mov	sp, r7
 800beba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bebe:	4770      	bx	lr

0800bec0 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800bec0:	b480      	push	{r7}
 800bec2:	b087      	sub	sp, #28
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bec8:	f3ef 8310 	mrs	r3, PRIMASK
 800becc:	60fb      	str	r3, [r7, #12]
  return(result);
 800bece:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800bed0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800bed2:	b672      	cpsid	i
}
 800bed4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	685b      	ldr	r3, [r3, #4]
 800beda:	687a      	ldr	r2, [r7, #4]
 800bedc:	6812      	ldr	r2, [r2, #0]
 800bede:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	687a      	ldr	r2, [r7, #4]
 800bee6:	6852      	ldr	r2, [r2, #4]
 800bee8:	605a      	str	r2, [r3, #4]
 800beea:	697b      	ldr	r3, [r7, #20]
 800beec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800beee:	693b      	ldr	r3, [r7, #16]
 800bef0:	f383 8810 	msr	PRIMASK, r3
}
 800bef4:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800bef6:	bf00      	nop
 800bef8:	371c      	adds	r7, #28
 800befa:	46bd      	mov	sp, r7
 800befc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf00:	4770      	bx	lr

0800bf02 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800bf02:	b580      	push	{r7, lr}
 800bf04:	b086      	sub	sp, #24
 800bf06:	af00      	add	r7, sp, #0
 800bf08:	6078      	str	r0, [r7, #4]
 800bf0a:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bf0c:	f3ef 8310 	mrs	r3, PRIMASK
 800bf10:	60fb      	str	r3, [r7, #12]
  return(result);
 800bf12:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800bf14:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800bf16:	b672      	cpsid	i
}
 800bf18:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	681a      	ldr	r2, [r3, #0]
 800bf1e:	683b      	ldr	r3, [r7, #0]
 800bf20:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	4618      	mov	r0, r3
 800bf28:	f7ff ffca 	bl	800bec0 <LST_remove_node>
 800bf2c:	697b      	ldr	r3, [r7, #20]
 800bf2e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bf30:	693b      	ldr	r3, [r7, #16]
 800bf32:	f383 8810 	msr	PRIMASK, r3
}
 800bf36:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800bf38:	bf00      	nop
 800bf3a:	3718      	adds	r7, #24
 800bf3c:	46bd      	mov	sp, r7
 800bf3e:	bd80      	pop	{r7, pc}

0800bf40 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b08e      	sub	sp, #56	@ 0x38
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	60f8      	str	r0, [r7, #12]
 800bf48:	60b9      	str	r1, [r7, #8]
 800bf4a:	603b      	str	r3, [r7, #0]
 800bf4c:	4613      	mov	r3, r2
 800bf4e:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 800bf50:	2300      	movs	r3, #0
 800bf52:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 800bf54:	2300      	movs	r3, #0
 800bf56:	86fb      	strh	r3, [r7, #54]	@ 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size element (q->elementsize == 0) */
 800bf58:	2300      	movs	r3, #0
 800bf5a:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 800bf5c:	2300      	movs	r3, #0
 800bf5e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bf60:	2300      	movs	r3, #0
 800bf62:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 800bf64:	2300      	movs	r3, #0
 800bf66:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicate size of parta of element that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 800bf68:	2300      	movs	r3, #0
 800bf6a:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	891b      	ldrh	r3, [r3, #8]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d101      	bne.n	800bf78 <CircularQueue_Add+0x38>
 800bf74:	2302      	movs	r3, #2
 800bf76:	e000      	b.n	800bf7a <CircularQueue_Add+0x3a>
 800bf78:	2300      	movs	r3, #0
 800bf7a:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	695b      	ldr	r3, [r3, #20]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d029      	beq.n	800bfd8 <CircularQueue_Add+0x98>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	891b      	ldrh	r3, [r3, #8]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d122      	bne.n	800bfd2 <CircularQueue_Add+0x92>
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	681a      	ldr	r2, [r3, #0]
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	691b      	ldr	r3, [r3, #16]
 800bf94:	4413      	add	r3, r2
 800bf96:	781b      	ldrb	r3, [r3, #0]
 800bf98:	4618      	mov	r0, r3
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	681a      	ldr	r2, [r3, #0]
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	691b      	ldr	r3, [r3, #16]
 800bfa2:	1c59      	adds	r1, r3, #1
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	685b      	ldr	r3, [r3, #4]
 800bfa8:	4299      	cmp	r1, r3
 800bfaa:	d306      	bcc.n	800bfba <CircularQueue_Add+0x7a>
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	6919      	ldr	r1, [r3, #16]
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	685b      	ldr	r3, [r3, #4]
 800bfb4:	1acb      	subs	r3, r1, r3
 800bfb6:	3301      	adds	r3, #1
 800bfb8:	e002      	b.n	800bfc0 <CircularQueue_Add+0x80>
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	691b      	ldr	r3, [r3, #16]
 800bfbe:	3301      	adds	r3, #1
 800bfc0:	4413      	add	r3, r2
 800bfc2:	781b      	ldrb	r3, [r3, #0]
 800bfc4:	021b      	lsls	r3, r3, #8
 800bfc6:	b29b      	uxth	r3, r3
 800bfc8:	4403      	add	r3, r0
 800bfca:	b29b      	uxth	r3, r3
 800bfcc:	3302      	adds	r3, #2
 800bfce:	b29b      	uxth	r3, r3
 800bfd0:	e001      	b.n	800bfd6 <CircularQueue_Add+0x96>
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	891b      	ldrh	r3, [r3, #8]
 800bfd6:	86fb      	strh	r3, [r7, #54]	@ 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	891b      	ldrh	r3, [r3, #8]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d002      	beq.n	800bfe6 <CircularQueue_Add+0xa6>
  {
    elementSize = q->elementSize;
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	891b      	ldrh	r3, [r3, #8]
 800bfe4:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	691a      	ldr	r2, [r3, #16]
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	68db      	ldr	r3, [r3, #12]
 800bfee:	429a      	cmp	r2, r3
 800bff0:	d307      	bcc.n	800c002 <CircularQueue_Add+0xc2>
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	685a      	ldr	r2, [r3, #4]
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	6919      	ldr	r1, [r3, #16]
 800bffa:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800bffc:	440b      	add	r3, r1
 800bffe:	1ad3      	subs	r3, r2, r3
 800c000:	e000      	b.n	800c004 <CircularQueue_Add+0xc4>
 800c002:	2300      	movs	r3, #0
 800c004:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 800c006:	88fa      	ldrh	r2, [r7, #6]
 800c008:	7ffb      	ldrb	r3, [r7, #31]
 800c00a:	4413      	add	r3, r2
 800c00c:	461a      	mov	r2, r3
 800c00e:	683b      	ldr	r3, [r7, #0]
 800c010:	fb02 f303 	mul.w	r3, r2, r3
 800c014:	69ba      	ldr	r2, [r7, #24]
 800c016:	429a      	cmp	r2, r3
 800c018:	d80b      	bhi.n	800c032 <CircularQueue_Add+0xf2>
 800c01a:	88fa      	ldrh	r2, [r7, #6]
 800c01c:	7ffb      	ldrb	r3, [r7, #31]
 800c01e:	4413      	add	r3, r2
 800c020:	461a      	mov	r2, r3
 800c022:	69bb      	ldr	r3, [r7, #24]
 800c024:	fbb3 f1f2 	udiv	r1, r3, r2
 800c028:	fb01 f202 	mul.w	r2, r1, r2
 800c02c:	1a9b      	subs	r3, r3, r2
 800c02e:	b2db      	uxtb	r3, r3
 800c030:	e000      	b.n	800c034 <CircularQueue_Add+0xf4>
 800c032:	2300      	movs	r3, #0
 800c034:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 800c036:	7dfa      	ldrb	r2, [r7, #23]
 800c038:	7ffb      	ldrb	r3, [r7, #31]
 800c03a:	429a      	cmp	r2, r3
 800c03c:	bf8c      	ite	hi
 800c03e:	2301      	movhi	r3, #1
 800c040:	2300      	movls	r3, #0
 800c042:	b2db      	uxtb	r3, r3
 800c044:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 800c046:	7fbb      	ldrb	r3, [r7, #30]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d008      	beq.n	800c05e <CircularQueue_Add+0x11e>
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	7f1b      	ldrb	r3, [r3, #28]
 800c050:	f003 0301 	and.w	r3, r3, #1
 800c054:	2b00      	cmp	r3, #0
 800c056:	d002      	beq.n	800c05e <CircularQueue_Add+0x11e>
 800c058:	7dfb      	ldrb	r3, [r7, #23]
 800c05a:	b29b      	uxth	r3, r3
 800c05c:	e000      	b.n	800c060 <CircularQueue_Add+0x120>
 800c05e:	8bbb      	ldrh	r3, [r7, #28]
 800c060:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 800c062:	7fbb      	ldrb	r3, [r7, #30]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d008      	beq.n	800c07a <CircularQueue_Add+0x13a>
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	7f1b      	ldrb	r3, [r3, #28]
 800c06c:	f003 0302 	and.w	r3, r3, #2
 800c070:	2b00      	cmp	r3, #0
 800c072:	d002      	beq.n	800c07a <CircularQueue_Add+0x13a>
 800c074:	7ffb      	ldrb	r3, [r7, #31]
 800c076:	b29b      	uxth	r3, r3
 800c078:	e000      	b.n	800c07c <CircularQueue_Add+0x13c>
 800c07a:	8bbb      	ldrh	r3, [r7, #28]
 800c07c:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 800c07e:	88fb      	ldrh	r3, [r7, #6]
 800c080:	2b00      	cmp	r3, #0
 800c082:	f000 817e 	beq.w	800c382 <CircularQueue_Add+0x442>
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	695a      	ldr	r2, [r3, #20]
 800c08a:	88f9      	ldrh	r1, [r7, #6]
 800c08c:	7ffb      	ldrb	r3, [r7, #31]
 800c08e:	440b      	add	r3, r1
 800c090:	4619      	mov	r1, r3
 800c092:	683b      	ldr	r3, [r7, #0]
 800c094:	fb01 f303 	mul.w	r3, r1, r3
 800c098:	441a      	add	r2, r3
 800c09a:	8bbb      	ldrh	r3, [r7, #28]
 800c09c:	441a      	add	r2, r3
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	685b      	ldr	r3, [r3, #4]
 800c0a2:	429a      	cmp	r2, r3
 800c0a4:	f200 816d 	bhi.w	800c382 <CircularQueue_Add+0x442>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c0ac:	e14a      	b.n	800c344 <CircularQueue_Add+0x404>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	691a      	ldr	r2, [r3, #16]
 800c0b2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c0b4:	441a      	add	r2, r3
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	685b      	ldr	r3, [r3, #4]
 800c0ba:	429a      	cmp	r2, r3
 800c0bc:	d307      	bcc.n	800c0ce <CircularQueue_Add+0x18e>
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	691a      	ldr	r2, [r3, #16]
 800c0c2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c0c4:	441a      	add	r2, r3
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	685b      	ldr	r3, [r3, #4]
 800c0ca:	1ad3      	subs	r3, r2, r3
 800c0cc:	e003      	b.n	800c0d6 <CircularQueue_Add+0x196>
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	691a      	ldr	r2, [r3, #16]
 800c0d2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c0d4:	4413      	add	r3, r2
 800c0d6:	68fa      	ldr	r2, [r7, #12]
 800c0d8:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	691b      	ldr	r3, [r3, #16]
 800c0de:	633b      	str	r3, [r7, #48]	@ 0x30
      
      /* store the element  */
      /* store first the element size if element size is variable */
      if (q->elementSize == 0) 
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	891b      	ldrh	r3, [r3, #8]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d130      	bne.n	800c14a <CircularQueue_Add+0x20a>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	681a      	ldr	r2, [r3, #0]
 800c0ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0ee:	1c59      	adds	r1, r3, #1
 800c0f0:	6339      	str	r1, [r7, #48]	@ 0x30
 800c0f2:	4413      	add	r3, r2
 800c0f4:	88fa      	ldrh	r2, [r7, #6]
 800c0f6:	b2d2      	uxtb	r2, r2
 800c0f8:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	685b      	ldr	r3, [r3, #4]
 800c0fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c100:	429a      	cmp	r2, r3
 800c102:	d304      	bcc.n	800c10e <CircularQueue_Add+0x1ce>
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	685b      	ldr	r3, [r3, #4]
 800c108:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c10a:	1ad3      	subs	r3, r2, r3
 800c10c:	e000      	b.n	800c110 <CircularQueue_Add+0x1d0>
 800c10e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c110:	633b      	str	r3, [r7, #48]	@ 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 800c112:	88fb      	ldrh	r3, [r7, #6]
 800c114:	0a1b      	lsrs	r3, r3, #8
 800c116:	b298      	uxth	r0, r3
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	681a      	ldr	r2, [r3, #0]
 800c11c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c11e:	1c59      	adds	r1, r3, #1
 800c120:	6339      	str	r1, [r7, #48]	@ 0x30
 800c122:	4413      	add	r3, r2
 800c124:	b2c2      	uxtb	r2, r0
 800c126:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	685b      	ldr	r3, [r3, #4]
 800c12c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c12e:	429a      	cmp	r2, r3
 800c130:	d304      	bcc.n	800c13c <CircularQueue_Add+0x1fc>
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	685b      	ldr	r3, [r3, #4]
 800c136:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c138:	1ad3      	subs	r3, r2, r3
 800c13a:	e000      	b.n	800c13e <CircularQueue_Add+0x1fe>
 800c13c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c13e:	633b      	str	r3, [r7, #48]	@ 0x30
        q->byteCount += 2;
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	695b      	ldr	r3, [r3, #20]
 800c144:	1c9a      	adds	r2, r3, #2
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 800c14a:	88fa      	ldrh	r2, [r7, #6]
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	6859      	ldr	r1, [r3, #4]
 800c150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c152:	1acb      	subs	r3, r1, r3
 800c154:	4293      	cmp	r3, r2
 800c156:	bf28      	it	cs
 800c158:	4613      	movcs	r3, r2
 800c15a:	62bb      	str	r3, [r7, #40]	@ 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In this case part of data will copied at the end of the buffer and the rest a the beginning */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 800c15c:	88fb      	ldrh	r3, [r7, #6]
 800c15e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c160:	429a      	cmp	r2, r3
 800c162:	d007      	beq.n	800c174 <CircularQueue_Add+0x234>
 800c164:	88fb      	ldrh	r3, [r7, #6]
 800c166:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c168:	429a      	cmp	r2, r3
 800c16a:	d225      	bcs.n	800c1b8 <CircularQueue_Add+0x278>
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	7f1b      	ldrb	r3, [r3, #28]
 800c170:	2b00      	cmp	r3, #0
 800c172:	d121      	bne.n	800c1b8 <CircularQueue_Add+0x278>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	681a      	ldr	r2, [r3, #0]
 800c178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c17a:	18d0      	adds	r0, r2, r3
 800c17c:	88fb      	ldrh	r3, [r7, #6]
 800c17e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c180:	fb02 f303 	mul.w	r3, r2, r3
 800c184:	68ba      	ldr	r2, [r7, #8]
 800c186:	4413      	add	r3, r2
 800c188:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c18a:	4619      	mov	r1, r3
 800c18c:	f002 fad1 	bl	800e732 <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	695a      	ldr	r2, [r3, #20]
 800c194:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c196:	441a      	add	r2, r3
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 800c19c:	2300      	movs	r3, #0
 800c19e:	633b      	str	r3, [r7, #48]	@ 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 800c1a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1a2:	627b      	str	r3, [r7, #36]	@ 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 800c1a4:	88fa      	ldrh	r2, [r7, #6]
 800c1a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1a8:	1ad3      	subs	r3, r2, r3
 800c1aa:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* set the current element Size, will be used to calaculate next last position at beginning of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 800c1ac:	7ffb      	ldrb	r3, [r7, #31]
 800c1ae:	b29a      	uxth	r2, r3
 800c1b0:	88fb      	ldrh	r3, [r7, #6]
 800c1b2:	4413      	add	r3, r2
 800c1b4:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800c1b6:	e0a4      	b.n	800c302 <CircularQueue_Add+0x3c2>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 800c1b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	f000 80a1 	beq.w	800c302 <CircularQueue_Add+0x3c2>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	7f1b      	ldrb	r3, [r3, #28]
 800c1c4:	f003 0301 	and.w	r3, r3, #1
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d03a      	beq.n	800c242 <CircularQueue_Add+0x302>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	891b      	ldrh	r3, [r3, #8]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d10d      	bne.n	800c1f0 <CircularQueue_Add+0x2b0>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	681a      	ldr	r2, [r3, #0]
 800c1d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1da:	3b02      	subs	r3, #2
 800c1dc:	4413      	add	r3, r2
 800c1de:	22ff      	movs	r2, #255	@ 0xff
 800c1e0:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	681a      	ldr	r2, [r3, #0]
 800c1e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1e8:	3b01      	subs	r3, #1
 800c1ea:	4413      	add	r3, r2
 800c1ec:	22ff      	movs	r2, #255	@ 0xff
 800c1ee:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	695a      	ldr	r2, [r3, #20]
 800c1f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1f6:	441a      	add	r2, r3
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	627b      	str	r3, [r7, #36]	@ 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 800c200:	88fb      	ldrh	r3, [r7, #6]
 800c202:	62bb      	str	r3, [r7, #40]	@ 0x28
          /* Wrap */
          curBuffPosition = 0; 
 800c204:	2300      	movs	r3, #0
 800c206:	633b      	str	r3, [r7, #48]	@ 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	891b      	ldrh	r3, [r3, #8]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d16f      	bne.n	800c2f0 <CircularQueue_Add+0x3b0>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	681a      	ldr	r2, [r3, #0]
 800c214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c216:	1c59      	adds	r1, r3, #1
 800c218:	6339      	str	r1, [r7, #48]	@ 0x30
 800c21a:	4413      	add	r3, r2
 800c21c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c21e:	b2d2      	uxtb	r2, r2
 800c220:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800c222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c224:	0a18      	lsrs	r0, r3, #8
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	681a      	ldr	r2, [r3, #0]
 800c22a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c22c:	1c59      	adds	r1, r3, #1
 800c22e:	6339      	str	r1, [r7, #48]	@ 0x30
 800c230:	4413      	add	r3, r2
 800c232:	b2c2      	uxtb	r2, r0
 800c234:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	695b      	ldr	r3, [r3, #20]
 800c23a:	1c9a      	adds	r2, r3, #2
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	615a      	str	r2, [r3, #20]
 800c240:	e056      	b.n	800c2f0 <CircularQueue_Add+0x3b0>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	7f1b      	ldrb	r3, [r3, #28]
 800c246:	f003 0302 	and.w	r3, r3, #2
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d050      	beq.n	800c2f0 <CircularQueue_Add+0x3b0>
        {
          if (q->elementSize == 0)
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	891b      	ldrh	r3, [r3, #8]
 800c252:	2b00      	cmp	r3, #0
 800c254:	d14a      	bne.n	800c2ec <CircularQueue_Add+0x3ac>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	681a      	ldr	r2, [r3, #0]
 800c25a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c25c:	3b02      	subs	r3, #2
 800c25e:	4413      	add	r3, r2
 800c260:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c262:	b2d2      	uxtb	r2, r2
 800c264:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800c266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c268:	0a19      	lsrs	r1, r3, #8
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	681a      	ldr	r2, [r3, #0]
 800c26e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c270:	3b01      	subs	r3, #1
 800c272:	4413      	add	r3, r2
 800c274:	b2ca      	uxtb	r2, r1
 800c276:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	681a      	ldr	r2, [r3, #0]
 800c27c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c27e:	18d0      	adds	r0, r2, r3
 800c280:	88fb      	ldrh	r3, [r7, #6]
 800c282:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c284:	fb02 f303 	mul.w	r3, r2, r3
 800c288:	68ba      	ldr	r2, [r7, #8]
 800c28a:	4413      	add	r3, r2
 800c28c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c28e:	4619      	mov	r1, r3
 800c290:	f002 fa4f 	bl	800e732 <memcpy>
             q->byteCount += NbBytesToCopy; 
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	695a      	ldr	r2, [r3, #20]
 800c298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c29a:	441a      	add	r2, r3
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 800c2a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2a2:	627b      	str	r3, [r7, #36]	@ 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 800c2a4:	88fa      	ldrh	r2, [r7, #6]
 800c2a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2a8:	1ad3      	subs	r3, r2, r3
 800c2aa:	62bb      	str	r3, [r7, #40]	@ 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	699b      	ldr	r3, [r3, #24]
 800c2b0:	1c5a      	adds	r2, r3, #1
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	633b      	str	r3, [r7, #48]	@ 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	681a      	ldr	r2, [r3, #0]
 800c2be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2c0:	1c59      	adds	r1, r3, #1
 800c2c2:	6339      	str	r1, [r7, #48]	@ 0x30
 800c2c4:	4413      	add	r3, r2
 800c2c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c2c8:	b2d2      	uxtb	r2, r2
 800c2ca:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800c2cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2ce:	0a18      	lsrs	r0, r3, #8
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	681a      	ldr	r2, [r3, #0]
 800c2d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2d6:	1c59      	adds	r1, r3, #1
 800c2d8:	6339      	str	r1, [r7, #48]	@ 0x30
 800c2da:	4413      	add	r3, r2
 800c2dc:	b2c2      	uxtb	r2, r0
 800c2de:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	695b      	ldr	r3, [r3, #20]
 800c2e4:	1c9a      	adds	r2, r3, #2
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	615a      	str	r2, [r3, #20]
 800c2ea:	e001      	b.n	800c2f0 <CircularQueue_Add+0x3b0>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	e049      	b.n	800c384 <CircularQueue_Add+0x444>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 800c2f0:	7ffb      	ldrb	r3, [r7, #31]
 800c2f2:	b29a      	uxth	r2, r3
 800c2f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2f6:	b29b      	uxth	r3, r3
 800c2f8:	4413      	add	r3, r2
 800c2fa:	86fb      	strh	r3, [r7, #54]	@ 0x36
        q->last = 0;        
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	2200      	movs	r2, #0
 800c300:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaining byte to copy */
      if (NbBytesToCopy)      
 800c302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c304:	2b00      	cmp	r3, #0
 800c306:	d015      	beq.n	800c334 <CircularQueue_Add+0x3f4>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	681a      	ldr	r2, [r3, #0]
 800c30c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c30e:	18d0      	adds	r0, r2, r3
 800c310:	88fb      	ldrh	r3, [r7, #6]
 800c312:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c314:	fb03 f202 	mul.w	r2, r3, r2
 800c318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c31a:	4413      	add	r3, r2
 800c31c:	68ba      	ldr	r2, [r7, #8]
 800c31e:	4413      	add	r3, r2
 800c320:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c322:	4619      	mov	r1, r3
 800c324:	f002 fa05 	bl	800e732 <memcpy>
        q->byteCount += NbBytesToCopy;
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	695a      	ldr	r2, [r3, #20]
 800c32c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c32e:	441a      	add	r2, r3
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	699b      	ldr	r3, [r3, #24]
 800c338:	1c5a      	adds	r2, r3, #1
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 800c33e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c340:	3301      	adds	r3, #1
 800c342:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c344:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c346:	683b      	ldr	r3, [r7, #0]
 800c348:	429a      	cmp	r2, r3
 800c34a:	f4ff aeb0 	bcc.w	800c0ae <CircularQueue_Add+0x16e>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	681a      	ldr	r2, [r3, #0]
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	6919      	ldr	r1, [r3, #16]
 800c356:	7ffb      	ldrb	r3, [r7, #31]
 800c358:	4419      	add	r1, r3
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	685b      	ldr	r3, [r3, #4]
 800c35e:	4299      	cmp	r1, r3
 800c360:	d307      	bcc.n	800c372 <CircularQueue_Add+0x432>
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	6919      	ldr	r1, [r3, #16]
 800c366:	7ffb      	ldrb	r3, [r7, #31]
 800c368:	4419      	add	r1, r3
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	685b      	ldr	r3, [r3, #4]
 800c36e:	1acb      	subs	r3, r1, r3
 800c370:	e003      	b.n	800c37a <CircularQueue_Add+0x43a>
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	6919      	ldr	r1, [r3, #16]
 800c376:	7ffb      	ldrb	r3, [r7, #31]
 800c378:	440b      	add	r3, r1
 800c37a:	4413      	add	r3, r2
 800c37c:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 800c37e:	6a3b      	ldr	r3, [r7, #32]
 800c380:	e000      	b.n	800c384 <CircularQueue_Add+0x444>
    return NULL;
 800c382:	2300      	movs	r3, #0
}
 800c384:	4618      	mov	r0, r3
 800c386:	3738      	adds	r7, #56	@ 0x38
 800c388:	46bd      	mov	sp, r7
 800c38a:	bd80      	pop	{r7, pc}

0800c38c <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 800c38c:	b480      	push	{r7}
 800c38e:	b085      	sub	sp, #20
 800c390:	af00      	add	r7, sp, #0
 800c392:	6078      	str	r0, [r7, #4]
 800c394:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800c396:	2300      	movs	r3, #0
 800c398:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 800c39a:	2300      	movs	r3, #0
 800c39c:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	891b      	ldrh	r3, [r3, #8]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d101      	bne.n	800c3aa <CircularQueue_Remove+0x1e>
 800c3a6:	2302      	movs	r3, #2
 800c3a8:	e000      	b.n	800c3ac <CircularQueue_Remove+0x20>
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	695b      	ldr	r3, [r3, #20]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	f000 80ca 	beq.w	800c550 <CircularQueue_Remove+0x1c4>
  {
    /* retrieve element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	891b      	ldrh	r3, [r3, #8]
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d120      	bne.n	800c406 <CircularQueue_Remove+0x7a>
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	681a      	ldr	r2, [r3, #0]
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	68db      	ldr	r3, [r3, #12]
 800c3cc:	4413      	add	r3, r2
 800c3ce:	781b      	ldrb	r3, [r3, #0]
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	681a      	ldr	r2, [r3, #0]
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	68db      	ldr	r3, [r3, #12]
 800c3da:	1c59      	adds	r1, r3, #1
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	685b      	ldr	r3, [r3, #4]
 800c3e0:	4299      	cmp	r1, r3
 800c3e2:	d306      	bcc.n	800c3f2 <CircularQueue_Remove+0x66>
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	68d9      	ldr	r1, [r3, #12]
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	685b      	ldr	r3, [r3, #4]
 800c3ec:	1acb      	subs	r3, r1, r3
 800c3ee:	3301      	adds	r3, #1
 800c3f0:	e002      	b.n	800c3f8 <CircularQueue_Remove+0x6c>
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	68db      	ldr	r3, [r3, #12]
 800c3f6:	3301      	adds	r3, #1
 800c3f8:	4413      	add	r3, r2
 800c3fa:	781b      	ldrb	r3, [r3, #0]
 800c3fc:	021b      	lsls	r3, r3, #8
 800c3fe:	b29b      	uxth	r3, r3
 800c400:	4403      	add	r3, r0
 800c402:	b29b      	uxth	r3, r3
 800c404:	e001      	b.n	800c40a <CircularQueue_Remove+0x7e>
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	891b      	ldrh	r3, [r3, #8]
 800c40a:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	7f1b      	ldrb	r3, [r3, #28]
 800c410:	f003 0301 	and.w	r3, r3, #1
 800c414:	2b00      	cmp	r3, #0
 800c416:	d056      	beq.n	800c4c6 <CircularQueue_Remove+0x13a>
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	7f1b      	ldrb	r3, [r3, #28]
 800c41c:	f003 0302 	and.w	r3, r3, #2
 800c420:	2b00      	cmp	r3, #0
 800c422:	d150      	bne.n	800c4c6 <CircularQueue_Remove+0x13a>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800c424:	897b      	ldrh	r3, [r7, #10]
 800c426:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c42a:	4293      	cmp	r3, r2
 800c42c:	d103      	bne.n	800c436 <CircularQueue_Remove+0xaa>
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	891b      	ldrh	r3, [r3, #8]
 800c432:	2b00      	cmp	r3, #0
 800c434:	d012      	beq.n	800c45c <CircularQueue_Remove+0xd0>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	68da      	ldr	r2, [r3, #12]
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800c43e:	429a      	cmp	r2, r3
 800c440:	d941      	bls.n	800c4c6 <CircularQueue_Remove+0x13a>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	891b      	ldrh	r3, [r3, #8]
 800c446:	2b00      	cmp	r3, #0
 800c448:	d03d      	beq.n	800c4c6 <CircularQueue_Remove+0x13a>
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	685a      	ldr	r2, [r3, #4]
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	68db      	ldr	r3, [r3, #12]
 800c452:	1ad3      	subs	r3, r2, r3
 800c454:	687a      	ldr	r2, [r7, #4]
 800c456:	8912      	ldrh	r2, [r2, #8]
 800c458:	4293      	cmp	r3, r2
 800c45a:	d234      	bcs.n	800c4c6 <CircularQueue_Remove+0x13a>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	695a      	ldr	r2, [r3, #20]
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	68d9      	ldr	r1, [r3, #12]
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	685b      	ldr	r3, [r3, #4]
 800c468:	1acb      	subs	r3, r1, r3
 800c46a:	441a      	add	r2, r3
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	2200      	movs	r2, #0
 800c474:	60da      	str	r2, [r3, #12]
          /* retrieve the right size after the wrap [if variable size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	891b      	ldrh	r3, [r3, #8]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d120      	bne.n	800c4c0 <CircularQueue_Remove+0x134>
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	681a      	ldr	r2, [r3, #0]
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	68db      	ldr	r3, [r3, #12]
 800c486:	4413      	add	r3, r2
 800c488:	781b      	ldrb	r3, [r3, #0]
 800c48a:	4618      	mov	r0, r3
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	681a      	ldr	r2, [r3, #0]
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	68db      	ldr	r3, [r3, #12]
 800c494:	1c59      	adds	r1, r3, #1
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	685b      	ldr	r3, [r3, #4]
 800c49a:	4299      	cmp	r1, r3
 800c49c:	d306      	bcc.n	800c4ac <CircularQueue_Remove+0x120>
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	68d9      	ldr	r1, [r3, #12]
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	685b      	ldr	r3, [r3, #4]
 800c4a6:	1acb      	subs	r3, r1, r3
 800c4a8:	3301      	adds	r3, #1
 800c4aa:	e002      	b.n	800c4b2 <CircularQueue_Remove+0x126>
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	68db      	ldr	r3, [r3, #12]
 800c4b0:	3301      	adds	r3, #1
 800c4b2:	4413      	add	r3, r2
 800c4b4:	781b      	ldrb	r3, [r3, #0]
 800c4b6:	021b      	lsls	r3, r3, #8
 800c4b8:	b29b      	uxth	r3, r3
 800c4ba:	4403      	add	r3, r0
 800c4bc:	b29b      	uxth	r3, r3
 800c4be:	e001      	b.n	800c4c4 <CircularQueue_Remove+0x138>
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	891b      	ldrh	r3, [r3, #8]
 800c4c4:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retrieve element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	681a      	ldr	r2, [r3, #0]
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	68d9      	ldr	r1, [r3, #12]
 800c4ce:	7a7b      	ldrb	r3, [r7, #9]
 800c4d0:	4419      	add	r1, r3
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	685b      	ldr	r3, [r3, #4]
 800c4d6:	4299      	cmp	r1, r3
 800c4d8:	d307      	bcc.n	800c4ea <CircularQueue_Remove+0x15e>
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	68d9      	ldr	r1, [r3, #12]
 800c4de:	7a7b      	ldrb	r3, [r7, #9]
 800c4e0:	4419      	add	r1, r3
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	685b      	ldr	r3, [r3, #4]
 800c4e6:	1acb      	subs	r3, r1, r3
 800c4e8:	e003      	b.n	800c4f2 <CircularQueue_Remove+0x166>
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	68d9      	ldr	r1, [r3, #12]
 800c4ee:	7a7b      	ldrb	r3, [r7, #9]
 800c4f0:	440b      	add	r3, r1
 800c4f2:	4413      	add	r3, r2
 800c4f4:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	695b      	ldr	r3, [r3, #20]
 800c4fa:	8979      	ldrh	r1, [r7, #10]
 800c4fc:	7a7a      	ldrb	r2, [r7, #9]
 800c4fe:	440a      	add	r2, r1
 800c500:	1a9a      	subs	r2, r3, r2
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	695b      	ldr	r3, [r3, #20]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d01b      	beq.n	800c546 <CircularQueue_Remove+0x1ba>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	68da      	ldr	r2, [r3, #12]
 800c512:	897b      	ldrh	r3, [r7, #10]
 800c514:	441a      	add	r2, r3
 800c516:	7a7b      	ldrb	r3, [r7, #9]
 800c518:	441a      	add	r2, r3
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	685b      	ldr	r3, [r3, #4]
 800c51e:	429a      	cmp	r2, r3
 800c520:	d309      	bcc.n	800c536 <CircularQueue_Remove+0x1aa>
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	68da      	ldr	r2, [r3, #12]
 800c526:	897b      	ldrh	r3, [r7, #10]
 800c528:	441a      	add	r2, r3
 800c52a:	7a7b      	ldrb	r3, [r7, #9]
 800c52c:	441a      	add	r2, r3
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	685b      	ldr	r3, [r3, #4]
 800c532:	1ad3      	subs	r3, r2, r3
 800c534:	e005      	b.n	800c542 <CircularQueue_Remove+0x1b6>
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	68da      	ldr	r2, [r3, #12]
 800c53a:	897b      	ldrh	r3, [r7, #10]
 800c53c:	441a      	add	r2, r3
 800c53e:	7a7b      	ldrb	r3, [r7, #9]
 800c540:	4413      	add	r3, r2
 800c542:	687a      	ldr	r2, [r7, #4]
 800c544:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	699b      	ldr	r3, [r3, #24]
 800c54a:	1e5a      	subs	r2, r3, #1
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 800c550:	683b      	ldr	r3, [r7, #0]
 800c552:	2b00      	cmp	r3, #0
 800c554:	d002      	beq.n	800c55c <CircularQueue_Remove+0x1d0>
  {
    *elementSize = eltSize;
 800c556:	683b      	ldr	r3, [r7, #0]
 800c558:	897a      	ldrh	r2, [r7, #10]
 800c55a:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 800c55c:	68fb      	ldr	r3, [r7, #12]
}
 800c55e:	4618      	mov	r0, r3
 800c560:	3714      	adds	r7, #20
 800c562:	46bd      	mov	sp, r7
 800c564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c568:	4770      	bx	lr

0800c56a <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 800c56a:	b480      	push	{r7}
 800c56c:	b087      	sub	sp, #28
 800c56e:	af00      	add	r7, sp, #0
 800c570:	6078      	str	r0, [r7, #4]
 800c572:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800c574:	2300      	movs	r3, #0
 800c576:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 800c578:	2300      	movs	r3, #0
 800c57a:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	891b      	ldrh	r3, [r3, #8]
 800c580:	2b00      	cmp	r3, #0
 800c582:	d101      	bne.n	800c588 <CircularQueue_Sense+0x1e>
 800c584:	2302      	movs	r3, #2
 800c586:	e000      	b.n	800c58a <CircularQueue_Sense+0x20>
 800c588:	2300      	movs	r3, #0
 800c58a:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 800c58c:	2300      	movs	r3, #0
 800c58e:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 800c590:	2300      	movs	r3, #0
 800c592:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	695b      	ldr	r3, [r3, #20]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	f000 808e 	beq.w	800c6ba <CircularQueue_Sense+0x150>
  {
    FirstElemetPos = q->first;
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	68db      	ldr	r3, [r3, #12]
 800c5a2:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	891b      	ldrh	r3, [r3, #8]
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d120      	bne.n	800c5ee <CircularQueue_Sense+0x84>
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	681a      	ldr	r2, [r3, #0]
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	68db      	ldr	r3, [r3, #12]
 800c5b4:	4413      	add	r3, r2
 800c5b6:	781b      	ldrb	r3, [r3, #0]
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	681a      	ldr	r2, [r3, #0]
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	68db      	ldr	r3, [r3, #12]
 800c5c2:	1c59      	adds	r1, r3, #1
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	685b      	ldr	r3, [r3, #4]
 800c5c8:	4299      	cmp	r1, r3
 800c5ca:	d306      	bcc.n	800c5da <CircularQueue_Sense+0x70>
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	68d9      	ldr	r1, [r3, #12]
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	685b      	ldr	r3, [r3, #4]
 800c5d4:	1acb      	subs	r3, r1, r3
 800c5d6:	3301      	adds	r3, #1
 800c5d8:	e002      	b.n	800c5e0 <CircularQueue_Sense+0x76>
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	68db      	ldr	r3, [r3, #12]
 800c5de:	3301      	adds	r3, #1
 800c5e0:	4413      	add	r3, r2
 800c5e2:	781b      	ldrb	r3, [r3, #0]
 800c5e4:	021b      	lsls	r3, r3, #8
 800c5e6:	b29b      	uxth	r3, r3
 800c5e8:	4403      	add	r3, r0
 800c5ea:	b29b      	uxth	r3, r3
 800c5ec:	e001      	b.n	800c5f2 <CircularQueue_Sense+0x88>
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	891b      	ldrh	r3, [r3, #8]
 800c5f2:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	7f1b      	ldrb	r3, [r3, #28]
 800c5f8:	f003 0301 	and.w	r3, r3, #1
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d047      	beq.n	800c690 <CircularQueue_Sense+0x126>
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	7f1b      	ldrb	r3, [r3, #28]
 800c604:	f003 0302 	and.w	r3, r3, #2
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d141      	bne.n	800c690 <CircularQueue_Sense+0x126>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800c60c:	8a7b      	ldrh	r3, [r7, #18]
 800c60e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c612:	4293      	cmp	r3, r2
 800c614:	d103      	bne.n	800c61e <CircularQueue_Sense+0xb4>
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	891b      	ldrh	r3, [r3, #8]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d012      	beq.n	800c644 <CircularQueue_Sense+0xda>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	68da      	ldr	r2, [r3, #12]
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800c626:	429a      	cmp	r2, r3
 800c628:	d932      	bls.n	800c690 <CircularQueue_Sense+0x126>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	891b      	ldrh	r3, [r3, #8]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d02e      	beq.n	800c690 <CircularQueue_Sense+0x126>
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	685a      	ldr	r2, [r3, #4]
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	68db      	ldr	r3, [r3, #12]
 800c63a:	1ad3      	subs	r3, r2, r3
 800c63c:	687a      	ldr	r2, [r7, #4]
 800c63e:	8912      	ldrh	r2, [r2, #8]
 800c640:	4293      	cmp	r3, r2
 800c642:	d225      	bcs.n	800c690 <CircularQueue_Sense+0x126>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 800c644:	2300      	movs	r3, #0
 800c646:	60fb      	str	r3, [r7, #12]

        /* retrieve the right size after the wrap [if variable size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	891b      	ldrh	r3, [r3, #8]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d11c      	bne.n	800c68a <CircularQueue_Sense+0x120>
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	681a      	ldr	r2, [r3, #0]
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	4413      	add	r3, r2
 800c658:	781b      	ldrb	r3, [r3, #0]
 800c65a:	4618      	mov	r0, r3
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	681a      	ldr	r2, [r3, #0]
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	1c59      	adds	r1, r3, #1
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	685b      	ldr	r3, [r3, #4]
 800c668:	4299      	cmp	r1, r3
 800c66a:	d305      	bcc.n	800c678 <CircularQueue_Sense+0x10e>
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	685b      	ldr	r3, [r3, #4]
 800c670:	68f9      	ldr	r1, [r7, #12]
 800c672:	1acb      	subs	r3, r1, r3
 800c674:	3301      	adds	r3, #1
 800c676:	e001      	b.n	800c67c <CircularQueue_Sense+0x112>
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	3301      	adds	r3, #1
 800c67c:	4413      	add	r3, r2
 800c67e:	781b      	ldrb	r3, [r3, #0]
 800c680:	021b      	lsls	r3, r3, #8
 800c682:	b29b      	uxth	r3, r3
 800c684:	4403      	add	r3, r0
 800c686:	b29b      	uxth	r3, r3
 800c688:	e001      	b.n	800c68e <CircularQueue_Sense+0x124>
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	891b      	ldrh	r3, [r3, #8]
 800c68e:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	681a      	ldr	r2, [r3, #0]
 800c694:	7af9      	ldrb	r1, [r7, #11]
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	4419      	add	r1, r3
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	685b      	ldr	r3, [r3, #4]
 800c69e:	4299      	cmp	r1, r3
 800c6a0:	d306      	bcc.n	800c6b0 <CircularQueue_Sense+0x146>
 800c6a2:	7af9      	ldrb	r1, [r7, #11]
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	4419      	add	r1, r3
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	685b      	ldr	r3, [r3, #4]
 800c6ac:	1acb      	subs	r3, r1, r3
 800c6ae:	e002      	b.n	800c6b6 <CircularQueue_Sense+0x14c>
 800c6b0:	7af9      	ldrb	r1, [r7, #11]
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	440b      	add	r3, r1
 800c6b6:	4413      	add	r3, r2
 800c6b8:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 800c6ba:	683b      	ldr	r3, [r7, #0]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d002      	beq.n	800c6c6 <CircularQueue_Sense+0x15c>
  {
    *elementSize = eltSize;
 800c6c0:	683b      	ldr	r3, [r7, #0]
 800c6c2:	8a7a      	ldrh	r2, [r7, #18]
 800c6c4:	801a      	strh	r2, [r3, #0]
  }
  return x;
 800c6c6:	697b      	ldr	r3, [r7, #20]
}
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	371c      	adds	r7, #28
 800c6cc:	46bd      	mov	sp, r7
 800c6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d2:	4770      	bx	lr

0800c6d4 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800c6d4:	b480      	push	{r7}
 800c6d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800c6d8:	4b03      	ldr	r3, [pc, #12]	@ (800c6e8 <LL_FLASH_GetUDN+0x14>)
 800c6da:	681b      	ldr	r3, [r3, #0]
}
 800c6dc:	4618      	mov	r0, r3
 800c6de:	46bd      	mov	sp, r7
 800c6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e4:	4770      	bx	lr
 800c6e6:	bf00      	nop
 800c6e8:	1fff7580 	.word	0x1fff7580

0800c6ec <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800c6ec:	b480      	push	{r7}
 800c6ee:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800c6f0:	4b03      	ldr	r3, [pc, #12]	@ (800c700 <LL_FLASH_GetDeviceID+0x14>)
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	b2db      	uxtb	r3, r3
}
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	46bd      	mov	sp, r7
 800c6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fe:	4770      	bx	lr
 800c700:	1fff7584 	.word	0x1fff7584

0800c704 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800c704:	b480      	push	{r7}
 800c706:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 800c708:	4b03      	ldr	r3, [pc, #12]	@ (800c718 <LL_FLASH_GetSTCompanyID+0x14>)
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	0a1b      	lsrs	r3, r3, #8
}
 800c70e:	4618      	mov	r0, r3
 800c710:	46bd      	mov	sp, r7
 800c712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c716:	4770      	bx	lr
 800c718:	1fff7584 	.word	0x1fff7584

0800c71c <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 800c71c:	b5b0      	push	{r4, r5, r7, lr}
 800c71e:	b090      	sub	sp, #64	@ 0x40
 800c720:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800c722:	2392      	movs	r3, #146	@ 0x92
 800c724:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800c728:	4b33      	ldr	r3, [pc, #204]	@ (800c7f8 <APP_BLE_Init+0xdc>)
 800c72a:	1d3c      	adds	r4, r7, #4
 800c72c:	461d      	mov	r5, r3
 800c72e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c730:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c732:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c734:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c736:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c738:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c73a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c73e:	c403      	stmia	r4!, {r0, r1}
 800c740:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 800c742:	f000 fa6d 	bl	800cc20 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800c746:	2101      	movs	r1, #1
 800c748:	2002      	movs	r0, #2
 800c74a:	f001 fafd 	bl	800dd48 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800c74e:	4a2b      	ldr	r2, [pc, #172]	@ (800c7fc <APP_BLE_Init+0xe0>)
 800c750:	2100      	movs	r1, #0
 800c752:	2002      	movs	r0, #2
 800c754:	f001 fc24 	bl	800dfa0 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 800c758:	1d3b      	adds	r3, r7, #4
 800c75a:	4618      	mov	r0, r3
 800c75c:	f7fe fc5c 	bl	800b018 <SHCI_C2_BLE_Init>
 800c760:	4603      	mov	r3, r0
 800c762:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (status != SHCI_Success)
 800c766:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d008      	beq.n	800c780 <APP_BLE_Init+0x64>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
 800c76e:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800c772:	4619      	mov	r1, r3
 800c774:	4822      	ldr	r0, [pc, #136]	@ (800c800 <APP_BLE_Init+0xe4>)
 800c776:	f001 fe01 	bl	800e37c <iprintf>
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 800c77a:	f7f6 f88e 	bl	800289a <Error_Handler>
 800c77e:	e002      	b.n	800c786 <APP_BLE_Init+0x6a>
  }
  else
  {
    APP_DBG_MSG("  Success: SHCI_C2_BLE_Init command\n\r");
 800c780:	4820      	ldr	r0, [pc, #128]	@ (800c804 <APP_BLE_Init+0xe8>)
 800c782:	f001 fdfb 	bl	800e37c <iprintf>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800c786:	f000 fa61 	bl	800cc4c <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800c78a:	f7fe fb9f 	bl	800aecc <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800c78e:	4b1e      	ldr	r3, [pc, #120]	@ (800c808 <APP_BLE_Init+0xec>)
 800c790:	2200      	movs	r2, #0
 800c792:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800c796:	4b1c      	ldr	r3, [pc, #112]	@ (800c808 <APP_BLE_Init+0xec>)
 800c798:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c79c:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800c79e:	4a1b      	ldr	r2, [pc, #108]	@ (800c80c <APP_BLE_Init+0xf0>)
 800c7a0:	2100      	movs	r1, #0
 800c7a2:	2001      	movs	r0, #1
 800c7a4:	f001 fbfc 	bl	800dfa0 <UTIL_SEQ_RegTask>

  /* USER CODE BEGIN APP_BLE_Init_4 */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_DISCON_ID, UTIL_SEQ_RFU, Ble_Disconnect);  // TODO: MARCEL BLE CODE
 800c7a8:	4a19      	ldr	r2, [pc, #100]	@ (800c810 <APP_BLE_Init+0xf4>)
 800c7aa:	2100      	movs	r1, #0
 800c7ac:	2004      	movs	r0, #4
 800c7ae:	f001 fbf7 	bl	800dfa0 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 800c7b2:	2006      	movs	r0, #6
 800c7b4:	f7fe f9fd 	bl	800abb2 <aci_hal_set_radio_activity_mask>
 800c7b8:	4603      	mov	r3, r0
 800c7ba:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (ret != BLE_STATUS_SUCCESS)
 800c7be:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d006      	beq.n	800c7d4 <APP_BLE_Init+0xb8>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_radio_activity_mask command, result: 0x%x \n\r", ret);
 800c7c6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800c7ca:	4619      	mov	r1, r3
 800c7cc:	4811      	ldr	r0, [pc, #68]	@ (800c814 <APP_BLE_Init+0xf8>)
 800c7ce:	f001 fdd5 	bl	800e37c <iprintf>
 800c7d2:	e002      	b.n	800c7da <APP_BLE_Init+0xbe>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_radio_activity_mask command\n\r");
 800c7d4:	4810      	ldr	r0, [pc, #64]	@ (800c818 <APP_BLE_Init+0xfc>)
 800c7d6:	f001 fdd1 	bl	800e37c <iprintf>
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 800c7da:	f000 fd65 	bl	800d2a8 <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800c7de:	4b0a      	ldr	r3, [pc, #40]	@ (800c808 <APP_BLE_Init+0xec>)
 800c7e0:	2200      	movs	r2, #0
 800c7e2:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800c7e4:	4b08      	ldr	r3, [pc, #32]	@ (800c808 <APP_BLE_Init+0xec>)
 800c7e6:	2200      	movs	r2, #0
 800c7e8:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 800c7ea:	2001      	movs	r0, #1
 800c7ec:	f000 fbbc 	bl	800cf68 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 800c7f0:	bf00      	nop
}
 800c7f2:	3740      	adds	r7, #64	@ 0x40
 800c7f4:	46bd      	mov	sp, r7
 800c7f6:	bdb0      	pop	{r4, r5, r7, pc}
 800c7f8:	0800f640 	.word	0x0800f640
 800c7fc:	0800b235 	.word	0x0800b235
 800c800:	0800f564 	.word	0x0800f564
 800c804:	0800f59c 	.word	0x0800f59c
 800c808:	20000cb8 	.word	0x20000cb8
 800c80c:	0800d091 	.word	0x0800d091
 800c810:	0800d0e9 	.word	0x0800d0e9
 800c814:	0800f5c4 	.word	0x0800f5c4
 800c818:	0800f608 	.word	0x0800f608

0800c81c <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 800c81c:	b5b0      	push	{r4, r5, r7, lr}
 800c81e:	b090      	sub	sp, #64	@ 0x40
 800c820:	af04      	add	r7, sp, #16
 800c822:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 800c824:	2392      	movs	r3, #146	@ 0x92
 800c826:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	3301      	adds	r3, #1
 800c82e:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (p_event_pckt->evt)
 800c830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c832:	781b      	ldrb	r3, [r3, #0]
 800c834:	2bff      	cmp	r3, #255	@ 0xff
 800c836:	f000 80e9 	beq.w	800ca0c <SVCCTL_App_Notification+0x1f0>
 800c83a:	2bff      	cmp	r3, #255	@ 0xff
 800c83c:	f300 81d9 	bgt.w	800cbf2 <SVCCTL_App_Notification+0x3d6>
 800c840:	2b3e      	cmp	r3, #62	@ 0x3e
 800c842:	d042      	beq.n	800c8ca <SVCCTL_App_Notification+0xae>
 800c844:	2b3e      	cmp	r3, #62	@ 0x3e
 800c846:	f300 81d4 	bgt.w	800cbf2 <SVCCTL_App_Notification+0x3d6>
 800c84a:	2b05      	cmp	r3, #5
 800c84c:	d002      	beq.n	800c854 <SVCCTL_App_Notification+0x38>
 800c84e:	2b10      	cmp	r3, #16
 800c850:	d02e      	beq.n	800c8b0 <SVCCTL_App_Notification+0x94>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 800c852:	e1ce      	b.n	800cbf2 <SVCCTL_App_Notification+0x3d6>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 800c854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c856:	3302      	adds	r3, #2
 800c858:	60bb      	str	r3, [r7, #8]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800c85a:	68bb      	ldr	r3, [r7, #8]
 800c85c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800c860:	b29a      	uxth	r2, r3
 800c862:	4bb3      	ldr	r3, [pc, #716]	@ (800cb30 <SVCCTL_App_Notification+0x314>)
 800c864:	8adb      	ldrh	r3, [r3, #22]
 800c866:	429a      	cmp	r2, r3
 800c868:	d114      	bne.n	800c894 <SVCCTL_App_Notification+0x78>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800c86a:	4bb1      	ldr	r3, [pc, #708]	@ (800cb30 <SVCCTL_App_Notification+0x314>)
 800c86c:	2200      	movs	r2, #0
 800c86e:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800c870:	4baf      	ldr	r3, [pc, #700]	@ (800cb30 <SVCCTL_App_Notification+0x314>)
 800c872:	2200      	movs	r2, #0
 800c874:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
        APP_DBG_MSG(">>== HCI_DISCONNECTION_COMPLETE_EVT_CODE\n");
 800c878:	48ae      	ldr	r0, [pc, #696]	@ (800cb34 <SVCCTL_App_Notification+0x318>)
 800c87a:	f001 fdef 	bl	800e45c <puts>
                    p_disconnection_complete_event->Connection_Handle,
 800c87e:	68bb      	ldr	r3, [r7, #8]
 800c880:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800c884:	b29b      	uxth	r3, r3
        APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 800c886:	4619      	mov	r1, r3
                    p_disconnection_complete_event->Reason);
 800c888:	68bb      	ldr	r3, [r7, #8]
 800c88a:	78db      	ldrb	r3, [r3, #3]
        APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 800c88c:	461a      	mov	r2, r3
 800c88e:	48aa      	ldr	r0, [pc, #680]	@ (800cb38 <SVCCTL_App_Notification+0x31c>)
 800c890:	f001 fd74 	bl	800e37c <iprintf>
      Adv_Request(APP_BLE_FAST_ADV);
 800c894:	2001      	movs	r0, #1
 800c896:	f000 fb67 	bl	800cf68 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 800c89a:	4ba8      	ldr	r3, [pc, #672]	@ (800cb3c <SVCCTL_App_Notification+0x320>)
 800c89c:	2201      	movs	r2, #1
 800c89e:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800c8a0:	4ba3      	ldr	r3, [pc, #652]	@ (800cb30 <SVCCTL_App_Notification+0x314>)
 800c8a2:	8ada      	ldrh	r2, [r3, #22]
 800c8a4:	4ba5      	ldr	r3, [pc, #660]	@ (800cb3c <SVCCTL_App_Notification+0x320>)
 800c8a6:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 800c8a8:	48a4      	ldr	r0, [pc, #656]	@ (800cb3c <SVCCTL_App_Notification+0x320>)
 800c8aa:	f000 fce9 	bl	800d280 <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800c8ae:	e1a3      	b.n	800cbf8 <SVCCTL_App_Notification+0x3dc>
      p_hardware_error_event = (hci_hardware_error_event_rp0 *)p_event_pckt->data;
 800c8b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8b2:	3302      	adds	r3, #2
 800c8b4:	60fb      	str	r3, [r7, #12]
      APP_DBG_MSG(">>== HCI_HARDWARE_ERROR_EVT_CODE\n");
 800c8b6:	48a2      	ldr	r0, [pc, #648]	@ (800cb40 <SVCCTL_App_Notification+0x324>)
 800c8b8:	f001 fdd0 	bl	800e45c <puts>
      APP_DBG_MSG("Hardware Code = 0x%02X\n",p_hardware_error_event->Hardware_Code);
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	781b      	ldrb	r3, [r3, #0]
 800c8c0:	4619      	mov	r1, r3
 800c8c2:	48a0      	ldr	r0, [pc, #640]	@ (800cb44 <SVCCTL_App_Notification+0x328>)
 800c8c4:	f001 fd5a 	bl	800e37c <iprintf>
      break; /* HCI_HARDWARE_ERROR_EVT_CODE */
 800c8c8:	e196      	b.n	800cbf8 <SVCCTL_App_Notification+0x3dc>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 800c8ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8cc:	3302      	adds	r3, #2
 800c8ce:	61bb      	str	r3, [r7, #24]
      switch (p_meta_evt->subevent)
 800c8d0:	69bb      	ldr	r3, [r7, #24]
 800c8d2:	781b      	ldrb	r3, [r3, #0]
 800c8d4:	2b01      	cmp	r3, #1
 800c8d6:	d02e      	beq.n	800c936 <SVCCTL_App_Notification+0x11a>
 800c8d8:	2b03      	cmp	r3, #3
 800c8da:	f040 8095 	bne.w	800ca08 <SVCCTL_App_Notification+0x1ec>
          p_connection_update_complete_event = (hci_le_connection_update_complete_event_rp0 *) p_meta_evt->data;
 800c8de:	69bb      	ldr	r3, [r7, #24]
 800c8e0:	3301      	adds	r3, #1
 800c8e2:	617b      	str	r3, [r7, #20]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_UPDATE_COMPLETE_SUBEVT_CODE\n");
 800c8e4:	4898      	ldr	r0, [pc, #608]	@ (800cb48 <SVCCTL_App_Notification+0x32c>)
 800c8e6:	f001 fdb9 	bl	800e45c <puts>
                       p_connection_update_complete_event->Conn_Interval*1.25,
 800c8ea:	697b      	ldr	r3, [r7, #20]
 800c8ec:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800c8f0:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	f7f3 ff18 	bl	8000728 <__aeabi_i2d>
 800c8f8:	f04f 0200 	mov.w	r2, #0
 800c8fc:	4b93      	ldr	r3, [pc, #588]	@ (800cb4c <SVCCTL_App_Notification+0x330>)
 800c8fe:	f7f3 fc97 	bl	8000230 <__aeabi_dmul>
 800c902:	4602      	mov	r2, r0
 800c904:	460b      	mov	r3, r1
 800c906:	4610      	mov	r0, r2
 800c908:	4619      	mov	r1, r3
                       p_connection_update_complete_event->Conn_Latency,
 800c90a:	697b      	ldr	r3, [r7, #20]
 800c90c:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800c910:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800c912:	461c      	mov	r4, r3
                       p_connection_update_complete_event->Supervision_Timeout*10);
 800c914:	697b      	ldr	r3, [r7, #20]
 800c916:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800c91a:	b29b      	uxth	r3, r3
 800c91c:	461a      	mov	r2, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800c91e:	4613      	mov	r3, r2
 800c920:	009b      	lsls	r3, r3, #2
 800c922:	4413      	add	r3, r2
 800c924:	005b      	lsls	r3, r3, #1
 800c926:	9301      	str	r3, [sp, #4]
 800c928:	9400      	str	r4, [sp, #0]
 800c92a:	4602      	mov	r2, r0
 800c92c:	460b      	mov	r3, r1
 800c92e:	4888      	ldr	r0, [pc, #544]	@ (800cb50 <SVCCTL_App_Notification+0x334>)
 800c930:	f001 fd24 	bl	800e37c <iprintf>
          break;
 800c934:	e069      	b.n	800ca0a <SVCCTL_App_Notification+0x1ee>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 800c936:	69bb      	ldr	r3, [r7, #24]
 800c938:	3301      	adds	r3, #1
 800c93a:	613b      	str	r3, [r7, #16]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE - Connection handle: 0x%x\n", p_connection_complete_event->Connection_Handle);
 800c93c:	693b      	ldr	r3, [r7, #16]
 800c93e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800c942:	b29b      	uxth	r3, r3
 800c944:	4619      	mov	r1, r3
 800c946:	4883      	ldr	r0, [pc, #524]	@ (800cb54 <SVCCTL_App_Notification+0x338>)
 800c948:	f001 fd18 	bl	800e37c <iprintf>
                      p_connection_complete_event->Peer_Address[5],
 800c94c:	693b      	ldr	r3, [r7, #16]
 800c94e:	7a9b      	ldrb	r3, [r3, #10]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800c950:	4618      	mov	r0, r3
                      p_connection_complete_event->Peer_Address[4],
 800c952:	693b      	ldr	r3, [r7, #16]
 800c954:	7a5b      	ldrb	r3, [r3, #9]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800c956:	461c      	mov	r4, r3
                      p_connection_complete_event->Peer_Address[3],
 800c958:	693b      	ldr	r3, [r7, #16]
 800c95a:	7a1b      	ldrb	r3, [r3, #8]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800c95c:	461d      	mov	r5, r3
                      p_connection_complete_event->Peer_Address[2],
 800c95e:	693b      	ldr	r3, [r7, #16]
 800c960:	79db      	ldrb	r3, [r3, #7]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800c962:	461a      	mov	r2, r3
                      p_connection_complete_event->Peer_Address[1],
 800c964:	693b      	ldr	r3, [r7, #16]
 800c966:	799b      	ldrb	r3, [r3, #6]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800c968:	4619      	mov	r1, r3
                      p_connection_complete_event->Peer_Address[0]);
 800c96a:	693b      	ldr	r3, [r7, #16]
 800c96c:	795b      	ldrb	r3, [r3, #5]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800c96e:	9302      	str	r3, [sp, #8]
 800c970:	9101      	str	r1, [sp, #4]
 800c972:	9200      	str	r2, [sp, #0]
 800c974:	462b      	mov	r3, r5
 800c976:	4622      	mov	r2, r4
 800c978:	4601      	mov	r1, r0
 800c97a:	4877      	ldr	r0, [pc, #476]	@ (800cb58 <SVCCTL_App_Notification+0x33c>)
 800c97c:	f001 fcfe 	bl	800e37c <iprintf>
                      p_connection_complete_event->Conn_Interval*1.25,
 800c980:	693b      	ldr	r3, [r7, #16]
 800c982:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 800c986:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800c988:	4618      	mov	r0, r3
 800c98a:	f7f3 fecd 	bl	8000728 <__aeabi_i2d>
 800c98e:	f04f 0200 	mov.w	r2, #0
 800c992:	4b6e      	ldr	r3, [pc, #440]	@ (800cb4c <SVCCTL_App_Notification+0x330>)
 800c994:	f7f3 fc4c 	bl	8000230 <__aeabi_dmul>
 800c998:	4602      	mov	r2, r0
 800c99a:	460b      	mov	r3, r1
 800c99c:	4610      	mov	r0, r2
 800c99e:	4619      	mov	r1, r3
                      p_connection_complete_event->Conn_Latency,
 800c9a0:	693b      	ldr	r3, [r7, #16]
 800c9a2:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 800c9a6:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800c9a8:	461c      	mov	r4, r3
                      p_connection_complete_event->Supervision_Timeout*10
 800c9aa:	693b      	ldr	r3, [r7, #16]
 800c9ac:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 800c9b0:	b29b      	uxth	r3, r3
 800c9b2:	461a      	mov	r2, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800c9b4:	4613      	mov	r3, r2
 800c9b6:	009b      	lsls	r3, r3, #2
 800c9b8:	4413      	add	r3, r2
 800c9ba:	005b      	lsls	r3, r3, #1
 800c9bc:	9301      	str	r3, [sp, #4]
 800c9be:	9400      	str	r4, [sp, #0]
 800c9c0:	4602      	mov	r2, r0
 800c9c2:	460b      	mov	r3, r1
 800c9c4:	4862      	ldr	r0, [pc, #392]	@ (800cb50 <SVCCTL_App_Notification+0x334>)
 800c9c6:	f001 fcd9 	bl	800e37c <iprintf>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800c9ca:	4b59      	ldr	r3, [pc, #356]	@ (800cb30 <SVCCTL_App_Notification+0x314>)
 800c9cc:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800c9d0:	2b04      	cmp	r3, #4
 800c9d2:	d104      	bne.n	800c9de <SVCCTL_App_Notification+0x1c2>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800c9d4:	4b56      	ldr	r3, [pc, #344]	@ (800cb30 <SVCCTL_App_Notification+0x314>)
 800c9d6:	2206      	movs	r2, #6
 800c9d8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 800c9dc:	e003      	b.n	800c9e6 <SVCCTL_App_Notification+0x1ca>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800c9de:	4b54      	ldr	r3, [pc, #336]	@ (800cb30 <SVCCTL_App_Notification+0x314>)
 800c9e0:	2205      	movs	r2, #5
 800c9e2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 800c9e6:	693b      	ldr	r3, [r7, #16]
 800c9e8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800c9ec:	b29a      	uxth	r2, r3
 800c9ee:	4b50      	ldr	r3, [pc, #320]	@ (800cb30 <SVCCTL_App_Notification+0x314>)
 800c9f0:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 800c9f2:	4b52      	ldr	r3, [pc, #328]	@ (800cb3c <SVCCTL_App_Notification+0x320>)
 800c9f4:	2200      	movs	r2, #0
 800c9f6:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800c9f8:	4b4d      	ldr	r3, [pc, #308]	@ (800cb30 <SVCCTL_App_Notification+0x314>)
 800c9fa:	8ada      	ldrh	r2, [r3, #22]
 800c9fc:	4b4f      	ldr	r3, [pc, #316]	@ (800cb3c <SVCCTL_App_Notification+0x320>)
 800c9fe:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 800ca00:	484e      	ldr	r0, [pc, #312]	@ (800cb3c <SVCCTL_App_Notification+0x320>)
 800ca02:	f000 fc3d 	bl	800d280 <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 800ca06:	e000      	b.n	800ca0a <SVCCTL_App_Notification+0x1ee>
          break;
 800ca08:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 800ca0a:	e0f5      	b.n	800cbf8 <SVCCTL_App_Notification+0x3dc>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 800ca0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca0e:	3302      	adds	r3, #2
 800ca10:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (p_blecore_evt->ecode)
 800ca12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca14:	881b      	ldrh	r3, [r3, #0]
 800ca16:	b29b      	uxth	r3, r3
 800ca18:	f640 420e 	movw	r2, #3086	@ 0xc0e
 800ca1c:	4293      	cmp	r3, r2
 800ca1e:	f000 80ce 	beq.w	800cbbe <SVCCTL_App_Notification+0x3a2>
 800ca22:	f640 420e 	movw	r2, #3086	@ 0xc0e
 800ca26:	4293      	cmp	r3, r2
 800ca28:	f300 80e5 	bgt.w	800cbf6 <SVCCTL_App_Notification+0x3da>
 800ca2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ca30:	f000 80db 	beq.w	800cbea <SVCCTL_App_Notification+0x3ce>
 800ca34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ca38:	f300 80dd 	bgt.w	800cbf6 <SVCCTL_App_Notification+0x3da>
 800ca3c:	f240 420a 	movw	r2, #1034	@ 0x40a
 800ca40:	4293      	cmp	r3, r2
 800ca42:	f300 80d8 	bgt.w	800cbf6 <SVCCTL_App_Notification+0x3da>
 800ca46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ca4a:	dc06      	bgt.n	800ca5a <SVCCTL_App_Notification+0x23e>
 800ca4c:	2b04      	cmp	r3, #4
 800ca4e:	f000 80ce 	beq.w	800cbee <SVCCTL_App_Notification+0x3d2>
 800ca52:	2b06      	cmp	r3, #6
 800ca54:	f000 80bc 	beq.w	800cbd0 <SVCCTL_App_Notification+0x3b4>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800ca58:	e0cd      	b.n	800cbf6 <SVCCTL_App_Notification+0x3da>
      switch (p_blecore_evt->ecode)
 800ca5a:	f2a3 4301 	subw	r3, r3, #1025	@ 0x401
 800ca5e:	2b09      	cmp	r3, #9
 800ca60:	f200 80c9 	bhi.w	800cbf6 <SVCCTL_App_Notification+0x3da>
 800ca64:	a201      	add	r2, pc, #4	@ (adr r2, 800ca6c <SVCCTL_App_Notification+0x250>)
 800ca66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca6a:	bf00      	nop
 800ca6c:	0800cb89 	.word	0x0800cb89
 800ca70:	0800caa5 	.word	0x0800caa5
 800ca74:	0800cbf7 	.word	0x0800cbf7
 800ca78:	0800cbf7 	.word	0x0800cbf7
 800ca7c:	0800cbf7 	.word	0x0800cbf7
 800ca80:	0800cbf7 	.word	0x0800cbf7
 800ca84:	0800ca95 	.word	0x0800ca95
 800ca88:	0800cbf7 	.word	0x0800cbf7
 800ca8c:	0800cadb 	.word	0x0800cadb
 800ca90:	0800ca9d 	.word	0x0800ca9d
          APP_DBG_MSG(">>== ACI_GAP_PROC_COMPLETE_VSEVT_CODE \r");
 800ca94:	4831      	ldr	r0, [pc, #196]	@ (800cb5c <SVCCTL_App_Notification+0x340>)
 800ca96:	f001 fc71 	bl	800e37c <iprintf>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 800ca9a:	e0a9      	b.n	800cbf0 <SVCCTL_App_Notification+0x3d4>
          APP_DBG_MSG(">>== ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE\n");
 800ca9c:	4830      	ldr	r0, [pc, #192]	@ (800cb60 <SVCCTL_App_Notification+0x344>)
 800ca9e:	f001 fcdd 	bl	800e45c <puts>
          break;
 800caa2:	e0a5      	b.n	800cbf0 <SVCCTL_App_Notification+0x3d4>
          APP_DBG_MSG(">>== ACI_GAP_PASS_KEY_REQ_VSEVT_CODE \n");
 800caa4:	482f      	ldr	r0, [pc, #188]	@ (800cb64 <SVCCTL_App_Notification+0x348>)
 800caa6:	f001 fcd9 	bl	800e45c <puts>
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 800caaa:	4b21      	ldr	r3, [pc, #132]	@ (800cb30 <SVCCTL_App_Notification+0x314>)
 800caac:	8adb      	ldrh	r3, [r3, #22]
 800caae:	492e      	ldr	r1, [pc, #184]	@ (800cb68 <SVCCTL_App_Notification+0x34c>)
 800cab0:	4618      	mov	r0, r3
 800cab2:	f7fd f9c1 	bl	8009e38 <aci_gap_pass_key_resp>
 800cab6:	4603      	mov	r3, r0
 800cab8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          if (ret != BLE_STATUS_SUCCESS)
 800cabc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d006      	beq.n	800cad2 <SVCCTL_App_Notification+0x2b6>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Fail, reason: 0x%x\n", ret);
 800cac4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cac8:	4619      	mov	r1, r3
 800caca:	4828      	ldr	r0, [pc, #160]	@ (800cb6c <SVCCTL_App_Notification+0x350>)
 800cacc:	f001 fc56 	bl	800e37c <iprintf>
          break;
 800cad0:	e08e      	b.n	800cbf0 <SVCCTL_App_Notification+0x3d4>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Success \n");
 800cad2:	4827      	ldr	r0, [pc, #156]	@ (800cb70 <SVCCTL_App_Notification+0x354>)
 800cad4:	f001 fcc2 	bl	800e45c <puts>
          break;
 800cad8:	e08a      	b.n	800cbf0 <SVCCTL_App_Notification+0x3d4>
          APP_DBG_MSG(">>== ACI_GAP_NUMERIC_COMPARISON_VALUE_VSEVT_CODE\n");
 800cada:	4826      	ldr	r0, [pc, #152]	@ (800cb74 <SVCCTL_App_Notification+0x358>)
 800cadc:	f001 fcbe 	bl	800e45c <puts>
                      ((aci_gap_numeric_comparison_value_event_rp0 *)(p_blecore_evt->data))->Numeric_Value);
 800cae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cae2:	3302      	adds	r3, #2
          APP_DBG_MSG("     - numeric_value = %ld\n",
 800cae4:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800cae8:	4619      	mov	r1, r3
 800caea:	4823      	ldr	r0, [pc, #140]	@ (800cb78 <SVCCTL_App_Notification+0x35c>)
 800caec:	f001 fc46 	bl	800e37c <iprintf>
                      ((aci_gap_numeric_comparison_value_event_rp0 *)(p_blecore_evt->data))->Numeric_Value);
 800caf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800caf2:	3302      	adds	r3, #2
          APP_DBG_MSG("     - Hex_value = %lx\n",
 800caf4:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800caf8:	4619      	mov	r1, r3
 800cafa:	4820      	ldr	r0, [pc, #128]	@ (800cb7c <SVCCTL_App_Notification+0x360>)
 800cafc:	f001 fc3e 	bl	800e37c <iprintf>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 800cb00:	4b0b      	ldr	r3, [pc, #44]	@ (800cb30 <SVCCTL_App_Notification+0x314>)
 800cb02:	8adb      	ldrh	r3, [r3, #22]
 800cb04:	2101      	movs	r1, #1
 800cb06:	4618      	mov	r0, r3
 800cb08:	f7fd fbaa 	bl	800a260 <aci_gap_numeric_comparison_value_confirm_yesno>
 800cb0c:	4603      	mov	r3, r0
 800cb0e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          if (ret != BLE_STATUS_SUCCESS)
 800cb12:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d006      	beq.n	800cb28 <SVCCTL_App_Notification+0x30c>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Fail, reason: 0x%x\n", ret);
 800cb1a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cb1e:	4619      	mov	r1, r3
 800cb20:	4817      	ldr	r0, [pc, #92]	@ (800cb80 <SVCCTL_App_Notification+0x364>)
 800cb22:	f001 fc2b 	bl	800e37c <iprintf>
          break;
 800cb26:	e063      	b.n	800cbf0 <SVCCTL_App_Notification+0x3d4>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Success \n");
 800cb28:	4816      	ldr	r0, [pc, #88]	@ (800cb84 <SVCCTL_App_Notification+0x368>)
 800cb2a:	f001 fc97 	bl	800e45c <puts>
          break;
 800cb2e:	e05f      	b.n	800cbf0 <SVCCTL_App_Notification+0x3d4>
 800cb30:	20000cb8 	.word	0x20000cb8
 800cb34:	0800f67c 	.word	0x0800f67c
 800cb38:	0800f6a8 	.word	0x0800f6a8
 800cb3c:	20000d3c 	.word	0x20000d3c
 800cb40:	0800f6e4 	.word	0x0800f6e4
 800cb44:	0800f708 	.word	0x0800f708
 800cb48:	0800f720 	.word	0x0800f720
 800cb4c:	3ff40000 	.word	0x3ff40000
 800cb50:	0800f754 	.word	0x0800f754
 800cb54:	0800f7c0 	.word	0x0800f7c0
 800cb58:	0800f808 	.word	0x0800f808
 800cb5c:	0800f858 	.word	0x0800f858
 800cb60:	0800f880 	.word	0x0800f880
 800cb64:	0800f8b0 	.word	0x0800f8b0
 800cb68:	0001b207 	.word	0x0001b207
 800cb6c:	0800f8d8 	.word	0x0800f8d8
 800cb70:	0800f90c 	.word	0x0800f90c
 800cb74:	0800f934 	.word	0x0800f934
 800cb78:	0800f968 	.word	0x0800f968
 800cb7c:	0800f984 	.word	0x0800f984
 800cb80:	0800f99c 	.word	0x0800f99c
 800cb84:	0800f9ec 	.word	0x0800f9ec
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 800cb88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb8a:	3302      	adds	r3, #2
 800cb8c:	623b      	str	r3, [r7, #32]
          APP_DBG_MSG(">>== ACI_GAP_PAIRING_COMPLETE_VSEVT_CODE\n");
 800cb8e:	481d      	ldr	r0, [pc, #116]	@ (800cc04 <SVCCTL_App_Notification+0x3e8>)
 800cb90:	f001 fc64 	bl	800e45c <puts>
          if (p_pairing_complete->Status != 0)
 800cb94:	6a3b      	ldr	r3, [r7, #32]
 800cb96:	789b      	ldrb	r3, [r3, #2]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d009      	beq.n	800cbb0 <SVCCTL_App_Notification+0x394>
            APP_DBG_MSG("     - Pairing KO \n     - Status: 0x%x\n     - Reason: 0x%x\n", p_pairing_complete->Status, p_pairing_complete->Reason);
 800cb9c:	6a3b      	ldr	r3, [r7, #32]
 800cb9e:	789b      	ldrb	r3, [r3, #2]
 800cba0:	4619      	mov	r1, r3
 800cba2:	6a3b      	ldr	r3, [r7, #32]
 800cba4:	78db      	ldrb	r3, [r3, #3]
 800cba6:	461a      	mov	r2, r3
 800cba8:	4817      	ldr	r0, [pc, #92]	@ (800cc08 <SVCCTL_App_Notification+0x3ec>)
 800cbaa:	f001 fbe7 	bl	800e37c <iprintf>
 800cbae:	e002      	b.n	800cbb6 <SVCCTL_App_Notification+0x39a>
            APP_DBG_MSG("     - Pairing Success\n");
 800cbb0:	4816      	ldr	r0, [pc, #88]	@ (800cc0c <SVCCTL_App_Notification+0x3f0>)
 800cbb2:	f001 fc53 	bl	800e45c <puts>
          APP_DBG_MSG("\n");
 800cbb6:	200a      	movs	r0, #10
 800cbb8:	f001 fbf2 	bl	800e3a0 <putchar>
          break;
 800cbbc:	e018      	b.n	800cbf0 <SVCCTL_App_Notification+0x3d4>
          APP_DBG_MSG(">>== ACI_GATT_INDICATION_VSEVT_CODE \r");
 800cbbe:	4814      	ldr	r0, [pc, #80]	@ (800cc10 <SVCCTL_App_Notification+0x3f4>)
 800cbc0:	f001 fbdc 	bl	800e37c <iprintf>
          aci_gatt_confirm_indication(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 800cbc4:	4b13      	ldr	r3, [pc, #76]	@ (800cc14 <SVCCTL_App_Notification+0x3f8>)
 800cbc6:	8adb      	ldrh	r3, [r3, #22]
 800cbc8:	4618      	mov	r0, r3
 800cbca:	f7fd fe5c 	bl	800a886 <aci_gatt_confirm_indication>
        break;
 800cbce:	e00f      	b.n	800cbf0 <SVCCTL_App_Notification+0x3d4>
	      p_warning_event = (aci_hal_warning_event_rp0 *)p_blecore_evt->data;
 800cbd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbd2:	3302      	adds	r3, #2
 800cbd4:	61fb      	str	r3, [r7, #28]
          APP_DBG_MSG(">>== ACI_HAL_WARNING_VSEVT_CODE\n");
 800cbd6:	4810      	ldr	r0, [pc, #64]	@ (800cc18 <SVCCTL_App_Notification+0x3fc>)
 800cbd8:	f001 fc40 	bl	800e45c <puts>
          APP_DBG_MSG("Warning Type = 0x%02X\n", p_warning_event->Warning_Type);
 800cbdc:	69fb      	ldr	r3, [r7, #28]
 800cbde:	781b      	ldrb	r3, [r3, #0]
 800cbe0:	4619      	mov	r1, r3
 800cbe2:	480e      	ldr	r0, [pc, #56]	@ (800cc1c <SVCCTL_App_Notification+0x400>)
 800cbe4:	f001 fbca 	bl	800e37c <iprintf>
          break;
 800cbe8:	e002      	b.n	800cbf0 <SVCCTL_App_Notification+0x3d4>
          break;
 800cbea:	bf00      	nop
 800cbec:	e003      	b.n	800cbf6 <SVCCTL_App_Notification+0x3da>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 800cbee:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800cbf0:	e001      	b.n	800cbf6 <SVCCTL_App_Notification+0x3da>
      break;
 800cbf2:	bf00      	nop
 800cbf4:	e000      	b.n	800cbf8 <SVCCTL_App_Notification+0x3dc>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800cbf6:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800cbf8:	2301      	movs	r3, #1
}
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	3730      	adds	r7, #48	@ 0x30
 800cbfe:	46bd      	mov	sp, r7
 800cc00:	bdb0      	pop	{r4, r5, r7, pc}
 800cc02:	bf00      	nop
 800cc04:	0800fa34 	.word	0x0800fa34
 800cc08:	0800fa60 	.word	0x0800fa60
 800cc0c:	0800fa9c 	.word	0x0800fa9c
 800cc10:	0800fab4 	.word	0x0800fab4
 800cc14:	20000cb8 	.word	0x20000cb8
 800cc18:	0800fadc 	.word	0x0800fadc
 800cc1c:	0800fafc 	.word	0x0800fafc

0800cc20 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 800cc20:	b580      	push	{r7, lr}
 800cc22:	b082      	sub	sp, #8
 800cc24:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800cc26:	4b06      	ldr	r3, [pc, #24]	@ (800cc40 <Ble_Tl_Init+0x20>)
 800cc28:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800cc2a:	4b06      	ldr	r3, [pc, #24]	@ (800cc44 <Ble_Tl_Init+0x24>)
 800cc2c:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800cc2e:	463b      	mov	r3, r7
 800cc30:	4619      	mov	r1, r3
 800cc32:	4805      	ldr	r0, [pc, #20]	@ (800cc48 <Ble_Tl_Init+0x28>)
 800cc34:	f7fe fae2 	bl	800b1fc <hci_init>

  return;
 800cc38:	bf00      	nop
}
 800cc3a:	3708      	adds	r7, #8
 800cc3c:	46bd      	mov	sp, r7
 800cc3e:	bd80      	pop	{r7, pc}
 800cc40:	200300d8 	.word	0x200300d8
 800cc44:	0800d211 	.word	0x0800d211
 800cc48:	0800d1d9 	.word	0x0800d1d9

0800cc4c <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 800cc4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc4e:	b08d      	sub	sp, #52	@ 0x34
 800cc50:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 800cc52:	2300      	movs	r3, #0
 800cc54:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800cc56:	2392      	movs	r3, #146	@ 0x92
 800cc58:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init*/

  APP_DBG_MSG("==>> Start Ble_Hci_Gap_Gatt_Init function\n");
 800cc5a:	48a5      	ldr	r0, [pc, #660]	@ (800cef0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800cc5c:	f001 fbfe 	bl	800e45c <puts>

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 800cc60:	f7fd fffb 	bl	800ac5a <hci_reset>
 800cc64:	4603      	mov	r3, r0
 800cc66:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800cc68:	7dfb      	ldrb	r3, [r7, #23]
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d005      	beq.n	800cc7a <Ble_Hci_Gap_Gatt_Init+0x2e>
  {
    APP_DBG_MSG("  Fail   : hci_reset command, result: 0x%x \n", ret);
 800cc6e:	7dfb      	ldrb	r3, [r7, #23]
 800cc70:	4619      	mov	r1, r3
 800cc72:	48a0      	ldr	r0, [pc, #640]	@ (800cef4 <Ble_Hci_Gap_Gatt_Init+0x2a8>)
 800cc74:	f001 fb82 	bl	800e37c <iprintf>
 800cc78:	e002      	b.n	800cc80 <Ble_Hci_Gap_Gatt_Init+0x34>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_reset command\n");
 800cc7a:	489f      	ldr	r0, [pc, #636]	@ (800cef8 <Ble_Hci_Gap_Gatt_Init+0x2ac>)
 800cc7c:	f001 fbee 	bl	800e45c <puts>
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 800cc80:	f000 f9c2 	bl	800d008 <BleGetBdAddress>
 800cc84:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBLIC_ADDRESS_OFFSET, CONFIG_DATA_PUBLIC_ADDRESS_LEN, (uint8_t*) p_bd_addr);
 800cc86:	693a      	ldr	r2, [r7, #16]
 800cc88:	2106      	movs	r1, #6
 800cc8a:	2000      	movs	r0, #0
 800cc8c:	f7fd fea5 	bl	800a9da <aci_hal_write_config_data>
 800cc90:	4603      	mov	r3, r0
 800cc92:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800cc94:	7dfb      	ldrb	r3, [r7, #23]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d005      	beq.n	800cca6 <Ble_Hci_Gap_Gatt_Init+0x5a>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_PUBLIC_ADDRESS_OFFSET, result: 0x%x \n", ret);
 800cc9a:	7dfb      	ldrb	r3, [r7, #23]
 800cc9c:	4619      	mov	r1, r3
 800cc9e:	4897      	ldr	r0, [pc, #604]	@ (800cefc <Ble_Hci_Gap_Gatt_Init+0x2b0>)
 800cca0:	f001 fb6c 	bl	800e37c <iprintf>
 800cca4:	e021      	b.n	800ccea <Ble_Hci_Gap_Gatt_Init+0x9e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_PUBLIC_ADDRESS_OFFSET\n");
 800cca6:	4896      	ldr	r0, [pc, #600]	@ (800cf00 <Ble_Hci_Gap_Gatt_Init+0x2b4>)
 800cca8:	f001 fbd8 	bl	800e45c <puts>
    APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
 800ccac:	693b      	ldr	r3, [r7, #16]
 800ccae:	3305      	adds	r3, #5
 800ccb0:	781b      	ldrb	r3, [r3, #0]
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	693b      	ldr	r3, [r7, #16]
 800ccb6:	3304      	adds	r3, #4
 800ccb8:	781b      	ldrb	r3, [r3, #0]
 800ccba:	461c      	mov	r4, r3
 800ccbc:	693b      	ldr	r3, [r7, #16]
 800ccbe:	3303      	adds	r3, #3
 800ccc0:	781b      	ldrb	r3, [r3, #0]
 800ccc2:	461d      	mov	r5, r3
 800ccc4:	693b      	ldr	r3, [r7, #16]
 800ccc6:	3302      	adds	r3, #2
 800ccc8:	781b      	ldrb	r3, [r3, #0]
 800ccca:	461a      	mov	r2, r3
 800cccc:	693b      	ldr	r3, [r7, #16]
 800ccce:	3301      	adds	r3, #1
 800ccd0:	781b      	ldrb	r3, [r3, #0]
 800ccd2:	4619      	mov	r1, r3
 800ccd4:	693b      	ldr	r3, [r7, #16]
 800ccd6:	781b      	ldrb	r3, [r3, #0]
 800ccd8:	9302      	str	r3, [sp, #8]
 800ccda:	9101      	str	r1, [sp, #4]
 800ccdc:	9200      	str	r2, [sp, #0]
 800ccde:	462b      	mov	r3, r5
 800cce0:	4622      	mov	r2, r4
 800cce2:	4601      	mov	r1, r0
 800cce4:	4887      	ldr	r0, [pc, #540]	@ (800cf04 <Ble_Hci_Gap_Gatt_Init+0x2b8>)
 800cce6:	f001 fb49 	bl	800e37c <iprintf>
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 800ccea:	4a87      	ldr	r2, [pc, #540]	@ (800cf08 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 800ccec:	2110      	movs	r1, #16
 800ccee:	2018      	movs	r0, #24
 800ccf0:	f7fd fe73 	bl	800a9da <aci_hal_write_config_data>
 800ccf4:	4603      	mov	r3, r0
 800ccf6:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800ccf8:	7dfb      	ldrb	r3, [r7, #23]
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d005      	beq.n	800cd0a <Ble_Hci_Gap_Gatt_Init+0xbe>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET, result: 0x%x \n", ret);
 800ccfe:	7dfb      	ldrb	r3, [r7, #23]
 800cd00:	4619      	mov	r1, r3
 800cd02:	4882      	ldr	r0, [pc, #520]	@ (800cf0c <Ble_Hci_Gap_Gatt_Init+0x2c0>)
 800cd04:	f001 fb3a 	bl	800e37c <iprintf>
 800cd08:	e002      	b.n	800cd10 <Ble_Hci_Gap_Gatt_Init+0xc4>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET\n");
 800cd0a:	4881      	ldr	r0, [pc, #516]	@ (800cf10 <Ble_Hci_Gap_Gatt_Init+0x2c4>)
 800cd0c:	f001 fba6 	bl	800e45c <puts>
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 800cd10:	4a80      	ldr	r2, [pc, #512]	@ (800cf14 <Ble_Hci_Gap_Gatt_Init+0x2c8>)
 800cd12:	2110      	movs	r1, #16
 800cd14:	2008      	movs	r0, #8
 800cd16:	f7fd fe60 	bl	800a9da <aci_hal_write_config_data>
 800cd1a:	4603      	mov	r3, r0
 800cd1c:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800cd1e:	7dfb      	ldrb	r3, [r7, #23]
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d005      	beq.n	800cd30 <Ble_Hci_Gap_Gatt_Init+0xe4>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET, result: 0x%x \n", ret);
 800cd24:	7dfb      	ldrb	r3, [r7, #23]
 800cd26:	4619      	mov	r1, r3
 800cd28:	487b      	ldr	r0, [pc, #492]	@ (800cf18 <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 800cd2a:	f001 fb27 	bl	800e37c <iprintf>
 800cd2e:	e002      	b.n	800cd36 <Ble_Hci_Gap_Gatt_Init+0xea>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET\n");
 800cd30:	487a      	ldr	r0, [pc, #488]	@ (800cf1c <Ble_Hci_Gap_Gatt_Init+0x2d0>)
 800cd32:	f001 fb93 	bl	800e45c <puts>
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800cd36:	2118      	movs	r1, #24
 800cd38:	2001      	movs	r0, #1
 800cd3a:	f7fd fed3 	bl	800aae4 <aci_hal_set_tx_power_level>
 800cd3e:	4603      	mov	r3, r0
 800cd40:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800cd42:	7dfb      	ldrb	r3, [r7, #23]
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d005      	beq.n	800cd54 <Ble_Hci_Gap_Gatt_Init+0x108>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_tx_power_level command, result: 0x%x \n", ret);
 800cd48:	7dfb      	ldrb	r3, [r7, #23]
 800cd4a:	4619      	mov	r1, r3
 800cd4c:	4874      	ldr	r0, [pc, #464]	@ (800cf20 <Ble_Hci_Gap_Gatt_Init+0x2d4>)
 800cd4e:	f001 fb15 	bl	800e37c <iprintf>
 800cd52:	e002      	b.n	800cd5a <Ble_Hci_Gap_Gatt_Init+0x10e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_tx_power_level command\n");
 800cd54:	4873      	ldr	r0, [pc, #460]	@ (800cf24 <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 800cd56:	f001 fb81 	bl	800e45c <puts>
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 800cd5a:	f7fd fae8 	bl	800a32e <aci_gatt_init>
 800cd5e:	4603      	mov	r3, r0
 800cd60:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800cd62:	7dfb      	ldrb	r3, [r7, #23]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d005      	beq.n	800cd74 <Ble_Hci_Gap_Gatt_Init+0x128>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_init command, result: 0x%x \n", ret);
 800cd68:	7dfb      	ldrb	r3, [r7, #23]
 800cd6a:	4619      	mov	r1, r3
 800cd6c:	486e      	ldr	r0, [pc, #440]	@ (800cf28 <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 800cd6e:	f001 fb05 	bl	800e37c <iprintf>
 800cd72:	e002      	b.n	800cd7a <Ble_Hci_Gap_Gatt_Init+0x12e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_init command\n");
 800cd74:	486d      	ldr	r0, [pc, #436]	@ (800cf2c <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 800cd76:	f001 fb71 	bl	800e45c <puts>
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800cd7e:	7bfb      	ldrb	r3, [r7, #15]
 800cd80:	f043 0301 	orr.w	r3, r3, #1
 800cd84:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 800cd86:	7bfb      	ldrb	r3, [r7, #15]
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d02b      	beq.n	800cde4 <Ble_Hci_Gap_Gatt_Init+0x198>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 800cd8c:	4b68      	ldr	r3, [pc, #416]	@ (800cf30 <Ble_Hci_Gap_Gatt_Init+0x2e4>)
 800cd8e:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 800cd90:	1dba      	adds	r2, r7, #6
 800cd92:	7bf8      	ldrb	r0, [r7, #15]
 800cd94:	1cbb      	adds	r3, r7, #2
 800cd96:	9301      	str	r3, [sp, #4]
 800cd98:	1d3b      	adds	r3, r7, #4
 800cd9a:	9300      	str	r3, [sp, #0]
 800cd9c:	4613      	mov	r3, r2
 800cd9e:	2208      	movs	r2, #8
 800cda0:	2100      	movs	r1, #0
 800cda2:	f7fd f8b0 	bl	8009f06 <aci_gap_init>
 800cda6:	4603      	mov	r3, r0
 800cda8:	75fb      	strb	r3, [r7, #23]
                       CFG_GAP_DEVICE_NAME_LENGTH,
                       &gap_service_handle,
                       &gap_dev_name_char_handle,
                       &gap_appearance_char_handle);

    if (ret != BLE_STATUS_SUCCESS)
 800cdaa:	7dfb      	ldrb	r3, [r7, #23]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d005      	beq.n	800cdbc <Ble_Hci_Gap_Gatt_Init+0x170>
    {
      APP_DBG_MSG("  Fail   : aci_gap_init command, result: 0x%x \n", ret);
 800cdb0:	7dfb      	ldrb	r3, [r7, #23]
 800cdb2:	4619      	mov	r1, r3
 800cdb4:	485f      	ldr	r0, [pc, #380]	@ (800cf34 <Ble_Hci_Gap_Gatt_Init+0x2e8>)
 800cdb6:	f001 fae1 	bl	800e37c <iprintf>
 800cdba:	e002      	b.n	800cdc2 <Ble_Hci_Gap_Gatt_Init+0x176>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
 800cdbc:	485e      	ldr	r0, [pc, #376]	@ (800cf38 <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 800cdbe:	f001 fb4d 	bl	800e45c <puts>
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 800cdc2:	88fc      	ldrh	r4, [r7, #6]
 800cdc4:	88bd      	ldrh	r5, [r7, #4]
 800cdc6:	68b8      	ldr	r0, [r7, #8]
 800cdc8:	f7f3 f9da 	bl	8000180 <strlen>
 800cdcc:	4603      	mov	r3, r0
 800cdce:	b2da      	uxtb	r2, r3
 800cdd0:	68bb      	ldr	r3, [r7, #8]
 800cdd2:	9300      	str	r3, [sp, #0]
 800cdd4:	4613      	mov	r3, r2
 800cdd6:	2200      	movs	r2, #0
 800cdd8:	4629      	mov	r1, r5
 800cdda:	4620      	mov	r0, r4
 800cddc:	f7fd fcaa 	bl	800a734 <aci_gatt_update_char_value>
 800cde0:	4603      	mov	r3, r0
 800cde2:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 800cde4:	88f8      	ldrh	r0, [r7, #6]
 800cde6:	8879      	ldrh	r1, [r7, #2]
 800cde8:	463b      	mov	r3, r7
 800cdea:	9300      	str	r3, [sp, #0]
 800cdec:	2302      	movs	r3, #2
 800cdee:	2200      	movs	r2, #0
 800cdf0:	f7fd fca0 	bl	800a734 <aci_gatt_update_char_value>
 800cdf4:	4603      	mov	r3, r0
 800cdf6:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 800cdf8:	2202      	movs	r2, #2
 800cdfa:	2102      	movs	r1, #2
 800cdfc:	2000      	movs	r0, #0
 800cdfe:	f7fd ff50 	bl	800aca2 <hci_le_set_default_phy>
 800ce02:	4603      	mov	r3, r0
 800ce04:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800ce06:	7dfb      	ldrb	r3, [r7, #23]
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d005      	beq.n	800ce18 <Ble_Hci_Gap_Gatt_Init+0x1cc>
  {
    APP_DBG_MSG("  Fail   : hci_le_set_default_phy command, result: 0x%x \n", ret);
 800ce0c:	7dfb      	ldrb	r3, [r7, #23]
 800ce0e:	4619      	mov	r1, r3
 800ce10:	484a      	ldr	r0, [pc, #296]	@ (800cf3c <Ble_Hci_Gap_Gatt_Init+0x2f0>)
 800ce12:	f001 fab3 	bl	800e37c <iprintf>
 800ce16:	e002      	b.n	800ce1e <Ble_Hci_Gap_Gatt_Init+0x1d2>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_le_set_default_phy command\n");
 800ce18:	4849      	ldr	r0, [pc, #292]	@ (800cf40 <Ble_Hci_Gap_Gatt_Init+0x2f4>)
 800ce1a:	f001 fb1f 	bl	800e45c <puts>
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800ce1e:	4b49      	ldr	r3, [pc, #292]	@ (800cf44 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800ce20:	2201      	movs	r2, #1
 800ce22:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800ce24:	4b47      	ldr	r3, [pc, #284]	@ (800cf44 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800ce26:	781b      	ldrb	r3, [r3, #0]
 800ce28:	4618      	mov	r0, r3
 800ce2a:	f7fc feed 	bl	8009c08 <aci_gap_set_io_capability>
 800ce2e:	4603      	mov	r3, r0
 800ce30:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800ce32:	7dfb      	ldrb	r3, [r7, #23]
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d005      	beq.n	800ce44 <Ble_Hci_Gap_Gatt_Init+0x1f8>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_io_capability command, result: 0x%x \n", ret);
 800ce38:	7dfb      	ldrb	r3, [r7, #23]
 800ce3a:	4619      	mov	r1, r3
 800ce3c:	4842      	ldr	r0, [pc, #264]	@ (800cf48 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800ce3e:	f001 fa9d 	bl	800e37c <iprintf>
 800ce42:	e002      	b.n	800ce4a <Ble_Hci_Gap_Gatt_Init+0x1fe>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_io_capability command\n");
 800ce44:	4841      	ldr	r0, [pc, #260]	@ (800cf4c <Ble_Hci_Gap_Gatt_Init+0x300>)
 800ce46:	f001 fb09 	bl	800e45c <puts>
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800ce4a:	4b3e      	ldr	r3, [pc, #248]	@ (800cf44 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800ce4c:	2201      	movs	r2, #1
 800ce4e:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800ce50:	4b3c      	ldr	r3, [pc, #240]	@ (800cf44 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800ce52:	2208      	movs	r2, #8
 800ce54:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800ce56:	4b3b      	ldr	r3, [pc, #236]	@ (800cf44 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800ce58:	2210      	movs	r2, #16
 800ce5a:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800ce5c:	4b39      	ldr	r3, [pc, #228]	@ (800cf44 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800ce5e:	2200      	movs	r2, #0
 800ce60:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800ce62:	4b38      	ldr	r3, [pc, #224]	@ (800cf44 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800ce64:	4a3a      	ldr	r2, [pc, #232]	@ (800cf50 <Ble_Hci_Gap_Gatt_Init+0x304>)
 800ce66:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800ce68:	4b36      	ldr	r3, [pc, #216]	@ (800cf44 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800ce6a:	2201      	movs	r2, #1
 800ce6c:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800ce6e:	4b35      	ldr	r3, [pc, #212]	@ (800cf44 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800ce70:	789c      	ldrb	r4, [r3, #2]
 800ce72:	4b34      	ldr	r3, [pc, #208]	@ (800cf44 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800ce74:	785d      	ldrb	r5, [r3, #1]
 800ce76:	4b33      	ldr	r3, [pc, #204]	@ (800cf44 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800ce78:	791b      	ldrb	r3, [r3, #4]
 800ce7a:	4a32      	ldr	r2, [pc, #200]	@ (800cf44 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800ce7c:	7952      	ldrb	r2, [r2, #5]
 800ce7e:	4931      	ldr	r1, [pc, #196]	@ (800cf44 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800ce80:	78c9      	ldrb	r1, [r1, #3]
 800ce82:	4830      	ldr	r0, [pc, #192]	@ (800cf44 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800ce84:	6880      	ldr	r0, [r0, #8]
 800ce86:	2600      	movs	r6, #0
 800ce88:	9604      	str	r6, [sp, #16]
 800ce8a:	9003      	str	r0, [sp, #12]
 800ce8c:	9102      	str	r1, [sp, #8]
 800ce8e:	9201      	str	r2, [sp, #4]
 800ce90:	9300      	str	r3, [sp, #0]
 800ce92:	2300      	movs	r3, #0
 800ce94:	2201      	movs	r2, #1
 800ce96:	4629      	mov	r1, r5
 800ce98:	4620      	mov	r0, r4
 800ce9a:	f7fc ff09 	bl	8009cb0 <aci_gap_set_authentication_requirement>
 800ce9e:	4603      	mov	r3, r0
 800cea0:	75fb      	strb	r3, [r7, #23]
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin,
                                               CFG_IDENTITY_ADDRESS);
  if (ret != BLE_STATUS_SUCCESS)
 800cea2:	7dfb      	ldrb	r3, [r7, #23]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d005      	beq.n	800ceb4 <Ble_Hci_Gap_Gatt_Init+0x268>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_authentication_requirement command, result: 0x%x \n", ret);
 800cea8:	7dfb      	ldrb	r3, [r7, #23]
 800ceaa:	4619      	mov	r1, r3
 800ceac:	4829      	ldr	r0, [pc, #164]	@ (800cf54 <Ble_Hci_Gap_Gatt_Init+0x308>)
 800ceae:	f001 fa65 	bl	800e37c <iprintf>
 800ceb2:	e002      	b.n	800ceba <Ble_Hci_Gap_Gatt_Init+0x26e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_authentication_requirement command\n");
 800ceb4:	4828      	ldr	r0, [pc, #160]	@ (800cf58 <Ble_Hci_Gap_Gatt_Init+0x30c>)
 800ceb6:	f001 fad1 	bl	800e45c <puts>
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800ceba:	4b22      	ldr	r3, [pc, #136]	@ (800cf44 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800cebc:	789b      	ldrb	r3, [r3, #2]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d00f      	beq.n	800cee2 <Ble_Hci_Gap_Gatt_Init+0x296>
  {
    ret = aci_gap_configure_whitelist();
 800cec2:	f7fd f93f 	bl	800a144 <aci_gap_configure_filter_accept_list>
 800cec6:	4603      	mov	r3, r0
 800cec8:	75fb      	strb	r3, [r7, #23]
    if (ret != BLE_STATUS_SUCCESS)
 800ceca:	7dfb      	ldrb	r3, [r7, #23]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d005      	beq.n	800cedc <Ble_Hci_Gap_Gatt_Init+0x290>
    {
      APP_DBG_MSG("  Fail   : aci_gap_configure_whitelist command, result: 0x%x \n", ret);
 800ced0:	7dfb      	ldrb	r3, [r7, #23]
 800ced2:	4619      	mov	r1, r3
 800ced4:	4821      	ldr	r0, [pc, #132]	@ (800cf5c <Ble_Hci_Gap_Gatt_Init+0x310>)
 800ced6:	f001 fa51 	bl	800e37c <iprintf>
 800ceda:	e002      	b.n	800cee2 <Ble_Hci_Gap_Gatt_Init+0x296>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
 800cedc:	4820      	ldr	r0, [pc, #128]	@ (800cf60 <Ble_Hci_Gap_Gatt_Init+0x314>)
 800cede:	f001 fabd 	bl	800e45c <puts>
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
 800cee2:	4820      	ldr	r0, [pc, #128]	@ (800cf64 <Ble_Hci_Gap_Gatt_Init+0x318>)
 800cee4:	f001 fa4a 	bl	800e37c <iprintf>
}
 800cee8:	bf00      	nop
 800ceea:	371c      	adds	r7, #28
 800ceec:	46bd      	mov	sp, r7
 800ceee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cef0:	0800fb14 	.word	0x0800fb14
 800cef4:	0800fb40 	.word	0x0800fb40
 800cef8:	0800fb70 	.word	0x0800fb70
 800cefc:	0800fb90 	.word	0x0800fb90
 800cf00:	0800fbf4 	.word	0x0800fbf4
 800cf04:	0800fc48 	.word	0x0800fc48
 800cf08:	08010944 	.word	0x08010944
 800cf0c:	0800fc84 	.word	0x0800fc84
 800cf10:	0800fcdc 	.word	0x0800fcdc
 800cf14:	08010954 	.word	0x08010954
 800cf18:	0800fd24 	.word	0x0800fd24
 800cf1c:	0800fd7c 	.word	0x0800fd7c
 800cf20:	0800fdc4 	.word	0x0800fdc4
 800cf24:	0800fe04 	.word	0x0800fe04
 800cf28:	0800fe34 	.word	0x0800fe34
 800cf2c:	0800fe68 	.word	0x0800fe68
 800cf30:	0800fe8c 	.word	0x0800fe8c
 800cf34:	0800fe98 	.word	0x0800fe98
 800cf38:	0800fec8 	.word	0x0800fec8
 800cf3c:	0800fee8 	.word	0x0800fee8
 800cf40:	0800ff24 	.word	0x0800ff24
 800cf44:	20000cb8 	.word	0x20000cb8
 800cf48:	0800ff50 	.word	0x0800ff50
 800cf4c:	0800ff90 	.word	0x0800ff90
 800cf50:	0001b207 	.word	0x0001b207
 800cf54:	0800ffc0 	.word	0x0800ffc0
 800cf58:	0801000c 	.word	0x0801000c
 800cf5c:	08010048 	.word	0x08010048
 800cf60:	08010088 	.word	0x08010088
 800cf64:	080100b8 	.word	0x080100b8

0800cf68 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 800cf68:	b580      	push	{r7, lr}
 800cf6a:	b08c      	sub	sp, #48	@ 0x30
 800cf6c:	af08      	add	r7, sp, #32
 800cf6e:	4603      	mov	r3, r0
 800cf70:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800cf72:	2392      	movs	r3, #146	@ 0x92
 800cf74:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 800cf76:	4a1e      	ldr	r2, [pc, #120]	@ (800cff0 <Adv_Request+0x88>)
 800cf78:	79fb      	ldrb	r3, [r7, #7]
 800cf7a:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 800cf7e:	2300      	movs	r3, #0
 800cf80:	9306      	str	r3, [sp, #24]
 800cf82:	2300      	movs	r3, #0
 800cf84:	9305      	str	r3, [sp, #20]
 800cf86:	2300      	movs	r3, #0
 800cf88:	9304      	str	r3, [sp, #16]
 800cf8a:	2300      	movs	r3, #0
 800cf8c:	9303      	str	r3, [sp, #12]
 800cf8e:	2300      	movs	r3, #0
 800cf90:	9302      	str	r3, [sp, #8]
 800cf92:	2300      	movs	r3, #0
 800cf94:	9301      	str	r3, [sp, #4]
 800cf96:	2300      	movs	r3, #0
 800cf98:	9300      	str	r3, [sp, #0]
 800cf9a:	2300      	movs	r3, #0
 800cf9c:	22a0      	movs	r2, #160	@ 0xa0
 800cf9e:	2180      	movs	r1, #128	@ 0x80
 800cfa0:	2000      	movs	r0, #0
 800cfa2:	f7fc fd37 	bl	8009a14 <aci_gap_set_discoverable>
 800cfa6:	4603      	mov	r3, r0
 800cfa8:	73fb      	strb	r3, [r7, #15]
                                 0,
                                 0,
                                 0,
                                 0,
                                 0);
  if (ret != BLE_STATUS_SUCCESS)
 800cfaa:	7bfb      	ldrb	r3, [r7, #15]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d005      	beq.n	800cfbc <Adv_Request+0x54>
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - fail, result: 0x%x \n", ret);
 800cfb0:	7bfb      	ldrb	r3, [r7, #15]
 800cfb2:	4619      	mov	r1, r3
 800cfb4:	480f      	ldr	r0, [pc, #60]	@ (800cff4 <Adv_Request+0x8c>)
 800cfb6:	f001 f9e1 	bl	800e37c <iprintf>
 800cfba:	e002      	b.n	800cfc2 <Adv_Request+0x5a>
  }
  else
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
 800cfbc:	480e      	ldr	r0, [pc, #56]	@ (800cff8 <Adv_Request+0x90>)
 800cfbe:	f001 fa4d 	bl	800e45c <puts>
/* USER CODE BEGIN Adv_Request_1*/

/* USER CODE END Adv_Request_1*/

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 800cfc2:	490e      	ldr	r1, [pc, #56]	@ (800cffc <Adv_Request+0x94>)
 800cfc4:	2007      	movs	r0, #7
 800cfc6:	f7fd f84b 	bl	800a060 <aci_gap_update_adv_data>
 800cfca:	4603      	mov	r3, r0
 800cfcc:	73fb      	strb	r3, [r7, #15]
  if (ret != BLE_STATUS_SUCCESS)
 800cfce:	7bfb      	ldrb	r3, [r7, #15]
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d005      	beq.n	800cfe0 <Adv_Request+0x78>
  {
      APP_DBG_MSG("==>> Start Fast Advertising Failed , result: %d \n\r", ret);
 800cfd4:	7bfb      	ldrb	r3, [r7, #15]
 800cfd6:	4619      	mov	r1, r3
 800cfd8:	4809      	ldr	r0, [pc, #36]	@ (800d000 <Adv_Request+0x98>)
 800cfda:	f001 f9cf 	bl	800e37c <iprintf>
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 800cfde:	e003      	b.n	800cfe8 <Adv_Request+0x80>
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
 800cfe0:	4808      	ldr	r0, [pc, #32]	@ (800d004 <Adv_Request+0x9c>)
 800cfe2:	f001 f9cb 	bl	800e37c <iprintf>
  return;
 800cfe6:	bf00      	nop
}
 800cfe8:	3710      	adds	r7, #16
 800cfea:	46bd      	mov	sp, r7
 800cfec:	bd80      	pop	{r7, pc}
 800cfee:	bf00      	nop
 800cff0:	20000cb8 	.word	0x20000cb8
 800cff4:	080100e4 	.word	0x080100e4
 800cff8:	0801011c 	.word	0x0801011c
 800cffc:	20000024 	.word	0x20000024
 800d000:	08010144 	.word	0x08010144
 800d004:	08010178 	.word	0x08010178

0800d008 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 800d008:	b580      	push	{r7, lr}
 800d00a:	b086      	sub	sp, #24
 800d00c:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800d00e:	f7ff fb61 	bl	800c6d4 <LL_FLASH_GetUDN>
 800d012:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 800d014:	693b      	ldr	r3, [r7, #16]
 800d016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d01a:	d023      	beq.n	800d064 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800d01c:	f7ff fb72 	bl	800c704 <LL_FLASH_GetSTCompanyID>
 800d020:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800d022:	f7ff fb63 	bl	800c6ec <LL_FLASH_GetDeviceID>
 800d026:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 800d028:	693b      	ldr	r3, [r7, #16]
 800d02a:	b2da      	uxtb	r2, r3
 800d02c:	4b16      	ldr	r3, [pc, #88]	@ (800d088 <BleGetBdAddress+0x80>)
 800d02e:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 800d030:	693b      	ldr	r3, [r7, #16]
 800d032:	0a1b      	lsrs	r3, r3, #8
 800d034:	b2da      	uxtb	r2, r3
 800d036:	4b14      	ldr	r3, [pc, #80]	@ (800d088 <BleGetBdAddress+0x80>)
 800d038:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	b2da      	uxtb	r2, r3
 800d03e:	4b12      	ldr	r3, [pc, #72]	@ (800d088 <BleGetBdAddress+0x80>)
 800d040:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 800d042:	68bb      	ldr	r3, [r7, #8]
 800d044:	b2da      	uxtb	r2, r3
 800d046:	4b10      	ldr	r3, [pc, #64]	@ (800d088 <BleGetBdAddress+0x80>)
 800d048:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 800d04a:	68bb      	ldr	r3, [r7, #8]
 800d04c:	0a1b      	lsrs	r3, r3, #8
 800d04e:	b2da      	uxtb	r2, r3
 800d050:	4b0d      	ldr	r3, [pc, #52]	@ (800d088 <BleGetBdAddress+0x80>)
 800d052:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 800d054:	68bb      	ldr	r3, [r7, #8]
 800d056:	0c1b      	lsrs	r3, r3, #16
 800d058:	b2da      	uxtb	r2, r3
 800d05a:	4b0b      	ldr	r3, [pc, #44]	@ (800d088 <BleGetBdAddress+0x80>)
 800d05c:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 800d05e:	4b0a      	ldr	r3, [pc, #40]	@ (800d088 <BleGetBdAddress+0x80>)
 800d060:	617b      	str	r3, [r7, #20]
 800d062:	e00b      	b.n	800d07c <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 800d064:	2000      	movs	r0, #0
 800d066:	f7fe fe85 	bl	800bd74 <OTP_Read>
 800d06a:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d002      	beq.n	800d078 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	617b      	str	r3, [r7, #20]
 800d076:	e001      	b.n	800d07c <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 800d078:	4b04      	ldr	r3, [pc, #16]	@ (800d08c <BleGetBdAddress+0x84>)
 800d07a:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 800d07c:	697b      	ldr	r3, [r7, #20]
}
 800d07e:	4618      	mov	r0, r3
 800d080:	3718      	adds	r7, #24
 800d082:	46bd      	mov	sp, r7
 800d084:	bd80      	pop	{r7, pc}
 800d086:	bf00      	nop
 800d088:	20000cb0 	.word	0x20000cb0
 800d08c:	0801093c 	.word	0x0801093c

0800d090 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 800d090:	b580      	push	{r7, lr}
 800d092:	b082      	sub	sp, #8
 800d094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800d096:	4b10      	ldr	r3, [pc, #64]	@ (800d0d8 <Adv_Cancel+0x48>)
 800d098:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800d09c:	2b05      	cmp	r3, #5
 800d09e:	d017      	beq.n	800d0d0 <Adv_Cancel+0x40>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800d0a0:	2392      	movs	r3, #146	@ 0x92
 800d0a2:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 800d0a4:	f7fc fc92 	bl	80099cc <aci_gap_set_non_discoverable>
 800d0a8:	4603      	mov	r3, r0
 800d0aa:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800d0ac:	4b0a      	ldr	r3, [pc, #40]	@ (800d0d8 <Adv_Cancel+0x48>)
 800d0ae:	2200      	movs	r2, #0
 800d0b0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    if (ret != BLE_STATUS_SUCCESS)
 800d0b4:	79fb      	ldrb	r3, [r7, #7]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d003      	beq.n	800d0c2 <Adv_Cancel+0x32>
    {
      APP_DBG_MSG("** STOP ADVERTISING **  Failed \r\n\r");
 800d0ba:	4808      	ldr	r0, [pc, #32]	@ (800d0dc <Adv_Cancel+0x4c>)
 800d0bc:	f001 f95e 	bl	800e37c <iprintf>

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 800d0c0:	e006      	b.n	800d0d0 <Adv_Cancel+0x40>
      APP_DBG_MSG("  \r\n\r");
 800d0c2:	4807      	ldr	r0, [pc, #28]	@ (800d0e0 <Adv_Cancel+0x50>)
 800d0c4:	f001 f95a 	bl	800e37c <iprintf>
      APP_DBG_MSG("** STOP ADVERTISING **  \r\n\r");
 800d0c8:	4806      	ldr	r0, [pc, #24]	@ (800d0e4 <Adv_Cancel+0x54>)
 800d0ca:	f001 f957 	bl	800e37c <iprintf>
  return;
 800d0ce:	bf00      	nop
 800d0d0:	bf00      	nop
}
 800d0d2:	3708      	adds	r7, #8
 800d0d4:	46bd      	mov	sp, r7
 800d0d6:	bd80      	pop	{r7, pc}
 800d0d8:	20000cb8 	.word	0x20000cb8
 800d0dc:	080101a0 	.word	0x080101a0
 800d0e0:	080101c4 	.word	0x080101c4
 800d0e4:	080101cc 	.word	0x080101cc

0800d0e8 <Ble_Disconnect>:
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

/* USER CODE BEGIN FD_SPECIFIC_FUNCTIONS */

// TODO: MARCEL BLE CODE:
static void Ble_Disconnect(void) {
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	b082      	sub	sp, #8
 800d0ec:	af00      	add	r7, sp, #0
	if (BleApplicationContext.Device_Connection_Status == APP_BLE_CONNECTED_SERVER) {
 800d0ee:	4b10      	ldr	r3, [pc, #64]	@ (800d130 <Ble_Disconnect+0x48>)
 800d0f0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800d0f4:	2b05      	cmp	r3, #5
 800d0f6:	d116      	bne.n	800d126 <Ble_Disconnect+0x3e>
		tBleStatus result = 0x00;
 800d0f8:	2300      	movs	r3, #0
 800d0fa:	71fb      	strb	r3, [r7, #7]

		result = aci_gap_terminate(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,0x13);
 800d0fc:	4b0c      	ldr	r3, [pc, #48]	@ (800d130 <Ble_Disconnect+0x48>)
 800d0fe:	8adb      	ldrh	r3, [r3, #22]
 800d100:	2113      	movs	r1, #19
 800d102:	4618      	mov	r0, r3
 800d104:	f7fd f842 	bl	800a18c <aci_gap_terminate>
 800d108:	4603      	mov	r3, r0
 800d10a:	71fb      	strb	r3, [r7, #7]

	    if (result == BLE_STATUS_SUCCESS) {
 800d10c:	79fb      	ldrb	r3, [r7, #7]
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d106      	bne.n	800d120 <Ble_Disconnect+0x38>
	    	APP_DBG_MSG("  \r\n\r");APP_DBG_MSG("** BLE DISCONNECTED **  \r\n\r");
 800d112:	4808      	ldr	r0, [pc, #32]	@ (800d134 <Ble_Disconnect+0x4c>)
 800d114:	f001 f932 	bl	800e37c <iprintf>
 800d118:	4807      	ldr	r0, [pc, #28]	@ (800d138 <Ble_Disconnect+0x50>)
 800d11a:	f001 f92f 	bl	800e37c <iprintf>
	    } else {
	    	APP_DBG_MSG("** BLE DISCONNECTED **  Failed \r\n\r");
	    }
	}
}
 800d11e:	e002      	b.n	800d126 <Ble_Disconnect+0x3e>
	    	APP_DBG_MSG("** BLE DISCONNECTED **  Failed \r\n\r");
 800d120:	4806      	ldr	r0, [pc, #24]	@ (800d13c <Ble_Disconnect+0x54>)
 800d122:	f001 f92b 	bl	800e37c <iprintf>
}
 800d126:	bf00      	nop
 800d128:	3708      	adds	r7, #8
 800d12a:	46bd      	mov	sp, r7
 800d12c:	bd80      	pop	{r7, pc}
 800d12e:	bf00      	nop
 800d130:	20000cb8 	.word	0x20000cb8
 800d134:	080101c4 	.word	0x080101c4
 800d138:	080101e8 	.word	0x080101e8
 800d13c:	08010204 	.word	0x08010204

0800d140 <Adv_Start_Req>:

void Adv_Start_Req(void) {
 800d140:	b580      	push	{r7, lr}
 800d142:	af00      	add	r7, sp, #0
	/**
	 * Make device discoverable
	 */
	BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800d144:	4b05      	ldr	r3, [pc, #20]	@ (800d15c <Adv_Start_Req+0x1c>)
 800d146:	2200      	movs	r2, #0
 800d148:	765a      	strb	r2, [r3, #25]
	BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800d14a:	4b04      	ldr	r3, [pc, #16]	@ (800d15c <Adv_Start_Req+0x1c>)
 800d14c:	2200      	movs	r2, #0
 800d14e:	761a      	strb	r2, [r3, #24]

	/**
	 * Start to Advertise to be connected by a Client
	 */
	Adv_Request(APP_BLE_FAST_ADV);
 800d150:	2001      	movs	r0, #1
 800d152:	f7ff ff09 	bl	800cf68 <Adv_Request>

	return;
 800d156:	bf00      	nop
}
 800d158:	bd80      	pop	{r7, pc}
 800d15a:	bf00      	nop
 800d15c:	20000cb8 	.word	0x20000cb8

0800d160 <Ble_Disconnect_Req>:
void Adv_Cancel_Req(void) {
	UTIL_SEQ_SetTask(1 << CFG_TASK_ADV_CANCEL_ID, CFG_SCH_PRIO_0);
	return;
}

void Ble_Disconnect_Req(void) {
 800d160:	b580      	push	{r7, lr}
 800d162:	af00      	add	r7, sp, #0
	UTIL_SEQ_SetTask(1 << CFG_TASK_DISCON_ID, CFG_SCH_PRIO_0);
 800d164:	2100      	movs	r1, #0
 800d166:	2004      	movs	r0, #4
 800d168:	f000 ff3c 	bl	800dfe4 <UTIL_SEQ_SetTask>
	return;
 800d16c:	bf00      	nop
}
 800d16e:	bd80      	pop	{r7, pc}

0800d170 <isBleConnected>:
	} else {
		return 0;
	}
}

uint8_t isBleConnected(void) {
 800d170:	b480      	push	{r7}
 800d172:	af00      	add	r7, sp, #0
	if(BleApplicationContext.Device_Connection_Status == APP_BLE_CONNECTED_SERVER) {
 800d174:	4b06      	ldr	r3, [pc, #24]	@ (800d190 <isBleConnected+0x20>)
 800d176:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800d17a:	2b05      	cmp	r3, #5
 800d17c:	d101      	bne.n	800d182 <isBleConnected+0x12>
		return 1;
 800d17e:	2301      	movs	r3, #1
 800d180:	e000      	b.n	800d184 <isBleConnected+0x14>
	} else {
		return 0;
 800d182:	2300      	movs	r3, #0
	}
}
 800d184:	4618      	mov	r0, r3
 800d186:	46bd      	mov	sp, r7
 800d188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d18c:	4770      	bx	lr
 800d18e:	bf00      	nop
 800d190:	20000cb8 	.word	0x20000cb8

0800d194 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 800d194:	b580      	push	{r7, lr}
 800d196:	b082      	sub	sp, #8
 800d198:	af00      	add	r7, sp, #0
 800d19a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800d19c:	2100      	movs	r1, #0
 800d19e:	2002      	movs	r0, #2
 800d1a0:	f000 ff20 	bl	800dfe4 <UTIL_SEQ_SetTask>

  return;
 800d1a4:	bf00      	nop
}
 800d1a6:	3708      	adds	r7, #8
 800d1a8:	46bd      	mov	sp, r7
 800d1aa:	bd80      	pop	{r7, pc}

0800d1ac <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 800d1ac:	b580      	push	{r7, lr}
 800d1ae:	b082      	sub	sp, #8
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800d1b4:	2001      	movs	r0, #1
 800d1b6:	f000 ff81 	bl	800e0bc <UTIL_SEQ_SetEvt>

  return;
 800d1ba:	bf00      	nop
}
 800d1bc:	3708      	adds	r7, #8
 800d1be:	46bd      	mov	sp, r7
 800d1c0:	bd80      	pop	{r7, pc}

0800d1c2 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 800d1c2:	b580      	push	{r7, lr}
 800d1c4:	b082      	sub	sp, #8
 800d1c6:	af00      	add	r7, sp, #0
 800d1c8:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800d1ca:	2001      	movs	r0, #1
 800d1cc:	f000 ff96 	bl	800e0fc <UTIL_SEQ_WaitEvt>

  return;
 800d1d0:	bf00      	nop
}
 800d1d2:	3708      	adds	r7, #8
 800d1d4:	46bd      	mov	sp, r7
 800d1d6:	bd80      	pop	{r7, pc}

0800d1d8 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 800d1d8:	b580      	push	{r7, lr}
 800d1da:	b084      	sub	sp, #16
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	685b      	ldr	r3, [r3, #4]
 800d1e8:	3308      	adds	r3, #8
 800d1ea:	4618      	mov	r0, r3
 800d1ec:	f7fd fec0 	bl	800af70 <SVCCTL_UserEvtRx>
 800d1f0:	4603      	mov	r3, r0
 800d1f2:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800d1f4:	7afb      	ldrb	r3, [r7, #11]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d003      	beq.n	800d202 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	2201      	movs	r2, #1
 800d1fe:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 800d200:	e003      	b.n	800d20a <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	2200      	movs	r2, #0
 800d206:	701a      	strb	r2, [r3, #0]
  return;
 800d208:	bf00      	nop
}
 800d20a:	3710      	adds	r7, #16
 800d20c:	46bd      	mov	sp, r7
 800d20e:	bd80      	pop	{r7, pc}

0800d210 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 800d210:	b580      	push	{r7, lr}
 800d212:	b084      	sub	sp, #16
 800d214:	af00      	add	r7, sp, #0
 800d216:	4603      	mov	r3, r0
 800d218:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 800d21a:	79fb      	ldrb	r3, [r7, #7]
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d002      	beq.n	800d226 <BLE_StatusNot+0x16>
 800d220:	2b01      	cmp	r3, #1
 800d222:	d006      	beq.n	800d232 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 800d224:	e00b      	b.n	800d23e <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800d226:	2307      	movs	r3, #7
 800d228:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800d22a:	68f8      	ldr	r0, [r7, #12]
 800d22c:	f000 ff06 	bl	800e03c <UTIL_SEQ_PauseTask>
      break;
 800d230:	e005      	b.n	800d23e <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800d232:	2307      	movs	r3, #7
 800d234:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800d236:	68f8      	ldr	r0, [r7, #12]
 800d238:	f000 ff20 	bl	800e07c <UTIL_SEQ_ResumeTask>
      break;
 800d23c:	bf00      	nop
  }

  return;
 800d23e:	bf00      	nop
}
 800d240:	3710      	adds	r7, #16
 800d242:	46bd      	mov	sp, r7
 800d244:	bd80      	pop	{r7, pc}
	...

0800d248 <Custom_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 800d248:	b480      	push	{r7}
 800d24a:	b083      	sub	sp, #12
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	781b      	ldrb	r3, [r3, #0]
 800d254:	2b03      	cmp	r3, #3
 800d256:	d80b      	bhi.n	800d270 <Custom_STM_App_Notification+0x28>
 800d258:	a201      	add	r2, pc, #4	@ (adr r2, 800d260 <Custom_STM_App_Notification+0x18>)
 800d25a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d25e:	bf00      	nop
 800d260:	0800d271 	.word	0x0800d271
 800d264:	0800d271 	.word	0x0800d271
 800d268:	0800d271 	.word	0x0800d271
 800d26c:	0800d271 	.word	0x0800d271

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 800d270:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 800d272:	bf00      	nop
}
 800d274:	370c      	adds	r7, #12
 800d276:	46bd      	mov	sp, r7
 800d278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d27c:	4770      	bx	lr
 800d27e:	bf00      	nop

0800d280 <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 800d280:	b480      	push	{r7}
 800d282:	b083      	sub	sp, #12
 800d284:	af00      	add	r7, sp, #0
 800d286:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	781b      	ldrb	r3, [r3, #0]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d002      	beq.n	800d296 <Custom_APP_Notification+0x16>
 800d290:	2b01      	cmp	r3, #1
 800d292:	d002      	beq.n	800d29a <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 800d294:	e002      	b.n	800d29c <Custom_APP_Notification+0x1c>
      break;
 800d296:	bf00      	nop
 800d298:	e000      	b.n	800d29c <Custom_APP_Notification+0x1c>
      break;
 800d29a:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 800d29c:	bf00      	nop
}
 800d29e:	370c      	adds	r7, #12
 800d2a0:	46bd      	mov	sp, r7
 800d2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a6:	4770      	bx	lr

0800d2a8 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 800d2a8:	b480      	push	{r7}
 800d2aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 800d2ac:	bf00      	nop
}
 800d2ae:	46bd      	mov	sp, r7
 800d2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b4:	4770      	bx	lr
	...

0800d2b8 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 800d2b8:	b580      	push	{r7, lr}
 800d2ba:	f5ad 7d0e 	sub.w	sp, sp, #568	@ 0x238
 800d2be:	af00      	add	r7, sp, #0
 800d2c0:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 800d2c4:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 800d2c8:	6018      	str	r0, [r3, #0]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 800d2ca:	2300      	movs	r3, #0
 800d2cc:	f887 3237 	strb.w	r3, [r7, #567]	@ 0x237
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800d2d0:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 800d2d4:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	3301      	adds	r3, #1
 800d2dc:	f8c7 3230 	str.w	r3, [r7, #560]	@ 0x230

  switch (event_pckt->evt)
 800d2e0:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 800d2e4:	781b      	ldrb	r3, [r3, #0]
 800d2e6:	2bff      	cmp	r3, #255	@ 0xff
 800d2e8:	f040 810a 	bne.w	800d500 <Custom_STM_Event_Handler+0x248>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 800d2ec:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 800d2f0:	3302      	adds	r3, #2
 800d2f2:	f8c7 322c 	str.w	r3, [r7, #556]	@ 0x22c
      switch (blecore_evt->ecode)
 800d2f6:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 800d2fa:	881b      	ldrh	r3, [r3, #0]
 800d2fc:	b29b      	uxth	r3, r3
 800d2fe:	f6a3 4301 	subw	r3, r3, #3073	@ 0xc01
 800d302:	2b1a      	cmp	r3, #26
 800d304:	f200 80f6 	bhi.w	800d4f4 <Custom_STM_Event_Handler+0x23c>
 800d308:	a201      	add	r2, pc, #4	@ (adr r2, 800d310 <Custom_STM_Event_Handler+0x58>)
 800d30a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d30e:	bf00      	nop
 800d310:	0800d37d 	.word	0x0800d37d
 800d314:	0800d4f5 	.word	0x0800d4f5
 800d318:	0800d4f5 	.word	0x0800d4f5
 800d31c:	0800d4f5 	.word	0x0800d4f5
 800d320:	0800d4f5 	.word	0x0800d4f5
 800d324:	0800d4f5 	.word	0x0800d4f5
 800d328:	0800d4f5 	.word	0x0800d4f5
 800d32c:	0800d4f5 	.word	0x0800d4f5
 800d330:	0800d4f5 	.word	0x0800d4f5
 800d334:	0800d4f5 	.word	0x0800d4f5
 800d338:	0800d4f5 	.word	0x0800d4f5
 800d33c:	0800d4f5 	.word	0x0800d4f5
 800d340:	0800d4f5 	.word	0x0800d4f5
 800d344:	0800d4f5 	.word	0x0800d4f5
 800d348:	0800d4f5 	.word	0x0800d4f5
 800d34c:	0800d4f5 	.word	0x0800d4f5
 800d350:	0800d4f5 	.word	0x0800d4f5
 800d354:	0800d4f5 	.word	0x0800d4f5
 800d358:	0800d4f5 	.word	0x0800d4f5
 800d35c:	0800d469 	.word	0x0800d469
 800d360:	0800d4f5 	.word	0x0800d4f5
 800d364:	0800d4f5 	.word	0x0800d4f5
 800d368:	0800d4f5 	.word	0x0800d4f5
 800d36c:	0800d4f5 	.word	0x0800d4f5
 800d370:	0800d4f5 	.word	0x0800d4f5
 800d374:	0800d4f5 	.word	0x0800d4f5
 800d378:	0800d4cd 	.word	0x0800d4cd
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 800d37c:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 800d380:	3302      	adds	r3, #2
 800d382:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
          if (attribute_modified->Attr_Handle == (CustomContext.CustomV_ChHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800d386:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 800d38a:	885b      	ldrh	r3, [r3, #2]
 800d38c:	b29b      	uxth	r3, r3
 800d38e:	461a      	mov	r2, r3
 800d390:	4b5f      	ldr	r3, [pc, #380]	@ (800d510 <Custom_STM_Event_Handler+0x258>)
 800d392:	885b      	ldrh	r3, [r3, #2]
 800d394:	3301      	adds	r3, #1
 800d396:	429a      	cmp	r2, r3
 800d398:	d122      	bne.n	800d3e0 <Custom_STM_Event_Handler+0x128>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 800d39a:	2301      	movs	r3, #1
 800d39c:	f887 3237 	strb.w	r3, [r7, #567]	@ 0x237
  __ASM volatile ("cpsid i" : : : "memory");
 800d3a0:	b672      	cpsid	i
}
 800d3a2:	bf00      	nop
//		    Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
//		    Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
//		    Custom_STM_App_Notification(&Notification);
			// Copiar a buffer global con protección
			__disable_irq();
			memcpy(&ble_buffer[attribute_modified->Offset], attribute_modified->Attr_Data, attribute_modified->Attr_Data_Length);
 800d3a4:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 800d3a8:	889b      	ldrh	r3, [r3, #4]
 800d3aa:	b29b      	uxth	r3, r3
 800d3ac:	461a      	mov	r2, r3
 800d3ae:	4b59      	ldr	r3, [pc, #356]	@ (800d514 <Custom_STM_Event_Handler+0x25c>)
 800d3b0:	18d0      	adds	r0, r2, r3
 800d3b2:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 800d3b6:	f103 0108 	add.w	r1, r3, #8
 800d3ba:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 800d3be:	88db      	ldrh	r3, [r3, #6]
 800d3c0:	b29b      	uxth	r3, r3
 800d3c2:	461a      	mov	r2, r3
 800d3c4:	f001 f9b5 	bl	800e732 <memcpy>
			ble_lenght = attribute_modified->Attr_Data_Length;
 800d3c8:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 800d3cc:	88db      	ldrh	r3, [r3, #6]
 800d3ce:	b29b      	uxth	r3, r3
 800d3d0:	b2da      	uxtb	r2, r3
 800d3d2:	4b51      	ldr	r3, [pc, #324]	@ (800d518 <Custom_STM_Event_Handler+0x260>)
 800d3d4:	701a      	strb	r2, [r3, #0]
			data_ready = 1;
 800d3d6:	4b51      	ldr	r3, [pc, #324]	@ (800d51c <Custom_STM_Event_Handler+0x264>)
 800d3d8:	2201      	movs	r2, #1
 800d3da:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800d3dc:	b662      	cpsie	i
}
 800d3de:	e042      	b.n	800d466 <Custom_STM_Event_Handler+0x1ae>
			__enable_irq();
            /* USER CODE END CUSTOM_STM_Service_1_Char_1_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
          } /* if (attribute_modified->Attr_Handle == (CustomContext.CustomV_ChHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomFullHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800d3e0:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 800d3e4:	885b      	ldrh	r3, [r3, #2]
 800d3e6:	b29b      	uxth	r3, r3
 800d3e8:	461a      	mov	r2, r3
 800d3ea:	4b49      	ldr	r3, [pc, #292]	@ (800d510 <Custom_STM_Event_Handler+0x258>)
 800d3ec:	889b      	ldrh	r3, [r3, #4]
 800d3ee:	3301      	adds	r3, #1
 800d3f0:	429a      	cmp	r2, r3
 800d3f2:	f040 8081 	bne.w	800d4f8 <Custom_STM_Event_Handler+0x240>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 800d3f6:	2301      	movs	r3, #1
 800d3f8:	f887 3237 	strb.w	r3, [r7, #567]	@ 0x237
  __ASM volatile ("cpsid i" : : : "memory");
 800d3fc:	b672      	cpsid	i
}
 800d3fe:	bf00      	nop
//            Notification.Custom_Evt_Opcode = CUSTOM_STM_FULL_WRITE_NO_RESP_EVT;
//		    Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
//		    Custom_STM_App_Notification(&Notification);
	        __disable_irq();
	        uint16_t offset;
	        if(attribute_modified->Offset == 32768){
 800d400:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 800d404:	889b      	ldrh	r3, [r3, #4]
 800d406:	b29b      	uxth	r3, r3
 800d408:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d40c:	d103      	bne.n	800d416 <Custom_STM_Event_Handler+0x15e>
	        	offset = 0;
 800d40e:	2300      	movs	r3, #0
 800d410:	f8a7 3234 	strh.w	r3, [r7, #564]	@ 0x234
 800d414:	e013      	b.n	800d43e <Custom_STM_Event_Handler+0x186>
	        } else if(attribute_modified->Offset == 33013){
 800d416:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 800d41a:	889b      	ldrh	r3, [r3, #4]
 800d41c:	b29b      	uxth	r3, r3
 800d41e:	f248 02f5 	movw	r2, #33013	@ 0x80f5
 800d422:	4293      	cmp	r3, r2
 800d424:	d103      	bne.n	800d42e <Custom_STM_Event_Handler+0x176>
	        	offset = 245;
 800d426:	23f5      	movs	r3, #245	@ 0xf5
 800d428:	f8a7 3234 	strh.w	r3, [r7, #564]	@ 0x234
 800d42c:	e007      	b.n	800d43e <Custom_STM_Event_Handler+0x186>
	        } else {
	        	offset = attribute_modified->Offset;
 800d42e:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 800d432:	791a      	ldrb	r2, [r3, #4]
 800d434:	795b      	ldrb	r3, [r3, #5]
 800d436:	021b      	lsls	r3, r3, #8
 800d438:	4313      	orrs	r3, r2
 800d43a:	f8a7 3234 	strh.w	r3, [r7, #564]	@ 0x234
	        }
	        memcpy(&ble_full_buffer[offset], attribute_modified->Attr_Data, attribute_modified->Attr_Data_Length);
 800d43e:	f8b7 3234 	ldrh.w	r3, [r7, #564]	@ 0x234
 800d442:	4a37      	ldr	r2, [pc, #220]	@ (800d520 <Custom_STM_Event_Handler+0x268>)
 800d444:	1898      	adds	r0, r3, r2
 800d446:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 800d44a:	f103 0108 	add.w	r1, r3, #8
 800d44e:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 800d452:	88db      	ldrh	r3, [r3, #6]
 800d454:	b29b      	uxth	r3, r3
 800d456:	461a      	mov	r2, r3
 800d458:	f001 f96b 	bl	800e732 <memcpy>
	        data_full_ready = 1;
 800d45c:	4b31      	ldr	r3, [pc, #196]	@ (800d524 <Custom_STM_Event_Handler+0x26c>)
 800d45e:	2201      	movs	r2, #1
 800d460:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800d462:	b662      	cpsie	i
}
 800d464:	bf00      	nop
            /* USER CODE END CUSTOM_STM_Service_1_Char_2_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
          } /* if (attribute_modified->Attr_Handle == (CustomContext.CustomFullHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */
          break;
 800d466:	e047      	b.n	800d4f8 <Custom_STM_Event_Handler+0x240>

        case ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE :
          /* USER CODE BEGIN EVT_BLUE_GATT_READ_PERMIT_REQ_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_READ_PERMIT_REQ_BEGIN */
          read_req = (aci_gatt_read_permit_req_event_rp0*)blecore_evt->data;
 800d468:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 800d46c:	3302      	adds	r3, #2
 800d46e:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
          if (read_req->Attribute_Handle == (CustomContext.CustomFullHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800d472:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 800d476:	885b      	ldrh	r3, [r3, #2]
 800d478:	b29b      	uxth	r3, r3
 800d47a:	461a      	mov	r2, r3
 800d47c:	4b24      	ldr	r3, [pc, #144]	@ (800d510 <Custom_STM_Event_Handler+0x258>)
 800d47e:	889b      	ldrh	r3, [r3, #4]
 800d480:	3301      	adds	r3, #1
 800d482:	429a      	cmp	r2, r3
 800d484:	d13a      	bne.n	800d4fc <Custom_STM_Event_Handler+0x244>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 800d486:	2301      	movs	r3, #1
 800d488:	f887 3237 	strb.w	r3, [r7, #567]	@ 0x237
            /*USER CODE BEGIN CUSTOM_STM_Service_1_Char_2_ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE_1 */
            const uint8_t *dmx_buffer = DMX512_GetBuffer();
 800d48c:	f7f5 ffaa 	bl	80033e4 <DMX512_GetBuffer>
 800d490:	f8c7 0220 	str.w	r0, [r7, #544]	@ 0x220
            uint8_t buffer512[512];
            memcpy(buffer512, &dmx_buffer[1], 512);
 800d494:	f8d7 3220 	ldr.w	r3, [r7, #544]	@ 0x220
 800d498:	1c5a      	adds	r2, r3, #1
 800d49a:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 800d49e:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 800d4a2:	4618      	mov	r0, r3
 800d4a4:	4611      	mov	r1, r2
 800d4a6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d4aa:	461a      	mov	r2, r3
 800d4ac:	f001 f941 	bl	800e732 <memcpy>
            Custom_STM_App_Update_Char(CUSTOM_STM_FULL, buffer512);
 800d4b0:	f107 0308 	add.w	r3, r7, #8
 800d4b4:	4619      	mov	r1, r3
 800d4b6:	2001      	movs	r0, #1
 800d4b8:	f000 f916 	bl	800d6e8 <Custom_STM_App_Update_Char>
            /*USER CODE END CUSTOM_STM_Service_1_Char_2_ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE_1*/
            aci_gatt_allow_read(read_req->Connection_Handle);
 800d4bc:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 800d4c0:	881b      	ldrh	r3, [r3, #0]
 800d4c2:	b29b      	uxth	r3, r3
 800d4c4:	4618      	mov	r0, r3
 800d4c6:	f7fd fa33 	bl	800a930 <aci_gatt_allow_read>
            /*USER CODE END CUSTOM_STM_Service_1_Char_2_ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE_2*/
          } /* if (read_req->Attribute_Handle == (CustomContext.CustomFullHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/
          /* USER CODE BEGIN EVT_BLUE_GATT_READ_PERMIT_REQ_END */

          /* USER CODE END EVT_BLUE_GATT_READ_PERMIT_REQ_END */
          break;
 800d4ca:	e017      	b.n	800d4fc <Custom_STM_Event_Handler+0x244>
		case ACI_GATT_NOTIFICATION_COMPLETE_VSEVT_CODE:
        {
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */
          notification_complete = (aci_gatt_notification_complete_event_rp0*)blecore_evt->data;
 800d4cc:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 800d4d0:	3302      	adds	r3, #2
 800d4d2:	f8c7 3228 	str.w	r3, [r7, #552]	@ 0x228
          Notification.Custom_Evt_Opcode = CUSTOM_STM_NOTIFICATION_COMPLETE_EVT;
 800d4d6:	2303      	movs	r3, #3
 800d4d8:	f887 3208 	strb.w	r3, [r7, #520]	@ 0x208
          Notification.AttrHandle = notification_complete->Attr_Handle;
 800d4dc:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 800d4e0:	881b      	ldrh	r3, [r3, #0]
 800d4e2:	b29b      	uxth	r3, r3
 800d4e4:	f8a7 3218 	strh.w	r3, [r7, #536]	@ 0x218
          Custom_STM_App_Notification(&Notification);
 800d4e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800d4ec:	4618      	mov	r0, r3
 800d4ee:	f7ff feab 	bl	800d248 <Custom_STM_App_Notification>
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */
          break;
 800d4f2:	e004      	b.n	800d4fe <Custom_STM_Event_Handler+0x246>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 800d4f4:	bf00      	nop
 800d4f6:	e004      	b.n	800d502 <Custom_STM_Event_Handler+0x24a>
          break;
 800d4f8:	bf00      	nop
 800d4fa:	e002      	b.n	800d502 <Custom_STM_Event_Handler+0x24a>
          break;
 800d4fc:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800d4fe:	e000      	b.n	800d502 <Custom_STM_Event_Handler+0x24a>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 800d500:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 800d502:	f897 3237 	ldrb.w	r3, [r7, #567]	@ 0x237
}/* end Custom_STM_Event_Handler */
 800d506:	4618      	mov	r0, r3
 800d508:	f507 770e 	add.w	r7, r7, #568	@ 0x238
 800d50c:	46bd      	mov	sp, r7
 800d50e:	bd80      	pop	{r7, pc}
 800d510:	20000d40 	.word	0x20000d40
 800d514:	20000528 	.word	0x20000528
 800d518:	20000728 	.word	0x20000728
 800d51c:	20000729 	.word	0x20000729
 800d520:	2000072c 	.word	0x2000072c
 800d524:	2000092c 	.word	0x2000092c

0800d528 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 800d528:	b580      	push	{r7, lr}
 800d52a:	b08c      	sub	sp, #48	@ 0x30
 800d52c:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800d52e:	2392      	movs	r3, #146	@ 0x92
 800d530:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 800d532:	4861      	ldr	r0, [pc, #388]	@ (800d6b8 <SVCCTL_InitCustomSvc+0x190>)
 800d534:	f7fd fd02 	bl	800af3c <SVCCTL_RegisterSvcHandler>
   *                              = 5
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 5;
 800d538:	2305      	movs	r3, #5
 800d53a:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService1 */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService1 */

  COPY_DEVICE_SERVICE_UUID(uuid.Char_UUID_128);
 800d53c:	23e3      	movs	r3, #227	@ 0xe3
 800d53e:	713b      	strb	r3, [r7, #4]
 800d540:	2322      	movs	r3, #34	@ 0x22
 800d542:	717b      	strb	r3, [r7, #5]
 800d544:	2310      	movs	r3, #16
 800d546:	71bb      	strb	r3, [r7, #6]
 800d548:	23a1      	movs	r3, #161	@ 0xa1
 800d54a:	71fb      	strb	r3, [r7, #7]
 800d54c:	232b      	movs	r3, #43	@ 0x2b
 800d54e:	723b      	strb	r3, [r7, #8]
 800d550:	237b      	movs	r3, #123	@ 0x7b
 800d552:	727b      	strb	r3, [r7, #9]
 800d554:	2301      	movs	r3, #1
 800d556:	72bb      	strb	r3, [r7, #10]
 800d558:	23b6      	movs	r3, #182	@ 0xb6
 800d55a:	72fb      	strb	r3, [r7, #11]
 800d55c:	2378      	movs	r3, #120	@ 0x78
 800d55e:	733b      	strb	r3, [r7, #12]
 800d560:	234c      	movs	r3, #76	@ 0x4c
 800d562:	737b      	strb	r3, [r7, #13]
 800d564:	234a      	movs	r3, #74	@ 0x4a
 800d566:	73bb      	strb	r3, [r7, #14]
 800d568:	238d      	movs	r3, #141	@ 0x8d
 800d56a:	73fb      	strb	r3, [r7, #15]
 800d56c:	2300      	movs	r3, #0
 800d56e:	743b      	strb	r3, [r7, #16]
 800d570:	2300      	movs	r3, #0
 800d572:	747b      	strb	r3, [r7, #17]
 800d574:	234f      	movs	r3, #79	@ 0x4f
 800d576:	74bb      	strb	r3, [r7, #18]
 800d578:	23b7      	movs	r3, #183	@ 0xb7
 800d57a:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 800d57c:	7dbb      	ldrb	r3, [r7, #22]
 800d57e:	1d39      	adds	r1, r7, #4
 800d580:	4a4e      	ldr	r2, [pc, #312]	@ (800d6bc <SVCCTL_InitCustomSvc+0x194>)
 800d582:	9200      	str	r2, [sp, #0]
 800d584:	2201      	movs	r2, #1
 800d586:	2002      	movs	r0, #2
 800d588:	f7fc fef6 	bl	800a378 <aci_gatt_add_service>
 800d58c:	4603      	mov	r3, r0
 800d58e:	75fb      	strb	r3, [r7, #23]
                             (Service_UUID_t *) &uuid,
                             PRIMARY_SERVICE,
                             max_attr_record,
                             &(CustomContext.CustomDevice_ServiceHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800d590:	7dfb      	ldrb	r3, [r7, #23]
 800d592:	2b00      	cmp	r3, #0
 800d594:	d005      	beq.n	800d5a2 <SVCCTL_InitCustomSvc+0x7a>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_service command: DEVICE_SERVICE, error code: 0x%x \n\r", ret);
 800d596:	7dfb      	ldrb	r3, [r7, #23]
 800d598:	4619      	mov	r1, r3
 800d59a:	4849      	ldr	r0, [pc, #292]	@ (800d6c0 <SVCCTL_InitCustomSvc+0x198>)
 800d59c:	f000 feee 	bl	800e37c <iprintf>
 800d5a0:	e002      	b.n	800d5a8 <SVCCTL_InitCustomSvc+0x80>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_service command: DEVICE_SERVICE \n\r");
 800d5a2:	4848      	ldr	r0, [pc, #288]	@ (800d6c4 <SVCCTL_InitCustomSvc+0x19c>)
 800d5a4:	f000 feea 	bl	800e37c <iprintf>
  }

  /**
   *  VALUE_AND_CHANEL
   */
  COPY_VALUE_AND_CHANEL_UUID(uuid.Char_UUID_128);
 800d5a8:	23e3      	movs	r3, #227	@ 0xe3
 800d5aa:	713b      	strb	r3, [r7, #4]
 800d5ac:	2322      	movs	r3, #34	@ 0x22
 800d5ae:	717b      	strb	r3, [r7, #5]
 800d5b0:	2310      	movs	r3, #16
 800d5b2:	71bb      	strb	r3, [r7, #6]
 800d5b4:	23a1      	movs	r3, #161	@ 0xa1
 800d5b6:	71fb      	strb	r3, [r7, #7]
 800d5b8:	232b      	movs	r3, #43	@ 0x2b
 800d5ba:	723b      	strb	r3, [r7, #8]
 800d5bc:	237b      	movs	r3, #123	@ 0x7b
 800d5be:	727b      	strb	r3, [r7, #9]
 800d5c0:	2301      	movs	r3, #1
 800d5c2:	72bb      	strb	r3, [r7, #10]
 800d5c4:	23b6      	movs	r3, #182	@ 0xb6
 800d5c6:	72fb      	strb	r3, [r7, #11]
 800d5c8:	2378      	movs	r3, #120	@ 0x78
 800d5ca:	733b      	strb	r3, [r7, #12]
 800d5cc:	234c      	movs	r3, #76	@ 0x4c
 800d5ce:	737b      	strb	r3, [r7, #13]
 800d5d0:	234a      	movs	r3, #74	@ 0x4a
 800d5d2:	73bb      	strb	r3, [r7, #14]
 800d5d4:	238d      	movs	r3, #141	@ 0x8d
 800d5d6:	73fb      	strb	r3, [r7, #15]
 800d5d8:	2301      	movs	r3, #1
 800d5da:	743b      	strb	r3, [r7, #16]
 800d5dc:	2300      	movs	r3, #0
 800d5de:	747b      	strb	r3, [r7, #17]
 800d5e0:	234f      	movs	r3, #79	@ 0x4f
 800d5e2:	74bb      	strb	r3, [r7, #18]
 800d5e4:	23b7      	movs	r3, #183	@ 0xb7
 800d5e6:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomDevice_ServiceHdle,
 800d5e8:	4b34      	ldr	r3, [pc, #208]	@ (800d6bc <SVCCTL_InitCustomSvc+0x194>)
 800d5ea:	8818      	ldrh	r0, [r3, #0]
 800d5ec:	4b36      	ldr	r3, [pc, #216]	@ (800d6c8 <SVCCTL_InitCustomSvc+0x1a0>)
 800d5ee:	881b      	ldrh	r3, [r3, #0]
 800d5f0:	1d3a      	adds	r2, r7, #4
 800d5f2:	4936      	ldr	r1, [pc, #216]	@ (800d6cc <SVCCTL_InitCustomSvc+0x1a4>)
 800d5f4:	9105      	str	r1, [sp, #20]
 800d5f6:	2101      	movs	r1, #1
 800d5f8:	9104      	str	r1, [sp, #16]
 800d5fa:	2110      	movs	r1, #16
 800d5fc:	9103      	str	r1, [sp, #12]
 800d5fe:	2101      	movs	r1, #1
 800d600:	9102      	str	r1, [sp, #8]
 800d602:	2100      	movs	r1, #0
 800d604:	9101      	str	r1, [sp, #4]
 800d606:	2104      	movs	r1, #4
 800d608:	9100      	str	r1, [sp, #0]
 800d60a:	2102      	movs	r1, #2
 800d60c:	f7fc ff8a 	bl	800a524 <aci_gatt_add_char>
 800d610:	4603      	mov	r3, r0
 800d612:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE,
                          0x10,
                          CHAR_VALUE_LEN_VARIABLE,
                          &(CustomContext.CustomV_ChHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800d614:	7dfb      	ldrb	r3, [r7, #23]
 800d616:	2b00      	cmp	r3, #0
 800d618:	d005      	beq.n	800d626 <SVCCTL_InitCustomSvc+0xfe>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : V_CH, error code: 0x%x \n\r", ret);
 800d61a:	7dfb      	ldrb	r3, [r7, #23]
 800d61c:	4619      	mov	r1, r3
 800d61e:	482c      	ldr	r0, [pc, #176]	@ (800d6d0 <SVCCTL_InitCustomSvc+0x1a8>)
 800d620:	f000 feac 	bl	800e37c <iprintf>
 800d624:	e002      	b.n	800d62c <SVCCTL_InitCustomSvc+0x104>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : V_CH \n\r");
 800d626:	482b      	ldr	r0, [pc, #172]	@ (800d6d4 <SVCCTL_InitCustomSvc+0x1ac>)
 800d628:	f000 fea8 	bl	800e37c <iprintf>

  /* USER CODE END SVCCTL_Init_Service1_Char1 */
  /**
   *  FULL_BUFFER
   */
  COPY_FULL_BUFFER_UUID(uuid.Char_UUID_128);
 800d62c:	23e3      	movs	r3, #227	@ 0xe3
 800d62e:	713b      	strb	r3, [r7, #4]
 800d630:	2322      	movs	r3, #34	@ 0x22
 800d632:	717b      	strb	r3, [r7, #5]
 800d634:	2310      	movs	r3, #16
 800d636:	71bb      	strb	r3, [r7, #6]
 800d638:	23a1      	movs	r3, #161	@ 0xa1
 800d63a:	71fb      	strb	r3, [r7, #7]
 800d63c:	232b      	movs	r3, #43	@ 0x2b
 800d63e:	723b      	strb	r3, [r7, #8]
 800d640:	237b      	movs	r3, #123	@ 0x7b
 800d642:	727b      	strb	r3, [r7, #9]
 800d644:	2301      	movs	r3, #1
 800d646:	72bb      	strb	r3, [r7, #10]
 800d648:	23b6      	movs	r3, #182	@ 0xb6
 800d64a:	72fb      	strb	r3, [r7, #11]
 800d64c:	2378      	movs	r3, #120	@ 0x78
 800d64e:	733b      	strb	r3, [r7, #12]
 800d650:	234c      	movs	r3, #76	@ 0x4c
 800d652:	737b      	strb	r3, [r7, #13]
 800d654:	234a      	movs	r3, #74	@ 0x4a
 800d656:	73bb      	strb	r3, [r7, #14]
 800d658:	238d      	movs	r3, #141	@ 0x8d
 800d65a:	73fb      	strb	r3, [r7, #15]
 800d65c:	2302      	movs	r3, #2
 800d65e:	743b      	strb	r3, [r7, #16]
 800d660:	2300      	movs	r3, #0
 800d662:	747b      	strb	r3, [r7, #17]
 800d664:	234f      	movs	r3, #79	@ 0x4f
 800d666:	74bb      	strb	r3, [r7, #18]
 800d668:	23b7      	movs	r3, #183	@ 0xb7
 800d66a:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomDevice_ServiceHdle,
 800d66c:	4b13      	ldr	r3, [pc, #76]	@ (800d6bc <SVCCTL_InitCustomSvc+0x194>)
 800d66e:	8818      	ldrh	r0, [r3, #0]
 800d670:	4b19      	ldr	r3, [pc, #100]	@ (800d6d8 <SVCCTL_InitCustomSvc+0x1b0>)
 800d672:	881b      	ldrh	r3, [r3, #0]
 800d674:	1d3a      	adds	r2, r7, #4
 800d676:	4919      	ldr	r1, [pc, #100]	@ (800d6dc <SVCCTL_InitCustomSvc+0x1b4>)
 800d678:	9105      	str	r1, [sp, #20]
 800d67a:	2100      	movs	r1, #0
 800d67c:	9104      	str	r1, [sp, #16]
 800d67e:	2110      	movs	r1, #16
 800d680:	9103      	str	r1, [sp, #12]
 800d682:	2105      	movs	r1, #5
 800d684:	9102      	str	r1, [sp, #8]
 800d686:	2100      	movs	r1, #0
 800d688:	9101      	str	r1, [sp, #4]
 800d68a:	2106      	movs	r1, #6
 800d68c:	9100      	str	r1, [sp, #0]
 800d68e:	2102      	movs	r1, #2
 800d690:	f7fc ff48 	bl	800a524 <aci_gatt_add_char>
 800d694:	4603      	mov	r3, r0
 800d696:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE | GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                          0x10,
                          CHAR_VALUE_LEN_CONSTANT,
                          &(CustomContext.CustomFullHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800d698:	7dfb      	ldrb	r3, [r7, #23]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d005      	beq.n	800d6aa <SVCCTL_InitCustomSvc+0x182>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : FULL, error code: 0x%x \n\r", ret);
 800d69e:	7dfb      	ldrb	r3, [r7, #23]
 800d6a0:	4619      	mov	r1, r3
 800d6a2:	480f      	ldr	r0, [pc, #60]	@ (800d6e0 <SVCCTL_InitCustomSvc+0x1b8>)
 800d6a4:	f000 fe6a 	bl	800e37c <iprintf>

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 800d6a8:	e003      	b.n	800d6b2 <SVCCTL_InitCustomSvc+0x18a>
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : FULL \n\r");
 800d6aa:	480e      	ldr	r0, [pc, #56]	@ (800d6e4 <SVCCTL_InitCustomSvc+0x1bc>)
 800d6ac:	f000 fe66 	bl	800e37c <iprintf>
  return;
 800d6b0:	bf00      	nop
}
 800d6b2:	3718      	adds	r7, #24
 800d6b4:	46bd      	mov	sp, r7
 800d6b6:	bd80      	pop	{r7, pc}
 800d6b8:	0800d2b9 	.word	0x0800d2b9
 800d6bc:	20000d40 	.word	0x20000d40
 800d6c0:	08010228 	.word	0x08010228
 800d6c4:	08010278 	.word	0x08010278
 800d6c8:	2000002c 	.word	0x2000002c
 800d6cc:	20000d42 	.word	0x20000d42
 800d6d0:	080102b4 	.word	0x080102b4
 800d6d4:	080102f8 	.word	0x080102f8
 800d6d8:	2000002e 	.word	0x2000002e
 800d6dc:	20000d44 	.word	0x20000d44
 800d6e0:	0801032c 	.word	0x0801032c
 800d6e4:	08010370 	.word	0x08010370

0800d6e8 <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 800d6e8:	b580      	push	{r7, lr}
 800d6ea:	b086      	sub	sp, #24
 800d6ec:	af02      	add	r7, sp, #8
 800d6ee:	4603      	mov	r3, r0
 800d6f0:	6039      	str	r1, [r7, #0]
 800d6f2:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800d6f4:	2392      	movs	r3, #146	@ 0x92
 800d6f6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_1 */

  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch (CharOpcode)
 800d6f8:	79fb      	ldrb	r3, [r7, #7]
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d002      	beq.n	800d704 <Custom_STM_App_Update_Char+0x1c>
 800d6fe:	2b01      	cmp	r3, #1
 800d700:	d01c      	beq.n	800d73c <Custom_STM_App_Update_Char+0x54>

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_2*/
      break;

    default:
      break;
 800d702:	e037      	b.n	800d774 <Custom_STM_App_Update_Char+0x8c>
      ret = aci_gatt_update_char_value(CustomContext.CustomDevice_ServiceHdle,
 800d704:	4b1e      	ldr	r3, [pc, #120]	@ (800d780 <Custom_STM_App_Update_Char+0x98>)
 800d706:	8818      	ldrh	r0, [r3, #0]
 800d708:	4b1d      	ldr	r3, [pc, #116]	@ (800d780 <Custom_STM_App_Update_Char+0x98>)
 800d70a:	8859      	ldrh	r1, [r3, #2]
 800d70c:	4b1d      	ldr	r3, [pc, #116]	@ (800d784 <Custom_STM_App_Update_Char+0x9c>)
 800d70e:	881b      	ldrh	r3, [r3, #0]
 800d710:	b2da      	uxtb	r2, r3
 800d712:	683b      	ldr	r3, [r7, #0]
 800d714:	9300      	str	r3, [sp, #0]
 800d716:	4613      	mov	r3, r2
 800d718:	2200      	movs	r2, #0
 800d71a:	f7fd f80b 	bl	800a734 <aci_gatt_update_char_value>
 800d71e:	4603      	mov	r3, r0
 800d720:	73fb      	strb	r3, [r7, #15]
      if (ret != BLE_STATUS_SUCCESS)
 800d722:	7bfb      	ldrb	r3, [r7, #15]
 800d724:	2b00      	cmp	r3, #0
 800d726:	d005      	beq.n	800d734 <Custom_STM_App_Update_Char+0x4c>
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value V_CH command, result : 0x%x \n\r", ret);
 800d728:	7bfb      	ldrb	r3, [r7, #15]
 800d72a:	4619      	mov	r1, r3
 800d72c:	4816      	ldr	r0, [pc, #88]	@ (800d788 <Custom_STM_App_Update_Char+0xa0>)
 800d72e:	f000 fe25 	bl	800e37c <iprintf>
      break;
 800d732:	e01f      	b.n	800d774 <Custom_STM_App_Update_Char+0x8c>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value V_CH command\n\r");
 800d734:	4815      	ldr	r0, [pc, #84]	@ (800d78c <Custom_STM_App_Update_Char+0xa4>)
 800d736:	f000 fe21 	bl	800e37c <iprintf>
      break;
 800d73a:	e01b      	b.n	800d774 <Custom_STM_App_Update_Char+0x8c>
      ret = aci_gatt_update_char_value(CustomContext.CustomDevice_ServiceHdle,
 800d73c:	4b10      	ldr	r3, [pc, #64]	@ (800d780 <Custom_STM_App_Update_Char+0x98>)
 800d73e:	8818      	ldrh	r0, [r3, #0]
 800d740:	4b0f      	ldr	r3, [pc, #60]	@ (800d780 <Custom_STM_App_Update_Char+0x98>)
 800d742:	8899      	ldrh	r1, [r3, #4]
 800d744:	4b12      	ldr	r3, [pc, #72]	@ (800d790 <Custom_STM_App_Update_Char+0xa8>)
 800d746:	881b      	ldrh	r3, [r3, #0]
 800d748:	b2da      	uxtb	r2, r3
 800d74a:	683b      	ldr	r3, [r7, #0]
 800d74c:	9300      	str	r3, [sp, #0]
 800d74e:	4613      	mov	r3, r2
 800d750:	2200      	movs	r2, #0
 800d752:	f7fc ffef 	bl	800a734 <aci_gatt_update_char_value>
 800d756:	4603      	mov	r3, r0
 800d758:	73fb      	strb	r3, [r7, #15]
      if (ret != BLE_STATUS_SUCCESS)
 800d75a:	7bfb      	ldrb	r3, [r7, #15]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d005      	beq.n	800d76c <Custom_STM_App_Update_Char+0x84>
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value FULL command, result : 0x%x \n\r", ret);
 800d760:	7bfb      	ldrb	r3, [r7, #15]
 800d762:	4619      	mov	r1, r3
 800d764:	480b      	ldr	r0, [pc, #44]	@ (800d794 <Custom_STM_App_Update_Char+0xac>)
 800d766:	f000 fe09 	bl	800e37c <iprintf>
      break;
 800d76a:	e002      	b.n	800d772 <Custom_STM_App_Update_Char+0x8a>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value FULL command\n\r");
 800d76c:	480a      	ldr	r0, [pc, #40]	@ (800d798 <Custom_STM_App_Update_Char+0xb0>)
 800d76e:	f000 fe05 	bl	800e37c <iprintf>
      break;
 800d772:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return ret;
 800d774:	7bfb      	ldrb	r3, [r7, #15]
}
 800d776:	4618      	mov	r0, r3
 800d778:	3710      	adds	r7, #16
 800d77a:	46bd      	mov	sp, r7
 800d77c:	bd80      	pop	{r7, pc}
 800d77e:	bf00      	nop
 800d780:	20000d40 	.word	0x20000d40
 800d784:	2000002c 	.word	0x2000002c
 800d788:	080103a4 	.word	0x080103a4
 800d78c:	080103ec 	.word	0x080103ec
 800d790:	2000002e 	.word	0x2000002e
 800d794:	08010424 	.word	0x08010424
 800d798:	0801046c 	.word	0x0801046c

0800d79c <LL_PWR_EnableBootC2>:
{
 800d79c:	b480      	push	{r7}
 800d79e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800d7a0:	4b05      	ldr	r3, [pc, #20]	@ (800d7b8 <LL_PWR_EnableBootC2+0x1c>)
 800d7a2:	68db      	ldr	r3, [r3, #12]
 800d7a4:	4a04      	ldr	r2, [pc, #16]	@ (800d7b8 <LL_PWR_EnableBootC2+0x1c>)
 800d7a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d7aa:	60d3      	str	r3, [r2, #12]
}
 800d7ac:	bf00      	nop
 800d7ae:	46bd      	mov	sp, r7
 800d7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b4:	4770      	bx	lr
 800d7b6:	bf00      	nop
 800d7b8:	58000400 	.word	0x58000400

0800d7bc <LL_C2_EXTI_EnableEvent_32_63>:
{
 800d7bc:	b480      	push	{r7}
 800d7be:	b083      	sub	sp, #12
 800d7c0:	af00      	add	r7, sp, #0
 800d7c2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800d7c4:	4b06      	ldr	r3, [pc, #24]	@ (800d7e0 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800d7c6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800d7ca:	4905      	ldr	r1, [pc, #20]	@ (800d7e0 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	4313      	orrs	r3, r2
 800d7d0:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 800d7d4:	bf00      	nop
 800d7d6:	370c      	adds	r7, #12
 800d7d8:	46bd      	mov	sp, r7
 800d7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7de:	4770      	bx	lr
 800d7e0:	58000800 	.word	0x58000800

0800d7e4 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800d7e4:	b480      	push	{r7}
 800d7e6:	b083      	sub	sp, #12
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800d7ec:	4b05      	ldr	r3, [pc, #20]	@ (800d804 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800d7ee:	6a1a      	ldr	r2, [r3, #32]
 800d7f0:	4904      	ldr	r1, [pc, #16]	@ (800d804 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	4313      	orrs	r3, r2
 800d7f6:	620b      	str	r3, [r1, #32]
}
 800d7f8:	bf00      	nop
 800d7fa:	370c      	adds	r7, #12
 800d7fc:	46bd      	mov	sp, r7
 800d7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d802:	4770      	bx	lr
 800d804:	58000800 	.word	0x58000800

0800d808 <LL_AHB3_GRP1_EnableClock>:
{
 800d808:	b480      	push	{r7}
 800d80a:	b085      	sub	sp, #20
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800d810:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d814:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d816:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	4313      	orrs	r3, r2
 800d81e:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800d820:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d824:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	4013      	ands	r3, r2
 800d82a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800d82c:	68fb      	ldr	r3, [r7, #12]
}
 800d82e:	bf00      	nop
 800d830:	3714      	adds	r7, #20
 800d832:	46bd      	mov	sp, r7
 800d834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d838:	4770      	bx	lr

0800d83a <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800d83a:	b480      	push	{r7}
 800d83c:	b085      	sub	sp, #20
 800d83e:	af00      	add	r7, sp, #0
 800d840:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800d842:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d846:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800d84a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	4313      	orrs	r3, r2
 800d852:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800d856:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d85a:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	4013      	ands	r3, r2
 800d862:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800d864:	68fb      	ldr	r3, [r7, #12]
}
 800d866:	bf00      	nop
 800d868:	3714      	adds	r7, #20
 800d86a:	46bd      	mov	sp, r7
 800d86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d870:	4770      	bx	lr

0800d872 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 800d872:	b480      	push	{r7}
 800d874:	b083      	sub	sp, #12
 800d876:	af00      	add	r7, sp, #0
 800d878:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	601a      	str	r2, [r3, #0]
}
 800d886:	bf00      	nop
 800d888:	370c      	adds	r7, #12
 800d88a:	46bd      	mov	sp, r7
 800d88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d890:	4770      	bx	lr

0800d892 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 800d892:	b480      	push	{r7}
 800d894:	b083      	sub	sp, #12
 800d896:	af00      	add	r7, sp, #0
 800d898:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	f043 0201 	orr.w	r2, r3, #1
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	601a      	str	r2, [r3, #0]
}
 800d8a6:	bf00      	nop
 800d8a8:	370c      	adds	r7, #12
 800d8aa:	46bd      	mov	sp, r7
 800d8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b0:	4770      	bx	lr

0800d8b2 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800d8b2:	b480      	push	{r7}
 800d8b4:	b083      	sub	sp, #12
 800d8b6:	af00      	add	r7, sp, #0
 800d8b8:	6078      	str	r0, [r7, #4]
 800d8ba:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	685a      	ldr	r2, [r3, #4]
 800d8c0:	683b      	ldr	r3, [r7, #0]
 800d8c2:	041b      	lsls	r3, r3, #16
 800d8c4:	43db      	mvns	r3, r3
 800d8c6:	401a      	ands	r2, r3
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	605a      	str	r2, [r3, #4]
}
 800d8cc:	bf00      	nop
 800d8ce:	370c      	adds	r7, #12
 800d8d0:	46bd      	mov	sp, r7
 800d8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d6:	4770      	bx	lr

0800d8d8 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800d8d8:	b480      	push	{r7}
 800d8da:	b083      	sub	sp, #12
 800d8dc:	af00      	add	r7, sp, #0
 800d8de:	6078      	str	r0, [r7, #4]
 800d8e0:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	685a      	ldr	r2, [r3, #4]
 800d8e6:	683b      	ldr	r3, [r7, #0]
 800d8e8:	041b      	lsls	r3, r3, #16
 800d8ea:	431a      	orrs	r2, r3
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	605a      	str	r2, [r3, #4]
}
 800d8f0:	bf00      	nop
 800d8f2:	370c      	adds	r7, #12
 800d8f4:	46bd      	mov	sp, r7
 800d8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8fa:	4770      	bx	lr

0800d8fc <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800d8fc:	b480      	push	{r7}
 800d8fe:	b083      	sub	sp, #12
 800d900:	af00      	add	r7, sp, #0
 800d902:	6078      	str	r0, [r7, #4]
 800d904:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	685a      	ldr	r2, [r3, #4]
 800d90a:	683b      	ldr	r3, [r7, #0]
 800d90c:	43db      	mvns	r3, r3
 800d90e:	401a      	ands	r2, r3
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	605a      	str	r2, [r3, #4]
}
 800d914:	bf00      	nop
 800d916:	370c      	adds	r7, #12
 800d918:	46bd      	mov	sp, r7
 800d91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d91e:	4770      	bx	lr

0800d920 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800d920:	b480      	push	{r7}
 800d922:	b083      	sub	sp, #12
 800d924:	af00      	add	r7, sp, #0
 800d926:	6078      	str	r0, [r7, #4]
 800d928:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	683a      	ldr	r2, [r7, #0]
 800d92e:	609a      	str	r2, [r3, #8]
}
 800d930:	bf00      	nop
 800d932:	370c      	adds	r7, #12
 800d934:	46bd      	mov	sp, r7
 800d936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d93a:	4770      	bx	lr

0800d93c <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800d93c:	b480      	push	{r7}
 800d93e:	b083      	sub	sp, #12
 800d940:	af00      	add	r7, sp, #0
 800d942:	6078      	str	r0, [r7, #4]
 800d944:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800d946:	683b      	ldr	r3, [r7, #0]
 800d948:	041a      	lsls	r2, r3, #16
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	609a      	str	r2, [r3, #8]
}
 800d94e:	bf00      	nop
 800d950:	370c      	adds	r7, #12
 800d952:	46bd      	mov	sp, r7
 800d954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d958:	4770      	bx	lr

0800d95a <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800d95a:	b480      	push	{r7}
 800d95c:	b083      	sub	sp, #12
 800d95e:	af00      	add	r7, sp, #0
 800d960:	6078      	str	r0, [r7, #4]
 800d962:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	68da      	ldr	r2, [r3, #12]
 800d968:	683b      	ldr	r3, [r7, #0]
 800d96a:	4013      	ands	r3, r2
 800d96c:	683a      	ldr	r2, [r7, #0]
 800d96e:	429a      	cmp	r2, r3
 800d970:	d101      	bne.n	800d976 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800d972:	2301      	movs	r3, #1
 800d974:	e000      	b.n	800d978 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800d976:	2300      	movs	r3, #0
}
 800d978:	4618      	mov	r0, r3
 800d97a:	370c      	adds	r7, #12
 800d97c:	46bd      	mov	sp, r7
 800d97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d982:	4770      	bx	lr

0800d984 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800d984:	b480      	push	{r7}
 800d986:	b083      	sub	sp, #12
 800d988:	af00      	add	r7, sp, #0
 800d98a:	6078      	str	r0, [r7, #4]
 800d98c:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	69da      	ldr	r2, [r3, #28]
 800d992:	683b      	ldr	r3, [r7, #0]
 800d994:	4013      	ands	r3, r2
 800d996:	683a      	ldr	r2, [r7, #0]
 800d998:	429a      	cmp	r2, r3
 800d99a:	d101      	bne.n	800d9a0 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800d99c:	2301      	movs	r3, #1
 800d99e:	e000      	b.n	800d9a2 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800d9a0:	2300      	movs	r3, #0
}
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	370c      	adds	r7, #12
 800d9a6:	46bd      	mov	sp, r7
 800d9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ac:	4770      	bx	lr
	...

0800d9b0 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800d9b0:	b580      	push	{r7, lr}
 800d9b2:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800d9b4:	2102      	movs	r1, #2
 800d9b6:	4818      	ldr	r0, [pc, #96]	@ (800da18 <HW_IPCC_Rx_Handler+0x68>)
 800d9b8:	f7ff ffe4 	bl	800d984 <LL_C2_IPCC_IsActiveFlag_CHx>
 800d9bc:	4603      	mov	r3, r0
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d008      	beq.n	800d9d4 <HW_IPCC_Rx_Handler+0x24>
 800d9c2:	4b15      	ldr	r3, [pc, #84]	@ (800da18 <HW_IPCC_Rx_Handler+0x68>)
 800d9c4:	685b      	ldr	r3, [r3, #4]
 800d9c6:	f003 0302 	and.w	r3, r3, #2
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d102      	bne.n	800d9d4 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 800d9ce:	f000 f925 	bl	800dc1c <HW_IPCC_SYS_EvtHandler>
 800d9d2:	e01e      	b.n	800da12 <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800d9d4:	2101      	movs	r1, #1
 800d9d6:	4810      	ldr	r0, [pc, #64]	@ (800da18 <HW_IPCC_Rx_Handler+0x68>)
 800d9d8:	f7ff ffd4 	bl	800d984 <LL_C2_IPCC_IsActiveFlag_CHx>
 800d9dc:	4603      	mov	r3, r0
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d008      	beq.n	800d9f4 <HW_IPCC_Rx_Handler+0x44>
 800d9e2:	4b0d      	ldr	r3, [pc, #52]	@ (800da18 <HW_IPCC_Rx_Handler+0x68>)
 800d9e4:	685b      	ldr	r3, [r3, #4]
 800d9e6:	f003 0301 	and.w	r3, r3, #1
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d102      	bne.n	800d9f4 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 800d9ee:	f000 f899 	bl	800db24 <HW_IPCC_BLE_EvtHandler>
 800d9f2:	e00e      	b.n	800da12 <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800d9f4:	2108      	movs	r1, #8
 800d9f6:	4808      	ldr	r0, [pc, #32]	@ (800da18 <HW_IPCC_Rx_Handler+0x68>)
 800d9f8:	f7ff ffc4 	bl	800d984 <LL_C2_IPCC_IsActiveFlag_CHx>
 800d9fc:	4603      	mov	r3, r0
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d008      	beq.n	800da14 <HW_IPCC_Rx_Handler+0x64>
 800da02:	4b05      	ldr	r3, [pc, #20]	@ (800da18 <HW_IPCC_Rx_Handler+0x68>)
 800da04:	685b      	ldr	r3, [r3, #4]
 800da06:	f003 0308 	and.w	r3, r3, #8
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d102      	bne.n	800da14 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 800da0e:	f000 f97d 	bl	800dd0c <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800da12:	bf00      	nop
 800da14:	bf00      	nop
}
 800da16:	bd80      	pop	{r7, pc}
 800da18:	58000c00 	.word	0x58000c00

0800da1c <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800da1c:	b580      	push	{r7, lr}
 800da1e:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800da20:	2102      	movs	r1, #2
 800da22:	4818      	ldr	r0, [pc, #96]	@ (800da84 <HW_IPCC_Tx_Handler+0x68>)
 800da24:	f7ff ff99 	bl	800d95a <LL_C1_IPCC_IsActiveFlag_CHx>
 800da28:	4603      	mov	r3, r0
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d108      	bne.n	800da40 <HW_IPCC_Tx_Handler+0x24>
 800da2e:	4b15      	ldr	r3, [pc, #84]	@ (800da84 <HW_IPCC_Tx_Handler+0x68>)
 800da30:	685b      	ldr	r3, [r3, #4]
 800da32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800da36:	2b00      	cmp	r3, #0
 800da38:	d102      	bne.n	800da40 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800da3a:	f000 f8d3 	bl	800dbe4 <HW_IPCC_SYS_CmdEvtHandler>
 800da3e:	e01e      	b.n	800da7e <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800da40:	2108      	movs	r1, #8
 800da42:	4810      	ldr	r0, [pc, #64]	@ (800da84 <HW_IPCC_Tx_Handler+0x68>)
 800da44:	f7ff ff89 	bl	800d95a <LL_C1_IPCC_IsActiveFlag_CHx>
 800da48:	4603      	mov	r3, r0
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d108      	bne.n	800da60 <HW_IPCC_Tx_Handler+0x44>
 800da4e:	4b0d      	ldr	r3, [pc, #52]	@ (800da84 <HW_IPCC_Tx_Handler+0x68>)
 800da50:	685b      	ldr	r3, [r3, #4]
 800da52:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800da56:	2b00      	cmp	r3, #0
 800da58:	d102      	bne.n	800da60 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 800da5a:	f000 f919 	bl	800dc90 <HW_IPCC_MM_FreeBufHandler>
 800da5e:	e00e      	b.n	800da7e <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800da60:	2120      	movs	r1, #32
 800da62:	4808      	ldr	r0, [pc, #32]	@ (800da84 <HW_IPCC_Tx_Handler+0x68>)
 800da64:	f7ff ff79 	bl	800d95a <LL_C1_IPCC_IsActiveFlag_CHx>
 800da68:	4603      	mov	r3, r0
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d108      	bne.n	800da80 <HW_IPCC_Tx_Handler+0x64>
 800da6e:	4b05      	ldr	r3, [pc, #20]	@ (800da84 <HW_IPCC_Tx_Handler+0x68>)
 800da70:	685b      	ldr	r3, [r3, #4]
 800da72:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800da76:	2b00      	cmp	r3, #0
 800da78:	d102      	bne.n	800da80 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800da7a:	f000 f85f 	bl	800db3c <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800da7e:	bf00      	nop
 800da80:	bf00      	nop
}
 800da82:	bd80      	pop	{r7, pc}
 800da84:	58000c00 	.word	0x58000c00

0800da88 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800da88:	b580      	push	{r7, lr}
 800da8a:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800da8c:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800da90:	f7ff fed3 	bl	800d83a <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800da94:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800da98:	f7ff fea4 	bl	800d7e4 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800da9c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800daa0:	f7ff fe8c 	bl	800d7bc <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800daa4:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800daa6:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800daa8:	f7ff fe78 	bl	800d79c <LL_PWR_EnableBootC2>

  return;
 800daac:	bf00      	nop
}
 800daae:	bd80      	pop	{r7, pc}

0800dab0 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800dab0:	b580      	push	{r7, lr}
 800dab2:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800dab4:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800dab8:	f7ff fea6 	bl	800d808 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800dabc:	4806      	ldr	r0, [pc, #24]	@ (800dad8 <HW_IPCC_Init+0x28>)
 800dabe:	f7ff fee8 	bl	800d892 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800dac2:	4805      	ldr	r0, [pc, #20]	@ (800dad8 <HW_IPCC_Init+0x28>)
 800dac4:	f7ff fed5 	bl	800d872 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800dac8:	202c      	movs	r0, #44	@ 0x2c
 800daca:	f7f6 fa04 	bl	8003ed6 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800dace:	202d      	movs	r0, #45	@ 0x2d
 800dad0:	f7f6 fa01 	bl	8003ed6 <HAL_NVIC_EnableIRQ>

  return;
 800dad4:	bf00      	nop
}
 800dad6:	bd80      	pop	{r7, pc}
 800dad8:	58000c00 	.word	0x58000c00

0800dadc <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800dadc:	b580      	push	{r7, lr}
 800dade:	b084      	sub	sp, #16
 800dae0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dae2:	f3ef 8310 	mrs	r3, PRIMASK
 800dae6:	607b      	str	r3, [r7, #4]
  return(result);
 800dae8:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 800daea:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800daec:	b672      	cpsid	i
}
 800daee:	bf00      	nop
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800daf0:	2101      	movs	r1, #1
 800daf2:	4806      	ldr	r0, [pc, #24]	@ (800db0c <HW_IPCC_BLE_Init+0x30>)
 800daf4:	f7ff ff02 	bl	800d8fc <LL_C1_IPCC_EnableReceiveChannel>
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dafc:	68bb      	ldr	r3, [r7, #8]
 800dafe:	f383 8810 	msr	PRIMASK, r3
}
 800db02:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  return;
 800db04:	bf00      	nop
}
 800db06:	3710      	adds	r7, #16
 800db08:	46bd      	mov	sp, r7
 800db0a:	bd80      	pop	{r7, pc}
 800db0c:	58000c00 	.word	0x58000c00

0800db10 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800db10:	b580      	push	{r7, lr}
 800db12:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800db14:	2101      	movs	r1, #1
 800db16:	4802      	ldr	r0, [pc, #8]	@ (800db20 <HW_IPCC_BLE_SendCmd+0x10>)
 800db18:	f7ff ff10 	bl	800d93c <LL_C1_IPCC_SetFlag_CHx>

  return;
 800db1c:	bf00      	nop
}
 800db1e:	bd80      	pop	{r7, pc}
 800db20:	58000c00 	.word	0x58000c00

0800db24 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800db24:	b580      	push	{r7, lr}
 800db26:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800db28:	f7fd fecc 	bl	800b8c4 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800db2c:	2101      	movs	r1, #1
 800db2e:	4802      	ldr	r0, [pc, #8]	@ (800db38 <HW_IPCC_BLE_EvtHandler+0x14>)
 800db30:	f7ff fef6 	bl	800d920 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800db34:	bf00      	nop
}
 800db36:	bd80      	pop	{r7, pc}
 800db38:	58000c00 	.word	0x58000c00

0800db3c <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800db3c:	b580      	push	{r7, lr}
 800db3e:	b084      	sub	sp, #16
 800db40:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800db42:	f3ef 8310 	mrs	r3, PRIMASK
 800db46:	607b      	str	r3, [r7, #4]
  return(result);
 800db48:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 800db4a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800db4c:	b672      	cpsid	i
}
 800db4e:	bf00      	nop
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800db50:	2120      	movs	r1, #32
 800db52:	4807      	ldr	r0, [pc, #28]	@ (800db70 <HW_IPCC_BLE_AclDataEvtHandler+0x34>)
 800db54:	f7ff fec0 	bl	800d8d8 <LL_C1_IPCC_DisableTransmitChannel>
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800db5c:	68bb      	ldr	r3, [r7, #8]
 800db5e:	f383 8810 	msr	PRIMASK, r3
}
 800db62:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  HW_IPCC_BLE_AclDataAckNot();
 800db64:	f7fd fede 	bl	800b924 <HW_IPCC_BLE_AclDataAckNot>

  return;
 800db68:	bf00      	nop
}
 800db6a:	3710      	adds	r7, #16
 800db6c:	46bd      	mov	sp, r7
 800db6e:	bd80      	pop	{r7, pc}
 800db70:	58000c00 	.word	0x58000c00

0800db74 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800db74:	b580      	push	{r7, lr}
 800db76:	b084      	sub	sp, #16
 800db78:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800db7a:	f3ef 8310 	mrs	r3, PRIMASK
 800db7e:	607b      	str	r3, [r7, #4]
  return(result);
 800db80:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 800db82:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800db84:	b672      	cpsid	i
}
 800db86:	bf00      	nop
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800db88:	2102      	movs	r1, #2
 800db8a:	4806      	ldr	r0, [pc, #24]	@ (800dba4 <HW_IPCC_SYS_Init+0x30>)
 800db8c:	f7ff feb6 	bl	800d8fc <LL_C1_IPCC_EnableReceiveChannel>
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800db94:	68bb      	ldr	r3, [r7, #8]
 800db96:	f383 8810 	msr	PRIMASK, r3
}
 800db9a:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  return;
 800db9c:	bf00      	nop
}
 800db9e:	3710      	adds	r7, #16
 800dba0:	46bd      	mov	sp, r7
 800dba2:	bd80      	pop	{r7, pc}
 800dba4:	58000c00 	.word	0x58000c00

0800dba8 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800dba8:	b580      	push	{r7, lr}
 800dbaa:	b084      	sub	sp, #16
 800dbac:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800dbae:	2102      	movs	r1, #2
 800dbb0:	480b      	ldr	r0, [pc, #44]	@ (800dbe0 <HW_IPCC_SYS_SendCmd+0x38>)
 800dbb2:	f7ff fec3 	bl	800d93c <LL_C1_IPCC_SetFlag_CHx>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dbb6:	f3ef 8310 	mrs	r3, PRIMASK
 800dbba:	607b      	str	r3, [r7, #4]
  return(result);
 800dbbc:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 800dbbe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800dbc0:	b672      	cpsid	i
}
 800dbc2:	bf00      	nop
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800dbc4:	2102      	movs	r1, #2
 800dbc6:	4806      	ldr	r0, [pc, #24]	@ (800dbe0 <HW_IPCC_SYS_SendCmd+0x38>)
 800dbc8:	f7ff fe73 	bl	800d8b2 <LL_C1_IPCC_EnableTransmitChannel>
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dbd0:	68bb      	ldr	r3, [r7, #8]
 800dbd2:	f383 8810 	msr	PRIMASK, r3
}
 800dbd6:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  return;
 800dbd8:	bf00      	nop
}
 800dbda:	3710      	adds	r7, #16
 800dbdc:	46bd      	mov	sp, r7
 800dbde:	bd80      	pop	{r7, pc}
 800dbe0:	58000c00 	.word	0x58000c00

0800dbe4 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800dbe4:	b580      	push	{r7, lr}
 800dbe6:	b084      	sub	sp, #16
 800dbe8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dbea:	f3ef 8310 	mrs	r3, PRIMASK
 800dbee:	607b      	str	r3, [r7, #4]
  return(result);
 800dbf0:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 800dbf2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800dbf4:	b672      	cpsid	i
}
 800dbf6:	bf00      	nop
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800dbf8:	2102      	movs	r1, #2
 800dbfa:	4807      	ldr	r0, [pc, #28]	@ (800dc18 <HW_IPCC_SYS_CmdEvtHandler+0x34>)
 800dbfc:	f7ff fe6c 	bl	800d8d8 <LL_C1_IPCC_DisableTransmitChannel>
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dc04:	68bb      	ldr	r3, [r7, #8]
 800dc06:	f383 8810 	msr	PRIMASK, r3
}
 800dc0a:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  HW_IPCC_SYS_CmdEvtNot();
 800dc0c:	f7fd feda 	bl	800b9c4 <HW_IPCC_SYS_CmdEvtNot>

  return;
 800dc10:	bf00      	nop
}
 800dc12:	3710      	adds	r7, #16
 800dc14:	46bd      	mov	sp, r7
 800dc16:	bd80      	pop	{r7, pc}
 800dc18:	58000c00 	.word	0x58000c00

0800dc1c <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800dc1c:	b580      	push	{r7, lr}
 800dc1e:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800dc20:	f7fd fee6 	bl	800b9f0 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800dc24:	2102      	movs	r1, #2
 800dc26:	4802      	ldr	r0, [pc, #8]	@ (800dc30 <HW_IPCC_SYS_EvtHandler+0x14>)
 800dc28:	f7ff fe7a 	bl	800d920 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800dc2c:	bf00      	nop
}
 800dc2e:	bd80      	pop	{r7, pc}
 800dc30:	58000c00 	.word	0x58000c00

0800dc34 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800dc34:	b580      	push	{r7, lr}
 800dc36:	b086      	sub	sp, #24
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800dc3c:	2108      	movs	r1, #8
 800dc3e:	4812      	ldr	r0, [pc, #72]	@ (800dc88 <HW_IPCC_MM_SendFreeBuf+0x54>)
 800dc40:	f7ff fe8b 	bl	800d95a <LL_C1_IPCC_IsActiveFlag_CHx>
 800dc44:	4603      	mov	r3, r0
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d013      	beq.n	800dc72 <HW_IPCC_MM_SendFreeBuf+0x3e>
  {
    FreeBufCb = cb;
 800dc4a:	4a10      	ldr	r2, [pc, #64]	@ (800dc8c <HW_IPCC_MM_SendFreeBuf+0x58>)
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dc50:	f3ef 8310 	mrs	r3, PRIMASK
 800dc54:	60fb      	str	r3, [r7, #12]
  return(result);
 800dc56:	68fb      	ldr	r3, [r7, #12]
    UTILS_ENTER_CRITICAL_SECTION();
 800dc58:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800dc5a:	b672      	cpsid	i
}
 800dc5c:	bf00      	nop
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800dc5e:	2108      	movs	r1, #8
 800dc60:	4809      	ldr	r0, [pc, #36]	@ (800dc88 <HW_IPCC_MM_SendFreeBuf+0x54>)
 800dc62:	f7ff fe26 	bl	800d8b2 <LL_C1_IPCC_EnableTransmitChannel>
 800dc66:	697b      	ldr	r3, [r7, #20]
 800dc68:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dc6a:	693b      	ldr	r3, [r7, #16]
 800dc6c:	f383 8810 	msr	PRIMASK, r3
}
 800dc70:	e005      	b.n	800dc7e <HW_IPCC_MM_SendFreeBuf+0x4a>
    UTILS_EXIT_CRITICAL_SECTION();
  }
  else
  {
    cb();
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	4798      	blx	r3

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800dc76:	2108      	movs	r1, #8
 800dc78:	4803      	ldr	r0, [pc, #12]	@ (800dc88 <HW_IPCC_MM_SendFreeBuf+0x54>)
 800dc7a:	f7ff fe5f 	bl	800d93c <LL_C1_IPCC_SetFlag_CHx>
  }

  return;
 800dc7e:	bf00      	nop
}
 800dc80:	3718      	adds	r7, #24
 800dc82:	46bd      	mov	sp, r7
 800dc84:	bd80      	pop	{r7, pc}
 800dc86:	bf00      	nop
 800dc88:	58000c00 	.word	0x58000c00
 800dc8c:	20000d48 	.word	0x20000d48

0800dc90 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800dc90:	b580      	push	{r7, lr}
 800dc92:	b084      	sub	sp, #16
 800dc94:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dc96:	f3ef 8310 	mrs	r3, PRIMASK
 800dc9a:	607b      	str	r3, [r7, #4]
  return(result);
 800dc9c:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 800dc9e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800dca0:	b672      	cpsid	i
}
 800dca2:	bf00      	nop
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800dca4:	2108      	movs	r1, #8
 800dca6:	480a      	ldr	r0, [pc, #40]	@ (800dcd0 <HW_IPCC_MM_FreeBufHandler+0x40>)
 800dca8:	f7ff fe16 	bl	800d8d8 <LL_C1_IPCC_DisableTransmitChannel>
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dcb0:	68bb      	ldr	r3, [r7, #8]
 800dcb2:	f383 8810 	msr	PRIMASK, r3
}
 800dcb6:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  FreeBufCb();
 800dcb8:	4b06      	ldr	r3, [pc, #24]	@ (800dcd4 <HW_IPCC_MM_FreeBufHandler+0x44>)
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800dcbe:	2108      	movs	r1, #8
 800dcc0:	4803      	ldr	r0, [pc, #12]	@ (800dcd0 <HW_IPCC_MM_FreeBufHandler+0x40>)
 800dcc2:	f7ff fe3b 	bl	800d93c <LL_C1_IPCC_SetFlag_CHx>

  return;
 800dcc6:	bf00      	nop
}
 800dcc8:	3710      	adds	r7, #16
 800dcca:	46bd      	mov	sp, r7
 800dccc:	bd80      	pop	{r7, pc}
 800dcce:	bf00      	nop
 800dcd0:	58000c00 	.word	0x58000c00
 800dcd4:	20000d48 	.word	0x20000d48

0800dcd8 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800dcd8:	b580      	push	{r7, lr}
 800dcda:	b084      	sub	sp, #16
 800dcdc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dcde:	f3ef 8310 	mrs	r3, PRIMASK
 800dce2:	607b      	str	r3, [r7, #4]
  return(result);
 800dce4:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 800dce6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800dce8:	b672      	cpsid	i
}
 800dcea:	bf00      	nop
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800dcec:	2108      	movs	r1, #8
 800dcee:	4806      	ldr	r0, [pc, #24]	@ (800dd08 <HW_IPCC_TRACES_Init+0x30>)
 800dcf0:	f7ff fe04 	bl	800d8fc <LL_C1_IPCC_EnableReceiveChannel>
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dcf8:	68bb      	ldr	r3, [r7, #8]
 800dcfa:	f383 8810 	msr	PRIMASK, r3
}
 800dcfe:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  return;
 800dd00:	bf00      	nop
}
 800dd02:	3710      	adds	r7, #16
 800dd04:	46bd      	mov	sp, r7
 800dd06:	bd80      	pop	{r7, pc}
 800dd08:	58000c00 	.word	0x58000c00

0800dd0c <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800dd0c:	b580      	push	{r7, lr}
 800dd0e:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800dd10:	f7fd ff16 	bl	800bb40 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800dd14:	2108      	movs	r1, #8
 800dd16:	4802      	ldr	r0, [pc, #8]	@ (800dd20 <HW_IPCC_TRACES_EvtHandler+0x14>)
 800dd18:	f7ff fe02 	bl	800d920 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800dd1c:	bf00      	nop
}
 800dd1e:	bd80      	pop	{r7, pc}
 800dd20:	58000c00 	.word	0x58000c00

0800dd24 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800dd24:	b480      	push	{r7}
 800dd26:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800dd28:	4b05      	ldr	r3, [pc, #20]	@ (800dd40 <UTIL_LPM_Init+0x1c>)
 800dd2a:	2200      	movs	r2, #0
 800dd2c:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800dd2e:	4b05      	ldr	r3, [pc, #20]	@ (800dd44 <UTIL_LPM_Init+0x20>)
 800dd30:	2200      	movs	r2, #0
 800dd32:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800dd34:	bf00      	nop
 800dd36:	46bd      	mov	sp, r7
 800dd38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd3c:	4770      	bx	lr
 800dd3e:	bf00      	nop
 800dd40:	20000d4c 	.word	0x20000d4c
 800dd44:	20000d50 	.word	0x20000d50

0800dd48 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800dd48:	b480      	push	{r7}
 800dd4a:	b087      	sub	sp, #28
 800dd4c:	af00      	add	r7, sp, #0
 800dd4e:	6078      	str	r0, [r7, #4]
 800dd50:	460b      	mov	r3, r1
 800dd52:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dd54:	f3ef 8310 	mrs	r3, PRIMASK
 800dd58:	613b      	str	r3, [r7, #16]
  return(result);
 800dd5a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800dd5c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800dd5e:	b672      	cpsid	i
}
 800dd60:	bf00      	nop
  
  switch(state)
 800dd62:	78fb      	ldrb	r3, [r7, #3]
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d008      	beq.n	800dd7a <UTIL_LPM_SetOffMode+0x32>
 800dd68:	2b01      	cmp	r3, #1
 800dd6a:	d10e      	bne.n	800dd8a <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800dd6c:	4b0d      	ldr	r3, [pc, #52]	@ (800dda4 <UTIL_LPM_SetOffMode+0x5c>)
 800dd6e:	681a      	ldr	r2, [r3, #0]
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	4313      	orrs	r3, r2
 800dd74:	4a0b      	ldr	r2, [pc, #44]	@ (800dda4 <UTIL_LPM_SetOffMode+0x5c>)
 800dd76:	6013      	str	r3, [r2, #0]
      break;
 800dd78:	e008      	b.n	800dd8c <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	43da      	mvns	r2, r3
 800dd7e:	4b09      	ldr	r3, [pc, #36]	@ (800dda4 <UTIL_LPM_SetOffMode+0x5c>)
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	4013      	ands	r3, r2
 800dd84:	4a07      	ldr	r2, [pc, #28]	@ (800dda4 <UTIL_LPM_SetOffMode+0x5c>)
 800dd86:	6013      	str	r3, [r2, #0]
      break;
 800dd88:	e000      	b.n	800dd8c <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800dd8a:	bf00      	nop
 800dd8c:	697b      	ldr	r3, [r7, #20]
 800dd8e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	f383 8810 	msr	PRIMASK, r3
}
 800dd96:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800dd98:	bf00      	nop
 800dd9a:	371c      	adds	r7, #28
 800dd9c:	46bd      	mov	sp, r7
 800dd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda2:	4770      	bx	lr
 800dda4:	20000d50 	.word	0x20000d50

0800dda8 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800dda8:	b580      	push	{r7, lr}
 800ddaa:	b090      	sub	sp, #64	@ 0x40
 800ddac:	af00      	add	r7, sp, #0
 800ddae:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800ddb0:	4b73      	ldr	r3, [pc, #460]	@ (800df80 <UTIL_SEQ_Run+0x1d8>)
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 800ddb6:	4b72      	ldr	r3, [pc, #456]	@ (800df80 <UTIL_SEQ_Run+0x1d8>)
 800ddb8:	681a      	ldr	r2, [r3, #0]
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	4013      	ands	r3, r2
 800ddbe:	4a70      	ldr	r2, [pc, #448]	@ (800df80 <UTIL_SEQ_Run+0x1d8>)
 800ddc0:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800ddc2:	4b70      	ldr	r3, [pc, #448]	@ (800df84 <UTIL_SEQ_Run+0x1dc>)
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 800ddc8:	4b6f      	ldr	r3, [pc, #444]	@ (800df88 <UTIL_SEQ_Run+0x1e0>)
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800ddce:	4b6f      	ldr	r3, [pc, #444]	@ (800df8c <UTIL_SEQ_Run+0x1e4>)
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 800ddd4:	4b6e      	ldr	r3, [pc, #440]	@ (800df90 <UTIL_SEQ_Run+0x1e8>)
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800ddda:	e08d      	b.n	800def8 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800dddc:	2300      	movs	r3, #0
 800ddde:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800dde0:	e002      	b.n	800dde8 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800dde2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dde4:	3301      	adds	r3, #1
 800dde6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800dde8:	4a6a      	ldr	r2, [pc, #424]	@ (800df94 <UTIL_SEQ_Run+0x1ec>)
 800ddea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ddec:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800ddf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddf2:	401a      	ands	r2, r3
 800ddf4:	4b62      	ldr	r3, [pc, #392]	@ (800df80 <UTIL_SEQ_Run+0x1d8>)
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	4013      	ands	r3, r2
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d0f1      	beq.n	800dde2 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800ddfe:	4a65      	ldr	r2, [pc, #404]	@ (800df94 <UTIL_SEQ_Run+0x1ec>)
 800de00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800de02:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800de06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de08:	401a      	ands	r2, r3
 800de0a:	4b5d      	ldr	r3, [pc, #372]	@ (800df80 <UTIL_SEQ_Run+0x1d8>)
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	4013      	ands	r3, r2
 800de10:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800de12:	4a60      	ldr	r2, [pc, #384]	@ (800df94 <UTIL_SEQ_Run+0x1ec>)
 800de14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800de16:	00db      	lsls	r3, r3, #3
 800de18:	4413      	add	r3, r2
 800de1a:	685a      	ldr	r2, [r3, #4]
 800de1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de1e:	4013      	ands	r3, r2
 800de20:	2b00      	cmp	r3, #0
 800de22:	d106      	bne.n	800de32 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800de24:	4a5b      	ldr	r2, [pc, #364]	@ (800df94 <UTIL_SEQ_Run+0x1ec>)
 800de26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800de28:	00db      	lsls	r3, r3, #3
 800de2a:	4413      	add	r3, r2
 800de2c:	f04f 32ff 	mov.w	r2, #4294967295
 800de30:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800de32:	4a58      	ldr	r2, [pc, #352]	@ (800df94 <UTIL_SEQ_Run+0x1ec>)
 800de34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800de36:	00db      	lsls	r3, r3, #3
 800de38:	4413      	add	r3, r2
 800de3a:	685a      	ldr	r2, [r3, #4]
 800de3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de3e:	4013      	ands	r3, r2
 800de40:	4618      	mov	r0, r3
 800de42:	f000 f9c1 	bl	800e1c8 <SEQ_BitPosition>
 800de46:	4603      	mov	r3, r0
 800de48:	461a      	mov	r2, r3
 800de4a:	4b53      	ldr	r3, [pc, #332]	@ (800df98 <UTIL_SEQ_Run+0x1f0>)
 800de4c:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800de4e:	4a51      	ldr	r2, [pc, #324]	@ (800df94 <UTIL_SEQ_Run+0x1ec>)
 800de50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800de52:	00db      	lsls	r3, r3, #3
 800de54:	4413      	add	r3, r2
 800de56:	685a      	ldr	r2, [r3, #4]
 800de58:	4b4f      	ldr	r3, [pc, #316]	@ (800df98 <UTIL_SEQ_Run+0x1f0>)
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	2101      	movs	r1, #1
 800de5e:	fa01 f303 	lsl.w	r3, r1, r3
 800de62:	43db      	mvns	r3, r3
 800de64:	401a      	ands	r2, r3
 800de66:	494b      	ldr	r1, [pc, #300]	@ (800df94 <UTIL_SEQ_Run+0x1ec>)
 800de68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800de6a:	00db      	lsls	r3, r3, #3
 800de6c:	440b      	add	r3, r1
 800de6e:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800de70:	f3ef 8310 	mrs	r3, PRIMASK
 800de74:	61bb      	str	r3, [r7, #24]
  return(result);
 800de76:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800de78:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800de7a:	b672      	cpsid	i
}
 800de7c:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800de7e:	4b46      	ldr	r3, [pc, #280]	@ (800df98 <UTIL_SEQ_Run+0x1f0>)
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	2201      	movs	r2, #1
 800de84:	fa02 f303 	lsl.w	r3, r2, r3
 800de88:	43da      	mvns	r2, r3
 800de8a:	4b3e      	ldr	r3, [pc, #248]	@ (800df84 <UTIL_SEQ_Run+0x1dc>)
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	4013      	ands	r3, r2
 800de90:	4a3c      	ldr	r2, [pc, #240]	@ (800df84 <UTIL_SEQ_Run+0x1dc>)
 800de92:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800de94:	2301      	movs	r3, #1
 800de96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800de98:	e013      	b.n	800dec2 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800de9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800de9c:	3b01      	subs	r3, #1
 800de9e:	4a3d      	ldr	r2, [pc, #244]	@ (800df94 <UTIL_SEQ_Run+0x1ec>)
 800dea0:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800dea4:	4b3c      	ldr	r3, [pc, #240]	@ (800df98 <UTIL_SEQ_Run+0x1f0>)
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	2201      	movs	r2, #1
 800deaa:	fa02 f303 	lsl.w	r3, r2, r3
 800deae:	43da      	mvns	r2, r3
 800deb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800deb2:	3b01      	subs	r3, #1
 800deb4:	400a      	ands	r2, r1
 800deb6:	4937      	ldr	r1, [pc, #220]	@ (800df94 <UTIL_SEQ_Run+0x1ec>)
 800deb8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800debc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800debe:	3b01      	subs	r3, #1
 800dec0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800dec2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d1e8      	bne.n	800de9a <UTIL_SEQ_Run+0xf2>
 800dec8:	6a3b      	ldr	r3, [r7, #32]
 800deca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800decc:	697b      	ldr	r3, [r7, #20]
 800dece:	f383 8810 	msr	PRIMASK, r3
}
 800ded2:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800ded4:	4b30      	ldr	r3, [pc, #192]	@ (800df98 <UTIL_SEQ_Run+0x1f0>)
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	4a30      	ldr	r2, [pc, #192]	@ (800df9c <UTIL_SEQ_Run+0x1f4>)
 800deda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dede:	4798      	blx	r3

    local_taskset = TaskSet;
 800dee0:	4b28      	ldr	r3, [pc, #160]	@ (800df84 <UTIL_SEQ_Run+0x1dc>)
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 800dee6:	4b28      	ldr	r3, [pc, #160]	@ (800df88 <UTIL_SEQ_Run+0x1e0>)
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 800deec:	4b27      	ldr	r3, [pc, #156]	@ (800df8c <UTIL_SEQ_Run+0x1e4>)
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 800def2:	4b27      	ldr	r3, [pc, #156]	@ (800df90 <UTIL_SEQ_Run+0x1e8>)
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800def8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800defa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800defc:	401a      	ands	r2, r3
 800defe:	4b20      	ldr	r3, [pc, #128]	@ (800df80 <UTIL_SEQ_Run+0x1d8>)
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	4013      	ands	r3, r2
 800df04:	2b00      	cmp	r3, #0
 800df06:	d005      	beq.n	800df14 <UTIL_SEQ_Run+0x16c>
 800df08:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800df0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df0c:	4013      	ands	r3, r2
 800df0e:	2b00      	cmp	r3, #0
 800df10:	f43f af64 	beq.w	800dddc <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800df14:	4b20      	ldr	r3, [pc, #128]	@ (800df98 <UTIL_SEQ_Run+0x1f0>)
 800df16:	f04f 32ff 	mov.w	r2, #4294967295
 800df1a:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800df1c:	f000 f946 	bl	800e1ac <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800df20:	f3ef 8310 	mrs	r3, PRIMASK
 800df24:	613b      	str	r3, [r7, #16]
  return(result);
 800df26:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800df28:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800df2a:	b672      	cpsid	i
}
 800df2c:	bf00      	nop
  local_taskset = TaskSet;
 800df2e:	4b15      	ldr	r3, [pc, #84]	@ (800df84 <UTIL_SEQ_Run+0x1dc>)
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 800df34:	4b14      	ldr	r3, [pc, #80]	@ (800df88 <UTIL_SEQ_Run+0x1e0>)
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800df3a:	4b14      	ldr	r3, [pc, #80]	@ (800df8c <UTIL_SEQ_Run+0x1e4>)
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800df40:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800df42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df44:	401a      	ands	r2, r3
 800df46:	4b0e      	ldr	r3, [pc, #56]	@ (800df80 <UTIL_SEQ_Run+0x1d8>)
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	4013      	ands	r3, r2
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d107      	bne.n	800df60 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800df50:	4b0f      	ldr	r3, [pc, #60]	@ (800df90 <UTIL_SEQ_Run+0x1e8>)
 800df52:	681a      	ldr	r2, [r3, #0]
 800df54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800df56:	4013      	ands	r3, r2
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d101      	bne.n	800df60 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800df5c:	f7f3 f8bb 	bl	80010d6 <UTIL_SEQ_Idle>
 800df60:	69fb      	ldr	r3, [r7, #28]
 800df62:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	f383 8810 	msr	PRIMASK, r3
}
 800df6a:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800df6c:	f000 f925 	bl	800e1ba <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800df70:	4a03      	ldr	r2, [pc, #12]	@ (800df80 <UTIL_SEQ_Run+0x1d8>)
 800df72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df74:	6013      	str	r3, [r2, #0]

  return;
 800df76:	bf00      	nop
}
 800df78:	3740      	adds	r7, #64	@ 0x40
 800df7a:	46bd      	mov	sp, r7
 800df7c:	bd80      	pop	{r7, pc}
 800df7e:	bf00      	nop
 800df80:	20000034 	.word	0x20000034
 800df84:	20000d54 	.word	0x20000d54
 800df88:	20000d58 	.word	0x20000d58
 800df8c:	20000030 	.word	0x20000030
 800df90:	20000d5c 	.word	0x20000d5c
 800df94:	20000de4 	.word	0x20000de4
 800df98:	20000d60 	.word	0x20000d60
 800df9c:	20000d64 	.word	0x20000d64

0800dfa0 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800dfa0:	b580      	push	{r7, lr}
 800dfa2:	b088      	sub	sp, #32
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	60f8      	str	r0, [r7, #12]
 800dfa8:	60b9      	str	r1, [r7, #8]
 800dfaa:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dfac:	f3ef 8310 	mrs	r3, PRIMASK
 800dfb0:	617b      	str	r3, [r7, #20]
  return(result);
 800dfb2:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800dfb4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800dfb6:	b672      	cpsid	i
}
 800dfb8:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800dfba:	68f8      	ldr	r0, [r7, #12]
 800dfbc:	f000 f904 	bl	800e1c8 <SEQ_BitPosition>
 800dfc0:	4603      	mov	r3, r0
 800dfc2:	4619      	mov	r1, r3
 800dfc4:	4a06      	ldr	r2, [pc, #24]	@ (800dfe0 <UTIL_SEQ_RegTask+0x40>)
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800dfcc:	69fb      	ldr	r3, [r7, #28]
 800dfce:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dfd0:	69bb      	ldr	r3, [r7, #24]
 800dfd2:	f383 8810 	msr	PRIMASK, r3
}
 800dfd6:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800dfd8:	bf00      	nop
}
 800dfda:	3720      	adds	r7, #32
 800dfdc:	46bd      	mov	sp, r7
 800dfde:	bd80      	pop	{r7, pc}
 800dfe0:	20000d64 	.word	0x20000d64

0800dfe4 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800dfe4:	b480      	push	{r7}
 800dfe6:	b087      	sub	sp, #28
 800dfe8:	af00      	add	r7, sp, #0
 800dfea:	6078      	str	r0, [r7, #4]
 800dfec:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dfee:	f3ef 8310 	mrs	r3, PRIMASK
 800dff2:	60fb      	str	r3, [r7, #12]
  return(result);
 800dff4:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800dff6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800dff8:	b672      	cpsid	i
}
 800dffa:	bf00      	nop

  TaskSet |= TaskId_bm;
 800dffc:	4b0d      	ldr	r3, [pc, #52]	@ (800e034 <UTIL_SEQ_SetTask+0x50>)
 800dffe:	681a      	ldr	r2, [r3, #0]
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	4313      	orrs	r3, r2
 800e004:	4a0b      	ldr	r2, [pc, #44]	@ (800e034 <UTIL_SEQ_SetTask+0x50>)
 800e006:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800e008:	4a0b      	ldr	r2, [pc, #44]	@ (800e038 <UTIL_SEQ_SetTask+0x54>)
 800e00a:	683b      	ldr	r3, [r7, #0]
 800e00c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	431a      	orrs	r2, r3
 800e014:	4908      	ldr	r1, [pc, #32]	@ (800e038 <UTIL_SEQ_SetTask+0x54>)
 800e016:	683b      	ldr	r3, [r7, #0]
 800e018:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800e01c:	697b      	ldr	r3, [r7, #20]
 800e01e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e020:	693b      	ldr	r3, [r7, #16]
 800e022:	f383 8810 	msr	PRIMASK, r3
}
 800e026:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800e028:	bf00      	nop
}
 800e02a:	371c      	adds	r7, #28
 800e02c:	46bd      	mov	sp, r7
 800e02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e032:	4770      	bx	lr
 800e034:	20000d54 	.word	0x20000d54
 800e038:	20000de4 	.word	0x20000de4

0800e03c <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800e03c:	b480      	push	{r7}
 800e03e:	b087      	sub	sp, #28
 800e040:	af00      	add	r7, sp, #0
 800e042:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e044:	f3ef 8310 	mrs	r3, PRIMASK
 800e048:	60fb      	str	r3, [r7, #12]
  return(result);
 800e04a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800e04c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e04e:	b672      	cpsid	i
}
 800e050:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	43da      	mvns	r2, r3
 800e056:	4b08      	ldr	r3, [pc, #32]	@ (800e078 <UTIL_SEQ_PauseTask+0x3c>)
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	4013      	ands	r3, r2
 800e05c:	4a06      	ldr	r2, [pc, #24]	@ (800e078 <UTIL_SEQ_PauseTask+0x3c>)
 800e05e:	6013      	str	r3, [r2, #0]
 800e060:	697b      	ldr	r3, [r7, #20]
 800e062:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e064:	693b      	ldr	r3, [r7, #16]
 800e066:	f383 8810 	msr	PRIMASK, r3
}
 800e06a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800e06c:	bf00      	nop
}
 800e06e:	371c      	adds	r7, #28
 800e070:	46bd      	mov	sp, r7
 800e072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e076:	4770      	bx	lr
 800e078:	20000030 	.word	0x20000030

0800e07c <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800e07c:	b480      	push	{r7}
 800e07e:	b087      	sub	sp, #28
 800e080:	af00      	add	r7, sp, #0
 800e082:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e084:	f3ef 8310 	mrs	r3, PRIMASK
 800e088:	60fb      	str	r3, [r7, #12]
  return(result);
 800e08a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800e08c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e08e:	b672      	cpsid	i
}
 800e090:	bf00      	nop

  TaskMask |= TaskId_bm;
 800e092:	4b09      	ldr	r3, [pc, #36]	@ (800e0b8 <UTIL_SEQ_ResumeTask+0x3c>)
 800e094:	681a      	ldr	r2, [r3, #0]
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	4313      	orrs	r3, r2
 800e09a:	4a07      	ldr	r2, [pc, #28]	@ (800e0b8 <UTIL_SEQ_ResumeTask+0x3c>)
 800e09c:	6013      	str	r3, [r2, #0]
 800e09e:	697b      	ldr	r3, [r7, #20]
 800e0a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e0a2:	693b      	ldr	r3, [r7, #16]
 800e0a4:	f383 8810 	msr	PRIMASK, r3
}
 800e0a8:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800e0aa:	bf00      	nop
}
 800e0ac:	371c      	adds	r7, #28
 800e0ae:	46bd      	mov	sp, r7
 800e0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b4:	4770      	bx	lr
 800e0b6:	bf00      	nop
 800e0b8:	20000030 	.word	0x20000030

0800e0bc <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800e0bc:	b480      	push	{r7}
 800e0be:	b087      	sub	sp, #28
 800e0c0:	af00      	add	r7, sp, #0
 800e0c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e0c4:	f3ef 8310 	mrs	r3, PRIMASK
 800e0c8:	60fb      	str	r3, [r7, #12]
  return(result);
 800e0ca:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800e0cc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e0ce:	b672      	cpsid	i
}
 800e0d0:	bf00      	nop

  EvtSet |= EvtId_bm;
 800e0d2:	4b09      	ldr	r3, [pc, #36]	@ (800e0f8 <UTIL_SEQ_SetEvt+0x3c>)
 800e0d4:	681a      	ldr	r2, [r3, #0]
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	4313      	orrs	r3, r2
 800e0da:	4a07      	ldr	r2, [pc, #28]	@ (800e0f8 <UTIL_SEQ_SetEvt+0x3c>)
 800e0dc:	6013      	str	r3, [r2, #0]
 800e0de:	697b      	ldr	r3, [r7, #20]
 800e0e0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e0e2:	693b      	ldr	r3, [r7, #16]
 800e0e4:	f383 8810 	msr	PRIMASK, r3
}
 800e0e8:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800e0ea:	bf00      	nop
}
 800e0ec:	371c      	adds	r7, #28
 800e0ee:	46bd      	mov	sp, r7
 800e0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f4:	4770      	bx	lr
 800e0f6:	bf00      	nop
 800e0f8:	20000d58 	.word	0x20000d58

0800e0fc <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800e0fc:	b580      	push	{r7, lr}
 800e0fe:	b088      	sub	sp, #32
 800e100:	af00      	add	r7, sp, #0
 800e102:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800e104:	4b1f      	ldr	r3, [pc, #124]	@ (800e184 <UTIL_SEQ_WaitEvt+0x88>)
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800e10a:	4b1e      	ldr	r3, [pc, #120]	@ (800e184 <UTIL_SEQ_WaitEvt+0x88>)
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e112:	d102      	bne.n	800e11a <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800e114:	2300      	movs	r3, #0
 800e116:	61fb      	str	r3, [r7, #28]
 800e118:	e005      	b.n	800e126 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800e11a:	4b1a      	ldr	r3, [pc, #104]	@ (800e184 <UTIL_SEQ_WaitEvt+0x88>)
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	2201      	movs	r2, #1
 800e120:	fa02 f303 	lsl.w	r3, r2, r3
 800e124:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800e126:	4b18      	ldr	r3, [pc, #96]	@ (800e188 <UTIL_SEQ_WaitEvt+0x8c>)
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800e12c:	4a16      	ldr	r2, [pc, #88]	@ (800e188 <UTIL_SEQ_WaitEvt+0x8c>)
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800e132:	e003      	b.n	800e13c <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800e134:	6879      	ldr	r1, [r7, #4]
 800e136:	69f8      	ldr	r0, [r7, #28]
 800e138:	f000 f82a 	bl	800e190 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800e13c:	4b13      	ldr	r3, [pc, #76]	@ (800e18c <UTIL_SEQ_WaitEvt+0x90>)
 800e13e:	681a      	ldr	r2, [r3, #0]
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	4013      	ands	r3, r2
 800e144:	2b00      	cmp	r3, #0
 800e146:	d0f5      	beq.n	800e134 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800e148:	4a0e      	ldr	r2, [pc, #56]	@ (800e184 <UTIL_SEQ_WaitEvt+0x88>)
 800e14a:	69bb      	ldr	r3, [r7, #24]
 800e14c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e14e:	f3ef 8310 	mrs	r3, PRIMASK
 800e152:	60bb      	str	r3, [r7, #8]
  return(result);
 800e154:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800e156:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800e158:	b672      	cpsid	i
}
 800e15a:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	43da      	mvns	r2, r3
 800e160:	4b0a      	ldr	r3, [pc, #40]	@ (800e18c <UTIL_SEQ_WaitEvt+0x90>)
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	4013      	ands	r3, r2
 800e166:	4a09      	ldr	r2, [pc, #36]	@ (800e18c <UTIL_SEQ_WaitEvt+0x90>)
 800e168:	6013      	str	r3, [r2, #0]
 800e16a:	693b      	ldr	r3, [r7, #16]
 800e16c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	f383 8810 	msr	PRIMASK, r3
}
 800e174:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800e176:	4a04      	ldr	r2, [pc, #16]	@ (800e188 <UTIL_SEQ_WaitEvt+0x8c>)
 800e178:	697b      	ldr	r3, [r7, #20]
 800e17a:	6013      	str	r3, [r2, #0]
  return;
 800e17c:	bf00      	nop
}
 800e17e:	3720      	adds	r7, #32
 800e180:	46bd      	mov	sp, r7
 800e182:	bd80      	pop	{r7, pc}
 800e184:	20000d60 	.word	0x20000d60
 800e188:	20000d5c 	.word	0x20000d5c
 800e18c:	20000d58 	.word	0x20000d58

0800e190 <UTIL_SEQ_EvtIdle>:
  UTIL_SEQ_bm_t local_evtwaited = EvtWaited;
  return (EvtSet & local_evtwaited);
}

__WEAK void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t TaskId_bm, UTIL_SEQ_bm_t EvtWaited_bm )
{
 800e190:	b580      	push	{r7, lr}
 800e192:	b082      	sub	sp, #8
 800e194:	af00      	add	r7, sp, #0
 800e196:	6078      	str	r0, [r7, #4]
 800e198:	6039      	str	r1, [r7, #0]
  (void)EvtWaited_bm;
  UTIL_SEQ_Run(~TaskId_bm);
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	43db      	mvns	r3, r3
 800e19e:	4618      	mov	r0, r3
 800e1a0:	f7ff fe02 	bl	800dda8 <UTIL_SEQ_Run>
  return;
 800e1a4:	bf00      	nop
}
 800e1a6:	3708      	adds	r7, #8
 800e1a8:	46bd      	mov	sp, r7
 800e1aa:	bd80      	pop	{r7, pc}

0800e1ac <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800e1ac:	b480      	push	{r7}
 800e1ae:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800e1b0:	bf00      	nop
}
 800e1b2:	46bd      	mov	sp, r7
 800e1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1b8:	4770      	bx	lr

0800e1ba <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800e1ba:	b480      	push	{r7}
 800e1bc:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800e1be:	bf00      	nop
}
 800e1c0:	46bd      	mov	sp, r7
 800e1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c6:	4770      	bx	lr

0800e1c8 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800e1c8:	b480      	push	{r7}
 800e1ca:	b085      	sub	sp, #20
 800e1cc:	af00      	add	r7, sp, #0
 800e1ce:	6078      	str	r0, [r7, #4]
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	60fb      	str	r3, [r7, #12]
  if (value == 0U)
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d101      	bne.n	800e1de <SEQ_BitPosition+0x16>
    return 32U;
 800e1da:	2320      	movs	r3, #32
 800e1dc:	e003      	b.n	800e1e6 <SEQ_BitPosition+0x1e>
  return __builtin_clz(value);
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	fab3 f383 	clz	r3, r3
 800e1e4:	b2db      	uxtb	r3, r3
  return (uint8_t)(31 -__CLZ( Value ));
 800e1e6:	f1c3 031f 	rsb	r3, r3, #31
 800e1ea:	b2db      	uxtb	r3, r3
}
 800e1ec:	4618      	mov	r0, r3
 800e1ee:	3714      	adds	r7, #20
 800e1f0:	46bd      	mov	sp, r7
 800e1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f6:	4770      	bx	lr

0800e1f8 <std>:
 800e1f8:	2300      	movs	r3, #0
 800e1fa:	b510      	push	{r4, lr}
 800e1fc:	4604      	mov	r4, r0
 800e1fe:	e9c0 3300 	strd	r3, r3, [r0]
 800e202:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e206:	6083      	str	r3, [r0, #8]
 800e208:	8181      	strh	r1, [r0, #12]
 800e20a:	6643      	str	r3, [r0, #100]	@ 0x64
 800e20c:	81c2      	strh	r2, [r0, #14]
 800e20e:	6183      	str	r3, [r0, #24]
 800e210:	4619      	mov	r1, r3
 800e212:	2208      	movs	r2, #8
 800e214:	305c      	adds	r0, #92	@ 0x5c
 800e216:	f000 fa11 	bl	800e63c <memset>
 800e21a:	4b0d      	ldr	r3, [pc, #52]	@ (800e250 <std+0x58>)
 800e21c:	6263      	str	r3, [r4, #36]	@ 0x24
 800e21e:	4b0d      	ldr	r3, [pc, #52]	@ (800e254 <std+0x5c>)
 800e220:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e222:	4b0d      	ldr	r3, [pc, #52]	@ (800e258 <std+0x60>)
 800e224:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e226:	4b0d      	ldr	r3, [pc, #52]	@ (800e25c <std+0x64>)
 800e228:	6323      	str	r3, [r4, #48]	@ 0x30
 800e22a:	4b0d      	ldr	r3, [pc, #52]	@ (800e260 <std+0x68>)
 800e22c:	6224      	str	r4, [r4, #32]
 800e22e:	429c      	cmp	r4, r3
 800e230:	d006      	beq.n	800e240 <std+0x48>
 800e232:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e236:	4294      	cmp	r4, r2
 800e238:	d002      	beq.n	800e240 <std+0x48>
 800e23a:	33d0      	adds	r3, #208	@ 0xd0
 800e23c:	429c      	cmp	r4, r3
 800e23e:	d105      	bne.n	800e24c <std+0x54>
 800e240:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e244:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e248:	f000 ba70 	b.w	800e72c <__retarget_lock_init_recursive>
 800e24c:	bd10      	pop	{r4, pc}
 800e24e:	bf00      	nop
 800e250:	0800e46d 	.word	0x0800e46d
 800e254:	0800e48f 	.word	0x0800e48f
 800e258:	0800e4c7 	.word	0x0800e4c7
 800e25c:	0800e4eb 	.word	0x0800e4eb
 800e260:	20000dec 	.word	0x20000dec

0800e264 <stdio_exit_handler>:
 800e264:	4a02      	ldr	r2, [pc, #8]	@ (800e270 <stdio_exit_handler+0xc>)
 800e266:	4903      	ldr	r1, [pc, #12]	@ (800e274 <stdio_exit_handler+0x10>)
 800e268:	4803      	ldr	r0, [pc, #12]	@ (800e278 <stdio_exit_handler+0x14>)
 800e26a:	f000 b869 	b.w	800e340 <_fwalk_sglue>
 800e26e:	bf00      	nop
 800e270:	20000038 	.word	0x20000038
 800e274:	0800efe5 	.word	0x0800efe5
 800e278:	20000048 	.word	0x20000048

0800e27c <cleanup_stdio>:
 800e27c:	6841      	ldr	r1, [r0, #4]
 800e27e:	4b0c      	ldr	r3, [pc, #48]	@ (800e2b0 <cleanup_stdio+0x34>)
 800e280:	4299      	cmp	r1, r3
 800e282:	b510      	push	{r4, lr}
 800e284:	4604      	mov	r4, r0
 800e286:	d001      	beq.n	800e28c <cleanup_stdio+0x10>
 800e288:	f000 feac 	bl	800efe4 <_fflush_r>
 800e28c:	68a1      	ldr	r1, [r4, #8]
 800e28e:	4b09      	ldr	r3, [pc, #36]	@ (800e2b4 <cleanup_stdio+0x38>)
 800e290:	4299      	cmp	r1, r3
 800e292:	d002      	beq.n	800e29a <cleanup_stdio+0x1e>
 800e294:	4620      	mov	r0, r4
 800e296:	f000 fea5 	bl	800efe4 <_fflush_r>
 800e29a:	68e1      	ldr	r1, [r4, #12]
 800e29c:	4b06      	ldr	r3, [pc, #24]	@ (800e2b8 <cleanup_stdio+0x3c>)
 800e29e:	4299      	cmp	r1, r3
 800e2a0:	d004      	beq.n	800e2ac <cleanup_stdio+0x30>
 800e2a2:	4620      	mov	r0, r4
 800e2a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e2a8:	f000 be9c 	b.w	800efe4 <_fflush_r>
 800e2ac:	bd10      	pop	{r4, pc}
 800e2ae:	bf00      	nop
 800e2b0:	20000dec 	.word	0x20000dec
 800e2b4:	20000e54 	.word	0x20000e54
 800e2b8:	20000ebc 	.word	0x20000ebc

0800e2bc <global_stdio_init.part.0>:
 800e2bc:	b510      	push	{r4, lr}
 800e2be:	4b0b      	ldr	r3, [pc, #44]	@ (800e2ec <global_stdio_init.part.0+0x30>)
 800e2c0:	4c0b      	ldr	r4, [pc, #44]	@ (800e2f0 <global_stdio_init.part.0+0x34>)
 800e2c2:	4a0c      	ldr	r2, [pc, #48]	@ (800e2f4 <global_stdio_init.part.0+0x38>)
 800e2c4:	601a      	str	r2, [r3, #0]
 800e2c6:	4620      	mov	r0, r4
 800e2c8:	2200      	movs	r2, #0
 800e2ca:	2104      	movs	r1, #4
 800e2cc:	f7ff ff94 	bl	800e1f8 <std>
 800e2d0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e2d4:	2201      	movs	r2, #1
 800e2d6:	2109      	movs	r1, #9
 800e2d8:	f7ff ff8e 	bl	800e1f8 <std>
 800e2dc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e2e0:	2202      	movs	r2, #2
 800e2e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e2e6:	2112      	movs	r1, #18
 800e2e8:	f7ff bf86 	b.w	800e1f8 <std>
 800e2ec:	20000f24 	.word	0x20000f24
 800e2f0:	20000dec 	.word	0x20000dec
 800e2f4:	0800e265 	.word	0x0800e265

0800e2f8 <__sfp_lock_acquire>:
 800e2f8:	4801      	ldr	r0, [pc, #4]	@ (800e300 <__sfp_lock_acquire+0x8>)
 800e2fa:	f000 ba18 	b.w	800e72e <__retarget_lock_acquire_recursive>
 800e2fe:	bf00      	nop
 800e300:	20000f2d 	.word	0x20000f2d

0800e304 <__sfp_lock_release>:
 800e304:	4801      	ldr	r0, [pc, #4]	@ (800e30c <__sfp_lock_release+0x8>)
 800e306:	f000 ba13 	b.w	800e730 <__retarget_lock_release_recursive>
 800e30a:	bf00      	nop
 800e30c:	20000f2d 	.word	0x20000f2d

0800e310 <__sinit>:
 800e310:	b510      	push	{r4, lr}
 800e312:	4604      	mov	r4, r0
 800e314:	f7ff fff0 	bl	800e2f8 <__sfp_lock_acquire>
 800e318:	6a23      	ldr	r3, [r4, #32]
 800e31a:	b11b      	cbz	r3, 800e324 <__sinit+0x14>
 800e31c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e320:	f7ff bff0 	b.w	800e304 <__sfp_lock_release>
 800e324:	4b04      	ldr	r3, [pc, #16]	@ (800e338 <__sinit+0x28>)
 800e326:	6223      	str	r3, [r4, #32]
 800e328:	4b04      	ldr	r3, [pc, #16]	@ (800e33c <__sinit+0x2c>)
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d1f5      	bne.n	800e31c <__sinit+0xc>
 800e330:	f7ff ffc4 	bl	800e2bc <global_stdio_init.part.0>
 800e334:	e7f2      	b.n	800e31c <__sinit+0xc>
 800e336:	bf00      	nop
 800e338:	0800e27d 	.word	0x0800e27d
 800e33c:	20000f24 	.word	0x20000f24

0800e340 <_fwalk_sglue>:
 800e340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e344:	4607      	mov	r7, r0
 800e346:	4688      	mov	r8, r1
 800e348:	4614      	mov	r4, r2
 800e34a:	2600      	movs	r6, #0
 800e34c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e350:	f1b9 0901 	subs.w	r9, r9, #1
 800e354:	d505      	bpl.n	800e362 <_fwalk_sglue+0x22>
 800e356:	6824      	ldr	r4, [r4, #0]
 800e358:	2c00      	cmp	r4, #0
 800e35a:	d1f7      	bne.n	800e34c <_fwalk_sglue+0xc>
 800e35c:	4630      	mov	r0, r6
 800e35e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e362:	89ab      	ldrh	r3, [r5, #12]
 800e364:	2b01      	cmp	r3, #1
 800e366:	d907      	bls.n	800e378 <_fwalk_sglue+0x38>
 800e368:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e36c:	3301      	adds	r3, #1
 800e36e:	d003      	beq.n	800e378 <_fwalk_sglue+0x38>
 800e370:	4629      	mov	r1, r5
 800e372:	4638      	mov	r0, r7
 800e374:	47c0      	blx	r8
 800e376:	4306      	orrs	r6, r0
 800e378:	3568      	adds	r5, #104	@ 0x68
 800e37a:	e7e9      	b.n	800e350 <_fwalk_sglue+0x10>

0800e37c <iprintf>:
 800e37c:	b40f      	push	{r0, r1, r2, r3}
 800e37e:	b507      	push	{r0, r1, r2, lr}
 800e380:	4906      	ldr	r1, [pc, #24]	@ (800e39c <iprintf+0x20>)
 800e382:	ab04      	add	r3, sp, #16
 800e384:	6808      	ldr	r0, [r1, #0]
 800e386:	f853 2b04 	ldr.w	r2, [r3], #4
 800e38a:	6881      	ldr	r1, [r0, #8]
 800e38c:	9301      	str	r3, [sp, #4]
 800e38e:	f000 fb01 	bl	800e994 <_vfiprintf_r>
 800e392:	b003      	add	sp, #12
 800e394:	f85d eb04 	ldr.w	lr, [sp], #4
 800e398:	b004      	add	sp, #16
 800e39a:	4770      	bx	lr
 800e39c:	20000044 	.word	0x20000044

0800e3a0 <putchar>:
 800e3a0:	4b02      	ldr	r3, [pc, #8]	@ (800e3ac <putchar+0xc>)
 800e3a2:	4601      	mov	r1, r0
 800e3a4:	6818      	ldr	r0, [r3, #0]
 800e3a6:	6882      	ldr	r2, [r0, #8]
 800e3a8:	f000 bea6 	b.w	800f0f8 <_putc_r>
 800e3ac:	20000044 	.word	0x20000044

0800e3b0 <_puts_r>:
 800e3b0:	6a03      	ldr	r3, [r0, #32]
 800e3b2:	b570      	push	{r4, r5, r6, lr}
 800e3b4:	6884      	ldr	r4, [r0, #8]
 800e3b6:	4605      	mov	r5, r0
 800e3b8:	460e      	mov	r6, r1
 800e3ba:	b90b      	cbnz	r3, 800e3c0 <_puts_r+0x10>
 800e3bc:	f7ff ffa8 	bl	800e310 <__sinit>
 800e3c0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e3c2:	07db      	lsls	r3, r3, #31
 800e3c4:	d405      	bmi.n	800e3d2 <_puts_r+0x22>
 800e3c6:	89a3      	ldrh	r3, [r4, #12]
 800e3c8:	0598      	lsls	r0, r3, #22
 800e3ca:	d402      	bmi.n	800e3d2 <_puts_r+0x22>
 800e3cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e3ce:	f000 f9ae 	bl	800e72e <__retarget_lock_acquire_recursive>
 800e3d2:	89a3      	ldrh	r3, [r4, #12]
 800e3d4:	0719      	lsls	r1, r3, #28
 800e3d6:	d502      	bpl.n	800e3de <_puts_r+0x2e>
 800e3d8:	6923      	ldr	r3, [r4, #16]
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d135      	bne.n	800e44a <_puts_r+0x9a>
 800e3de:	4621      	mov	r1, r4
 800e3e0:	4628      	mov	r0, r5
 800e3e2:	f000 f8c5 	bl	800e570 <__swsetup_r>
 800e3e6:	b380      	cbz	r0, 800e44a <_puts_r+0x9a>
 800e3e8:	f04f 35ff 	mov.w	r5, #4294967295
 800e3ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e3ee:	07da      	lsls	r2, r3, #31
 800e3f0:	d405      	bmi.n	800e3fe <_puts_r+0x4e>
 800e3f2:	89a3      	ldrh	r3, [r4, #12]
 800e3f4:	059b      	lsls	r3, r3, #22
 800e3f6:	d402      	bmi.n	800e3fe <_puts_r+0x4e>
 800e3f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e3fa:	f000 f999 	bl	800e730 <__retarget_lock_release_recursive>
 800e3fe:	4628      	mov	r0, r5
 800e400:	bd70      	pop	{r4, r5, r6, pc}
 800e402:	2b00      	cmp	r3, #0
 800e404:	da04      	bge.n	800e410 <_puts_r+0x60>
 800e406:	69a2      	ldr	r2, [r4, #24]
 800e408:	429a      	cmp	r2, r3
 800e40a:	dc17      	bgt.n	800e43c <_puts_r+0x8c>
 800e40c:	290a      	cmp	r1, #10
 800e40e:	d015      	beq.n	800e43c <_puts_r+0x8c>
 800e410:	6823      	ldr	r3, [r4, #0]
 800e412:	1c5a      	adds	r2, r3, #1
 800e414:	6022      	str	r2, [r4, #0]
 800e416:	7019      	strb	r1, [r3, #0]
 800e418:	68a3      	ldr	r3, [r4, #8]
 800e41a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e41e:	3b01      	subs	r3, #1
 800e420:	60a3      	str	r3, [r4, #8]
 800e422:	2900      	cmp	r1, #0
 800e424:	d1ed      	bne.n	800e402 <_puts_r+0x52>
 800e426:	2b00      	cmp	r3, #0
 800e428:	da11      	bge.n	800e44e <_puts_r+0x9e>
 800e42a:	4622      	mov	r2, r4
 800e42c:	210a      	movs	r1, #10
 800e42e:	4628      	mov	r0, r5
 800e430:	f000 f85f 	bl	800e4f2 <__swbuf_r>
 800e434:	3001      	adds	r0, #1
 800e436:	d0d7      	beq.n	800e3e8 <_puts_r+0x38>
 800e438:	250a      	movs	r5, #10
 800e43a:	e7d7      	b.n	800e3ec <_puts_r+0x3c>
 800e43c:	4622      	mov	r2, r4
 800e43e:	4628      	mov	r0, r5
 800e440:	f000 f857 	bl	800e4f2 <__swbuf_r>
 800e444:	3001      	adds	r0, #1
 800e446:	d1e7      	bne.n	800e418 <_puts_r+0x68>
 800e448:	e7ce      	b.n	800e3e8 <_puts_r+0x38>
 800e44a:	3e01      	subs	r6, #1
 800e44c:	e7e4      	b.n	800e418 <_puts_r+0x68>
 800e44e:	6823      	ldr	r3, [r4, #0]
 800e450:	1c5a      	adds	r2, r3, #1
 800e452:	6022      	str	r2, [r4, #0]
 800e454:	220a      	movs	r2, #10
 800e456:	701a      	strb	r2, [r3, #0]
 800e458:	e7ee      	b.n	800e438 <_puts_r+0x88>
	...

0800e45c <puts>:
 800e45c:	4b02      	ldr	r3, [pc, #8]	@ (800e468 <puts+0xc>)
 800e45e:	4601      	mov	r1, r0
 800e460:	6818      	ldr	r0, [r3, #0]
 800e462:	f7ff bfa5 	b.w	800e3b0 <_puts_r>
 800e466:	bf00      	nop
 800e468:	20000044 	.word	0x20000044

0800e46c <__sread>:
 800e46c:	b510      	push	{r4, lr}
 800e46e:	460c      	mov	r4, r1
 800e470:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e474:	f000 f90c 	bl	800e690 <_read_r>
 800e478:	2800      	cmp	r0, #0
 800e47a:	bfab      	itete	ge
 800e47c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e47e:	89a3      	ldrhlt	r3, [r4, #12]
 800e480:	181b      	addge	r3, r3, r0
 800e482:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e486:	bfac      	ite	ge
 800e488:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e48a:	81a3      	strhlt	r3, [r4, #12]
 800e48c:	bd10      	pop	{r4, pc}

0800e48e <__swrite>:
 800e48e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e492:	461f      	mov	r7, r3
 800e494:	898b      	ldrh	r3, [r1, #12]
 800e496:	05db      	lsls	r3, r3, #23
 800e498:	4605      	mov	r5, r0
 800e49a:	460c      	mov	r4, r1
 800e49c:	4616      	mov	r6, r2
 800e49e:	d505      	bpl.n	800e4ac <__swrite+0x1e>
 800e4a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e4a4:	2302      	movs	r3, #2
 800e4a6:	2200      	movs	r2, #0
 800e4a8:	f000 f8e0 	bl	800e66c <_lseek_r>
 800e4ac:	89a3      	ldrh	r3, [r4, #12]
 800e4ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e4b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e4b6:	81a3      	strh	r3, [r4, #12]
 800e4b8:	4632      	mov	r2, r6
 800e4ba:	463b      	mov	r3, r7
 800e4bc:	4628      	mov	r0, r5
 800e4be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e4c2:	f000 b8f7 	b.w	800e6b4 <_write_r>

0800e4c6 <__sseek>:
 800e4c6:	b510      	push	{r4, lr}
 800e4c8:	460c      	mov	r4, r1
 800e4ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e4ce:	f000 f8cd 	bl	800e66c <_lseek_r>
 800e4d2:	1c43      	adds	r3, r0, #1
 800e4d4:	89a3      	ldrh	r3, [r4, #12]
 800e4d6:	bf15      	itete	ne
 800e4d8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e4da:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e4de:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e4e2:	81a3      	strheq	r3, [r4, #12]
 800e4e4:	bf18      	it	ne
 800e4e6:	81a3      	strhne	r3, [r4, #12]
 800e4e8:	bd10      	pop	{r4, pc}

0800e4ea <__sclose>:
 800e4ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e4ee:	f000 b8ad 	b.w	800e64c <_close_r>

0800e4f2 <__swbuf_r>:
 800e4f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4f4:	460e      	mov	r6, r1
 800e4f6:	4614      	mov	r4, r2
 800e4f8:	4605      	mov	r5, r0
 800e4fa:	b118      	cbz	r0, 800e504 <__swbuf_r+0x12>
 800e4fc:	6a03      	ldr	r3, [r0, #32]
 800e4fe:	b90b      	cbnz	r3, 800e504 <__swbuf_r+0x12>
 800e500:	f7ff ff06 	bl	800e310 <__sinit>
 800e504:	69a3      	ldr	r3, [r4, #24]
 800e506:	60a3      	str	r3, [r4, #8]
 800e508:	89a3      	ldrh	r3, [r4, #12]
 800e50a:	071a      	lsls	r2, r3, #28
 800e50c:	d501      	bpl.n	800e512 <__swbuf_r+0x20>
 800e50e:	6923      	ldr	r3, [r4, #16]
 800e510:	b943      	cbnz	r3, 800e524 <__swbuf_r+0x32>
 800e512:	4621      	mov	r1, r4
 800e514:	4628      	mov	r0, r5
 800e516:	f000 f82b 	bl	800e570 <__swsetup_r>
 800e51a:	b118      	cbz	r0, 800e524 <__swbuf_r+0x32>
 800e51c:	f04f 37ff 	mov.w	r7, #4294967295
 800e520:	4638      	mov	r0, r7
 800e522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e524:	6823      	ldr	r3, [r4, #0]
 800e526:	6922      	ldr	r2, [r4, #16]
 800e528:	1a98      	subs	r0, r3, r2
 800e52a:	6963      	ldr	r3, [r4, #20]
 800e52c:	b2f6      	uxtb	r6, r6
 800e52e:	4283      	cmp	r3, r0
 800e530:	4637      	mov	r7, r6
 800e532:	dc05      	bgt.n	800e540 <__swbuf_r+0x4e>
 800e534:	4621      	mov	r1, r4
 800e536:	4628      	mov	r0, r5
 800e538:	f000 fd54 	bl	800efe4 <_fflush_r>
 800e53c:	2800      	cmp	r0, #0
 800e53e:	d1ed      	bne.n	800e51c <__swbuf_r+0x2a>
 800e540:	68a3      	ldr	r3, [r4, #8]
 800e542:	3b01      	subs	r3, #1
 800e544:	60a3      	str	r3, [r4, #8]
 800e546:	6823      	ldr	r3, [r4, #0]
 800e548:	1c5a      	adds	r2, r3, #1
 800e54a:	6022      	str	r2, [r4, #0]
 800e54c:	701e      	strb	r6, [r3, #0]
 800e54e:	6962      	ldr	r2, [r4, #20]
 800e550:	1c43      	adds	r3, r0, #1
 800e552:	429a      	cmp	r2, r3
 800e554:	d004      	beq.n	800e560 <__swbuf_r+0x6e>
 800e556:	89a3      	ldrh	r3, [r4, #12]
 800e558:	07db      	lsls	r3, r3, #31
 800e55a:	d5e1      	bpl.n	800e520 <__swbuf_r+0x2e>
 800e55c:	2e0a      	cmp	r6, #10
 800e55e:	d1df      	bne.n	800e520 <__swbuf_r+0x2e>
 800e560:	4621      	mov	r1, r4
 800e562:	4628      	mov	r0, r5
 800e564:	f000 fd3e 	bl	800efe4 <_fflush_r>
 800e568:	2800      	cmp	r0, #0
 800e56a:	d0d9      	beq.n	800e520 <__swbuf_r+0x2e>
 800e56c:	e7d6      	b.n	800e51c <__swbuf_r+0x2a>
	...

0800e570 <__swsetup_r>:
 800e570:	b538      	push	{r3, r4, r5, lr}
 800e572:	4b29      	ldr	r3, [pc, #164]	@ (800e618 <__swsetup_r+0xa8>)
 800e574:	4605      	mov	r5, r0
 800e576:	6818      	ldr	r0, [r3, #0]
 800e578:	460c      	mov	r4, r1
 800e57a:	b118      	cbz	r0, 800e584 <__swsetup_r+0x14>
 800e57c:	6a03      	ldr	r3, [r0, #32]
 800e57e:	b90b      	cbnz	r3, 800e584 <__swsetup_r+0x14>
 800e580:	f7ff fec6 	bl	800e310 <__sinit>
 800e584:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e588:	0719      	lsls	r1, r3, #28
 800e58a:	d422      	bmi.n	800e5d2 <__swsetup_r+0x62>
 800e58c:	06da      	lsls	r2, r3, #27
 800e58e:	d407      	bmi.n	800e5a0 <__swsetup_r+0x30>
 800e590:	2209      	movs	r2, #9
 800e592:	602a      	str	r2, [r5, #0]
 800e594:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e598:	81a3      	strh	r3, [r4, #12]
 800e59a:	f04f 30ff 	mov.w	r0, #4294967295
 800e59e:	e033      	b.n	800e608 <__swsetup_r+0x98>
 800e5a0:	0758      	lsls	r0, r3, #29
 800e5a2:	d512      	bpl.n	800e5ca <__swsetup_r+0x5a>
 800e5a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e5a6:	b141      	cbz	r1, 800e5ba <__swsetup_r+0x4a>
 800e5a8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e5ac:	4299      	cmp	r1, r3
 800e5ae:	d002      	beq.n	800e5b6 <__swsetup_r+0x46>
 800e5b0:	4628      	mov	r0, r5
 800e5b2:	f000 f8cd 	bl	800e750 <_free_r>
 800e5b6:	2300      	movs	r3, #0
 800e5b8:	6363      	str	r3, [r4, #52]	@ 0x34
 800e5ba:	89a3      	ldrh	r3, [r4, #12]
 800e5bc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e5c0:	81a3      	strh	r3, [r4, #12]
 800e5c2:	2300      	movs	r3, #0
 800e5c4:	6063      	str	r3, [r4, #4]
 800e5c6:	6923      	ldr	r3, [r4, #16]
 800e5c8:	6023      	str	r3, [r4, #0]
 800e5ca:	89a3      	ldrh	r3, [r4, #12]
 800e5cc:	f043 0308 	orr.w	r3, r3, #8
 800e5d0:	81a3      	strh	r3, [r4, #12]
 800e5d2:	6923      	ldr	r3, [r4, #16]
 800e5d4:	b94b      	cbnz	r3, 800e5ea <__swsetup_r+0x7a>
 800e5d6:	89a3      	ldrh	r3, [r4, #12]
 800e5d8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e5dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e5e0:	d003      	beq.n	800e5ea <__swsetup_r+0x7a>
 800e5e2:	4621      	mov	r1, r4
 800e5e4:	4628      	mov	r0, r5
 800e5e6:	f000 fd4b 	bl	800f080 <__smakebuf_r>
 800e5ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e5ee:	f013 0201 	ands.w	r2, r3, #1
 800e5f2:	d00a      	beq.n	800e60a <__swsetup_r+0x9a>
 800e5f4:	2200      	movs	r2, #0
 800e5f6:	60a2      	str	r2, [r4, #8]
 800e5f8:	6962      	ldr	r2, [r4, #20]
 800e5fa:	4252      	negs	r2, r2
 800e5fc:	61a2      	str	r2, [r4, #24]
 800e5fe:	6922      	ldr	r2, [r4, #16]
 800e600:	b942      	cbnz	r2, 800e614 <__swsetup_r+0xa4>
 800e602:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e606:	d1c5      	bne.n	800e594 <__swsetup_r+0x24>
 800e608:	bd38      	pop	{r3, r4, r5, pc}
 800e60a:	0799      	lsls	r1, r3, #30
 800e60c:	bf58      	it	pl
 800e60e:	6962      	ldrpl	r2, [r4, #20]
 800e610:	60a2      	str	r2, [r4, #8]
 800e612:	e7f4      	b.n	800e5fe <__swsetup_r+0x8e>
 800e614:	2000      	movs	r0, #0
 800e616:	e7f7      	b.n	800e608 <__swsetup_r+0x98>
 800e618:	20000044 	.word	0x20000044

0800e61c <memcmp>:
 800e61c:	b510      	push	{r4, lr}
 800e61e:	3901      	subs	r1, #1
 800e620:	4402      	add	r2, r0
 800e622:	4290      	cmp	r0, r2
 800e624:	d101      	bne.n	800e62a <memcmp+0xe>
 800e626:	2000      	movs	r0, #0
 800e628:	e005      	b.n	800e636 <memcmp+0x1a>
 800e62a:	7803      	ldrb	r3, [r0, #0]
 800e62c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e630:	42a3      	cmp	r3, r4
 800e632:	d001      	beq.n	800e638 <memcmp+0x1c>
 800e634:	1b18      	subs	r0, r3, r4
 800e636:	bd10      	pop	{r4, pc}
 800e638:	3001      	adds	r0, #1
 800e63a:	e7f2      	b.n	800e622 <memcmp+0x6>

0800e63c <memset>:
 800e63c:	4402      	add	r2, r0
 800e63e:	4603      	mov	r3, r0
 800e640:	4293      	cmp	r3, r2
 800e642:	d100      	bne.n	800e646 <memset+0xa>
 800e644:	4770      	bx	lr
 800e646:	f803 1b01 	strb.w	r1, [r3], #1
 800e64a:	e7f9      	b.n	800e640 <memset+0x4>

0800e64c <_close_r>:
 800e64c:	b538      	push	{r3, r4, r5, lr}
 800e64e:	4d06      	ldr	r5, [pc, #24]	@ (800e668 <_close_r+0x1c>)
 800e650:	2300      	movs	r3, #0
 800e652:	4604      	mov	r4, r0
 800e654:	4608      	mov	r0, r1
 800e656:	602b      	str	r3, [r5, #0]
 800e658:	f7f4 fc3b 	bl	8002ed2 <_close>
 800e65c:	1c43      	adds	r3, r0, #1
 800e65e:	d102      	bne.n	800e666 <_close_r+0x1a>
 800e660:	682b      	ldr	r3, [r5, #0]
 800e662:	b103      	cbz	r3, 800e666 <_close_r+0x1a>
 800e664:	6023      	str	r3, [r4, #0]
 800e666:	bd38      	pop	{r3, r4, r5, pc}
 800e668:	20000f28 	.word	0x20000f28

0800e66c <_lseek_r>:
 800e66c:	b538      	push	{r3, r4, r5, lr}
 800e66e:	4d07      	ldr	r5, [pc, #28]	@ (800e68c <_lseek_r+0x20>)
 800e670:	4604      	mov	r4, r0
 800e672:	4608      	mov	r0, r1
 800e674:	4611      	mov	r1, r2
 800e676:	2200      	movs	r2, #0
 800e678:	602a      	str	r2, [r5, #0]
 800e67a:	461a      	mov	r2, r3
 800e67c:	f7f4 fc50 	bl	8002f20 <_lseek>
 800e680:	1c43      	adds	r3, r0, #1
 800e682:	d102      	bne.n	800e68a <_lseek_r+0x1e>
 800e684:	682b      	ldr	r3, [r5, #0]
 800e686:	b103      	cbz	r3, 800e68a <_lseek_r+0x1e>
 800e688:	6023      	str	r3, [r4, #0]
 800e68a:	bd38      	pop	{r3, r4, r5, pc}
 800e68c:	20000f28 	.word	0x20000f28

0800e690 <_read_r>:
 800e690:	b538      	push	{r3, r4, r5, lr}
 800e692:	4d07      	ldr	r5, [pc, #28]	@ (800e6b0 <_read_r+0x20>)
 800e694:	4604      	mov	r4, r0
 800e696:	4608      	mov	r0, r1
 800e698:	4611      	mov	r1, r2
 800e69a:	2200      	movs	r2, #0
 800e69c:	602a      	str	r2, [r5, #0]
 800e69e:	461a      	mov	r2, r3
 800e6a0:	f7f4 fbfa 	bl	8002e98 <_read>
 800e6a4:	1c43      	adds	r3, r0, #1
 800e6a6:	d102      	bne.n	800e6ae <_read_r+0x1e>
 800e6a8:	682b      	ldr	r3, [r5, #0]
 800e6aa:	b103      	cbz	r3, 800e6ae <_read_r+0x1e>
 800e6ac:	6023      	str	r3, [r4, #0]
 800e6ae:	bd38      	pop	{r3, r4, r5, pc}
 800e6b0:	20000f28 	.word	0x20000f28

0800e6b4 <_write_r>:
 800e6b4:	b538      	push	{r3, r4, r5, lr}
 800e6b6:	4d07      	ldr	r5, [pc, #28]	@ (800e6d4 <_write_r+0x20>)
 800e6b8:	4604      	mov	r4, r0
 800e6ba:	4608      	mov	r0, r1
 800e6bc:	4611      	mov	r1, r2
 800e6be:	2200      	movs	r2, #0
 800e6c0:	602a      	str	r2, [r5, #0]
 800e6c2:	461a      	mov	r2, r3
 800e6c4:	f7fd faee 	bl	800bca4 <_write>
 800e6c8:	1c43      	adds	r3, r0, #1
 800e6ca:	d102      	bne.n	800e6d2 <_write_r+0x1e>
 800e6cc:	682b      	ldr	r3, [r5, #0]
 800e6ce:	b103      	cbz	r3, 800e6d2 <_write_r+0x1e>
 800e6d0:	6023      	str	r3, [r4, #0]
 800e6d2:	bd38      	pop	{r3, r4, r5, pc}
 800e6d4:	20000f28 	.word	0x20000f28

0800e6d8 <__errno>:
 800e6d8:	4b01      	ldr	r3, [pc, #4]	@ (800e6e0 <__errno+0x8>)
 800e6da:	6818      	ldr	r0, [r3, #0]
 800e6dc:	4770      	bx	lr
 800e6de:	bf00      	nop
 800e6e0:	20000044 	.word	0x20000044

0800e6e4 <__libc_init_array>:
 800e6e4:	b570      	push	{r4, r5, r6, lr}
 800e6e6:	4d0d      	ldr	r5, [pc, #52]	@ (800e71c <__libc_init_array+0x38>)
 800e6e8:	4c0d      	ldr	r4, [pc, #52]	@ (800e720 <__libc_init_array+0x3c>)
 800e6ea:	1b64      	subs	r4, r4, r5
 800e6ec:	10a4      	asrs	r4, r4, #2
 800e6ee:	2600      	movs	r6, #0
 800e6f0:	42a6      	cmp	r6, r4
 800e6f2:	d109      	bne.n	800e708 <__libc_init_array+0x24>
 800e6f4:	4d0b      	ldr	r5, [pc, #44]	@ (800e724 <__libc_init_array+0x40>)
 800e6f6:	4c0c      	ldr	r4, [pc, #48]	@ (800e728 <__libc_init_array+0x44>)
 800e6f8:	f000 fd64 	bl	800f1c4 <_init>
 800e6fc:	1b64      	subs	r4, r4, r5
 800e6fe:	10a4      	asrs	r4, r4, #2
 800e700:	2600      	movs	r6, #0
 800e702:	42a6      	cmp	r6, r4
 800e704:	d105      	bne.n	800e712 <__libc_init_array+0x2e>
 800e706:	bd70      	pop	{r4, r5, r6, pc}
 800e708:	f855 3b04 	ldr.w	r3, [r5], #4
 800e70c:	4798      	blx	r3
 800e70e:	3601      	adds	r6, #1
 800e710:	e7ee      	b.n	800e6f0 <__libc_init_array+0xc>
 800e712:	f855 3b04 	ldr.w	r3, [r5], #4
 800e716:	4798      	blx	r3
 800e718:	3601      	adds	r6, #1
 800e71a:	e7f2      	b.n	800e702 <__libc_init_array+0x1e>
 800e71c:	080109a0 	.word	0x080109a0
 800e720:	080109a0 	.word	0x080109a0
 800e724:	080109a0 	.word	0x080109a0
 800e728:	080109a4 	.word	0x080109a4

0800e72c <__retarget_lock_init_recursive>:
 800e72c:	4770      	bx	lr

0800e72e <__retarget_lock_acquire_recursive>:
 800e72e:	4770      	bx	lr

0800e730 <__retarget_lock_release_recursive>:
 800e730:	4770      	bx	lr

0800e732 <memcpy>:
 800e732:	440a      	add	r2, r1
 800e734:	4291      	cmp	r1, r2
 800e736:	f100 33ff 	add.w	r3, r0, #4294967295
 800e73a:	d100      	bne.n	800e73e <memcpy+0xc>
 800e73c:	4770      	bx	lr
 800e73e:	b510      	push	{r4, lr}
 800e740:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e744:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e748:	4291      	cmp	r1, r2
 800e74a:	d1f9      	bne.n	800e740 <memcpy+0xe>
 800e74c:	bd10      	pop	{r4, pc}
	...

0800e750 <_free_r>:
 800e750:	b538      	push	{r3, r4, r5, lr}
 800e752:	4605      	mov	r5, r0
 800e754:	2900      	cmp	r1, #0
 800e756:	d041      	beq.n	800e7dc <_free_r+0x8c>
 800e758:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e75c:	1f0c      	subs	r4, r1, #4
 800e75e:	2b00      	cmp	r3, #0
 800e760:	bfb8      	it	lt
 800e762:	18e4      	addlt	r4, r4, r3
 800e764:	f000 f8e0 	bl	800e928 <__malloc_lock>
 800e768:	4a1d      	ldr	r2, [pc, #116]	@ (800e7e0 <_free_r+0x90>)
 800e76a:	6813      	ldr	r3, [r2, #0]
 800e76c:	b933      	cbnz	r3, 800e77c <_free_r+0x2c>
 800e76e:	6063      	str	r3, [r4, #4]
 800e770:	6014      	str	r4, [r2, #0]
 800e772:	4628      	mov	r0, r5
 800e774:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e778:	f000 b8dc 	b.w	800e934 <__malloc_unlock>
 800e77c:	42a3      	cmp	r3, r4
 800e77e:	d908      	bls.n	800e792 <_free_r+0x42>
 800e780:	6820      	ldr	r0, [r4, #0]
 800e782:	1821      	adds	r1, r4, r0
 800e784:	428b      	cmp	r3, r1
 800e786:	bf01      	itttt	eq
 800e788:	6819      	ldreq	r1, [r3, #0]
 800e78a:	685b      	ldreq	r3, [r3, #4]
 800e78c:	1809      	addeq	r1, r1, r0
 800e78e:	6021      	streq	r1, [r4, #0]
 800e790:	e7ed      	b.n	800e76e <_free_r+0x1e>
 800e792:	461a      	mov	r2, r3
 800e794:	685b      	ldr	r3, [r3, #4]
 800e796:	b10b      	cbz	r3, 800e79c <_free_r+0x4c>
 800e798:	42a3      	cmp	r3, r4
 800e79a:	d9fa      	bls.n	800e792 <_free_r+0x42>
 800e79c:	6811      	ldr	r1, [r2, #0]
 800e79e:	1850      	adds	r0, r2, r1
 800e7a0:	42a0      	cmp	r0, r4
 800e7a2:	d10b      	bne.n	800e7bc <_free_r+0x6c>
 800e7a4:	6820      	ldr	r0, [r4, #0]
 800e7a6:	4401      	add	r1, r0
 800e7a8:	1850      	adds	r0, r2, r1
 800e7aa:	4283      	cmp	r3, r0
 800e7ac:	6011      	str	r1, [r2, #0]
 800e7ae:	d1e0      	bne.n	800e772 <_free_r+0x22>
 800e7b0:	6818      	ldr	r0, [r3, #0]
 800e7b2:	685b      	ldr	r3, [r3, #4]
 800e7b4:	6053      	str	r3, [r2, #4]
 800e7b6:	4408      	add	r0, r1
 800e7b8:	6010      	str	r0, [r2, #0]
 800e7ba:	e7da      	b.n	800e772 <_free_r+0x22>
 800e7bc:	d902      	bls.n	800e7c4 <_free_r+0x74>
 800e7be:	230c      	movs	r3, #12
 800e7c0:	602b      	str	r3, [r5, #0]
 800e7c2:	e7d6      	b.n	800e772 <_free_r+0x22>
 800e7c4:	6820      	ldr	r0, [r4, #0]
 800e7c6:	1821      	adds	r1, r4, r0
 800e7c8:	428b      	cmp	r3, r1
 800e7ca:	bf04      	itt	eq
 800e7cc:	6819      	ldreq	r1, [r3, #0]
 800e7ce:	685b      	ldreq	r3, [r3, #4]
 800e7d0:	6063      	str	r3, [r4, #4]
 800e7d2:	bf04      	itt	eq
 800e7d4:	1809      	addeq	r1, r1, r0
 800e7d6:	6021      	streq	r1, [r4, #0]
 800e7d8:	6054      	str	r4, [r2, #4]
 800e7da:	e7ca      	b.n	800e772 <_free_r+0x22>
 800e7dc:	bd38      	pop	{r3, r4, r5, pc}
 800e7de:	bf00      	nop
 800e7e0:	20000f34 	.word	0x20000f34

0800e7e4 <sbrk_aligned>:
 800e7e4:	b570      	push	{r4, r5, r6, lr}
 800e7e6:	4e0f      	ldr	r6, [pc, #60]	@ (800e824 <sbrk_aligned+0x40>)
 800e7e8:	460c      	mov	r4, r1
 800e7ea:	6831      	ldr	r1, [r6, #0]
 800e7ec:	4605      	mov	r5, r0
 800e7ee:	b911      	cbnz	r1, 800e7f6 <sbrk_aligned+0x12>
 800e7f0:	f000 fcd8 	bl	800f1a4 <_sbrk_r>
 800e7f4:	6030      	str	r0, [r6, #0]
 800e7f6:	4621      	mov	r1, r4
 800e7f8:	4628      	mov	r0, r5
 800e7fa:	f000 fcd3 	bl	800f1a4 <_sbrk_r>
 800e7fe:	1c43      	adds	r3, r0, #1
 800e800:	d103      	bne.n	800e80a <sbrk_aligned+0x26>
 800e802:	f04f 34ff 	mov.w	r4, #4294967295
 800e806:	4620      	mov	r0, r4
 800e808:	bd70      	pop	{r4, r5, r6, pc}
 800e80a:	1cc4      	adds	r4, r0, #3
 800e80c:	f024 0403 	bic.w	r4, r4, #3
 800e810:	42a0      	cmp	r0, r4
 800e812:	d0f8      	beq.n	800e806 <sbrk_aligned+0x22>
 800e814:	1a21      	subs	r1, r4, r0
 800e816:	4628      	mov	r0, r5
 800e818:	f000 fcc4 	bl	800f1a4 <_sbrk_r>
 800e81c:	3001      	adds	r0, #1
 800e81e:	d1f2      	bne.n	800e806 <sbrk_aligned+0x22>
 800e820:	e7ef      	b.n	800e802 <sbrk_aligned+0x1e>
 800e822:	bf00      	nop
 800e824:	20000f30 	.word	0x20000f30

0800e828 <_malloc_r>:
 800e828:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e82c:	1ccd      	adds	r5, r1, #3
 800e82e:	f025 0503 	bic.w	r5, r5, #3
 800e832:	3508      	adds	r5, #8
 800e834:	2d0c      	cmp	r5, #12
 800e836:	bf38      	it	cc
 800e838:	250c      	movcc	r5, #12
 800e83a:	2d00      	cmp	r5, #0
 800e83c:	4606      	mov	r6, r0
 800e83e:	db01      	blt.n	800e844 <_malloc_r+0x1c>
 800e840:	42a9      	cmp	r1, r5
 800e842:	d904      	bls.n	800e84e <_malloc_r+0x26>
 800e844:	230c      	movs	r3, #12
 800e846:	6033      	str	r3, [r6, #0]
 800e848:	2000      	movs	r0, #0
 800e84a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e84e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e924 <_malloc_r+0xfc>
 800e852:	f000 f869 	bl	800e928 <__malloc_lock>
 800e856:	f8d8 3000 	ldr.w	r3, [r8]
 800e85a:	461c      	mov	r4, r3
 800e85c:	bb44      	cbnz	r4, 800e8b0 <_malloc_r+0x88>
 800e85e:	4629      	mov	r1, r5
 800e860:	4630      	mov	r0, r6
 800e862:	f7ff ffbf 	bl	800e7e4 <sbrk_aligned>
 800e866:	1c43      	adds	r3, r0, #1
 800e868:	4604      	mov	r4, r0
 800e86a:	d158      	bne.n	800e91e <_malloc_r+0xf6>
 800e86c:	f8d8 4000 	ldr.w	r4, [r8]
 800e870:	4627      	mov	r7, r4
 800e872:	2f00      	cmp	r7, #0
 800e874:	d143      	bne.n	800e8fe <_malloc_r+0xd6>
 800e876:	2c00      	cmp	r4, #0
 800e878:	d04b      	beq.n	800e912 <_malloc_r+0xea>
 800e87a:	6823      	ldr	r3, [r4, #0]
 800e87c:	4639      	mov	r1, r7
 800e87e:	4630      	mov	r0, r6
 800e880:	eb04 0903 	add.w	r9, r4, r3
 800e884:	f000 fc8e 	bl	800f1a4 <_sbrk_r>
 800e888:	4581      	cmp	r9, r0
 800e88a:	d142      	bne.n	800e912 <_malloc_r+0xea>
 800e88c:	6821      	ldr	r1, [r4, #0]
 800e88e:	1a6d      	subs	r5, r5, r1
 800e890:	4629      	mov	r1, r5
 800e892:	4630      	mov	r0, r6
 800e894:	f7ff ffa6 	bl	800e7e4 <sbrk_aligned>
 800e898:	3001      	adds	r0, #1
 800e89a:	d03a      	beq.n	800e912 <_malloc_r+0xea>
 800e89c:	6823      	ldr	r3, [r4, #0]
 800e89e:	442b      	add	r3, r5
 800e8a0:	6023      	str	r3, [r4, #0]
 800e8a2:	f8d8 3000 	ldr.w	r3, [r8]
 800e8a6:	685a      	ldr	r2, [r3, #4]
 800e8a8:	bb62      	cbnz	r2, 800e904 <_malloc_r+0xdc>
 800e8aa:	f8c8 7000 	str.w	r7, [r8]
 800e8ae:	e00f      	b.n	800e8d0 <_malloc_r+0xa8>
 800e8b0:	6822      	ldr	r2, [r4, #0]
 800e8b2:	1b52      	subs	r2, r2, r5
 800e8b4:	d420      	bmi.n	800e8f8 <_malloc_r+0xd0>
 800e8b6:	2a0b      	cmp	r2, #11
 800e8b8:	d917      	bls.n	800e8ea <_malloc_r+0xc2>
 800e8ba:	1961      	adds	r1, r4, r5
 800e8bc:	42a3      	cmp	r3, r4
 800e8be:	6025      	str	r5, [r4, #0]
 800e8c0:	bf18      	it	ne
 800e8c2:	6059      	strne	r1, [r3, #4]
 800e8c4:	6863      	ldr	r3, [r4, #4]
 800e8c6:	bf08      	it	eq
 800e8c8:	f8c8 1000 	streq.w	r1, [r8]
 800e8cc:	5162      	str	r2, [r4, r5]
 800e8ce:	604b      	str	r3, [r1, #4]
 800e8d0:	4630      	mov	r0, r6
 800e8d2:	f000 f82f 	bl	800e934 <__malloc_unlock>
 800e8d6:	f104 000b 	add.w	r0, r4, #11
 800e8da:	1d23      	adds	r3, r4, #4
 800e8dc:	f020 0007 	bic.w	r0, r0, #7
 800e8e0:	1ac2      	subs	r2, r0, r3
 800e8e2:	bf1c      	itt	ne
 800e8e4:	1a1b      	subne	r3, r3, r0
 800e8e6:	50a3      	strne	r3, [r4, r2]
 800e8e8:	e7af      	b.n	800e84a <_malloc_r+0x22>
 800e8ea:	6862      	ldr	r2, [r4, #4]
 800e8ec:	42a3      	cmp	r3, r4
 800e8ee:	bf0c      	ite	eq
 800e8f0:	f8c8 2000 	streq.w	r2, [r8]
 800e8f4:	605a      	strne	r2, [r3, #4]
 800e8f6:	e7eb      	b.n	800e8d0 <_malloc_r+0xa8>
 800e8f8:	4623      	mov	r3, r4
 800e8fa:	6864      	ldr	r4, [r4, #4]
 800e8fc:	e7ae      	b.n	800e85c <_malloc_r+0x34>
 800e8fe:	463c      	mov	r4, r7
 800e900:	687f      	ldr	r7, [r7, #4]
 800e902:	e7b6      	b.n	800e872 <_malloc_r+0x4a>
 800e904:	461a      	mov	r2, r3
 800e906:	685b      	ldr	r3, [r3, #4]
 800e908:	42a3      	cmp	r3, r4
 800e90a:	d1fb      	bne.n	800e904 <_malloc_r+0xdc>
 800e90c:	2300      	movs	r3, #0
 800e90e:	6053      	str	r3, [r2, #4]
 800e910:	e7de      	b.n	800e8d0 <_malloc_r+0xa8>
 800e912:	230c      	movs	r3, #12
 800e914:	6033      	str	r3, [r6, #0]
 800e916:	4630      	mov	r0, r6
 800e918:	f000 f80c 	bl	800e934 <__malloc_unlock>
 800e91c:	e794      	b.n	800e848 <_malloc_r+0x20>
 800e91e:	6005      	str	r5, [r0, #0]
 800e920:	e7d6      	b.n	800e8d0 <_malloc_r+0xa8>
 800e922:	bf00      	nop
 800e924:	20000f34 	.word	0x20000f34

0800e928 <__malloc_lock>:
 800e928:	4801      	ldr	r0, [pc, #4]	@ (800e930 <__malloc_lock+0x8>)
 800e92a:	f7ff bf00 	b.w	800e72e <__retarget_lock_acquire_recursive>
 800e92e:	bf00      	nop
 800e930:	20000f2c 	.word	0x20000f2c

0800e934 <__malloc_unlock>:
 800e934:	4801      	ldr	r0, [pc, #4]	@ (800e93c <__malloc_unlock+0x8>)
 800e936:	f7ff befb 	b.w	800e730 <__retarget_lock_release_recursive>
 800e93a:	bf00      	nop
 800e93c:	20000f2c 	.word	0x20000f2c

0800e940 <__sfputc_r>:
 800e940:	6893      	ldr	r3, [r2, #8]
 800e942:	3b01      	subs	r3, #1
 800e944:	2b00      	cmp	r3, #0
 800e946:	b410      	push	{r4}
 800e948:	6093      	str	r3, [r2, #8]
 800e94a:	da08      	bge.n	800e95e <__sfputc_r+0x1e>
 800e94c:	6994      	ldr	r4, [r2, #24]
 800e94e:	42a3      	cmp	r3, r4
 800e950:	db01      	blt.n	800e956 <__sfputc_r+0x16>
 800e952:	290a      	cmp	r1, #10
 800e954:	d103      	bne.n	800e95e <__sfputc_r+0x1e>
 800e956:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e95a:	f7ff bdca 	b.w	800e4f2 <__swbuf_r>
 800e95e:	6813      	ldr	r3, [r2, #0]
 800e960:	1c58      	adds	r0, r3, #1
 800e962:	6010      	str	r0, [r2, #0]
 800e964:	7019      	strb	r1, [r3, #0]
 800e966:	4608      	mov	r0, r1
 800e968:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e96c:	4770      	bx	lr

0800e96e <__sfputs_r>:
 800e96e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e970:	4606      	mov	r6, r0
 800e972:	460f      	mov	r7, r1
 800e974:	4614      	mov	r4, r2
 800e976:	18d5      	adds	r5, r2, r3
 800e978:	42ac      	cmp	r4, r5
 800e97a:	d101      	bne.n	800e980 <__sfputs_r+0x12>
 800e97c:	2000      	movs	r0, #0
 800e97e:	e007      	b.n	800e990 <__sfputs_r+0x22>
 800e980:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e984:	463a      	mov	r2, r7
 800e986:	4630      	mov	r0, r6
 800e988:	f7ff ffda 	bl	800e940 <__sfputc_r>
 800e98c:	1c43      	adds	r3, r0, #1
 800e98e:	d1f3      	bne.n	800e978 <__sfputs_r+0xa>
 800e990:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e994 <_vfiprintf_r>:
 800e994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e998:	460d      	mov	r5, r1
 800e99a:	b09d      	sub	sp, #116	@ 0x74
 800e99c:	4614      	mov	r4, r2
 800e99e:	4698      	mov	r8, r3
 800e9a0:	4606      	mov	r6, r0
 800e9a2:	b118      	cbz	r0, 800e9ac <_vfiprintf_r+0x18>
 800e9a4:	6a03      	ldr	r3, [r0, #32]
 800e9a6:	b90b      	cbnz	r3, 800e9ac <_vfiprintf_r+0x18>
 800e9a8:	f7ff fcb2 	bl	800e310 <__sinit>
 800e9ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e9ae:	07d9      	lsls	r1, r3, #31
 800e9b0:	d405      	bmi.n	800e9be <_vfiprintf_r+0x2a>
 800e9b2:	89ab      	ldrh	r3, [r5, #12]
 800e9b4:	059a      	lsls	r2, r3, #22
 800e9b6:	d402      	bmi.n	800e9be <_vfiprintf_r+0x2a>
 800e9b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e9ba:	f7ff feb8 	bl	800e72e <__retarget_lock_acquire_recursive>
 800e9be:	89ab      	ldrh	r3, [r5, #12]
 800e9c0:	071b      	lsls	r3, r3, #28
 800e9c2:	d501      	bpl.n	800e9c8 <_vfiprintf_r+0x34>
 800e9c4:	692b      	ldr	r3, [r5, #16]
 800e9c6:	b99b      	cbnz	r3, 800e9f0 <_vfiprintf_r+0x5c>
 800e9c8:	4629      	mov	r1, r5
 800e9ca:	4630      	mov	r0, r6
 800e9cc:	f7ff fdd0 	bl	800e570 <__swsetup_r>
 800e9d0:	b170      	cbz	r0, 800e9f0 <_vfiprintf_r+0x5c>
 800e9d2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e9d4:	07dc      	lsls	r4, r3, #31
 800e9d6:	d504      	bpl.n	800e9e2 <_vfiprintf_r+0x4e>
 800e9d8:	f04f 30ff 	mov.w	r0, #4294967295
 800e9dc:	b01d      	add	sp, #116	@ 0x74
 800e9de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9e2:	89ab      	ldrh	r3, [r5, #12]
 800e9e4:	0598      	lsls	r0, r3, #22
 800e9e6:	d4f7      	bmi.n	800e9d8 <_vfiprintf_r+0x44>
 800e9e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e9ea:	f7ff fea1 	bl	800e730 <__retarget_lock_release_recursive>
 800e9ee:	e7f3      	b.n	800e9d8 <_vfiprintf_r+0x44>
 800e9f0:	2300      	movs	r3, #0
 800e9f2:	9309      	str	r3, [sp, #36]	@ 0x24
 800e9f4:	2320      	movs	r3, #32
 800e9f6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e9fa:	f8cd 800c 	str.w	r8, [sp, #12]
 800e9fe:	2330      	movs	r3, #48	@ 0x30
 800ea00:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ebb0 <_vfiprintf_r+0x21c>
 800ea04:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ea08:	f04f 0901 	mov.w	r9, #1
 800ea0c:	4623      	mov	r3, r4
 800ea0e:	469a      	mov	sl, r3
 800ea10:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ea14:	b10a      	cbz	r2, 800ea1a <_vfiprintf_r+0x86>
 800ea16:	2a25      	cmp	r2, #37	@ 0x25
 800ea18:	d1f9      	bne.n	800ea0e <_vfiprintf_r+0x7a>
 800ea1a:	ebba 0b04 	subs.w	fp, sl, r4
 800ea1e:	d00b      	beq.n	800ea38 <_vfiprintf_r+0xa4>
 800ea20:	465b      	mov	r3, fp
 800ea22:	4622      	mov	r2, r4
 800ea24:	4629      	mov	r1, r5
 800ea26:	4630      	mov	r0, r6
 800ea28:	f7ff ffa1 	bl	800e96e <__sfputs_r>
 800ea2c:	3001      	adds	r0, #1
 800ea2e:	f000 80a7 	beq.w	800eb80 <_vfiprintf_r+0x1ec>
 800ea32:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ea34:	445a      	add	r2, fp
 800ea36:	9209      	str	r2, [sp, #36]	@ 0x24
 800ea38:	f89a 3000 	ldrb.w	r3, [sl]
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	f000 809f 	beq.w	800eb80 <_vfiprintf_r+0x1ec>
 800ea42:	2300      	movs	r3, #0
 800ea44:	f04f 32ff 	mov.w	r2, #4294967295
 800ea48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ea4c:	f10a 0a01 	add.w	sl, sl, #1
 800ea50:	9304      	str	r3, [sp, #16]
 800ea52:	9307      	str	r3, [sp, #28]
 800ea54:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ea58:	931a      	str	r3, [sp, #104]	@ 0x68
 800ea5a:	4654      	mov	r4, sl
 800ea5c:	2205      	movs	r2, #5
 800ea5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea62:	4853      	ldr	r0, [pc, #332]	@ (800ebb0 <_vfiprintf_r+0x21c>)
 800ea64:	f7f1 fb94 	bl	8000190 <memchr>
 800ea68:	9a04      	ldr	r2, [sp, #16]
 800ea6a:	b9d8      	cbnz	r0, 800eaa4 <_vfiprintf_r+0x110>
 800ea6c:	06d1      	lsls	r1, r2, #27
 800ea6e:	bf44      	itt	mi
 800ea70:	2320      	movmi	r3, #32
 800ea72:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ea76:	0713      	lsls	r3, r2, #28
 800ea78:	bf44      	itt	mi
 800ea7a:	232b      	movmi	r3, #43	@ 0x2b
 800ea7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ea80:	f89a 3000 	ldrb.w	r3, [sl]
 800ea84:	2b2a      	cmp	r3, #42	@ 0x2a
 800ea86:	d015      	beq.n	800eab4 <_vfiprintf_r+0x120>
 800ea88:	9a07      	ldr	r2, [sp, #28]
 800ea8a:	4654      	mov	r4, sl
 800ea8c:	2000      	movs	r0, #0
 800ea8e:	f04f 0c0a 	mov.w	ip, #10
 800ea92:	4621      	mov	r1, r4
 800ea94:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ea98:	3b30      	subs	r3, #48	@ 0x30
 800ea9a:	2b09      	cmp	r3, #9
 800ea9c:	d94b      	bls.n	800eb36 <_vfiprintf_r+0x1a2>
 800ea9e:	b1b0      	cbz	r0, 800eace <_vfiprintf_r+0x13a>
 800eaa0:	9207      	str	r2, [sp, #28]
 800eaa2:	e014      	b.n	800eace <_vfiprintf_r+0x13a>
 800eaa4:	eba0 0308 	sub.w	r3, r0, r8
 800eaa8:	fa09 f303 	lsl.w	r3, r9, r3
 800eaac:	4313      	orrs	r3, r2
 800eaae:	9304      	str	r3, [sp, #16]
 800eab0:	46a2      	mov	sl, r4
 800eab2:	e7d2      	b.n	800ea5a <_vfiprintf_r+0xc6>
 800eab4:	9b03      	ldr	r3, [sp, #12]
 800eab6:	1d19      	adds	r1, r3, #4
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	9103      	str	r1, [sp, #12]
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	bfbb      	ittet	lt
 800eac0:	425b      	neglt	r3, r3
 800eac2:	f042 0202 	orrlt.w	r2, r2, #2
 800eac6:	9307      	strge	r3, [sp, #28]
 800eac8:	9307      	strlt	r3, [sp, #28]
 800eaca:	bfb8      	it	lt
 800eacc:	9204      	strlt	r2, [sp, #16]
 800eace:	7823      	ldrb	r3, [r4, #0]
 800ead0:	2b2e      	cmp	r3, #46	@ 0x2e
 800ead2:	d10a      	bne.n	800eaea <_vfiprintf_r+0x156>
 800ead4:	7863      	ldrb	r3, [r4, #1]
 800ead6:	2b2a      	cmp	r3, #42	@ 0x2a
 800ead8:	d132      	bne.n	800eb40 <_vfiprintf_r+0x1ac>
 800eada:	9b03      	ldr	r3, [sp, #12]
 800eadc:	1d1a      	adds	r2, r3, #4
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	9203      	str	r2, [sp, #12]
 800eae2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800eae6:	3402      	adds	r4, #2
 800eae8:	9305      	str	r3, [sp, #20]
 800eaea:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ebc0 <_vfiprintf_r+0x22c>
 800eaee:	7821      	ldrb	r1, [r4, #0]
 800eaf0:	2203      	movs	r2, #3
 800eaf2:	4650      	mov	r0, sl
 800eaf4:	f7f1 fb4c 	bl	8000190 <memchr>
 800eaf8:	b138      	cbz	r0, 800eb0a <_vfiprintf_r+0x176>
 800eafa:	9b04      	ldr	r3, [sp, #16]
 800eafc:	eba0 000a 	sub.w	r0, r0, sl
 800eb00:	2240      	movs	r2, #64	@ 0x40
 800eb02:	4082      	lsls	r2, r0
 800eb04:	4313      	orrs	r3, r2
 800eb06:	3401      	adds	r4, #1
 800eb08:	9304      	str	r3, [sp, #16]
 800eb0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb0e:	4829      	ldr	r0, [pc, #164]	@ (800ebb4 <_vfiprintf_r+0x220>)
 800eb10:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800eb14:	2206      	movs	r2, #6
 800eb16:	f7f1 fb3b 	bl	8000190 <memchr>
 800eb1a:	2800      	cmp	r0, #0
 800eb1c:	d03f      	beq.n	800eb9e <_vfiprintf_r+0x20a>
 800eb1e:	4b26      	ldr	r3, [pc, #152]	@ (800ebb8 <_vfiprintf_r+0x224>)
 800eb20:	bb1b      	cbnz	r3, 800eb6a <_vfiprintf_r+0x1d6>
 800eb22:	9b03      	ldr	r3, [sp, #12]
 800eb24:	3307      	adds	r3, #7
 800eb26:	f023 0307 	bic.w	r3, r3, #7
 800eb2a:	3308      	adds	r3, #8
 800eb2c:	9303      	str	r3, [sp, #12]
 800eb2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb30:	443b      	add	r3, r7
 800eb32:	9309      	str	r3, [sp, #36]	@ 0x24
 800eb34:	e76a      	b.n	800ea0c <_vfiprintf_r+0x78>
 800eb36:	fb0c 3202 	mla	r2, ip, r2, r3
 800eb3a:	460c      	mov	r4, r1
 800eb3c:	2001      	movs	r0, #1
 800eb3e:	e7a8      	b.n	800ea92 <_vfiprintf_r+0xfe>
 800eb40:	2300      	movs	r3, #0
 800eb42:	3401      	adds	r4, #1
 800eb44:	9305      	str	r3, [sp, #20]
 800eb46:	4619      	mov	r1, r3
 800eb48:	f04f 0c0a 	mov.w	ip, #10
 800eb4c:	4620      	mov	r0, r4
 800eb4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eb52:	3a30      	subs	r2, #48	@ 0x30
 800eb54:	2a09      	cmp	r2, #9
 800eb56:	d903      	bls.n	800eb60 <_vfiprintf_r+0x1cc>
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d0c6      	beq.n	800eaea <_vfiprintf_r+0x156>
 800eb5c:	9105      	str	r1, [sp, #20]
 800eb5e:	e7c4      	b.n	800eaea <_vfiprintf_r+0x156>
 800eb60:	fb0c 2101 	mla	r1, ip, r1, r2
 800eb64:	4604      	mov	r4, r0
 800eb66:	2301      	movs	r3, #1
 800eb68:	e7f0      	b.n	800eb4c <_vfiprintf_r+0x1b8>
 800eb6a:	ab03      	add	r3, sp, #12
 800eb6c:	9300      	str	r3, [sp, #0]
 800eb6e:	462a      	mov	r2, r5
 800eb70:	4b12      	ldr	r3, [pc, #72]	@ (800ebbc <_vfiprintf_r+0x228>)
 800eb72:	a904      	add	r1, sp, #16
 800eb74:	4630      	mov	r0, r6
 800eb76:	f3af 8000 	nop.w
 800eb7a:	4607      	mov	r7, r0
 800eb7c:	1c78      	adds	r0, r7, #1
 800eb7e:	d1d6      	bne.n	800eb2e <_vfiprintf_r+0x19a>
 800eb80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800eb82:	07d9      	lsls	r1, r3, #31
 800eb84:	d405      	bmi.n	800eb92 <_vfiprintf_r+0x1fe>
 800eb86:	89ab      	ldrh	r3, [r5, #12]
 800eb88:	059a      	lsls	r2, r3, #22
 800eb8a:	d402      	bmi.n	800eb92 <_vfiprintf_r+0x1fe>
 800eb8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800eb8e:	f7ff fdcf 	bl	800e730 <__retarget_lock_release_recursive>
 800eb92:	89ab      	ldrh	r3, [r5, #12]
 800eb94:	065b      	lsls	r3, r3, #25
 800eb96:	f53f af1f 	bmi.w	800e9d8 <_vfiprintf_r+0x44>
 800eb9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800eb9c:	e71e      	b.n	800e9dc <_vfiprintf_r+0x48>
 800eb9e:	ab03      	add	r3, sp, #12
 800eba0:	9300      	str	r3, [sp, #0]
 800eba2:	462a      	mov	r2, r5
 800eba4:	4b05      	ldr	r3, [pc, #20]	@ (800ebbc <_vfiprintf_r+0x228>)
 800eba6:	a904      	add	r1, sp, #16
 800eba8:	4630      	mov	r0, r6
 800ebaa:	f000 f879 	bl	800eca0 <_printf_i>
 800ebae:	e7e4      	b.n	800eb7a <_vfiprintf_r+0x1e6>
 800ebb0:	08010964 	.word	0x08010964
 800ebb4:	0801096e 	.word	0x0801096e
 800ebb8:	00000000 	.word	0x00000000
 800ebbc:	0800e96f 	.word	0x0800e96f
 800ebc0:	0801096a 	.word	0x0801096a

0800ebc4 <_printf_common>:
 800ebc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ebc8:	4616      	mov	r6, r2
 800ebca:	4698      	mov	r8, r3
 800ebcc:	688a      	ldr	r2, [r1, #8]
 800ebce:	690b      	ldr	r3, [r1, #16]
 800ebd0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ebd4:	4293      	cmp	r3, r2
 800ebd6:	bfb8      	it	lt
 800ebd8:	4613      	movlt	r3, r2
 800ebda:	6033      	str	r3, [r6, #0]
 800ebdc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ebe0:	4607      	mov	r7, r0
 800ebe2:	460c      	mov	r4, r1
 800ebe4:	b10a      	cbz	r2, 800ebea <_printf_common+0x26>
 800ebe6:	3301      	adds	r3, #1
 800ebe8:	6033      	str	r3, [r6, #0]
 800ebea:	6823      	ldr	r3, [r4, #0]
 800ebec:	0699      	lsls	r1, r3, #26
 800ebee:	bf42      	ittt	mi
 800ebf0:	6833      	ldrmi	r3, [r6, #0]
 800ebf2:	3302      	addmi	r3, #2
 800ebf4:	6033      	strmi	r3, [r6, #0]
 800ebf6:	6825      	ldr	r5, [r4, #0]
 800ebf8:	f015 0506 	ands.w	r5, r5, #6
 800ebfc:	d106      	bne.n	800ec0c <_printf_common+0x48>
 800ebfe:	f104 0a19 	add.w	sl, r4, #25
 800ec02:	68e3      	ldr	r3, [r4, #12]
 800ec04:	6832      	ldr	r2, [r6, #0]
 800ec06:	1a9b      	subs	r3, r3, r2
 800ec08:	42ab      	cmp	r3, r5
 800ec0a:	dc26      	bgt.n	800ec5a <_printf_common+0x96>
 800ec0c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ec10:	6822      	ldr	r2, [r4, #0]
 800ec12:	3b00      	subs	r3, #0
 800ec14:	bf18      	it	ne
 800ec16:	2301      	movne	r3, #1
 800ec18:	0692      	lsls	r2, r2, #26
 800ec1a:	d42b      	bmi.n	800ec74 <_printf_common+0xb0>
 800ec1c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ec20:	4641      	mov	r1, r8
 800ec22:	4638      	mov	r0, r7
 800ec24:	47c8      	blx	r9
 800ec26:	3001      	adds	r0, #1
 800ec28:	d01e      	beq.n	800ec68 <_printf_common+0xa4>
 800ec2a:	6823      	ldr	r3, [r4, #0]
 800ec2c:	6922      	ldr	r2, [r4, #16]
 800ec2e:	f003 0306 	and.w	r3, r3, #6
 800ec32:	2b04      	cmp	r3, #4
 800ec34:	bf02      	ittt	eq
 800ec36:	68e5      	ldreq	r5, [r4, #12]
 800ec38:	6833      	ldreq	r3, [r6, #0]
 800ec3a:	1aed      	subeq	r5, r5, r3
 800ec3c:	68a3      	ldr	r3, [r4, #8]
 800ec3e:	bf0c      	ite	eq
 800ec40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ec44:	2500      	movne	r5, #0
 800ec46:	4293      	cmp	r3, r2
 800ec48:	bfc4      	itt	gt
 800ec4a:	1a9b      	subgt	r3, r3, r2
 800ec4c:	18ed      	addgt	r5, r5, r3
 800ec4e:	2600      	movs	r6, #0
 800ec50:	341a      	adds	r4, #26
 800ec52:	42b5      	cmp	r5, r6
 800ec54:	d11a      	bne.n	800ec8c <_printf_common+0xc8>
 800ec56:	2000      	movs	r0, #0
 800ec58:	e008      	b.n	800ec6c <_printf_common+0xa8>
 800ec5a:	2301      	movs	r3, #1
 800ec5c:	4652      	mov	r2, sl
 800ec5e:	4641      	mov	r1, r8
 800ec60:	4638      	mov	r0, r7
 800ec62:	47c8      	blx	r9
 800ec64:	3001      	adds	r0, #1
 800ec66:	d103      	bne.n	800ec70 <_printf_common+0xac>
 800ec68:	f04f 30ff 	mov.w	r0, #4294967295
 800ec6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec70:	3501      	adds	r5, #1
 800ec72:	e7c6      	b.n	800ec02 <_printf_common+0x3e>
 800ec74:	18e1      	adds	r1, r4, r3
 800ec76:	1c5a      	adds	r2, r3, #1
 800ec78:	2030      	movs	r0, #48	@ 0x30
 800ec7a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ec7e:	4422      	add	r2, r4
 800ec80:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ec84:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ec88:	3302      	adds	r3, #2
 800ec8a:	e7c7      	b.n	800ec1c <_printf_common+0x58>
 800ec8c:	2301      	movs	r3, #1
 800ec8e:	4622      	mov	r2, r4
 800ec90:	4641      	mov	r1, r8
 800ec92:	4638      	mov	r0, r7
 800ec94:	47c8      	blx	r9
 800ec96:	3001      	adds	r0, #1
 800ec98:	d0e6      	beq.n	800ec68 <_printf_common+0xa4>
 800ec9a:	3601      	adds	r6, #1
 800ec9c:	e7d9      	b.n	800ec52 <_printf_common+0x8e>
	...

0800eca0 <_printf_i>:
 800eca0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800eca4:	7e0f      	ldrb	r7, [r1, #24]
 800eca6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800eca8:	2f78      	cmp	r7, #120	@ 0x78
 800ecaa:	4691      	mov	r9, r2
 800ecac:	4680      	mov	r8, r0
 800ecae:	460c      	mov	r4, r1
 800ecb0:	469a      	mov	sl, r3
 800ecb2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ecb6:	d807      	bhi.n	800ecc8 <_printf_i+0x28>
 800ecb8:	2f62      	cmp	r7, #98	@ 0x62
 800ecba:	d80a      	bhi.n	800ecd2 <_printf_i+0x32>
 800ecbc:	2f00      	cmp	r7, #0
 800ecbe:	f000 80d1 	beq.w	800ee64 <_printf_i+0x1c4>
 800ecc2:	2f58      	cmp	r7, #88	@ 0x58
 800ecc4:	f000 80b8 	beq.w	800ee38 <_printf_i+0x198>
 800ecc8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800eccc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ecd0:	e03a      	b.n	800ed48 <_printf_i+0xa8>
 800ecd2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ecd6:	2b15      	cmp	r3, #21
 800ecd8:	d8f6      	bhi.n	800ecc8 <_printf_i+0x28>
 800ecda:	a101      	add	r1, pc, #4	@ (adr r1, 800ece0 <_printf_i+0x40>)
 800ecdc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ece0:	0800ed39 	.word	0x0800ed39
 800ece4:	0800ed4d 	.word	0x0800ed4d
 800ece8:	0800ecc9 	.word	0x0800ecc9
 800ecec:	0800ecc9 	.word	0x0800ecc9
 800ecf0:	0800ecc9 	.word	0x0800ecc9
 800ecf4:	0800ecc9 	.word	0x0800ecc9
 800ecf8:	0800ed4d 	.word	0x0800ed4d
 800ecfc:	0800ecc9 	.word	0x0800ecc9
 800ed00:	0800ecc9 	.word	0x0800ecc9
 800ed04:	0800ecc9 	.word	0x0800ecc9
 800ed08:	0800ecc9 	.word	0x0800ecc9
 800ed0c:	0800ee4b 	.word	0x0800ee4b
 800ed10:	0800ed77 	.word	0x0800ed77
 800ed14:	0800ee05 	.word	0x0800ee05
 800ed18:	0800ecc9 	.word	0x0800ecc9
 800ed1c:	0800ecc9 	.word	0x0800ecc9
 800ed20:	0800ee6d 	.word	0x0800ee6d
 800ed24:	0800ecc9 	.word	0x0800ecc9
 800ed28:	0800ed77 	.word	0x0800ed77
 800ed2c:	0800ecc9 	.word	0x0800ecc9
 800ed30:	0800ecc9 	.word	0x0800ecc9
 800ed34:	0800ee0d 	.word	0x0800ee0d
 800ed38:	6833      	ldr	r3, [r6, #0]
 800ed3a:	1d1a      	adds	r2, r3, #4
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	6032      	str	r2, [r6, #0]
 800ed40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ed44:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ed48:	2301      	movs	r3, #1
 800ed4a:	e09c      	b.n	800ee86 <_printf_i+0x1e6>
 800ed4c:	6833      	ldr	r3, [r6, #0]
 800ed4e:	6820      	ldr	r0, [r4, #0]
 800ed50:	1d19      	adds	r1, r3, #4
 800ed52:	6031      	str	r1, [r6, #0]
 800ed54:	0606      	lsls	r6, r0, #24
 800ed56:	d501      	bpl.n	800ed5c <_printf_i+0xbc>
 800ed58:	681d      	ldr	r5, [r3, #0]
 800ed5a:	e003      	b.n	800ed64 <_printf_i+0xc4>
 800ed5c:	0645      	lsls	r5, r0, #25
 800ed5e:	d5fb      	bpl.n	800ed58 <_printf_i+0xb8>
 800ed60:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ed64:	2d00      	cmp	r5, #0
 800ed66:	da03      	bge.n	800ed70 <_printf_i+0xd0>
 800ed68:	232d      	movs	r3, #45	@ 0x2d
 800ed6a:	426d      	negs	r5, r5
 800ed6c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ed70:	4858      	ldr	r0, [pc, #352]	@ (800eed4 <_printf_i+0x234>)
 800ed72:	230a      	movs	r3, #10
 800ed74:	e011      	b.n	800ed9a <_printf_i+0xfa>
 800ed76:	6821      	ldr	r1, [r4, #0]
 800ed78:	6833      	ldr	r3, [r6, #0]
 800ed7a:	0608      	lsls	r0, r1, #24
 800ed7c:	f853 5b04 	ldr.w	r5, [r3], #4
 800ed80:	d402      	bmi.n	800ed88 <_printf_i+0xe8>
 800ed82:	0649      	lsls	r1, r1, #25
 800ed84:	bf48      	it	mi
 800ed86:	b2ad      	uxthmi	r5, r5
 800ed88:	2f6f      	cmp	r7, #111	@ 0x6f
 800ed8a:	4852      	ldr	r0, [pc, #328]	@ (800eed4 <_printf_i+0x234>)
 800ed8c:	6033      	str	r3, [r6, #0]
 800ed8e:	bf14      	ite	ne
 800ed90:	230a      	movne	r3, #10
 800ed92:	2308      	moveq	r3, #8
 800ed94:	2100      	movs	r1, #0
 800ed96:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ed9a:	6866      	ldr	r6, [r4, #4]
 800ed9c:	60a6      	str	r6, [r4, #8]
 800ed9e:	2e00      	cmp	r6, #0
 800eda0:	db05      	blt.n	800edae <_printf_i+0x10e>
 800eda2:	6821      	ldr	r1, [r4, #0]
 800eda4:	432e      	orrs	r6, r5
 800eda6:	f021 0104 	bic.w	r1, r1, #4
 800edaa:	6021      	str	r1, [r4, #0]
 800edac:	d04b      	beq.n	800ee46 <_printf_i+0x1a6>
 800edae:	4616      	mov	r6, r2
 800edb0:	fbb5 f1f3 	udiv	r1, r5, r3
 800edb4:	fb03 5711 	mls	r7, r3, r1, r5
 800edb8:	5dc7      	ldrb	r7, [r0, r7]
 800edba:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800edbe:	462f      	mov	r7, r5
 800edc0:	42bb      	cmp	r3, r7
 800edc2:	460d      	mov	r5, r1
 800edc4:	d9f4      	bls.n	800edb0 <_printf_i+0x110>
 800edc6:	2b08      	cmp	r3, #8
 800edc8:	d10b      	bne.n	800ede2 <_printf_i+0x142>
 800edca:	6823      	ldr	r3, [r4, #0]
 800edcc:	07df      	lsls	r7, r3, #31
 800edce:	d508      	bpl.n	800ede2 <_printf_i+0x142>
 800edd0:	6923      	ldr	r3, [r4, #16]
 800edd2:	6861      	ldr	r1, [r4, #4]
 800edd4:	4299      	cmp	r1, r3
 800edd6:	bfde      	ittt	le
 800edd8:	2330      	movle	r3, #48	@ 0x30
 800edda:	f806 3c01 	strble.w	r3, [r6, #-1]
 800edde:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ede2:	1b92      	subs	r2, r2, r6
 800ede4:	6122      	str	r2, [r4, #16]
 800ede6:	f8cd a000 	str.w	sl, [sp]
 800edea:	464b      	mov	r3, r9
 800edec:	aa03      	add	r2, sp, #12
 800edee:	4621      	mov	r1, r4
 800edf0:	4640      	mov	r0, r8
 800edf2:	f7ff fee7 	bl	800ebc4 <_printf_common>
 800edf6:	3001      	adds	r0, #1
 800edf8:	d14a      	bne.n	800ee90 <_printf_i+0x1f0>
 800edfa:	f04f 30ff 	mov.w	r0, #4294967295
 800edfe:	b004      	add	sp, #16
 800ee00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee04:	6823      	ldr	r3, [r4, #0]
 800ee06:	f043 0320 	orr.w	r3, r3, #32
 800ee0a:	6023      	str	r3, [r4, #0]
 800ee0c:	4832      	ldr	r0, [pc, #200]	@ (800eed8 <_printf_i+0x238>)
 800ee0e:	2778      	movs	r7, #120	@ 0x78
 800ee10:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ee14:	6823      	ldr	r3, [r4, #0]
 800ee16:	6831      	ldr	r1, [r6, #0]
 800ee18:	061f      	lsls	r7, r3, #24
 800ee1a:	f851 5b04 	ldr.w	r5, [r1], #4
 800ee1e:	d402      	bmi.n	800ee26 <_printf_i+0x186>
 800ee20:	065f      	lsls	r7, r3, #25
 800ee22:	bf48      	it	mi
 800ee24:	b2ad      	uxthmi	r5, r5
 800ee26:	6031      	str	r1, [r6, #0]
 800ee28:	07d9      	lsls	r1, r3, #31
 800ee2a:	bf44      	itt	mi
 800ee2c:	f043 0320 	orrmi.w	r3, r3, #32
 800ee30:	6023      	strmi	r3, [r4, #0]
 800ee32:	b11d      	cbz	r5, 800ee3c <_printf_i+0x19c>
 800ee34:	2310      	movs	r3, #16
 800ee36:	e7ad      	b.n	800ed94 <_printf_i+0xf4>
 800ee38:	4826      	ldr	r0, [pc, #152]	@ (800eed4 <_printf_i+0x234>)
 800ee3a:	e7e9      	b.n	800ee10 <_printf_i+0x170>
 800ee3c:	6823      	ldr	r3, [r4, #0]
 800ee3e:	f023 0320 	bic.w	r3, r3, #32
 800ee42:	6023      	str	r3, [r4, #0]
 800ee44:	e7f6      	b.n	800ee34 <_printf_i+0x194>
 800ee46:	4616      	mov	r6, r2
 800ee48:	e7bd      	b.n	800edc6 <_printf_i+0x126>
 800ee4a:	6833      	ldr	r3, [r6, #0]
 800ee4c:	6825      	ldr	r5, [r4, #0]
 800ee4e:	6961      	ldr	r1, [r4, #20]
 800ee50:	1d18      	adds	r0, r3, #4
 800ee52:	6030      	str	r0, [r6, #0]
 800ee54:	062e      	lsls	r6, r5, #24
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	d501      	bpl.n	800ee5e <_printf_i+0x1be>
 800ee5a:	6019      	str	r1, [r3, #0]
 800ee5c:	e002      	b.n	800ee64 <_printf_i+0x1c4>
 800ee5e:	0668      	lsls	r0, r5, #25
 800ee60:	d5fb      	bpl.n	800ee5a <_printf_i+0x1ba>
 800ee62:	8019      	strh	r1, [r3, #0]
 800ee64:	2300      	movs	r3, #0
 800ee66:	6123      	str	r3, [r4, #16]
 800ee68:	4616      	mov	r6, r2
 800ee6a:	e7bc      	b.n	800ede6 <_printf_i+0x146>
 800ee6c:	6833      	ldr	r3, [r6, #0]
 800ee6e:	1d1a      	adds	r2, r3, #4
 800ee70:	6032      	str	r2, [r6, #0]
 800ee72:	681e      	ldr	r6, [r3, #0]
 800ee74:	6862      	ldr	r2, [r4, #4]
 800ee76:	2100      	movs	r1, #0
 800ee78:	4630      	mov	r0, r6
 800ee7a:	f7f1 f989 	bl	8000190 <memchr>
 800ee7e:	b108      	cbz	r0, 800ee84 <_printf_i+0x1e4>
 800ee80:	1b80      	subs	r0, r0, r6
 800ee82:	6060      	str	r0, [r4, #4]
 800ee84:	6863      	ldr	r3, [r4, #4]
 800ee86:	6123      	str	r3, [r4, #16]
 800ee88:	2300      	movs	r3, #0
 800ee8a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ee8e:	e7aa      	b.n	800ede6 <_printf_i+0x146>
 800ee90:	6923      	ldr	r3, [r4, #16]
 800ee92:	4632      	mov	r2, r6
 800ee94:	4649      	mov	r1, r9
 800ee96:	4640      	mov	r0, r8
 800ee98:	47d0      	blx	sl
 800ee9a:	3001      	adds	r0, #1
 800ee9c:	d0ad      	beq.n	800edfa <_printf_i+0x15a>
 800ee9e:	6823      	ldr	r3, [r4, #0]
 800eea0:	079b      	lsls	r3, r3, #30
 800eea2:	d413      	bmi.n	800eecc <_printf_i+0x22c>
 800eea4:	68e0      	ldr	r0, [r4, #12]
 800eea6:	9b03      	ldr	r3, [sp, #12]
 800eea8:	4298      	cmp	r0, r3
 800eeaa:	bfb8      	it	lt
 800eeac:	4618      	movlt	r0, r3
 800eeae:	e7a6      	b.n	800edfe <_printf_i+0x15e>
 800eeb0:	2301      	movs	r3, #1
 800eeb2:	4632      	mov	r2, r6
 800eeb4:	4649      	mov	r1, r9
 800eeb6:	4640      	mov	r0, r8
 800eeb8:	47d0      	blx	sl
 800eeba:	3001      	adds	r0, #1
 800eebc:	d09d      	beq.n	800edfa <_printf_i+0x15a>
 800eebe:	3501      	adds	r5, #1
 800eec0:	68e3      	ldr	r3, [r4, #12]
 800eec2:	9903      	ldr	r1, [sp, #12]
 800eec4:	1a5b      	subs	r3, r3, r1
 800eec6:	42ab      	cmp	r3, r5
 800eec8:	dcf2      	bgt.n	800eeb0 <_printf_i+0x210>
 800eeca:	e7eb      	b.n	800eea4 <_printf_i+0x204>
 800eecc:	2500      	movs	r5, #0
 800eece:	f104 0619 	add.w	r6, r4, #25
 800eed2:	e7f5      	b.n	800eec0 <_printf_i+0x220>
 800eed4:	08010975 	.word	0x08010975
 800eed8:	08010986 	.word	0x08010986

0800eedc <__sflush_r>:
 800eedc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800eee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eee4:	0716      	lsls	r6, r2, #28
 800eee6:	4605      	mov	r5, r0
 800eee8:	460c      	mov	r4, r1
 800eeea:	d454      	bmi.n	800ef96 <__sflush_r+0xba>
 800eeec:	684b      	ldr	r3, [r1, #4]
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	dc02      	bgt.n	800eef8 <__sflush_r+0x1c>
 800eef2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	dd48      	ble.n	800ef8a <__sflush_r+0xae>
 800eef8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800eefa:	2e00      	cmp	r6, #0
 800eefc:	d045      	beq.n	800ef8a <__sflush_r+0xae>
 800eefe:	2300      	movs	r3, #0
 800ef00:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ef04:	682f      	ldr	r7, [r5, #0]
 800ef06:	6a21      	ldr	r1, [r4, #32]
 800ef08:	602b      	str	r3, [r5, #0]
 800ef0a:	d030      	beq.n	800ef6e <__sflush_r+0x92>
 800ef0c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ef0e:	89a3      	ldrh	r3, [r4, #12]
 800ef10:	0759      	lsls	r1, r3, #29
 800ef12:	d505      	bpl.n	800ef20 <__sflush_r+0x44>
 800ef14:	6863      	ldr	r3, [r4, #4]
 800ef16:	1ad2      	subs	r2, r2, r3
 800ef18:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ef1a:	b10b      	cbz	r3, 800ef20 <__sflush_r+0x44>
 800ef1c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ef1e:	1ad2      	subs	r2, r2, r3
 800ef20:	2300      	movs	r3, #0
 800ef22:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ef24:	6a21      	ldr	r1, [r4, #32]
 800ef26:	4628      	mov	r0, r5
 800ef28:	47b0      	blx	r6
 800ef2a:	1c43      	adds	r3, r0, #1
 800ef2c:	89a3      	ldrh	r3, [r4, #12]
 800ef2e:	d106      	bne.n	800ef3e <__sflush_r+0x62>
 800ef30:	6829      	ldr	r1, [r5, #0]
 800ef32:	291d      	cmp	r1, #29
 800ef34:	d82b      	bhi.n	800ef8e <__sflush_r+0xb2>
 800ef36:	4a2a      	ldr	r2, [pc, #168]	@ (800efe0 <__sflush_r+0x104>)
 800ef38:	40ca      	lsrs	r2, r1
 800ef3a:	07d6      	lsls	r6, r2, #31
 800ef3c:	d527      	bpl.n	800ef8e <__sflush_r+0xb2>
 800ef3e:	2200      	movs	r2, #0
 800ef40:	6062      	str	r2, [r4, #4]
 800ef42:	04d9      	lsls	r1, r3, #19
 800ef44:	6922      	ldr	r2, [r4, #16]
 800ef46:	6022      	str	r2, [r4, #0]
 800ef48:	d504      	bpl.n	800ef54 <__sflush_r+0x78>
 800ef4a:	1c42      	adds	r2, r0, #1
 800ef4c:	d101      	bne.n	800ef52 <__sflush_r+0x76>
 800ef4e:	682b      	ldr	r3, [r5, #0]
 800ef50:	b903      	cbnz	r3, 800ef54 <__sflush_r+0x78>
 800ef52:	6560      	str	r0, [r4, #84]	@ 0x54
 800ef54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ef56:	602f      	str	r7, [r5, #0]
 800ef58:	b1b9      	cbz	r1, 800ef8a <__sflush_r+0xae>
 800ef5a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ef5e:	4299      	cmp	r1, r3
 800ef60:	d002      	beq.n	800ef68 <__sflush_r+0x8c>
 800ef62:	4628      	mov	r0, r5
 800ef64:	f7ff fbf4 	bl	800e750 <_free_r>
 800ef68:	2300      	movs	r3, #0
 800ef6a:	6363      	str	r3, [r4, #52]	@ 0x34
 800ef6c:	e00d      	b.n	800ef8a <__sflush_r+0xae>
 800ef6e:	2301      	movs	r3, #1
 800ef70:	4628      	mov	r0, r5
 800ef72:	47b0      	blx	r6
 800ef74:	4602      	mov	r2, r0
 800ef76:	1c50      	adds	r0, r2, #1
 800ef78:	d1c9      	bne.n	800ef0e <__sflush_r+0x32>
 800ef7a:	682b      	ldr	r3, [r5, #0]
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d0c6      	beq.n	800ef0e <__sflush_r+0x32>
 800ef80:	2b1d      	cmp	r3, #29
 800ef82:	d001      	beq.n	800ef88 <__sflush_r+0xac>
 800ef84:	2b16      	cmp	r3, #22
 800ef86:	d11e      	bne.n	800efc6 <__sflush_r+0xea>
 800ef88:	602f      	str	r7, [r5, #0]
 800ef8a:	2000      	movs	r0, #0
 800ef8c:	e022      	b.n	800efd4 <__sflush_r+0xf8>
 800ef8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ef92:	b21b      	sxth	r3, r3
 800ef94:	e01b      	b.n	800efce <__sflush_r+0xf2>
 800ef96:	690f      	ldr	r7, [r1, #16]
 800ef98:	2f00      	cmp	r7, #0
 800ef9a:	d0f6      	beq.n	800ef8a <__sflush_r+0xae>
 800ef9c:	0793      	lsls	r3, r2, #30
 800ef9e:	680e      	ldr	r6, [r1, #0]
 800efa0:	bf08      	it	eq
 800efa2:	694b      	ldreq	r3, [r1, #20]
 800efa4:	600f      	str	r7, [r1, #0]
 800efa6:	bf18      	it	ne
 800efa8:	2300      	movne	r3, #0
 800efaa:	eba6 0807 	sub.w	r8, r6, r7
 800efae:	608b      	str	r3, [r1, #8]
 800efb0:	f1b8 0f00 	cmp.w	r8, #0
 800efb4:	dde9      	ble.n	800ef8a <__sflush_r+0xae>
 800efb6:	6a21      	ldr	r1, [r4, #32]
 800efb8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800efba:	4643      	mov	r3, r8
 800efbc:	463a      	mov	r2, r7
 800efbe:	4628      	mov	r0, r5
 800efc0:	47b0      	blx	r6
 800efc2:	2800      	cmp	r0, #0
 800efc4:	dc08      	bgt.n	800efd8 <__sflush_r+0xfc>
 800efc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800efca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800efce:	81a3      	strh	r3, [r4, #12]
 800efd0:	f04f 30ff 	mov.w	r0, #4294967295
 800efd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efd8:	4407      	add	r7, r0
 800efda:	eba8 0800 	sub.w	r8, r8, r0
 800efde:	e7e7      	b.n	800efb0 <__sflush_r+0xd4>
 800efe0:	20400001 	.word	0x20400001

0800efe4 <_fflush_r>:
 800efe4:	b538      	push	{r3, r4, r5, lr}
 800efe6:	690b      	ldr	r3, [r1, #16]
 800efe8:	4605      	mov	r5, r0
 800efea:	460c      	mov	r4, r1
 800efec:	b913      	cbnz	r3, 800eff4 <_fflush_r+0x10>
 800efee:	2500      	movs	r5, #0
 800eff0:	4628      	mov	r0, r5
 800eff2:	bd38      	pop	{r3, r4, r5, pc}
 800eff4:	b118      	cbz	r0, 800effe <_fflush_r+0x1a>
 800eff6:	6a03      	ldr	r3, [r0, #32]
 800eff8:	b90b      	cbnz	r3, 800effe <_fflush_r+0x1a>
 800effa:	f7ff f989 	bl	800e310 <__sinit>
 800effe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f002:	2b00      	cmp	r3, #0
 800f004:	d0f3      	beq.n	800efee <_fflush_r+0xa>
 800f006:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f008:	07d0      	lsls	r0, r2, #31
 800f00a:	d404      	bmi.n	800f016 <_fflush_r+0x32>
 800f00c:	0599      	lsls	r1, r3, #22
 800f00e:	d402      	bmi.n	800f016 <_fflush_r+0x32>
 800f010:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f012:	f7ff fb8c 	bl	800e72e <__retarget_lock_acquire_recursive>
 800f016:	4628      	mov	r0, r5
 800f018:	4621      	mov	r1, r4
 800f01a:	f7ff ff5f 	bl	800eedc <__sflush_r>
 800f01e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f020:	07da      	lsls	r2, r3, #31
 800f022:	4605      	mov	r5, r0
 800f024:	d4e4      	bmi.n	800eff0 <_fflush_r+0xc>
 800f026:	89a3      	ldrh	r3, [r4, #12]
 800f028:	059b      	lsls	r3, r3, #22
 800f02a:	d4e1      	bmi.n	800eff0 <_fflush_r+0xc>
 800f02c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f02e:	f7ff fb7f 	bl	800e730 <__retarget_lock_release_recursive>
 800f032:	e7dd      	b.n	800eff0 <_fflush_r+0xc>

0800f034 <__swhatbuf_r>:
 800f034:	b570      	push	{r4, r5, r6, lr}
 800f036:	460c      	mov	r4, r1
 800f038:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f03c:	2900      	cmp	r1, #0
 800f03e:	b096      	sub	sp, #88	@ 0x58
 800f040:	4615      	mov	r5, r2
 800f042:	461e      	mov	r6, r3
 800f044:	da0d      	bge.n	800f062 <__swhatbuf_r+0x2e>
 800f046:	89a3      	ldrh	r3, [r4, #12]
 800f048:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f04c:	f04f 0100 	mov.w	r1, #0
 800f050:	bf14      	ite	ne
 800f052:	2340      	movne	r3, #64	@ 0x40
 800f054:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f058:	2000      	movs	r0, #0
 800f05a:	6031      	str	r1, [r6, #0]
 800f05c:	602b      	str	r3, [r5, #0]
 800f05e:	b016      	add	sp, #88	@ 0x58
 800f060:	bd70      	pop	{r4, r5, r6, pc}
 800f062:	466a      	mov	r2, sp
 800f064:	f000 f87c 	bl	800f160 <_fstat_r>
 800f068:	2800      	cmp	r0, #0
 800f06a:	dbec      	blt.n	800f046 <__swhatbuf_r+0x12>
 800f06c:	9901      	ldr	r1, [sp, #4]
 800f06e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f072:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f076:	4259      	negs	r1, r3
 800f078:	4159      	adcs	r1, r3
 800f07a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f07e:	e7eb      	b.n	800f058 <__swhatbuf_r+0x24>

0800f080 <__smakebuf_r>:
 800f080:	898b      	ldrh	r3, [r1, #12]
 800f082:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f084:	079d      	lsls	r5, r3, #30
 800f086:	4606      	mov	r6, r0
 800f088:	460c      	mov	r4, r1
 800f08a:	d507      	bpl.n	800f09c <__smakebuf_r+0x1c>
 800f08c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f090:	6023      	str	r3, [r4, #0]
 800f092:	6123      	str	r3, [r4, #16]
 800f094:	2301      	movs	r3, #1
 800f096:	6163      	str	r3, [r4, #20]
 800f098:	b003      	add	sp, #12
 800f09a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f09c:	ab01      	add	r3, sp, #4
 800f09e:	466a      	mov	r2, sp
 800f0a0:	f7ff ffc8 	bl	800f034 <__swhatbuf_r>
 800f0a4:	9f00      	ldr	r7, [sp, #0]
 800f0a6:	4605      	mov	r5, r0
 800f0a8:	4639      	mov	r1, r7
 800f0aa:	4630      	mov	r0, r6
 800f0ac:	f7ff fbbc 	bl	800e828 <_malloc_r>
 800f0b0:	b948      	cbnz	r0, 800f0c6 <__smakebuf_r+0x46>
 800f0b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f0b6:	059a      	lsls	r2, r3, #22
 800f0b8:	d4ee      	bmi.n	800f098 <__smakebuf_r+0x18>
 800f0ba:	f023 0303 	bic.w	r3, r3, #3
 800f0be:	f043 0302 	orr.w	r3, r3, #2
 800f0c2:	81a3      	strh	r3, [r4, #12]
 800f0c4:	e7e2      	b.n	800f08c <__smakebuf_r+0xc>
 800f0c6:	89a3      	ldrh	r3, [r4, #12]
 800f0c8:	6020      	str	r0, [r4, #0]
 800f0ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f0ce:	81a3      	strh	r3, [r4, #12]
 800f0d0:	9b01      	ldr	r3, [sp, #4]
 800f0d2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f0d6:	b15b      	cbz	r3, 800f0f0 <__smakebuf_r+0x70>
 800f0d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f0dc:	4630      	mov	r0, r6
 800f0de:	f000 f851 	bl	800f184 <_isatty_r>
 800f0e2:	b128      	cbz	r0, 800f0f0 <__smakebuf_r+0x70>
 800f0e4:	89a3      	ldrh	r3, [r4, #12]
 800f0e6:	f023 0303 	bic.w	r3, r3, #3
 800f0ea:	f043 0301 	orr.w	r3, r3, #1
 800f0ee:	81a3      	strh	r3, [r4, #12]
 800f0f0:	89a3      	ldrh	r3, [r4, #12]
 800f0f2:	431d      	orrs	r5, r3
 800f0f4:	81a5      	strh	r5, [r4, #12]
 800f0f6:	e7cf      	b.n	800f098 <__smakebuf_r+0x18>

0800f0f8 <_putc_r>:
 800f0f8:	b570      	push	{r4, r5, r6, lr}
 800f0fa:	460d      	mov	r5, r1
 800f0fc:	4614      	mov	r4, r2
 800f0fe:	4606      	mov	r6, r0
 800f100:	b118      	cbz	r0, 800f10a <_putc_r+0x12>
 800f102:	6a03      	ldr	r3, [r0, #32]
 800f104:	b90b      	cbnz	r3, 800f10a <_putc_r+0x12>
 800f106:	f7ff f903 	bl	800e310 <__sinit>
 800f10a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f10c:	07d8      	lsls	r0, r3, #31
 800f10e:	d405      	bmi.n	800f11c <_putc_r+0x24>
 800f110:	89a3      	ldrh	r3, [r4, #12]
 800f112:	0599      	lsls	r1, r3, #22
 800f114:	d402      	bmi.n	800f11c <_putc_r+0x24>
 800f116:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f118:	f7ff fb09 	bl	800e72e <__retarget_lock_acquire_recursive>
 800f11c:	68a3      	ldr	r3, [r4, #8]
 800f11e:	3b01      	subs	r3, #1
 800f120:	2b00      	cmp	r3, #0
 800f122:	60a3      	str	r3, [r4, #8]
 800f124:	da05      	bge.n	800f132 <_putc_r+0x3a>
 800f126:	69a2      	ldr	r2, [r4, #24]
 800f128:	4293      	cmp	r3, r2
 800f12a:	db12      	blt.n	800f152 <_putc_r+0x5a>
 800f12c:	b2eb      	uxtb	r3, r5
 800f12e:	2b0a      	cmp	r3, #10
 800f130:	d00f      	beq.n	800f152 <_putc_r+0x5a>
 800f132:	6823      	ldr	r3, [r4, #0]
 800f134:	1c5a      	adds	r2, r3, #1
 800f136:	6022      	str	r2, [r4, #0]
 800f138:	701d      	strb	r5, [r3, #0]
 800f13a:	b2ed      	uxtb	r5, r5
 800f13c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f13e:	07da      	lsls	r2, r3, #31
 800f140:	d405      	bmi.n	800f14e <_putc_r+0x56>
 800f142:	89a3      	ldrh	r3, [r4, #12]
 800f144:	059b      	lsls	r3, r3, #22
 800f146:	d402      	bmi.n	800f14e <_putc_r+0x56>
 800f148:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f14a:	f7ff faf1 	bl	800e730 <__retarget_lock_release_recursive>
 800f14e:	4628      	mov	r0, r5
 800f150:	bd70      	pop	{r4, r5, r6, pc}
 800f152:	4629      	mov	r1, r5
 800f154:	4622      	mov	r2, r4
 800f156:	4630      	mov	r0, r6
 800f158:	f7ff f9cb 	bl	800e4f2 <__swbuf_r>
 800f15c:	4605      	mov	r5, r0
 800f15e:	e7ed      	b.n	800f13c <_putc_r+0x44>

0800f160 <_fstat_r>:
 800f160:	b538      	push	{r3, r4, r5, lr}
 800f162:	4d07      	ldr	r5, [pc, #28]	@ (800f180 <_fstat_r+0x20>)
 800f164:	2300      	movs	r3, #0
 800f166:	4604      	mov	r4, r0
 800f168:	4608      	mov	r0, r1
 800f16a:	4611      	mov	r1, r2
 800f16c:	602b      	str	r3, [r5, #0]
 800f16e:	f7f3 febc 	bl	8002eea <_fstat>
 800f172:	1c43      	adds	r3, r0, #1
 800f174:	d102      	bne.n	800f17c <_fstat_r+0x1c>
 800f176:	682b      	ldr	r3, [r5, #0]
 800f178:	b103      	cbz	r3, 800f17c <_fstat_r+0x1c>
 800f17a:	6023      	str	r3, [r4, #0]
 800f17c:	bd38      	pop	{r3, r4, r5, pc}
 800f17e:	bf00      	nop
 800f180:	20000f28 	.word	0x20000f28

0800f184 <_isatty_r>:
 800f184:	b538      	push	{r3, r4, r5, lr}
 800f186:	4d06      	ldr	r5, [pc, #24]	@ (800f1a0 <_isatty_r+0x1c>)
 800f188:	2300      	movs	r3, #0
 800f18a:	4604      	mov	r4, r0
 800f18c:	4608      	mov	r0, r1
 800f18e:	602b      	str	r3, [r5, #0]
 800f190:	f7f3 febb 	bl	8002f0a <_isatty>
 800f194:	1c43      	adds	r3, r0, #1
 800f196:	d102      	bne.n	800f19e <_isatty_r+0x1a>
 800f198:	682b      	ldr	r3, [r5, #0]
 800f19a:	b103      	cbz	r3, 800f19e <_isatty_r+0x1a>
 800f19c:	6023      	str	r3, [r4, #0]
 800f19e:	bd38      	pop	{r3, r4, r5, pc}
 800f1a0:	20000f28 	.word	0x20000f28

0800f1a4 <_sbrk_r>:
 800f1a4:	b538      	push	{r3, r4, r5, lr}
 800f1a6:	4d06      	ldr	r5, [pc, #24]	@ (800f1c0 <_sbrk_r+0x1c>)
 800f1a8:	2300      	movs	r3, #0
 800f1aa:	4604      	mov	r4, r0
 800f1ac:	4608      	mov	r0, r1
 800f1ae:	602b      	str	r3, [r5, #0]
 800f1b0:	f7f3 fec4 	bl	8002f3c <_sbrk>
 800f1b4:	1c43      	adds	r3, r0, #1
 800f1b6:	d102      	bne.n	800f1be <_sbrk_r+0x1a>
 800f1b8:	682b      	ldr	r3, [r5, #0]
 800f1ba:	b103      	cbz	r3, 800f1be <_sbrk_r+0x1a>
 800f1bc:	6023      	str	r3, [r4, #0]
 800f1be:	bd38      	pop	{r3, r4, r5, pc}
 800f1c0:	20000f28 	.word	0x20000f28

0800f1c4 <_init>:
 800f1c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1c6:	bf00      	nop
 800f1c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f1ca:	bc08      	pop	{r3}
 800f1cc:	469e      	mov	lr, r3
 800f1ce:	4770      	bx	lr

0800f1d0 <_fini>:
 800f1d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1d2:	bf00      	nop
 800f1d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f1d6:	bc08      	pop	{r3}
 800f1d8:	469e      	mov	lr, r3
 800f1da:	4770      	bx	lr
