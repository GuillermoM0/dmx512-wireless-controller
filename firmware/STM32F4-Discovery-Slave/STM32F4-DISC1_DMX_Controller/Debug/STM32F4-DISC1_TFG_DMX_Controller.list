
STM32F4-DISC1_TFG_DMX_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a24  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08006bb4  08006bb4  00007bb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c64  08006c64  00008088  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006c64  08006c64  00007c64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c6c  08006c6c  00008088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c6c  08006c6c  00007c6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006c70  08006c70  00007c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  08006c74  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008088  2**0
                  CONTENTS
 10 .bss          00000678  20000088  20000088  00008088  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000700  20000700  00008088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008088  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001396f  00000000  00000000  000080b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000030ca  00000000  00000000  0001ba27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011a8  00000000  00000000  0001eaf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000da2  00000000  00000000  0001fca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023a7f  00000000  00000000  00020a42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001752f  00000000  00000000  000444c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0a33  00000000  00000000  0005b9f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012c423  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000050ec  00000000  00000000  0012c468  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000076  00000000  00000000  00131554  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006b9c 	.word	0x08006b9c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	08006b9c 	.word	0x08006b9c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <APP_Init>:
uint8_t rx_len;

uint32_t NRF24_DataReceived_time = 0;

// Main application Initialization
void APP_Init(void) {
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
	// Printf redirected to USART2 send data
	printf("Init Ok! DMX-512 example ...\r");
 80005a0:	4805      	ldr	r0, [pc, #20]	@ (80005b8 <APP_Init+0x1c>)
 80005a2:	f005 fbbd 	bl	8005d20 <iprintf>

	NRF24_EnablePipeRX(NRF24_PIPE0, rx_address);
 80005a6:	4905      	ldr	r1, [pc, #20]	@ (80005bc <APP_Init+0x20>)
 80005a8:	2000      	movs	r0, #0
 80005aa:	f001 f9d7 	bl	800195c <NRF24_EnablePipeRX>
	NRF24_Mode(NRF24_MODE_RX);
 80005ae:	2000      	movs	r0, #0
 80005b0:	f001 fa64 	bl	8001a7c <NRF24_Mode>
}
 80005b4:	bf00      	nop
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	08006bb4 	.word	0x08006bb4
 80005bc:	20000000 	.word	0x20000000

080005c0 <APP_Task>:

// Application Task
void APP_Task(void) {
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b09a      	sub	sp, #104	@ 0x68
 80005c4:	af00      	add	r7, sp, #0
	  // Polling mode
	  UART_task();
	#endif

	// Check if an string is received
	if (UART_isDataRecived() == SET) {
 80005c6:	f001 f817 	bl	80015f8 <UART_isDataRecived>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b01      	cmp	r3, #1
 80005ce:	d115      	bne.n	80005fc <APP_Task+0x3c>
		char cmd[100];
		// Gets the new string and release the flag for new read
		UART_GetStr(cmd);
 80005d0:	1d3b      	adds	r3, r7, #4
 80005d2:	4618      	mov	r0, r3
 80005d4:	f001 f81c 	bl	8001610 <UART_GetStr>

		// Do ECHO
		printf("Command received: --%s--\r", cmd);
 80005d8:	1d3b      	adds	r3, r7, #4
 80005da:	4619      	mov	r1, r3
 80005dc:	4825      	ldr	r0, [pc, #148]	@ (8000674 <APP_Task+0xb4>)
 80005de:	f005 fb9f 	bl	8005d20 <iprintf>

		// USART Commands
		/////////////////

		// Send data through  RS-485 -> 'S "data to send"'
		if (cmd[0]=='S' && cmd[1]==' ') {
 80005e2:	793b      	ldrb	r3, [r7, #4]
 80005e4:	2b53      	cmp	r3, #83	@ 0x53
 80005e6:	d106      	bne.n	80005f6 <APP_Task+0x36>
 80005e8:	797b      	ldrb	r3, [r7, #5]
 80005ea:	2b20      	cmp	r3, #32
 80005ec:	d103      	bne.n	80005f6 <APP_Task+0x36>

			printf(")\r");
 80005ee:	4822      	ldr	r0, [pc, #136]	@ (8000678 <APP_Task+0xb8>)
 80005f0:	f005 fb96 	bl	8005d20 <iprintf>
 80005f4:	e002      	b.n	80005fc <APP_Task+0x3c>

		// No valid command
		} else {
			printf("NV\r");
 80005f6:	4821      	ldr	r0, [pc, #132]	@ (800067c <APP_Task+0xbc>)
 80005f8:	f005 fb92 	bl	8005d20 <iprintf>
		}
	}

	if (HAL_GPIO_ReadPin(LED5_GPIO_PORT, LED5_PIN) && (HAL_GetTick()-NRF24_DataReceived_time) > 100) {
 80005fc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000600:	481f      	ldr	r0, [pc, #124]	@ (8000680 <APP_Task+0xc0>)
 8000602:	f002 fe2f 	bl	8003264 <HAL_GPIO_ReadPin>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d00d      	beq.n	8000628 <APP_Task+0x68>
 800060c:	f001 fe4e 	bl	80022ac <HAL_GetTick>
 8000610:	4602      	mov	r2, r0
 8000612:	4b1c      	ldr	r3, [pc, #112]	@ (8000684 <APP_Task+0xc4>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	1ad3      	subs	r3, r2, r3
 8000618:	2b64      	cmp	r3, #100	@ 0x64
 800061a:	d905      	bls.n	8000628 <APP_Task+0x68>
		HAL_GPIO_WritePin(LED5_GPIO_PORT, LED5_PIN, GPIO_PIN_RESET);
 800061c:	2200      	movs	r2, #0
 800061e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000622:	4817      	ldr	r0, [pc, #92]	@ (8000680 <APP_Task+0xc0>)
 8000624:	f002 fe36 	bl	8003294 <HAL_GPIO_WritePin>

#ifndef NRF24_RX_IRQ_MODE
	NRF24_CheckDataRX();
#endif

    if (NRF24_isRecivData(NRF24_PIPE0)) {
 8000628:	2000      	movs	r0, #0
 800062a:	f001 fab5 	bl	8001b98 <NRF24_isRecivData>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d018      	beq.n	8000666 <APP_Task+0xa6>
        if (NRF24_ReadData(NRF24_PIPE0, rx_data, &rx_len) == NRF24_SUCCESS) {
 8000634:	4a14      	ldr	r2, [pc, #80]	@ (8000688 <APP_Task+0xc8>)
 8000636:	4915      	ldr	r1, [pc, #84]	@ (800068c <APP_Task+0xcc>)
 8000638:	2000      	movs	r0, #0
 800063a:	f001 fabd 	bl	8001bb8 <NRF24_ReadData>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d110      	bne.n	8000666 <APP_Task+0xa6>
        	ParseDMXData(rx_data, rx_len);
 8000644:	4b10      	ldr	r3, [pc, #64]	@ (8000688 <APP_Task+0xc8>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	4619      	mov	r1, r3
 800064a:	4810      	ldr	r0, [pc, #64]	@ (800068c <APP_Task+0xcc>)
 800064c:	f001 fc86 	bl	8001f5c <ParseDMXData>
        	HAL_GPIO_WritePin(LED5_GPIO_PORT, LED5_PIN, GPIO_PIN_SET);
 8000650:	2201      	movs	r2, #1
 8000652:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000656:	480a      	ldr	r0, [pc, #40]	@ (8000680 <APP_Task+0xc0>)
 8000658:	f002 fe1c 	bl	8003294 <HAL_GPIO_WritePin>
        	NRF24_DataReceived_time = HAL_GetTick();
 800065c:	f001 fe26 	bl	80022ac <HAL_GetTick>
 8000660:	4603      	mov	r3, r0
 8000662:	4a08      	ldr	r2, [pc, #32]	@ (8000684 <APP_Task+0xc4>)
 8000664:	6013      	str	r3, [r2, #0]
        }
    }
//	DMX512_SendFrame();
//	HAL_Delay(50);
	DMX512_Task();
 8000666:	f000 fe5d 	bl	8001324 <DMX512_Task>

}
 800066a:	bf00      	nop
 800066c:	3768      	adds	r7, #104	@ 0x68
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	08006bd4 	.word	0x08006bd4
 8000678:	08006bf0 	.word	0x08006bf0
 800067c:	08006bf4 	.word	0x08006bf4
 8000680:	40020c00 	.word	0x40020c00
 8000684:	200000cc 	.word	0x200000cc
 8000688:	200000c8 	.word	0x200000c8
 800068c:	200000a8 	.word	0x200000a8

08000690 <HAL_GPIO_EXTI_Callback>:
/**
  * @brief EXTI line detection callback.
  * @param GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin) {
 800069a:	88fb      	ldrh	r3, [r7, #6]
 800069c:	2b01      	cmp	r3, #1
 800069e:	d002      	beq.n	80006a6 <HAL_GPIO_EXTI_Callback+0x16>
 80006a0:	2b40      	cmp	r3, #64	@ 0x40
 80006a2:	d03c      	beq.n	800071e <HAL_GPIO_EXTI_Callback+0x8e>
		case NRF24_IRQ_Pin:
			NRF24_IRQ_Callback();
			break;

    	default:
    		break;
 80006a4:	e03f      	b.n	8000726 <HAL_GPIO_EXTI_Callback+0x96>
    		switch (i) {
 80006a6:	4b22      	ldr	r3, [pc, #136]	@ (8000730 <HAL_GPIO_EXTI_Callback+0xa0>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2b02      	cmp	r3, #2
 80006ac:	d026      	beq.n	80006fc <HAL_GPIO_EXTI_Callback+0x6c>
 80006ae:	2b02      	cmp	r3, #2
 80006b0:	dc38      	bgt.n	8000724 <HAL_GPIO_EXTI_Callback+0x94>
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d002      	beq.n	80006bc <HAL_GPIO_EXTI_Callback+0x2c>
 80006b6:	2b01      	cmp	r3, #1
 80006b8:	d010      	beq.n	80006dc <HAL_GPIO_EXTI_Callback+0x4c>
    		break;
 80006ba:	e033      	b.n	8000724 <HAL_GPIO_EXTI_Callback+0x94>
    			i = 1;
 80006bc:	4b1c      	ldr	r3, [pc, #112]	@ (8000730 <HAL_GPIO_EXTI_Callback+0xa0>)
 80006be:	2201      	movs	r2, #1
 80006c0:	701a      	strb	r2, [r3, #0]
    			DMX512_SetChannel(1, 255);
 80006c2:	21ff      	movs	r1, #255	@ 0xff
 80006c4:	2001      	movs	r0, #1
 80006c6:	f000 fe11 	bl	80012ec <DMX512_SetChannel>
    			DMX512_SetChannel(2, 0);
 80006ca:	2100      	movs	r1, #0
 80006cc:	2002      	movs	r0, #2
 80006ce:	f000 fe0d 	bl	80012ec <DMX512_SetChannel>
    			DMX512_SetChannel(3, 0);
 80006d2:	2100      	movs	r1, #0
 80006d4:	2003      	movs	r0, #3
 80006d6:	f000 fe09 	bl	80012ec <DMX512_SetChannel>
    			break;
 80006da:	e01f      	b.n	800071c <HAL_GPIO_EXTI_Callback+0x8c>
    			i = 2;
 80006dc:	4b14      	ldr	r3, [pc, #80]	@ (8000730 <HAL_GPIO_EXTI_Callback+0xa0>)
 80006de:	2202      	movs	r2, #2
 80006e0:	701a      	strb	r2, [r3, #0]
    			DMX512_SetChannel(1, 0);
 80006e2:	2100      	movs	r1, #0
 80006e4:	2001      	movs	r0, #1
 80006e6:	f000 fe01 	bl	80012ec <DMX512_SetChannel>
    			DMX512_SetChannel(2, 255);
 80006ea:	21ff      	movs	r1, #255	@ 0xff
 80006ec:	2002      	movs	r0, #2
 80006ee:	f000 fdfd 	bl	80012ec <DMX512_SetChannel>
    			DMX512_SetChannel(3, 0);
 80006f2:	2100      	movs	r1, #0
 80006f4:	2003      	movs	r0, #3
 80006f6:	f000 fdf9 	bl	80012ec <DMX512_SetChannel>
    			break;
 80006fa:	e00f      	b.n	800071c <HAL_GPIO_EXTI_Callback+0x8c>
    			i = 0;
 80006fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000730 <HAL_GPIO_EXTI_Callback+0xa0>)
 80006fe:	2200      	movs	r2, #0
 8000700:	701a      	strb	r2, [r3, #0]
    			DMX512_SetChannel(1, 0);
 8000702:	2100      	movs	r1, #0
 8000704:	2001      	movs	r0, #1
 8000706:	f000 fdf1 	bl	80012ec <DMX512_SetChannel>
    			DMX512_SetChannel(2, 0);
 800070a:	2100      	movs	r1, #0
 800070c:	2002      	movs	r0, #2
 800070e:	f000 fded 	bl	80012ec <DMX512_SetChannel>
    			DMX512_SetChannel(3, 255);
 8000712:	21ff      	movs	r1, #255	@ 0xff
 8000714:	2003      	movs	r0, #3
 8000716:	f000 fde9 	bl	80012ec <DMX512_SetChannel>
    			break;
 800071a:	bf00      	nop
    		break;
 800071c:	e002      	b.n	8000724 <HAL_GPIO_EXTI_Callback+0x94>
			NRF24_IRQ_Callback();
 800071e:	f001 fc17 	bl	8001f50 <NRF24_IRQ_Callback>
			break;
 8000722:	e000      	b.n	8000726 <HAL_GPIO_EXTI_Callback+0x96>
    		break;
 8000724:	bf00      	nop
  }
}
 8000726:	bf00      	nop
 8000728:	3708      	adds	r7, #8
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	200000a4 	.word	0x200000a4

08000734 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
	DMX_TIM_PeriodElapsedCallback(htim);
 800073c:	6878      	ldr	r0, [r7, #4]
 800073e:	f000 feab 	bl	8001498 <DMX_TIM_PeriodElapsedCallback>
}
 8000742:	bf00      	nop
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}

0800074a <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800074a:	b580      	push	{r7, lr}
 800074c:	b082      	sub	sp, #8
 800074e:	af00      	add	r7, sp, #0
 8000750:	6078      	str	r0, [r7, #4]
	DMX_UART_TxCpltCallback(huart);
 8000752:	6878      	ldr	r0, [r7, #4]
 8000754:	f000 febc 	bl	80014d0 <DMX_UART_TxCpltCallback>
}
 8000758:	bf00      	nop
 800075a:	3708      	adds	r7, #8
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}

08000760 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000764:	f001 fd3c 	bl	80021e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000768:	f000 f834 	bl	80007d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800076c:	f000 f988 	bl	8000a80 <MX_GPIO_Init>
  MX_DMA_Init();
 8000770:	f000 f966 	bl	8000a40 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000774:	f000 f90e 	bl	8000994 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8000778:	f000 f936 	bl	80009e8 <MX_USART6_UART_Init>
  MX_TIM6_Init();
 800077c:	f000 f8ca 	bl	8000914 <MX_TIM6_Init>
  MX_SPI2_Init();
 8000780:	f000 f892 	bl	80008a8 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  // LEDs Initialization
  BSP_LED_Init_All();
 8000784:	f000 fff8 	bl	8001778 <BSP_LED_Init_All>

  // Pushbutton initialization
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI); // Try to config in EXTI mode and figure out what happen
 8000788:	2101      	movs	r1, #1
 800078a:	2000      	movs	r0, #0
 800078c:	f001 f80a 	bl	80017a4 <BSP_PB_Init>

  // UART Debug initialization (UART should be configured from the MCU wizard)
  // [UART2-TX=PA2, UART2-RX=PA3]
  UART_Init(&huart2);
 8000790:	480c      	ldr	r0, [pc, #48]	@ (80007c4 <main+0x64>)
 8000792:	f000 fec7 	bl	8001524 <UART_Init>


  // DMX512 initialization
  if (NRF24_Init(&hspi2) != NRF24_SUCCESS) {
 8000796:	480c      	ldr	r0, [pc, #48]	@ (80007c8 <main+0x68>)
 8000798:	f001 f866 	bl	8001868 <NRF24_Init>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <main+0x46>
	  while(1);
 80007a2:	bf00      	nop
 80007a4:	e7fd      	b.n	80007a2 <main+0x42>
  }

  if (DMX512_Init(&huart6, &htim6) != HAL_OK){
 80007a6:	4909      	ldr	r1, [pc, #36]	@ (80007cc <main+0x6c>)
 80007a8:	4809      	ldr	r0, [pc, #36]	@ (80007d0 <main+0x70>)
 80007aa:	f000 fd49 	bl	8001240 <DMX512_Init>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <main+0x58>
	  while(1);
 80007b4:	bf00      	nop
 80007b6:	e7fd      	b.n	80007b4 <main+0x54>
  }

  // Main application Initialization
  APP_Init();
 80007b8:	f7ff fef0 	bl	800059c <APP_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	APP_Task(); // Main application task
 80007bc:	f7ff ff00 	bl	80005c0 <APP_Task>
 80007c0:	e7fc      	b.n	80007bc <main+0x5c>
 80007c2:	bf00      	nop
 80007c4:	20000170 	.word	0x20000170
 80007c8:	200000d0 	.word	0x200000d0
 80007cc:	20000128 	.word	0x20000128
 80007d0:	200001b8 	.word	0x200001b8

080007d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b094      	sub	sp, #80	@ 0x50
 80007d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007da:	f107 0320 	add.w	r3, r7, #32
 80007de:	2230      	movs	r2, #48	@ 0x30
 80007e0:	2100      	movs	r1, #0
 80007e2:	4618      	mov	r0, r3
 80007e4:	f005 fba5 	bl	8005f32 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e8:	f107 030c 	add.w	r3, r7, #12
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	605a      	str	r2, [r3, #4]
 80007f2:	609a      	str	r2, [r3, #8]
 80007f4:	60da      	str	r2, [r3, #12]
 80007f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f8:	2300      	movs	r3, #0
 80007fa:	60bb      	str	r3, [r7, #8]
 80007fc:	4b28      	ldr	r3, [pc, #160]	@ (80008a0 <SystemClock_Config+0xcc>)
 80007fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000800:	4a27      	ldr	r2, [pc, #156]	@ (80008a0 <SystemClock_Config+0xcc>)
 8000802:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000806:	6413      	str	r3, [r2, #64]	@ 0x40
 8000808:	4b25      	ldr	r3, [pc, #148]	@ (80008a0 <SystemClock_Config+0xcc>)
 800080a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800080c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000810:	60bb      	str	r3, [r7, #8]
 8000812:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000814:	2300      	movs	r3, #0
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	4b22      	ldr	r3, [pc, #136]	@ (80008a4 <SystemClock_Config+0xd0>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a21      	ldr	r2, [pc, #132]	@ (80008a4 <SystemClock_Config+0xd0>)
 800081e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000822:	6013      	str	r3, [r2, #0]
 8000824:	4b1f      	ldr	r3, [pc, #124]	@ (80008a4 <SystemClock_Config+0xd0>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800082c:	607b      	str	r3, [r7, #4]
 800082e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000830:	2301      	movs	r3, #1
 8000832:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000834:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000838:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800083a:	2302      	movs	r3, #2
 800083c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800083e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000842:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000844:	2308      	movs	r3, #8
 8000846:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000848:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800084c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800084e:	2302      	movs	r3, #2
 8000850:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000852:	2304      	movs	r3, #4
 8000854:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000856:	f107 0320 	add.w	r3, r7, #32
 800085a:	4618      	mov	r0, r3
 800085c:	f002 fd4c 	bl	80032f8 <HAL_RCC_OscConfig>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000866:	f000 f9ab 	bl	8000bc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800086a:	230f      	movs	r3, #15
 800086c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800086e:	2302      	movs	r3, #2
 8000870:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000872:	2300      	movs	r3, #0
 8000874:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000876:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800087a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800087c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000880:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000882:	f107 030c 	add.w	r3, r7, #12
 8000886:	2105      	movs	r1, #5
 8000888:	4618      	mov	r0, r3
 800088a:	f002 ffad 	bl	80037e8 <HAL_RCC_ClockConfig>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000894:	f000 f994 	bl	8000bc0 <Error_Handler>
  }
}
 8000898:	bf00      	nop
 800089a:	3750      	adds	r7, #80	@ 0x50
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	40023800 	.word	0x40023800
 80008a4:	40007000 	.word	0x40007000

080008a8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80008ac:	4b17      	ldr	r3, [pc, #92]	@ (800090c <MX_SPI2_Init+0x64>)
 80008ae:	4a18      	ldr	r2, [pc, #96]	@ (8000910 <MX_SPI2_Init+0x68>)
 80008b0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80008b2:	4b16      	ldr	r3, [pc, #88]	@ (800090c <MX_SPI2_Init+0x64>)
 80008b4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80008b8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80008ba:	4b14      	ldr	r3, [pc, #80]	@ (800090c <MX_SPI2_Init+0x64>)
 80008bc:	2200      	movs	r2, #0
 80008be:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80008c0:	4b12      	ldr	r3, [pc, #72]	@ (800090c <MX_SPI2_Init+0x64>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008c6:	4b11      	ldr	r3, [pc, #68]	@ (800090c <MX_SPI2_Init+0x64>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008cc:	4b0f      	ldr	r3, [pc, #60]	@ (800090c <MX_SPI2_Init+0x64>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80008d2:	4b0e      	ldr	r3, [pc, #56]	@ (800090c <MX_SPI2_Init+0x64>)
 80008d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008d8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80008da:	4b0c      	ldr	r3, [pc, #48]	@ (800090c <MX_SPI2_Init+0x64>)
 80008dc:	2218      	movs	r2, #24
 80008de:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008e0:	4b0a      	ldr	r3, [pc, #40]	@ (800090c <MX_SPI2_Init+0x64>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80008e6:	4b09      	ldr	r3, [pc, #36]	@ (800090c <MX_SPI2_Init+0x64>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008ec:	4b07      	ldr	r3, [pc, #28]	@ (800090c <MX_SPI2_Init+0x64>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80008f2:	4b06      	ldr	r3, [pc, #24]	@ (800090c <MX_SPI2_Init+0x64>)
 80008f4:	220a      	movs	r2, #10
 80008f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80008f8:	4804      	ldr	r0, [pc, #16]	@ (800090c <MX_SPI2_Init+0x64>)
 80008fa:	f003 f995 	bl	8003c28 <HAL_SPI_Init>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000904:	f000 f95c 	bl	8000bc0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000908:	bf00      	nop
 800090a:	bd80      	pop	{r7, pc}
 800090c:	200000d0 	.word	0x200000d0
 8000910:	40003800 	.word	0x40003800

08000914 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800091a:	463b      	mov	r3, r7
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000922:	4b1a      	ldr	r3, [pc, #104]	@ (800098c <MX_TIM6_Init+0x78>)
 8000924:	4a1a      	ldr	r2, [pc, #104]	@ (8000990 <MX_TIM6_Init+0x7c>)
 8000926:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 167;
 8000928:	4b18      	ldr	r3, [pc, #96]	@ (800098c <MX_TIM6_Init+0x78>)
 800092a:	22a7      	movs	r2, #167	@ 0xa7
 800092c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800092e:	4b17      	ldr	r3, [pc, #92]	@ (800098c <MX_TIM6_Init+0x78>)
 8000930:	2200      	movs	r2, #0
 8000932:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000934:	4b15      	ldr	r3, [pc, #84]	@ (800098c <MX_TIM6_Init+0x78>)
 8000936:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800093a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800093c:	4b13      	ldr	r3, [pc, #76]	@ (800098c <MX_TIM6_Init+0x78>)
 800093e:	2200      	movs	r2, #0
 8000940:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000942:	4812      	ldr	r0, [pc, #72]	@ (800098c <MX_TIM6_Init+0x78>)
 8000944:	f003 fca6 	bl	8004294 <HAL_TIM_Base_Init>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800094e:	f000 f937 	bl	8000bc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000952:	2320      	movs	r3, #32
 8000954:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000956:	2300      	movs	r3, #0
 8000958:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800095a:	463b      	mov	r3, r7
 800095c:	4619      	mov	r1, r3
 800095e:	480b      	ldr	r0, [pc, #44]	@ (800098c <MX_TIM6_Init+0x78>)
 8000960:	f003 ff4c 	bl	80047fc <HAL_TIMEx_MasterConfigSynchronization>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800096a:	f000 f929 	bl	8000bc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  // Habilitar interrupciones de actualización (update)
  HAL_TIM_Base_Start_IT(&htim6);
 800096e:	4807      	ldr	r0, [pc, #28]	@ (800098c <MX_TIM6_Init+0x78>)
 8000970:	f003 fce0 	bl	8004334 <HAL_TIM_Base_Start_IT>

  // Configurar NVIC
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000974:	2200      	movs	r2, #0
 8000976:	2100      	movs	r1, #0
 8000978:	2036      	movs	r0, #54	@ 0x36
 800097a:	f001 fda2 	bl	80024c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800097e:	2036      	movs	r0, #54	@ 0x36
 8000980:	f001 fdbb 	bl	80024fa <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM6_Init 2 */

}
 8000984:	bf00      	nop
 8000986:	3708      	adds	r7, #8
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	20000128 	.word	0x20000128
 8000990:	40001000 	.word	0x40001000

08000994 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000998:	4b11      	ldr	r3, [pc, #68]	@ (80009e0 <MX_USART2_UART_Init+0x4c>)
 800099a:	4a12      	ldr	r2, [pc, #72]	@ (80009e4 <MX_USART2_UART_Init+0x50>)
 800099c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800099e:	4b10      	ldr	r3, [pc, #64]	@ (80009e0 <MX_USART2_UART_Init+0x4c>)
 80009a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009a6:	4b0e      	ldr	r3, [pc, #56]	@ (80009e0 <MX_USART2_UART_Init+0x4c>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009ac:	4b0c      	ldr	r3, [pc, #48]	@ (80009e0 <MX_USART2_UART_Init+0x4c>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009b2:	4b0b      	ldr	r3, [pc, #44]	@ (80009e0 <MX_USART2_UART_Init+0x4c>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009b8:	4b09      	ldr	r3, [pc, #36]	@ (80009e0 <MX_USART2_UART_Init+0x4c>)
 80009ba:	220c      	movs	r2, #12
 80009bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009be:	4b08      	ldr	r3, [pc, #32]	@ (80009e0 <MX_USART2_UART_Init+0x4c>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c4:	4b06      	ldr	r3, [pc, #24]	@ (80009e0 <MX_USART2_UART_Init+0x4c>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009ca:	4805      	ldr	r0, [pc, #20]	@ (80009e0 <MX_USART2_UART_Init+0x4c>)
 80009cc:	f003 ffa6 	bl	800491c <HAL_UART_Init>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009d6:	f000 f8f3 	bl	8000bc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	20000170 	.word	0x20000170
 80009e4:	40004400 	.word	0x40004400

080009e8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80009ec:	4b11      	ldr	r3, [pc, #68]	@ (8000a34 <MX_USART6_UART_Init+0x4c>)
 80009ee:	4a12      	ldr	r2, [pc, #72]	@ (8000a38 <MX_USART6_UART_Init+0x50>)
 80009f0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 250000;
 80009f2:	4b10      	ldr	r3, [pc, #64]	@ (8000a34 <MX_USART6_UART_Init+0x4c>)
 80009f4:	4a11      	ldr	r2, [pc, #68]	@ (8000a3c <MX_USART6_UART_Init+0x54>)
 80009f6:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80009f8:	4b0e      	ldr	r3, [pc, #56]	@ (8000a34 <MX_USART6_UART_Init+0x4c>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_2;
 80009fe:	4b0d      	ldr	r3, [pc, #52]	@ (8000a34 <MX_USART6_UART_Init+0x4c>)
 8000a00:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a04:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000a06:	4b0b      	ldr	r3, [pc, #44]	@ (8000a34 <MX_USART6_UART_Init+0x4c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000a0c:	4b09      	ldr	r3, [pc, #36]	@ (8000a34 <MX_USART6_UART_Init+0x4c>)
 8000a0e:	220c      	movs	r2, #12
 8000a10:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a12:	4b08      	ldr	r3, [pc, #32]	@ (8000a34 <MX_USART6_UART_Init+0x4c>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a18:	4b06      	ldr	r3, [pc, #24]	@ (8000a34 <MX_USART6_UART_Init+0x4c>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000a1e:	4805      	ldr	r0, [pc, #20]	@ (8000a34 <MX_USART6_UART_Init+0x4c>)
 8000a20:	f003 ff7c 	bl	800491c <HAL_UART_Init>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000a2a:	f000 f8c9 	bl	8000bc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	200001b8 	.word	0x200001b8
 8000a38:	40011400 	.word	0x40011400
 8000a3c:	0003d090 	.word	0x0003d090

08000a40 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	607b      	str	r3, [r7, #4]
 8000a4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a7c <MX_DMA_Init+0x3c>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4e:	4a0b      	ldr	r2, [pc, #44]	@ (8000a7c <MX_DMA_Init+0x3c>)
 8000a50:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000a54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a56:	4b09      	ldr	r3, [pc, #36]	@ (8000a7c <MX_DMA_Init+0x3c>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000a5e:	607b      	str	r3, [r7, #4]
 8000a60:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000a62:	2200      	movs	r2, #0
 8000a64:	2100      	movs	r1, #0
 8000a66:	2045      	movs	r0, #69	@ 0x45
 8000a68:	f001 fd2b 	bl	80024c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000a6c:	2045      	movs	r0, #69	@ 0x45
 8000a6e:	f001 fd44 	bl	80024fa <HAL_NVIC_EnableIRQ>

}
 8000a72:	bf00      	nop
 8000a74:	3708      	adds	r7, #8
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40023800 	.word	0x40023800

08000a80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b08a      	sub	sp, #40	@ 0x28
 8000a84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a86:	f107 0314 	add.w	r3, r7, #20
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
 8000a8e:	605a      	str	r2, [r3, #4]
 8000a90:	609a      	str	r2, [r3, #8]
 8000a92:	60da      	str	r2, [r3, #12]
 8000a94:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	613b      	str	r3, [r7, #16]
 8000a9a:	4b46      	ldr	r3, [pc, #280]	@ (8000bb4 <MX_GPIO_Init+0x134>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9e:	4a45      	ldr	r2, [pc, #276]	@ (8000bb4 <MX_GPIO_Init+0x134>)
 8000aa0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000aa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aa6:	4b43      	ldr	r3, [pc, #268]	@ (8000bb4 <MX_GPIO_Init+0x134>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000aae:	613b      	str	r3, [r7, #16]
 8000ab0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	60fb      	str	r3, [r7, #12]
 8000ab6:	4b3f      	ldr	r3, [pc, #252]	@ (8000bb4 <MX_GPIO_Init+0x134>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aba:	4a3e      	ldr	r2, [pc, #248]	@ (8000bb4 <MX_GPIO_Init+0x134>)
 8000abc:	f043 0304 	orr.w	r3, r3, #4
 8000ac0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ac2:	4b3c      	ldr	r3, [pc, #240]	@ (8000bb4 <MX_GPIO_Init+0x134>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac6:	f003 0304 	and.w	r3, r3, #4
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60bb      	str	r3, [r7, #8]
 8000ad2:	4b38      	ldr	r3, [pc, #224]	@ (8000bb4 <MX_GPIO_Init+0x134>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad6:	4a37      	ldr	r2, [pc, #220]	@ (8000bb4 <MX_GPIO_Init+0x134>)
 8000ad8:	f043 0301 	orr.w	r3, r3, #1
 8000adc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ade:	4b35      	ldr	r3, [pc, #212]	@ (8000bb4 <MX_GPIO_Init+0x134>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae2:	f003 0301 	and.w	r3, r3, #1
 8000ae6:	60bb      	str	r3, [r7, #8]
 8000ae8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	607b      	str	r3, [r7, #4]
 8000aee:	4b31      	ldr	r3, [pc, #196]	@ (8000bb4 <MX_GPIO_Init+0x134>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af2:	4a30      	ldr	r2, [pc, #192]	@ (8000bb4 <MX_GPIO_Init+0x134>)
 8000af4:	f043 0302 	orr.w	r3, r3, #2
 8000af8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000afa:	4b2e      	ldr	r3, [pc, #184]	@ (8000bb4 <MX_GPIO_Init+0x134>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afe:	f003 0302 	and.w	r3, r3, #2
 8000b02:	607b      	str	r3, [r7, #4]
 8000b04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, NRF24_CE_Pin|NRF24_CSN_Pin, GPIO_PIN_RESET);
 8000b06:	2200      	movs	r2, #0
 8000b08:	2130      	movs	r1, #48	@ 0x30
 8000b0a:	482b      	ldr	r0, [pc, #172]	@ (8000bb8 <MX_GPIO_Init+0x138>)
 8000b0c:	f002 fbc2 	bl	8003294 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MAX485_RE_Pin|MAX485_DE_Pin, GPIO_PIN_RESET);
 8000b10:	2200      	movs	r2, #0
 8000b12:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8000b16:	4829      	ldr	r0, [pc, #164]	@ (8000bbc <MX_GPIO_Init+0x13c>)
 8000b18:	f002 fbbc 	bl	8003294 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b20:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2a:	f107 0314 	add.w	r3, r7, #20
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4821      	ldr	r0, [pc, #132]	@ (8000bb8 <MX_GPIO_Init+0x138>)
 8000b32:	f002 f8ff 	bl	8002d34 <HAL_GPIO_Init>

  /*Configure GPIO pins : NRF24_CE_Pin NRF24_CSN_Pin */
  GPIO_InitStruct.Pin = NRF24_CE_Pin|NRF24_CSN_Pin;
 8000b36:	2330      	movs	r3, #48	@ 0x30
 8000b38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b42:	2300      	movs	r3, #0
 8000b44:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b46:	f107 0314 	add.w	r3, r7, #20
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	481a      	ldr	r0, [pc, #104]	@ (8000bb8 <MX_GPIO_Init+0x138>)
 8000b4e:	f002 f8f1 	bl	8002d34 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF24_IRQ_Pin */
  GPIO_InitStruct.Pin = NRF24_IRQ_Pin;
 8000b52:	2340      	movs	r3, #64	@ 0x40
 8000b54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b56:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000b5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF24_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000b60:	f107 0314 	add.w	r3, r7, #20
 8000b64:	4619      	mov	r1, r3
 8000b66:	4814      	ldr	r0, [pc, #80]	@ (8000bb8 <MX_GPIO_Init+0x138>)
 8000b68:	f002 f8e4 	bl	8002d34 <HAL_GPIO_Init>

  /*Configure GPIO pins : MAX485_RE_Pin MAX485_DE_Pin */
  GPIO_InitStruct.Pin = MAX485_RE_Pin|MAX485_DE_Pin;
 8000b6c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000b70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b72:	2301      	movs	r3, #1
 8000b74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b76:	2300      	movs	r3, #0
 8000b78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b7e:	f107 0314 	add.w	r3, r7, #20
 8000b82:	4619      	mov	r1, r3
 8000b84:	480d      	ldr	r0, [pc, #52]	@ (8000bbc <MX_GPIO_Init+0x13c>)
 8000b86:	f002 f8d5 	bl	8002d34 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	2006      	movs	r0, #6
 8000b90:	f001 fc97 	bl	80024c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000b94:	2006      	movs	r0, #6
 8000b96:	f001 fcb0 	bl	80024fa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	2017      	movs	r0, #23
 8000ba0:	f001 fc8f 	bl	80024c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000ba4:	2017      	movs	r0, #23
 8000ba6:	f001 fca8 	bl	80024fa <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000baa:	bf00      	nop
 8000bac:	3728      	adds	r7, #40	@ 0x28
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40023800 	.word	0x40023800
 8000bb8:	40020000 	.word	0x40020000
 8000bbc:	40020800 	.word	0x40020800

08000bc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bc4:	b672      	cpsid	i
}
 8000bc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bc8:	bf00      	nop
 8000bca:	e7fd      	b.n	8000bc8 <Error_Handler+0x8>

08000bcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	607b      	str	r3, [r7, #4]
 8000bd6:	4b10      	ldr	r3, [pc, #64]	@ (8000c18 <HAL_MspInit+0x4c>)
 8000bd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bda:	4a0f      	ldr	r2, [pc, #60]	@ (8000c18 <HAL_MspInit+0x4c>)
 8000bdc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000be0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000be2:	4b0d      	ldr	r3, [pc, #52]	@ (8000c18 <HAL_MspInit+0x4c>)
 8000be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000be6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bea:	607b      	str	r3, [r7, #4]
 8000bec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	603b      	str	r3, [r7, #0]
 8000bf2:	4b09      	ldr	r3, [pc, #36]	@ (8000c18 <HAL_MspInit+0x4c>)
 8000bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bf6:	4a08      	ldr	r2, [pc, #32]	@ (8000c18 <HAL_MspInit+0x4c>)
 8000bf8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bfc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bfe:	4b06      	ldr	r3, [pc, #24]	@ (8000c18 <HAL_MspInit+0x4c>)
 8000c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c06:	603b      	str	r3, [r7, #0]
 8000c08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	370c      	adds	r7, #12
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	40023800 	.word	0x40023800

08000c1c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b08a      	sub	sp, #40	@ 0x28
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c24:	f107 0314 	add.w	r3, r7, #20
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	605a      	str	r2, [r3, #4]
 8000c2e:	609a      	str	r2, [r3, #8]
 8000c30:	60da      	str	r2, [r3, #12]
 8000c32:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a28      	ldr	r2, [pc, #160]	@ (8000cdc <HAL_SPI_MspInit+0xc0>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d14a      	bne.n	8000cd4 <HAL_SPI_MspInit+0xb8>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	613b      	str	r3, [r7, #16]
 8000c42:	4b27      	ldr	r3, [pc, #156]	@ (8000ce0 <HAL_SPI_MspInit+0xc4>)
 8000c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c46:	4a26      	ldr	r2, [pc, #152]	@ (8000ce0 <HAL_SPI_MspInit+0xc4>)
 8000c48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c4e:	4b24      	ldr	r3, [pc, #144]	@ (8000ce0 <HAL_SPI_MspInit+0xc4>)
 8000c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c56:	613b      	str	r3, [r7, #16]
 8000c58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60fb      	str	r3, [r7, #12]
 8000c5e:	4b20      	ldr	r3, [pc, #128]	@ (8000ce0 <HAL_SPI_MspInit+0xc4>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c62:	4a1f      	ldr	r2, [pc, #124]	@ (8000ce0 <HAL_SPI_MspInit+0xc4>)
 8000c64:	f043 0304 	orr.w	r3, r3, #4
 8000c68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c6a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ce0 <HAL_SPI_MspInit+0xc4>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6e:	f003 0304 	and.w	r3, r3, #4
 8000c72:	60fb      	str	r3, [r7, #12]
 8000c74:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	60bb      	str	r3, [r7, #8]
 8000c7a:	4b19      	ldr	r3, [pc, #100]	@ (8000ce0 <HAL_SPI_MspInit+0xc4>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7e:	4a18      	ldr	r2, [pc, #96]	@ (8000ce0 <HAL_SPI_MspInit+0xc4>)
 8000c80:	f043 0302 	orr.w	r3, r3, #2
 8000c84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c86:	4b16      	ldr	r3, [pc, #88]	@ (8000ce0 <HAL_SPI_MspInit+0xc4>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8a:	f003 0302 	and.w	r3, r3, #2
 8000c8e:	60bb      	str	r3, [r7, #8]
 8000c90:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c92:	230c      	movs	r3, #12
 8000c94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c96:	2302      	movs	r3, #2
 8000c98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c9e:	2303      	movs	r3, #3
 8000ca0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ca2:	2305      	movs	r3, #5
 8000ca4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ca6:	f107 0314 	add.w	r3, r7, #20
 8000caa:	4619      	mov	r1, r3
 8000cac:	480d      	ldr	r0, [pc, #52]	@ (8000ce4 <HAL_SPI_MspInit+0xc8>)
 8000cae:	f002 f841 	bl	8002d34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000cb2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc0:	2303      	movs	r3, #3
 8000cc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cc4:	2305      	movs	r3, #5
 8000cc6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc8:	f107 0314 	add.w	r3, r7, #20
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4806      	ldr	r0, [pc, #24]	@ (8000ce8 <HAL_SPI_MspInit+0xcc>)
 8000cd0:	f002 f830 	bl	8002d34 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8000cd4:	bf00      	nop
 8000cd6:	3728      	adds	r7, #40	@ 0x28
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	40003800 	.word	0x40003800
 8000ce0:	40023800 	.word	0x40023800
 8000ce4:	40020800 	.word	0x40020800
 8000ce8:	40020400 	.word	0x40020400

08000cec <HAL_SPI_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI2)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a0a      	ldr	r2, [pc, #40]	@ (8000d24 <HAL_SPI_MspDeInit+0x38>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d10e      	bne.n	8000d1c <HAL_SPI_MspDeInit+0x30>
  {
    /* USER CODE BEGIN SPI2_MspDeInit 0 */

    /* USER CODE END SPI2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI2_CLK_DISABLE();
 8000cfe:	4b0a      	ldr	r3, [pc, #40]	@ (8000d28 <HAL_SPI_MspDeInit+0x3c>)
 8000d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d02:	4a09      	ldr	r2, [pc, #36]	@ (8000d28 <HAL_SPI_MspDeInit+0x3c>)
 8000d04:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000d08:	6413      	str	r3, [r2, #64]	@ 0x40
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_2|GPIO_PIN_3);
 8000d0a:	210c      	movs	r1, #12
 8000d0c:	4807      	ldr	r0, [pc, #28]	@ (8000d2c <HAL_SPI_MspDeInit+0x40>)
 8000d0e:	f002 f9ad 	bl	800306c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8000d12:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d16:	4806      	ldr	r0, [pc, #24]	@ (8000d30 <HAL_SPI_MspDeInit+0x44>)
 8000d18:	f002 f9a8 	bl	800306c <HAL_GPIO_DeInit>
    /* USER CODE BEGIN SPI2_MspDeInit 1 */

    /* USER CODE END SPI2_MspDeInit 1 */
  }

}
 8000d1c:	bf00      	nop
 8000d1e:	3708      	adds	r7, #8
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	40003800 	.word	0x40003800
 8000d28:	40023800 	.word	0x40023800
 8000d2c:	40020800 	.word	0x40020800
 8000d30:	40020400 	.word	0x40020400

08000d34 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b084      	sub	sp, #16
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a0e      	ldr	r2, [pc, #56]	@ (8000d7c <HAL_TIM_Base_MspInit+0x48>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d115      	bne.n	8000d72 <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM6_MspInit 0 */

    /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	60fb      	str	r3, [r7, #12]
 8000d4a:	4b0d      	ldr	r3, [pc, #52]	@ (8000d80 <HAL_TIM_Base_MspInit+0x4c>)
 8000d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d4e:	4a0c      	ldr	r2, [pc, #48]	@ (8000d80 <HAL_TIM_Base_MspInit+0x4c>)
 8000d50:	f043 0310 	orr.w	r3, r3, #16
 8000d54:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d56:	4b0a      	ldr	r3, [pc, #40]	@ (8000d80 <HAL_TIM_Base_MspInit+0x4c>)
 8000d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d5a:	f003 0310 	and.w	r3, r3, #16
 8000d5e:	60fb      	str	r3, [r7, #12]
 8000d60:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000d62:	2200      	movs	r2, #0
 8000d64:	2100      	movs	r1, #0
 8000d66:	2036      	movs	r0, #54	@ 0x36
 8000d68:	f001 fbab 	bl	80024c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d6c:	2036      	movs	r0, #54	@ 0x36
 8000d6e:	f001 fbc4 	bl	80024fa <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM6_MspInit 1 */

  }

}
 8000d72:	bf00      	nop
 8000d74:	3710      	adds	r7, #16
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40001000 	.word	0x40001000
 8000d80:	40023800 	.word	0x40023800

08000d84 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b08c      	sub	sp, #48	@ 0x30
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8c:	f107 031c 	add.w	r3, r7, #28
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	60da      	str	r2, [r3, #12]
 8000d9a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a51      	ldr	r2, [pc, #324]	@ (8000ee8 <HAL_UART_MspInit+0x164>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d134      	bne.n	8000e10 <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	61bb      	str	r3, [r7, #24]
 8000daa:	4b50      	ldr	r3, [pc, #320]	@ (8000eec <HAL_UART_MspInit+0x168>)
 8000dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dae:	4a4f      	ldr	r2, [pc, #316]	@ (8000eec <HAL_UART_MspInit+0x168>)
 8000db0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000db4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000db6:	4b4d      	ldr	r3, [pc, #308]	@ (8000eec <HAL_UART_MspInit+0x168>)
 8000db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dbe:	61bb      	str	r3, [r7, #24]
 8000dc0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	617b      	str	r3, [r7, #20]
 8000dc6:	4b49      	ldr	r3, [pc, #292]	@ (8000eec <HAL_UART_MspInit+0x168>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dca:	4a48      	ldr	r2, [pc, #288]	@ (8000eec <HAL_UART_MspInit+0x168>)
 8000dcc:	f043 0301 	orr.w	r3, r3, #1
 8000dd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dd2:	4b46      	ldr	r3, [pc, #280]	@ (8000eec <HAL_UART_MspInit+0x168>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd6:	f003 0301 	and.w	r3, r3, #1
 8000dda:	617b      	str	r3, [r7, #20]
 8000ddc:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000dde:	230c      	movs	r3, #12
 8000de0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de2:	2302      	movs	r3, #2
 8000de4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dea:	2303      	movs	r3, #3
 8000dec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dee:	2307      	movs	r3, #7
 8000df0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df2:	f107 031c 	add.w	r3, r7, #28
 8000df6:	4619      	mov	r1, r3
 8000df8:	483d      	ldr	r0, [pc, #244]	@ (8000ef0 <HAL_UART_MspInit+0x16c>)
 8000dfa:	f001 ff9b 	bl	8002d34 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	2100      	movs	r1, #0
 8000e02:	2026      	movs	r0, #38	@ 0x26
 8000e04:	f001 fb5d 	bl	80024c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e08:	2026      	movs	r0, #38	@ 0x26
 8000e0a:	f001 fb76 	bl	80024fa <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8000e0e:	e066      	b.n	8000ede <HAL_UART_MspInit+0x15a>
  else if(huart->Instance==USART6)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a37      	ldr	r2, [pc, #220]	@ (8000ef4 <HAL_UART_MspInit+0x170>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d161      	bne.n	8000ede <HAL_UART_MspInit+0x15a>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	613b      	str	r3, [r7, #16]
 8000e1e:	4b33      	ldr	r3, [pc, #204]	@ (8000eec <HAL_UART_MspInit+0x168>)
 8000e20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e22:	4a32      	ldr	r2, [pc, #200]	@ (8000eec <HAL_UART_MspInit+0x168>)
 8000e24:	f043 0320 	orr.w	r3, r3, #32
 8000e28:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e2a:	4b30      	ldr	r3, [pc, #192]	@ (8000eec <HAL_UART_MspInit+0x168>)
 8000e2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e2e:	f003 0320 	and.w	r3, r3, #32
 8000e32:	613b      	str	r3, [r7, #16]
 8000e34:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	60fb      	str	r3, [r7, #12]
 8000e3a:	4b2c      	ldr	r3, [pc, #176]	@ (8000eec <HAL_UART_MspInit+0x168>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e3e:	4a2b      	ldr	r2, [pc, #172]	@ (8000eec <HAL_UART_MspInit+0x168>)
 8000e40:	f043 0304 	orr.w	r3, r3, #4
 8000e44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e46:	4b29      	ldr	r3, [pc, #164]	@ (8000eec <HAL_UART_MspInit+0x168>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4a:	f003 0304 	and.w	r3, r3, #4
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MAX485_TX_Pin|MAX485_RX_Pin;
 8000e52:	23c0      	movs	r3, #192	@ 0xc0
 8000e54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e56:	2302      	movs	r3, #2
 8000e58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e5e:	2303      	movs	r3, #3
 8000e60:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000e62:	2308      	movs	r3, #8
 8000e64:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e66:	f107 031c 	add.w	r3, r7, #28
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4822      	ldr	r0, [pc, #136]	@ (8000ef8 <HAL_UART_MspInit+0x174>)
 8000e6e:	f001 ff61 	bl	8002d34 <HAL_GPIO_Init>
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8000e72:	4b22      	ldr	r3, [pc, #136]	@ (8000efc <HAL_UART_MspInit+0x178>)
 8000e74:	4a22      	ldr	r2, [pc, #136]	@ (8000f00 <HAL_UART_MspInit+0x17c>)
 8000e76:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8000e78:	4b20      	ldr	r3, [pc, #128]	@ (8000efc <HAL_UART_MspInit+0x178>)
 8000e7a:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8000e7e:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e80:	4b1e      	ldr	r3, [pc, #120]	@ (8000efc <HAL_UART_MspInit+0x178>)
 8000e82:	2240      	movs	r2, #64	@ 0x40
 8000e84:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e86:	4b1d      	ldr	r3, [pc, #116]	@ (8000efc <HAL_UART_MspInit+0x178>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e8c:	4b1b      	ldr	r3, [pc, #108]	@ (8000efc <HAL_UART_MspInit+0x178>)
 8000e8e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e92:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e94:	4b19      	ldr	r3, [pc, #100]	@ (8000efc <HAL_UART_MspInit+0x178>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e9a:	4b18      	ldr	r3, [pc, #96]	@ (8000efc <HAL_UART_MspInit+0x178>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8000ea0:	4b16      	ldr	r3, [pc, #88]	@ (8000efc <HAL_UART_MspInit+0x178>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000ea6:	4b15      	ldr	r3, [pc, #84]	@ (8000efc <HAL_UART_MspInit+0x178>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000eac:	4b13      	ldr	r3, [pc, #76]	@ (8000efc <HAL_UART_MspInit+0x178>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8000eb2:	4812      	ldr	r0, [pc, #72]	@ (8000efc <HAL_UART_MspInit+0x178>)
 8000eb4:	f001 fb3c 	bl	8002530 <HAL_DMA_Init>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <HAL_UART_MspInit+0x13e>
      Error_Handler();
 8000ebe:	f7ff fe7f 	bl	8000bc0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4a0d      	ldr	r2, [pc, #52]	@ (8000efc <HAL_UART_MspInit+0x178>)
 8000ec6:	639a      	str	r2, [r3, #56]	@ 0x38
 8000ec8:	4a0c      	ldr	r2, [pc, #48]	@ (8000efc <HAL_UART_MspInit+0x178>)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	2047      	movs	r0, #71	@ 0x47
 8000ed4:	f001 faf5 	bl	80024c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000ed8:	2047      	movs	r0, #71	@ 0x47
 8000eda:	f001 fb0e 	bl	80024fa <HAL_NVIC_EnableIRQ>
}
 8000ede:	bf00      	nop
 8000ee0:	3730      	adds	r7, #48	@ 0x30
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40004400 	.word	0x40004400
 8000eec:	40023800 	.word	0x40023800
 8000ef0:	40020000 	.word	0x40020000
 8000ef4:	40011400 	.word	0x40011400
 8000ef8:	40020800 	.word	0x40020800
 8000efc:	20000200 	.word	0x20000200
 8000f00:	400264a0 	.word	0x400264a0

08000f04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f08:	bf00      	nop
 8000f0a:	e7fd      	b.n	8000f08 <NMI_Handler+0x4>

08000f0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f10:	bf00      	nop
 8000f12:	e7fd      	b.n	8000f10 <HardFault_Handler+0x4>

08000f14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f18:	bf00      	nop
 8000f1a:	e7fd      	b.n	8000f18 <MemManage_Handler+0x4>

08000f1c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f20:	bf00      	nop
 8000f22:	e7fd      	b.n	8000f20 <BusFault_Handler+0x4>

08000f24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f28:	bf00      	nop
 8000f2a:	e7fd      	b.n	8000f28 <UsageFault_Handler+0x4>

08000f2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr

08000f3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr

08000f48 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr

08000f56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f5a:	f001 f993 	bl	8002284 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000f66:	2001      	movs	r0, #1
 8000f68:	f002 f9ae 	bl	80032c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000f6c:	bf00      	nop
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NRF24_IRQ_Pin);
 8000f74:	2040      	movs	r0, #64	@ 0x40
 8000f76:	f002 f9a7 	bl	80032c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
	...

08000f80 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f84:	4803      	ldr	r0, [pc, #12]	@ (8000f94 <USART2_IRQHandler+0x14>)
 8000f86:	f003 fe15 	bl	8004bb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
#ifdef UART_RX_INTERRUPT
  UART_task();
 8000f8a:	f000 faeb 	bl	8001564 <UART_task>
#endif
  /* USER CODE END USART2_IRQn 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	20000170 	.word	0x20000170

08000f98 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f9c:	4802      	ldr	r0, [pc, #8]	@ (8000fa8 <TIM6_DAC_IRQHandler+0x10>)
 8000f9e:	f003 fa68 	bl	8004472 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	20000128 	.word	0x20000128

08000fac <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8000fb0:	4802      	ldr	r0, [pc, #8]	@ (8000fbc <DMA2_Stream6_IRQHandler+0x10>)
 8000fb2:	f001 fc55 	bl	8002860 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20000200 	.word	0x20000200

08000fc0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8000fc4:	4802      	ldr	r0, [pc, #8]	@ (8000fd0 <USART6_IRQHandler+0x10>)
 8000fc6:	f003 fdf5 	bl	8004bb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	200001b8 	.word	0x200001b8

08000fd4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b086      	sub	sp, #24
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	60f8      	str	r0, [r7, #12]
 8000fdc:	60b9      	str	r1, [r7, #8]
 8000fde:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	617b      	str	r3, [r7, #20]
 8000fe4:	e00a      	b.n	8000ffc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000fe6:	f3af 8000 	nop.w
 8000fea:	4601      	mov	r1, r0
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	1c5a      	adds	r2, r3, #1
 8000ff0:	60ba      	str	r2, [r7, #8]
 8000ff2:	b2ca      	uxtb	r2, r1
 8000ff4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	617b      	str	r3, [r7, #20]
 8000ffc:	697a      	ldr	r2, [r7, #20]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	429a      	cmp	r2, r3
 8001002:	dbf0      	blt.n	8000fe6 <_read+0x12>
  }

  return len;
 8001004:	687b      	ldr	r3, [r7, #4]
}
 8001006:	4618      	mov	r0, r3
 8001008:	3718      	adds	r7, #24
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}

0800100e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	b086      	sub	sp, #24
 8001012:	af00      	add	r7, sp, #0
 8001014:	60f8      	str	r0, [r7, #12]
 8001016:	60b9      	str	r1, [r7, #8]
 8001018:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800101a:	2300      	movs	r3, #0
 800101c:	617b      	str	r3, [r7, #20]
 800101e:	e009      	b.n	8001034 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	1c5a      	adds	r2, r3, #1
 8001024:	60ba      	str	r2, [r7, #8]
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	4618      	mov	r0, r3
 800102a:	f000 fa6d 	bl	8001508 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	3301      	adds	r3, #1
 8001032:	617b      	str	r3, [r7, #20]
 8001034:	697a      	ldr	r2, [r7, #20]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	429a      	cmp	r2, r3
 800103a:	dbf1      	blt.n	8001020 <_write+0x12>
  }
  return len;
 800103c:	687b      	ldr	r3, [r7, #4]
}
 800103e:	4618      	mov	r0, r3
 8001040:	3718      	adds	r7, #24
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}

08001046 <_close>:

int _close(int file)
{
 8001046:	b480      	push	{r7}
 8001048:	b083      	sub	sp, #12
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800104e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001052:	4618      	mov	r0, r3
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr

0800105e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800105e:	b480      	push	{r7}
 8001060:	b083      	sub	sp, #12
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
 8001066:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800106e:	605a      	str	r2, [r3, #4]
  return 0;
 8001070:	2300      	movs	r3, #0
}
 8001072:	4618      	mov	r0, r3
 8001074:	370c      	adds	r7, #12
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr

0800107e <_isatty>:

int _isatty(int file)
{
 800107e:	b480      	push	{r7}
 8001080:	b083      	sub	sp, #12
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001086:	2301      	movs	r3, #1
}
 8001088:	4618      	mov	r0, r3
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr

08001094 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001094:	b480      	push	{r7}
 8001096:	b085      	sub	sp, #20
 8001098:	af00      	add	r7, sp, #0
 800109a:	60f8      	str	r0, [r7, #12]
 800109c:	60b9      	str	r1, [r7, #8]
 800109e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010a0:	2300      	movs	r3, #0
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3714      	adds	r7, #20
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
	...

080010b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b086      	sub	sp, #24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010b8:	4a14      	ldr	r2, [pc, #80]	@ (800110c <_sbrk+0x5c>)
 80010ba:	4b15      	ldr	r3, [pc, #84]	@ (8001110 <_sbrk+0x60>)
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010c4:	4b13      	ldr	r3, [pc, #76]	@ (8001114 <_sbrk+0x64>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d102      	bne.n	80010d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010cc:	4b11      	ldr	r3, [pc, #68]	@ (8001114 <_sbrk+0x64>)
 80010ce:	4a12      	ldr	r2, [pc, #72]	@ (8001118 <_sbrk+0x68>)
 80010d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010d2:	4b10      	ldr	r3, [pc, #64]	@ (8001114 <_sbrk+0x64>)
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4413      	add	r3, r2
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	429a      	cmp	r2, r3
 80010de:	d207      	bcs.n	80010f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010e0:	f004 ff76 	bl	8005fd0 <__errno>
 80010e4:	4603      	mov	r3, r0
 80010e6:	220c      	movs	r2, #12
 80010e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010ea:	f04f 33ff 	mov.w	r3, #4294967295
 80010ee:	e009      	b.n	8001104 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010f0:	4b08      	ldr	r3, [pc, #32]	@ (8001114 <_sbrk+0x64>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010f6:	4b07      	ldr	r3, [pc, #28]	@ (8001114 <_sbrk+0x64>)
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4413      	add	r3, r2
 80010fe:	4a05      	ldr	r2, [pc, #20]	@ (8001114 <_sbrk+0x64>)
 8001100:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001102:	68fb      	ldr	r3, [r7, #12]
}
 8001104:	4618      	mov	r0, r3
 8001106:	3718      	adds	r7, #24
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	20020000 	.word	0x20020000
 8001110:	00000400 	.word	0x00000400
 8001114:	20000260 	.word	0x20000260
 8001118:	20000700 	.word	0x20000700

0800111c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001120:	4b06      	ldr	r3, [pc, #24]	@ (800113c <SystemInit+0x20>)
 8001122:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001126:	4a05      	ldr	r2, [pc, #20]	@ (800113c <SystemInit+0x20>)
 8001128:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800112c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	e000ed00 	.word	0xe000ed00

08001140 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001140:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001178 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001144:	480d      	ldr	r0, [pc, #52]	@ (800117c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001146:	490e      	ldr	r1, [pc, #56]	@ (8001180 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001148:	4a0e      	ldr	r2, [pc, #56]	@ (8001184 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800114a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800114c:	e002      	b.n	8001154 <LoopCopyDataInit>

0800114e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800114e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001150:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001152:	3304      	adds	r3, #4

08001154 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001154:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001156:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001158:	d3f9      	bcc.n	800114e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800115a:	4a0b      	ldr	r2, [pc, #44]	@ (8001188 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800115c:	4c0b      	ldr	r4, [pc, #44]	@ (800118c <LoopFillZerobss+0x26>)
  movs r3, #0
 800115e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001160:	e001      	b.n	8001166 <LoopFillZerobss>

08001162 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001162:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001164:	3204      	adds	r2, #4

08001166 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001166:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001168:	d3fb      	bcc.n	8001162 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800116a:	f7ff ffd7 	bl	800111c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800116e:	f004 ff35 	bl	8005fdc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001172:	f7ff faf5 	bl	8000760 <main>
  bx  lr    
 8001176:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001178:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800117c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001180:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001184:	08006c74 	.word	0x08006c74
  ldr r2, =_sbss
 8001188:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 800118c:	20000700 	.word	0x20000700

08001190 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001190:	e7fe      	b.n	8001190 <ADC_IRQHandler>
	...

08001194 <delay_us>:
static uint8_t DMX_Stop = 1;
/**
 * @brief Generate a non-blocking microsecond delay using a timer
 * @param us Delay duration in microseconds
*/
static void delay_us(uint32_t us) {
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
    /* Asegurarse de que no esté ya corriendo */
    HAL_TIM_Base_Stop_IT(dmx_htim);
 800119c:	4b0f      	ldr	r3, [pc, #60]	@ (80011dc <delay_us+0x48>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f003 f937 	bl	8004414 <HAL_TIM_Base_Stop_IT>

    delay_complete = 0;
 80011a6:	4b0e      	ldr	r3, [pc, #56]	@ (80011e0 <delay_us+0x4c>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	701a      	strb	r2, [r3, #0]
    /* Fijar auto-reload al número de microsegundos deseado */
    __HAL_TIM_SET_AUTORELOAD(dmx_htim, us);
 80011ac:	4b0b      	ldr	r3, [pc, #44]	@ (80011dc <delay_us+0x48>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	687a      	ldr	r2, [r7, #4]
 80011b4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80011b6:	4b09      	ldr	r3, [pc, #36]	@ (80011dc <delay_us+0x48>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	60da      	str	r2, [r3, #12]

    /* Reiniciar contador */
    __HAL_TIM_SET_COUNTER(dmx_htim, 0);
 80011be:	4b07      	ldr	r3, [pc, #28]	@ (80011dc <delay_us+0x48>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2200      	movs	r2, #0
 80011c6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Arrancar timer en modo interrupción */
    HAL_TIM_Base_Start_IT(dmx_htim);
 80011c8:	4b04      	ldr	r3, [pc, #16]	@ (80011dc <delay_us+0x48>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f003 f8b1 	bl	8004334 <HAL_TIM_Base_Start_IT>
}
 80011d2:	bf00      	nop
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	20000268 	.word	0x20000268
 80011e0:	2000046d 	.word	0x2000046d

080011e4 <DMX512_Tx_Output>:
//}

/**
 * @brief Configure TX pin as GPIO output for Break/MAB generation
*/
static void DMX512_Tx_Output(void){
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b086      	sub	sp, #24
 80011e8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct;

    GPIO_InitStruct.Pin = DMX_TX_Pin;
 80011ea:	2340      	movs	r3, #64	@ 0x40
 80011ec:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ee:	2301      	movs	r3, #1
 80011f0:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f2:	2300      	movs	r3, #0
 80011f4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f6:	2303      	movs	r3, #3
 80011f8:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(DMX_TX_GPIO_Port, &GPIO_InitStruct);
 80011fa:	1d3b      	adds	r3, r7, #4
 80011fc:	4619      	mov	r1, r3
 80011fe:	4803      	ldr	r0, [pc, #12]	@ (800120c <DMX512_Tx_Output+0x28>)
 8001200:	f001 fd98 	bl	8002d34 <HAL_GPIO_Init>
}
 8001204:	bf00      	nop
 8001206:	3718      	adds	r7, #24
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	40020800 	.word	0x40020800

08001210 <DMX512_Tx_Alter_Function>:

/**
 * @brief Reconfigure TX pin to alternate function for UART transmission
*/
static void DMX512_Tx_Alter_Function(void){
 8001210:	b580      	push	{r7, lr}
 8001212:	b086      	sub	sp, #24
 8001214:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct;

    GPIO_InitStruct.Pin = DMX_TX_Pin;
 8001216:	2340      	movs	r3, #64	@ 0x40
 8001218:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121a:	2302      	movs	r3, #2
 800121c:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121e:	2300      	movs	r3, #0
 8001220:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001222:	2303      	movs	r3, #3
 8001224:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Alternate = DMX_UART_AF;
 8001226:	2308      	movs	r3, #8
 8001228:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(DMX_TX_GPIO_Port, &GPIO_InitStruct);
 800122a:	1d3b      	adds	r3, r7, #4
 800122c:	4619      	mov	r1, r3
 800122e:	4803      	ldr	r0, [pc, #12]	@ (800123c <DMX512_Tx_Alter_Function+0x2c>)
 8001230:	f001 fd80 	bl	8002d34 <HAL_GPIO_Init>
}
 8001234:	bf00      	nop
 8001236:	3718      	adds	r7, #24
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	40020800 	.word	0x40020800

08001240 <DMX512_Init>:
 * @brief Initialize DMX512 library
 * @param huart Pointer to USART handle
 * @param htim  Pointer to timer handle
 * @return HAL_StatusTypeDef
*/
HAL_StatusTypeDef DMX512_Init(UART_HandleTypeDef *huart, TIM_HandleTypeDef *htim) {
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	6039      	str	r1, [r7, #0]
	dmx_huart = huart;
 800124a:	4a24      	ldr	r2, [pc, #144]	@ (80012dc <DMX512_Init+0x9c>)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6013      	str	r3, [r2, #0]
	dmx_htim  = htim;
 8001250:	4a23      	ldr	r2, [pc, #140]	@ (80012e0 <DMX512_Init+0xa0>)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	6013      	str	r3, [r2, #0]

    // Configure UART for DMX (250 kbps, 8N2)
    huart->Init.BaudRate = 250000;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a22      	ldr	r2, [pc, #136]	@ (80012e4 <DMX512_Init+0xa4>)
 800125a:	605a      	str	r2, [r3, #4]
    huart->Init.WordLength = UART_WORDLENGTH_8B;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2200      	movs	r2, #0
 8001260:	609a      	str	r2, [r3, #8]
    huart->Init.StopBits = UART_STOPBITS_2;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001268:	60da      	str	r2, [r3, #12]
    huart->Init.Parity = UART_PARITY_NONE;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2200      	movs	r2, #0
 800126e:	611a      	str	r2, [r3, #16]
    huart->Init.Mode = UART_MODE_TX_RX;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	220c      	movs	r2, #12
 8001274:	615a      	str	r2, [r3, #20]
    huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2200      	movs	r2, #0
 800127a:	619a      	str	r2, [r3, #24]
    if (HAL_UART_Init(huart) != HAL_OK) return HAL_ERROR;
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f003 fb4d 	bl	800491c <HAL_UART_Init>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <DMX512_Init+0x4c>
 8001288:	2301      	movs	r3, #1
 800128a:	e023      	b.n	80012d4 <DMX512_Init+0x94>

    // Configure Timer for 1 µs ticks
    htim->Init.Prescaler = 32 - 1; //Timer MHz - 1
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	221f      	movs	r2, #31
 8001290:	605a      	str	r2, [r3, #4]
    htim->Init.CounterMode = TIM_COUNTERMODE_UP;
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	2200      	movs	r2, #0
 8001296:	609a      	str	r2, [r3, #8]
    htim->Init.Period = 0xFFFFFFFF;
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	f04f 32ff 	mov.w	r2, #4294967295
 800129e:	60da      	str	r2, [r3, #12]
    htim->Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	2200      	movs	r2, #0
 80012a4:	611a      	str	r2, [r3, #16]
    htim->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	2200      	movs	r2, #0
 80012aa:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(htim) != HAL_OK) return HAL_ERROR;
 80012ac:	6838      	ldr	r0, [r7, #0]
 80012ae:	f002 fff1 	bl	8004294 <HAL_TIM_Base_Init>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <DMX512_Init+0x7c>
 80012b8:	2301      	movs	r3, #1
 80012ba:	e00b      	b.n	80012d4 <DMX512_Init+0x94>

    if (HAL_TIM_Base_Start_IT(htim) != HAL_OK) return HAL_ERROR;
 80012bc:	6838      	ldr	r0, [r7, #0]
 80012be:	f003 f839 	bl	8004334 <HAL_TIM_Base_Start_IT>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <DMX512_Init+0x8c>
 80012c8:	2301      	movs	r3, #1
 80012ca:	e003      	b.n	80012d4 <DMX512_Init+0x94>

    DMX_Stop = 0;
 80012cc:	4b06      	ldr	r3, [pc, #24]	@ (80012e8 <DMX512_Init+0xa8>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	701a      	strb	r2, [r3, #0]
    return HAL_OK;
 80012d2:	2300      	movs	r3, #0
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3708      	adds	r7, #8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	20000264 	.word	0x20000264
 80012e0:	20000268 	.word	0x20000268
 80012e4:	0003d090 	.word	0x0003d090
 80012e8:	2000000d 	.word	0x2000000d

080012ec <DMX512_SetChannel>:
/**
 * @brief Set a DMX channel value
 * @param channel Channel number (1-512)
 * @param value   0-255
*/
void DMX512_SetChannel(uint16_t channel, uint8_t value) {
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	4603      	mov	r3, r0
 80012f4:	460a      	mov	r2, r1
 80012f6:	80fb      	strh	r3, [r7, #6]
 80012f8:	4613      	mov	r3, r2
 80012fa:	717b      	strb	r3, [r7, #5]
	if (channel > 0 && channel <= DMX_MAX_CHANNELS) {
 80012fc:	88fb      	ldrh	r3, [r7, #6]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d007      	beq.n	8001312 <DMX512_SetChannel+0x26>
 8001302:	88fb      	ldrh	r3, [r7, #6]
 8001304:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001308:	d803      	bhi.n	8001312 <DMX512_SetChannel+0x26>
		dmx_buffer[channel] = value;
 800130a:	88fb      	ldrh	r3, [r7, #6]
 800130c:	4904      	ldr	r1, [pc, #16]	@ (8001320 <DMX512_SetChannel+0x34>)
 800130e:	797a      	ldrb	r2, [r7, #5]
 8001310:	54ca      	strb	r2, [r1, r3]
	}
}
 8001312:	bf00      	nop
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	2000026c 	.word	0x2000026c

08001324 <DMX512_Task>:
}

/**
 * @brief Non-blocking task to manage DMX frame transmission
*/
void DMX512_Task(void) {
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
	switch (dmx_state) {
 800132a:	4b3b      	ldr	r3, [pc, #236]	@ (8001418 <DMX512_Task+0xf4>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	2b03      	cmp	r3, #3
 8001330:	d86e      	bhi.n	8001410 <DMX512_Task+0xec>
 8001332:	a201      	add	r2, pc, #4	@ (adr r2, 8001338 <DMX512_Task+0x14>)
 8001334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001338:	08001349 	.word	0x08001349
 800133c:	080013a9 	.word	0x080013a9
 8001340:	080013cf 	.word	0x080013cf
 8001344:	080013f1 	.word	0x080013f1
		case DMX_IDLE:
            // Wait for frame interval (22.8 ms)
			if (!DMX_Stop){
 8001348:	4b34      	ldr	r3, [pc, #208]	@ (800141c <DMX512_Task+0xf8>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d158      	bne.n	8001402 <DMX512_Task+0xde>
				uint32_t current_time = HAL_GetTick();
 8001350:	f000 ffac 	bl	80022ac <HAL_GetTick>
 8001354:	6078      	str	r0, [r7, #4]
				if ((current_time - last_frame_time) >= DMX_FRAME_INTERVAL_MS) {
 8001356:	4b32      	ldr	r3, [pc, #200]	@ (8001420 <DMX512_Task+0xfc>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	687a      	ldr	r2, [r7, #4]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	2b16      	cmp	r3, #22
 8001360:	d94f      	bls.n	8001402 <DMX512_Task+0xde>
					last_frame_time = current_time;
 8001362:	4a2f      	ldr	r2, [pc, #188]	@ (8001420 <DMX512_Task+0xfc>)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6013      	str	r3, [r2, #0]

			        HAL_GPIO_WritePin(LED4_GPIO_PORT, LED4_PIN, GPIO_PIN_SET);
 8001368:	2201      	movs	r2, #1
 800136a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800136e:	482d      	ldr	r0, [pc, #180]	@ (8001424 <DMX512_Task+0x100>)
 8001370:	f001 ff90 	bl	8003294 <HAL_GPIO_WritePin>
					// Transition to BREAK state
					dmx_state = DMX_BREAK;
 8001374:	4b28      	ldr	r3, [pc, #160]	@ (8001418 <DMX512_Task+0xf4>)
 8001376:	2201      	movs	r2, #1
 8001378:	701a      	strb	r2, [r3, #0]
					DMX_ENABLE_TX(); // Enable MAX485 transmitter
 800137a:	2201      	movs	r2, #1
 800137c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001380:	4829      	ldr	r0, [pc, #164]	@ (8001428 <DMX512_Task+0x104>)
 8001382:	f001 ff87 	bl	8003294 <HAL_GPIO_WritePin>
 8001386:	2201      	movs	r2, #1
 8001388:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800138c:	4826      	ldr	r0, [pc, #152]	@ (8001428 <DMX512_Task+0x104>)
 800138e:	f001 ff81 	bl	8003294 <HAL_GPIO_WritePin>
					DMX512_Tx_Output();
 8001392:	f7ff ff27 	bl	80011e4 <DMX512_Tx_Output>
					HAL_GPIO_WritePin(DMX_TX_GPIO_Port, DMX_TX_Pin, GPIO_PIN_RESET);  // LOW
 8001396:	2200      	movs	r2, #0
 8001398:	2140      	movs	r1, #64	@ 0x40
 800139a:	4823      	ldr	r0, [pc, #140]	@ (8001428 <DMX512_Task+0x104>)
 800139c:	f001 ff7a 	bl	8003294 <HAL_GPIO_WritePin>
					delay_us(DMX_BREAK_US);  // Start non-blocking delay
 80013a0:	20b0      	movs	r0, #176	@ 0xb0
 80013a2:	f7ff fef7 	bl	8001194 <delay_us>
				}
			}
			break;
 80013a6:	e02c      	b.n	8001402 <DMX512_Task+0xde>

		case DMX_BREAK:
            // Wait for BREAK
			if (delay_complete) {
 80013a8:	4b20      	ldr	r3, [pc, #128]	@ (800142c <DMX512_Task+0x108>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d029      	beq.n	8001406 <DMX512_Task+0xe2>
				// Transition to MAB state
				dmx_state = DMX_MAB;
 80013b2:	4b19      	ldr	r3, [pc, #100]	@ (8001418 <DMX512_Task+0xf4>)
 80013b4:	2202      	movs	r2, #2
 80013b6:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(DMX_TX_GPIO_Port, DMX_TX_Pin, GPIO_PIN_SET);  // HIGH
 80013b8:	2201      	movs	r2, #1
 80013ba:	2140      	movs	r1, #64	@ 0x40
 80013bc:	481a      	ldr	r0, [pc, #104]	@ (8001428 <DMX512_Task+0x104>)
 80013be:	f001 ff69 	bl	8003294 <HAL_GPIO_WritePin>
				delay_us(DMX_MAB_US);  // Start non-blocking delay
 80013c2:	200c      	movs	r0, #12
 80013c4:	f7ff fee6 	bl	8001194 <delay_us>
				DMX512_Tx_Alter_Function();
 80013c8:	f7ff ff22 	bl	8001210 <DMX512_Tx_Alter_Function>
			}
			break;
 80013cc:	e01b      	b.n	8001406 <DMX512_Task+0xe2>

		case DMX_MAB:
            // Wait for MAB
			if (delay_complete) {
 80013ce:	4b17      	ldr	r3, [pc, #92]	@ (800142c <DMX512_Task+0x108>)
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d018      	beq.n	800140a <DMX512_Task+0xe6>
	            // Start DMA transmission
				dmx_state = DMX_TRANSMIT_DATA;
 80013d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001418 <DMX512_Task+0xf4>)
 80013da:	2203      	movs	r2, #3
 80013dc:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit_DMA(dmx_huart, dmx_buffer, DMX_BUFFER_SIZE);
 80013de:	4b14      	ldr	r3, [pc, #80]	@ (8001430 <DMX512_Task+0x10c>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f240 2201 	movw	r2, #513	@ 0x201
 80013e6:	4913      	ldr	r1, [pc, #76]	@ (8001434 <DMX512_Task+0x110>)
 80013e8:	4618      	mov	r0, r3
 80013ea:	f003 fb73 	bl	8004ad4 <HAL_UART_Transmit_DMA>
			}
			break;
 80013ee:	e00c      	b.n	800140a <DMX512_Task+0xe6>

		case DMX_TRANSMIT_DATA:
			// Wait for DMA to complete
			if (dma_transfer_complete) {
 80013f0:	4b11      	ldr	r3, [pc, #68]	@ (8001438 <DMX512_Task+0x114>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d009      	beq.n	800140e <DMX512_Task+0xea>
				dmx_state = DMX_IDLE;
 80013fa:	4b07      	ldr	r3, [pc, #28]	@ (8001418 <DMX512_Task+0xf4>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001400:	e005      	b.n	800140e <DMX512_Task+0xea>
			break;
 8001402:	bf00      	nop
 8001404:	e004      	b.n	8001410 <DMX512_Task+0xec>
			break;
 8001406:	bf00      	nop
 8001408:	e002      	b.n	8001410 <DMX512_Task+0xec>
			break;
 800140a:	bf00      	nop
 800140c:	e000      	b.n	8001410 <DMX512_Task+0xec>
			break;
 800140e:	bf00      	nop
	}
}
 8001410:	bf00      	nop
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	2000046e 	.word	0x2000046e
 800141c:	2000000d 	.word	0x2000000d
 8001420:	20000470 	.word	0x20000470
 8001424:	40020c00 	.word	0x40020c00
 8001428:	40020800 	.word	0x40020800
 800142c:	2000046d 	.word	0x2000046d
 8001430:	20000264 	.word	0x20000264
 8001434:	2000026c 	.word	0x2000026c
 8001438:	2000000c 	.word	0x2000000c

0800143c <DMX512_StartTask>:
}

/**
 * @brief Starts DMX transmission.
*/
void DMX512_StartTask(void) {
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
	DMX_Stop = 0;
 8001440:	4b03      	ldr	r3, [pc, #12]	@ (8001450 <DMX512_StartTask+0x14>)
 8001442:	2200      	movs	r2, #0
 8001444:	701a      	strb	r2, [r3, #0]
}
 8001446:	bf00      	nop
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr
 8001450:	2000000d 	.word	0x2000000d

08001454 <DMX512_StopTask>:

/**
 * @brief Stops DMX transmission.
*/
void DMX512_StopTask(void) {
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
	DMX_Stop = 1;
 8001458:	4b03      	ldr	r3, [pc, #12]	@ (8001468 <DMX512_StopTask+0x14>)
 800145a:	2201      	movs	r2, #1
 800145c:	701a      	strb	r2, [r3, #0]
}
 800145e:	bf00      	nop
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr
 8001468:	2000000d 	.word	0x2000000d

0800146c <DMX512_ResetBuffer>:

/**
 * @brief Reset the DMX buffer to 0 (Start Code + 512 channels).
*/
void DMX512_ResetBuffer(void) {
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
    memset(dmx_buffer, 0, DMX_BUFFER_SIZE);
 8001470:	f240 2201 	movw	r2, #513	@ 0x201
 8001474:	2100      	movs	r1, #0
 8001476:	4802      	ldr	r0, [pc, #8]	@ (8001480 <DMX512_ResetBuffer+0x14>)
 8001478:	f004 fd5b 	bl	8005f32 <memset>
}
 800147c:	bf00      	nop
 800147e:	bd80      	pop	{r7, pc}
 8001480:	2000026c 	.word	0x2000026c

08001484 <DMX512_GetBuffer>:
 * @brief Provides a read-only pointer to the entire DMX buffer.
 *
 * @warning Do not modify the buffer directly; use DMX512_SetChannel() instead.
 * @return const uint8_t* Pointer to the DMX buffer (Start Code + 512 channels).
*/
const uint8_t* DMX512_GetBuffer(void) {
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
	return dmx_buffer;
 8001488:	4b02      	ldr	r3, [pc, #8]	@ (8001494 <DMX512_GetBuffer+0x10>)
}
 800148a:	4618      	mov	r0, r3
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr
 8001494:	2000026c 	.word	0x2000026c

08001498 <DMX_TIM_PeriodElapsedCallback>:

/**
 * @brief Timer interrupt callback to mark microsecond delay completion
*/
void DMX_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
    if (htim == dmx_htim) {
 80014a0:	4b09      	ldr	r3, [pc, #36]	@ (80014c8 <DMX_TIM_PeriodElapsedCallback+0x30>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	687a      	ldr	r2, [r7, #4]
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d10a      	bne.n	80014c0 <DMX_TIM_PeriodElapsedCallback+0x28>
        delay_complete = 1; // Mark delay as complete
 80014aa:	4b08      	ldr	r3, [pc, #32]	@ (80014cc <DMX_TIM_PeriodElapsedCallback+0x34>)
 80014ac:	2201      	movs	r2, #1
 80014ae:	701a      	strb	r2, [r3, #0]
        HAL_TIM_Base_Stop_IT(htim); // Stop the timer
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f002 ffaf 	bl	8004414 <HAL_TIM_Base_Stop_IT>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE); // Clear the interrupt flag
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f06f 0201 	mvn.w	r2, #1
 80014be:	611a      	str	r2, [r3, #16]
    }
}
 80014c0:	bf00      	nop
 80014c2:	3708      	adds	r7, #8
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	20000268 	.word	0x20000268
 80014cc:	2000046d 	.word	0x2000046d

080014d0 <DMX_UART_TxCpltCallback>:

/**
 * @brief UART transmission complete callback
*/
void DMX_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
    if (huart == dmx_huart) {
 80014d8:	4b08      	ldr	r3, [pc, #32]	@ (80014fc <DMX_UART_TxCpltCallback+0x2c>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	687a      	ldr	r2, [r7, #4]
 80014de:	429a      	cmp	r2, r3
 80014e0:	d108      	bne.n	80014f4 <DMX_UART_TxCpltCallback+0x24>
        dma_transfer_complete = 1;  // Mark DMA as complete
 80014e2:	4b07      	ldr	r3, [pc, #28]	@ (8001500 <DMX_UART_TxCpltCallback+0x30>)
 80014e4:	2201      	movs	r2, #1
 80014e6:	701a      	strb	r2, [r3, #0]
        HAL_GPIO_WritePin(LED4_GPIO_PORT, LED4_PIN, GPIO_PIN_RESET);
 80014e8:	2200      	movs	r2, #0
 80014ea:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80014ee:	4805      	ldr	r0, [pc, #20]	@ (8001504 <DMX_UART_TxCpltCallback+0x34>)
 80014f0:	f001 fed0 	bl	8003294 <HAL_GPIO_WritePin>
		//DMX_DISABLE_TX();  // Return to receive mode
    }
}
 80014f4:	bf00      	nop
 80014f6:	3708      	adds	r7, #8
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	20000264 	.word	0x20000264
 8001500:	2000000c 	.word	0x2000000c
 8001504:	40020c00 	.word	0x40020c00

08001508 <__io_putchar>:
		#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
	#else
		#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
	#endif // __GNUC__
	PUTCHAR_PROTOTYPE
	{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
		UART_Put(ch);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	b29b      	uxth	r3, r3
 8001514:	4618      	mov	r0, r3
 8001516:	f000 f897 	bl	8001648 <UART_Put>
		return ch;
 800151a:	687b      	ldr	r3, [r7, #4]
	}
 800151c:	4618      	mov	r0, r3
 800151e:	3708      	adds	r7, #8
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}

08001524 <UART_Init>:
#endif

// Initialize UART
void UART_Init(UART_HandleTypeDef *huart) {
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
	#ifdef UART_PRINF_REDIRECTION
		// printf redirection purpose:
		// stdio printf() buffered off. Able to do printf() without \n
		setvbuf(stdout, NULL, _IONBF, 0);
 800152c:	4b0b      	ldr	r3, [pc, #44]	@ (800155c <UART_Init+0x38>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	6898      	ldr	r0, [r3, #8]
 8001532:	2300      	movs	r3, #0
 8001534:	2202      	movs	r2, #2
 8001536:	2100      	movs	r1, #0
 8001538:	f004 fc04 	bl	8005d44 <setvbuf>
	#endif

	#ifdef UART_RX_INTERRUPT
	  // Enable the RX interrupt
	  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	68da      	ldr	r2, [r3, #12]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f042 0220 	orr.w	r2, r2, #32
 800154a:	60da      	str	r2, [r3, #12]
	  __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);

	#endif

	// Save a pointer reference of the UART peripheral handle
	huart_debug = huart;
 800154c:	4a04      	ldr	r2, [pc, #16]	@ (8001560 <UART_Init+0x3c>)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6013      	str	r3, [r2, #0]
}
 8001552:	bf00      	nop
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	20000038 	.word	0x20000038
 8001560:	200004e0 	.word	0x200004e0

08001564 <UART_task>:

// Update new received byte and store it to buffer
void UART_task(void){
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
	uint16_t c;

	// Check if new byte arrived
	if (__HAL_UART_GET_FLAG(huart_debug, UART_FLAG_RXNE) == SET) {
 800156a:	4b1f      	ldr	r3, [pc, #124]	@ (80015e8 <UART_task+0x84>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0320 	and.w	r3, r3, #32
 8001576:	2b20      	cmp	r3, #32
 8001578:	d131      	bne.n	80015de <UART_task+0x7a>
		// Read the received data
		c = (uint8_t)(huart_debug->Instance->DR & 0x0FF);
 800157a:	4b1b      	ldr	r3, [pc, #108]	@ (80015e8 <UART_task+0x84>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	b2db      	uxtb	r3, r3
 8001584:	80fb      	strh	r3, [r7, #6]

		// If there is a string pending to read, then discard new data
		if (UART_isRecived == SET) {
 8001586:	4b19      	ldr	r3, [pc, #100]	@ (80015ec <UART_task+0x88>)
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	b2db      	uxtb	r3, r3
 800158c:	2b01      	cmp	r3, #1
 800158e:	d025      	beq.n	80015dc <UART_task+0x78>
			return;
		}

		// Store the new data to the buffer
		UART_RxBuf[UART_RxPos] = c;
 8001590:	4b17      	ldr	r3, [pc, #92]	@ (80015f0 <UART_task+0x8c>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	b2db      	uxtb	r3, r3
 8001596:	461a      	mov	r2, r3
 8001598:	88fb      	ldrh	r3, [r7, #6]
 800159a:	b2d9      	uxtb	r1, r3
 800159c:	4b15      	ldr	r3, [pc, #84]	@ (80015f4 <UART_task+0x90>)
 800159e:	5499      	strb	r1, [r3, r2]

		// if is a return, '/r' = char(13) then indicates there is a new string
		if (c == 13) {
 80015a0:	88fb      	ldrh	r3, [r7, #6]
 80015a2:	2b0d      	cmp	r3, #13
 80015a4:	d10d      	bne.n	80015c2 <UART_task+0x5e>
			UART_RxBuf[UART_RxPos] = '\0';
 80015a6:	4b12      	ldr	r3, [pc, #72]	@ (80015f0 <UART_task+0x8c>)
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	461a      	mov	r2, r3
 80015ae:	4b11      	ldr	r3, [pc, #68]	@ (80015f4 <UART_task+0x90>)
 80015b0:	2100      	movs	r1, #0
 80015b2:	5499      	strb	r1, [r3, r2]
			UART_isRecived = SET;
 80015b4:	4b0d      	ldr	r3, [pc, #52]	@ (80015ec <UART_task+0x88>)
 80015b6:	2201      	movs	r2, #1
 80015b8:	701a      	strb	r2, [r3, #0]
			UART_RxPos = 0;
 80015ba:	4b0d      	ldr	r3, [pc, #52]	@ (80015f0 <UART_task+0x8c>)
 80015bc:	2200      	movs	r2, #0
 80015be:	701a      	strb	r2, [r3, #0]
 80015c0:	e00d      	b.n	80015de <UART_task+0x7a>
		} else if (UART_RxPos < UART_RX_LEN-1) UART_RxPos++;
 80015c2:	4b0b      	ldr	r3, [pc, #44]	@ (80015f0 <UART_task+0x8c>)
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	2b62      	cmp	r3, #98	@ 0x62
 80015ca:	d808      	bhi.n	80015de <UART_task+0x7a>
 80015cc:	4b08      	ldr	r3, [pc, #32]	@ (80015f0 <UART_task+0x8c>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	3301      	adds	r3, #1
 80015d4:	b2da      	uxtb	r2, r3
 80015d6:	4b06      	ldr	r3, [pc, #24]	@ (80015f0 <UART_task+0x8c>)
 80015d8:	701a      	strb	r2, [r3, #0]
 80015da:	e000      	b.n	80015de <UART_task+0x7a>
			return;
 80015dc:	bf00      	nop
	}
}
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr
 80015e8:	200004e0 	.word	0x200004e0
 80015ec:	20000474 	.word	0x20000474
 80015f0:	200004dc 	.word	0x200004dc
 80015f4:	20000478 	.word	0x20000478

080015f8 <UART_isDataRecived>:

// Check flag if is received data
uint8_t UART_isDataRecived(void) {
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
	return UART_isRecived;
 80015fc:	4b03      	ldr	r3, [pc, #12]	@ (800160c <UART_isDataRecived+0x14>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	b2db      	uxtb	r3, r3
}
 8001602:	4618      	mov	r0, r3
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr
 800160c:	20000474 	.word	0x20000474

08001610 <UART_GetStr>:


// Get string from buffer
uint8_t UART_GetStr(char s[]) {
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
	if (UART_isRecived == RESET) return 0;
 8001618:	4b09      	ldr	r3, [pc, #36]	@ (8001640 <UART_GetStr+0x30>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	b2db      	uxtb	r3, r3
 800161e:	2b00      	cmp	r3, #0
 8001620:	d101      	bne.n	8001626 <UART_GetStr+0x16>
 8001622:	2300      	movs	r3, #0
 8001624:	e007      	b.n	8001636 <UART_GetStr+0x26>
	strcpy(s, (char*)UART_RxBuf);
 8001626:	4907      	ldr	r1, [pc, #28]	@ (8001644 <UART_GetStr+0x34>)
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f004 fcfe 	bl	800602a <strcpy>
	UART_isRecived = RESET;
 800162e:	4b04      	ldr	r3, [pc, #16]	@ (8001640 <UART_GetStr+0x30>)
 8001630:	2200      	movs	r2, #0
 8001632:	701a      	strb	r2, [r3, #0]
	return 1;
 8001634:	2301      	movs	r3, #1
}
 8001636:	4618      	mov	r0, r3
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	20000474 	.word	0x20000474
 8001644:	20000478 	.word	0x20000478

08001648 <UART_Put>:
	}
}


// Put char
void UART_Put(uint16_t d) {
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	4603      	mov	r3, r0
 8001650:	80fb      	strh	r3, [r7, #6]
	// Using registers
	//huart_debug->Instance->DR = (uint8_t)(d & 0xFFU);
	//while(!__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TC));

	// Using the HAL layer:
	if(HAL_UART_Transmit((UART_HandleTypeDef*)huart_debug,(uint8_t*)&d, 1, 100) != HAL_OK)
 8001652:	4b08      	ldr	r3, [pc, #32]	@ (8001674 <UART_Put+0x2c>)
 8001654:	6818      	ldr	r0, [r3, #0]
 8001656:	1db9      	adds	r1, r7, #6
 8001658:	2364      	movs	r3, #100	@ 0x64
 800165a:	2201      	movs	r2, #1
 800165c:	f003 f9ae 	bl	80049bc <HAL_UART_Transmit>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <UART_Put+0x22>
		Error_Handler();
 8001666:	f7ff faab 	bl	8000bc0 <Error_Handler>
}
 800166a:	bf00      	nop
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	200004e0 	.word	0x200004e0

08001678 <BSP_LED_Init>:
  *          This parameter can be one of the following values:
  *     @arg LEDx
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b08c      	sub	sp, #48	@ 0x30
 800167c:	af00      	add	r7, sp, #0
 800167e:	4603      	mov	r3, r0
 8001680:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8001682:	f107 031c 	add.w	r3, r7, #28
 8001686:	2200      	movs	r2, #0
 8001688:	601a      	str	r2, [r3, #0]
 800168a:	605a      	str	r2, [r3, #4]
 800168c:	609a      	str	r2, [r3, #8]
 800168e:	60da      	str	r2, [r3, #12]
 8001690:	611a      	str	r2, [r3, #16]

  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8001692:	79fb      	ldrb	r3, [r7, #7]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d10e      	bne.n	80016b6 <BSP_LED_Init+0x3e>
 8001698:	2300      	movs	r3, #0
 800169a:	61bb      	str	r3, [r7, #24]
 800169c:	4b33      	ldr	r3, [pc, #204]	@ (800176c <BSP_LED_Init+0xf4>)
 800169e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a0:	4a32      	ldr	r2, [pc, #200]	@ (800176c <BSP_LED_Init+0xf4>)
 80016a2:	f043 0308 	orr.w	r3, r3, #8
 80016a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80016a8:	4b30      	ldr	r3, [pc, #192]	@ (800176c <BSP_LED_Init+0xf4>)
 80016aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ac:	f003 0308 	and.w	r3, r3, #8
 80016b0:	61bb      	str	r3, [r7, #24]
 80016b2:	69bb      	ldr	r3, [r7, #24]
 80016b4:	e034      	b.n	8001720 <BSP_LED_Init+0xa8>
 80016b6:	79fb      	ldrb	r3, [r7, #7]
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d10e      	bne.n	80016da <BSP_LED_Init+0x62>
 80016bc:	2300      	movs	r3, #0
 80016be:	617b      	str	r3, [r7, #20]
 80016c0:	4b2a      	ldr	r3, [pc, #168]	@ (800176c <BSP_LED_Init+0xf4>)
 80016c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c4:	4a29      	ldr	r2, [pc, #164]	@ (800176c <BSP_LED_Init+0xf4>)
 80016c6:	f043 0308 	orr.w	r3, r3, #8
 80016ca:	6313      	str	r3, [r2, #48]	@ 0x30
 80016cc:	4b27      	ldr	r3, [pc, #156]	@ (800176c <BSP_LED_Init+0xf4>)
 80016ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d0:	f003 0308 	and.w	r3, r3, #8
 80016d4:	617b      	str	r3, [r7, #20]
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	e022      	b.n	8001720 <BSP_LED_Init+0xa8>
 80016da:	79fb      	ldrb	r3, [r7, #7]
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d10e      	bne.n	80016fe <BSP_LED_Init+0x86>
 80016e0:	2300      	movs	r3, #0
 80016e2:	613b      	str	r3, [r7, #16]
 80016e4:	4b21      	ldr	r3, [pc, #132]	@ (800176c <BSP_LED_Init+0xf4>)
 80016e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e8:	4a20      	ldr	r2, [pc, #128]	@ (800176c <BSP_LED_Init+0xf4>)
 80016ea:	f043 0308 	orr.w	r3, r3, #8
 80016ee:	6313      	str	r3, [r2, #48]	@ 0x30
 80016f0:	4b1e      	ldr	r3, [pc, #120]	@ (800176c <BSP_LED_Init+0xf4>)
 80016f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f4:	f003 0308 	and.w	r3, r3, #8
 80016f8:	613b      	str	r3, [r7, #16]
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	e010      	b.n	8001720 <BSP_LED_Init+0xa8>
 80016fe:	79fb      	ldrb	r3, [r7, #7]
 8001700:	2b03      	cmp	r3, #3
 8001702:	d10d      	bne.n	8001720 <BSP_LED_Init+0xa8>
 8001704:	2300      	movs	r3, #0
 8001706:	60fb      	str	r3, [r7, #12]
 8001708:	4b18      	ldr	r3, [pc, #96]	@ (800176c <BSP_LED_Init+0xf4>)
 800170a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800170c:	4a17      	ldr	r2, [pc, #92]	@ (800176c <BSP_LED_Init+0xf4>)
 800170e:	f043 0308 	orr.w	r3, r3, #8
 8001712:	6313      	str	r3, [r2, #48]	@ 0x30
 8001714:	4b15      	ldr	r3, [pc, #84]	@ (800176c <BSP_LED_Init+0xf4>)
 8001716:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001718:	f003 0308 	and.w	r3, r3, #8
 800171c:	60fb      	str	r3, [r7, #12]
 800171e:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Led];
 8001720:	79fb      	ldrb	r3, [r7, #7]
 8001722:	4a13      	ldr	r2, [pc, #76]	@ (8001770 <BSP_LED_Init+0xf8>)
 8001724:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001728:	61fb      	str	r3, [r7, #28]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 800172a:	2301      	movs	r3, #1
 800172c:	623b      	str	r3, [r7, #32]
  gpioinitstruct.Pull = GPIO_NOPULL;
 800172e:	2300      	movs	r3, #0
 8001730:	627b      	str	r3, [r7, #36]	@ 0x24
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001732:	2302      	movs	r3, #2
 8001734:	62bb      	str	r3, [r7, #40]	@ 0x28

  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 8001736:	79fb      	ldrb	r3, [r7, #7]
 8001738:	4a0e      	ldr	r2, [pc, #56]	@ (8001774 <BSP_LED_Init+0xfc>)
 800173a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800173e:	f107 021c 	add.w	r2, r7, #28
 8001742:	4611      	mov	r1, r2
 8001744:	4618      	mov	r0, r3
 8001746:	f001 faf5 	bl	8002d34 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 800174a:	79fb      	ldrb	r3, [r7, #7]
 800174c:	4a09      	ldr	r2, [pc, #36]	@ (8001774 <BSP_LED_Init+0xfc>)
 800174e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001752:	79fb      	ldrb	r3, [r7, #7]
 8001754:	4a06      	ldr	r2, [pc, #24]	@ (8001770 <BSP_LED_Init+0xf8>)
 8001756:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800175a:	2200      	movs	r2, #0
 800175c:	4619      	mov	r1, r3
 800175e:	f001 fd99 	bl	8003294 <HAL_GPIO_WritePin>
}
 8001762:	bf00      	nop
 8001764:	3730      	adds	r7, #48	@ 0x30
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40023800 	.word	0x40023800
 8001770:	08006c20 	.word	0x08006c20
 8001774:	20000010 	.word	0x20000010

08001778 <BSP_LED_Init_All>:
}



// Initialization of ALL LEDS
void BSP_LED_Init_All(void) {
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i=0; i<LEDn;i++) BSP_LED_Init(i);
 800177e:	2300      	movs	r3, #0
 8001780:	71fb      	strb	r3, [r7, #7]
 8001782:	e006      	b.n	8001792 <BSP_LED_Init_All+0x1a>
 8001784:	79fb      	ldrb	r3, [r7, #7]
 8001786:	4618      	mov	r0, r3
 8001788:	f7ff ff76 	bl	8001678 <BSP_LED_Init>
 800178c:	79fb      	ldrb	r3, [r7, #7]
 800178e:	3301      	adds	r3, #1
 8001790:	71fb      	strb	r3, [r7, #7]
 8001792:	79fb      	ldrb	r3, [r7, #7]
 8001794:	2b03      	cmp	r3, #3
 8001796:	d9f5      	bls.n	8001784 <BSP_LED_Init_All+0xc>

}
 8001798:	bf00      	nop
 800179a:	bf00      	nop
 800179c:	3708      	adds	r7, #8
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
	...

080017a4 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b088      	sub	sp, #32
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	4603      	mov	r3, r0
 80017ac:	460a      	mov	r2, r1
 80017ae:	71fb      	strb	r3, [r7, #7]
 80017b0:	4613      	mov	r3, r2
 80017b2:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpioinitstruct = {0};
 80017b4:	f107 030c 	add.w	r3, r7, #12
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	605a      	str	r2, [r3, #4]
 80017be:	609a      	str	r2, [r3, #8]
 80017c0:	60da      	str	r2, [r3, #12]
 80017c2:	611a      	str	r2, [r3, #16]

  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 80017c4:	79fb      	ldrb	r3, [r7, #7]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d10d      	bne.n	80017e6 <BSP_PB_Init+0x42>
 80017ca:	2300      	movs	r3, #0
 80017cc:	60bb      	str	r3, [r7, #8]
 80017ce:	4b24      	ldr	r3, [pc, #144]	@ (8001860 <BSP_PB_Init+0xbc>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d2:	4a23      	ldr	r2, [pc, #140]	@ (8001860 <BSP_PB_Init+0xbc>)
 80017d4:	f043 0301 	orr.w	r3, r3, #1
 80017d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017da:	4b21      	ldr	r3, [pc, #132]	@ (8001860 <BSP_PB_Init+0xbc>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	60bb      	str	r3, [r7, #8]
 80017e4:	68bb      	ldr	r3, [r7, #8]

  if(ButtonMode == BUTTON_MODE_GPIO)
 80017e6:	79bb      	ldrb	r3, [r7, #6]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d114      	bne.n	8001816 <BSP_PB_Init+0x72>
  {
    /* Configure Button pin as input */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 80017ec:	2301      	movs	r3, #1
 80017ee:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Mode = GPIO_MODE_INPUT;
 80017f0:	2300      	movs	r3, #0
 80017f2:	613b      	str	r3, [r7, #16]
    gpioinitstruct.Pull = GPIO_NOPULL;
 80017f4:	2300      	movs	r3, #0
 80017f6:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017f8:	2302      	movs	r3, #2
 80017fa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 80017fc:	79fb      	ldrb	r3, [r7, #7]
 80017fe:	4a19      	ldr	r2, [pc, #100]	@ (8001864 <BSP_PB_Init+0xc0>)
 8001800:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001804:	f107 020c 	add.w	r2, r7, #12
 8001808:	4611      	mov	r1, r2
 800180a:	4618      	mov	r0, r3
 800180c:	f001 fa92 	bl	8002d34 <HAL_GPIO_Init>

    /* Wait Button pin startup stability */
    HAL_Delay(1);
 8001810:	2001      	movs	r0, #1
 8001812:	f000 fd57 	bl	80022c4 <HAL_Delay>
  }

  if(ButtonMode == BUTTON_MODE_EXTI)
 8001816:	79bb      	ldrb	r3, [r7, #6]
 8001818:	2b01      	cmp	r3, #1
 800181a:	d11c      	bne.n	8001856 <BSP_PB_Init+0xb2>
  {
    /* Configure Button pin as input with External interrupt */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 800181c:	2301      	movs	r3, #1
 800181e:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Pull = GPIO_NOPULL;
 8001820:	2300      	movs	r3, #0
 8001822:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Mode = GPIO_MODE_IT_RISING;
 8001824:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001828:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 800182a:	79fb      	ldrb	r3, [r7, #7]
 800182c:	4a0d      	ldr	r2, [pc, #52]	@ (8001864 <BSP_PB_Init+0xc0>)
 800182e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001832:	f107 020c 	add.w	r2, r7, #12
 8001836:	4611      	mov	r1, r2
 8001838:	4618      	mov	r0, r3
 800183a:	f001 fa7b 	bl	8002d34 <HAL_GPIO_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 800183e:	2306      	movs	r3, #6
 8001840:	b25b      	sxtb	r3, r3
 8001842:	2200      	movs	r2, #0
 8001844:	210f      	movs	r1, #15
 8001846:	4618      	mov	r0, r3
 8001848:	f000 fe3b 	bl	80024c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 800184c:	2306      	movs	r3, #6
 800184e:	b25b      	sxtb	r3, r3
 8001850:	4618      	mov	r0, r3
 8001852:	f000 fe52 	bl	80024fa <HAL_NVIC_EnableIRQ>
  }
}
 8001856:	bf00      	nop
 8001858:	3720      	adds	r7, #32
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	40023800 	.word	0x40023800
 8001864:	20000020 	.word	0x20000020

08001868 <NRF24_Init>:
static void NRF24_SPI_Error(void);
static void NRF24_SPI_Init(void);


// Initialization
uint8_t NRF24_Init(SPI_HandleTypeDef *hspi) {
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
	uint8_t result, i;

	// SPI handle link
	hspi_nrf = hspi;
 8001870:	4a14      	ldr	r2, [pc, #80]	@ (80018c4 <NRF24_Init+0x5c>)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6013      	str	r3, [r2, #0]

	NRF24_SPI_Init();
 8001876:	f000 fb31 	bl	8001edc <NRF24_SPI_Init>

	// Initialize RX flag variables
	for (i=0; i<NRF24_NUM_PIPES; i++) {
 800187a:	2300      	movs	r3, #0
 800187c:	73fb      	strb	r3, [r7, #15]
 800187e:	e006      	b.n	800188e <NRF24_Init+0x26>
		NRF24_isRecivedData[i] = RESET; // No received data at start
 8001880:	7bfb      	ldrb	r3, [r7, #15]
 8001882:	4a11      	ldr	r2, [pc, #68]	@ (80018c8 <NRF24_Init+0x60>)
 8001884:	2100      	movs	r1, #0
 8001886:	54d1      	strb	r1, [r2, r3]
	for (i=0; i<NRF24_NUM_PIPES; i++) {
 8001888:	7bfb      	ldrb	r3, [r7, #15]
 800188a:	3301      	adds	r3, #1
 800188c:	73fb      	strb	r3, [r7, #15]
 800188e:	7bfb      	ldrb	r3, [r7, #15]
 8001890:	2b05      	cmp	r3, #5
 8001892:	d9f5      	bls.n	8001880 <NRF24_Init+0x18>
	}

	// Default Initial Mode
	NRF24_currentMode = NRF24_MODE_POWERDOWN;
 8001894:	4b0d      	ldr	r3, [pc, #52]	@ (80018cc <NRF24_Init+0x64>)
 8001896:	2203      	movs	r2, #3
 8001898:	701a      	strb	r2, [r3, #0]

	// Save options for configuration register
	NRF24_confOptions = NRF24_CONFIG_OPT;
 800189a:	4b0d      	ldr	r3, [pc, #52]	@ (80018d0 <NRF24_Init+0x68>)
 800189c:	2238      	movs	r2, #56	@ 0x38
 800189e:	701a      	strb	r2, [r3, #0]
#ifndef NRF24_RX_IRQ_MODE
	NRF24_confOptions |= (1<<MASK_RX_DR); // Disable RX IRQ Generation
#endif

	// Chip Not active: CE Low
	NRF24_CE(0);
 80018a0:	2200      	movs	r2, #0
 80018a2:	2110      	movs	r1, #16
 80018a4:	480b      	ldr	r0, [pc, #44]	@ (80018d4 <NRF24_Init+0x6c>)
 80018a6:	f001 fcf5 	bl	8003294 <HAL_GPIO_WritePin>

	// Time for assure the module is internally initialized
	HAL_Delay(100);
 80018aa:	2064      	movs	r0, #100	@ 0x64
 80018ac:	f000 fd0a 	bl	80022c4 <HAL_Delay>

	// nRF24L01 Configuration
	result = NRF24_Config();
 80018b0:	f000 f812 	bl	80018d8 <NRF24_Config>
 80018b4:	4603      	mov	r3, r0
 80018b6:	73bb      	strb	r3, [r7, #14]

	return result;
 80018b8:	7bbb      	ldrb	r3, [r7, #14]

}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3710      	adds	r7, #16
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	200004e4 	.word	0x200004e4
 80018c8:	200005a8 	.word	0x200005a8
 80018cc:	200005ae 	.word	0x200005ae
 80018d0:	200005af 	.word	0x200005af
 80018d4:	40020000 	.word	0x40020000

080018d8 <NRF24_Config>:

// General NRF24L01 Configuration
// Sets the main registers in the NRF24 module and powers the module in receiving mode
uint8_t NRF24_Config(void) {
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
	uint8_t ch;

	NRF24_Mode(NRF24_MODE_STANDBYI);
 80018de:	2002      	movs	r0, #2
 80018e0:	f000 f8cc 	bl	8001a7c <NRF24_Mode>

	// Disable all RX pipes (configure it by specific function)
	NRF24_WriteCMD(CMD_W_REG | REG_EN_RXADDR, 0x00); // PIPE0-5 PRX=OFF
 80018e4:	2100      	movs	r1, #0
 80018e6:	2022      	movs	r0, #34	@ 0x22
 80018e8:	f000 fa10 	bl	8001d0c <NRF24_WriteCMD>
	NRF24_WriteCMD(CMD_W_REG | REG_EN_AA, 0x00);     // Disable PIPE0-5 AutoACK=0
 80018ec:	2100      	movs	r1, #0
 80018ee:	2021      	movs	r0, #33	@ 0x21
 80018f0:	f000 fa0c 	bl	8001d0c <NRF24_WriteCMD>

	// General configuration
	NRF24_WriteCMD(CMD_W_REG | REG_SETUP_AW, (NRF24_ADR_WIDTH-2));			// TX/RX address size = 0x03 (0b11) = 5 bytes (have to subtract 2).
 80018f4:	2103      	movs	r1, #3
 80018f6:	2023      	movs	r0, #35	@ 0x23
 80018f8:	f000 fa08 	bl	8001d0c <NRF24_WriteCMD>
	NRF24_WriteCMD(CMD_W_REG | REG_RF_CH, NRF24_CH);    	            	// Select the RF frequency = 2400+40 Mhz.
 80018fc:	2128      	movs	r1, #40	@ 0x28
 80018fe:	2025      	movs	r0, #37	@ 0x25
 8001900:	f000 fa04 	bl	8001d0c <NRF24_WriteCMD>
	NRF24_WriteCMD(CMD_W_REG | REG_RF_SETUP, 0x02 /*0x26*/);    			// 0x26: 250kBps (bit 3 off and 5 on), TX max PWR = 0 dBm (bit 1 and 2 on), LNA (Low Noise Amplifier) Off (bit 0 off)
 8001904:	2102      	movs	r1, #2
 8001906:	2026      	movs	r0, #38	@ 0x26
 8001908:	f000 fa00 	bl	8001d0c <NRF24_WriteCMD>
																			// The LNA gain makes it possible to reduce the current consumption in RX
																			// mode with 0.8mA at the cost of 1.5dB reduction in receiver sensitivity.
	NRF24_WriteCMD(CMD_W_REG | REG_SETUP_RETR, 0x10 | NRF24_NUM_RETRANS);	// Time between retransmissions = 500us, Max. retransmission = 15 times
 800190c:	211f      	movs	r1, #31
 800190e:	2024      	movs	r0, #36	@ 0x24
 8001910:	f000 f9fc 	bl	8001d0c <NRF24_WriteCMD>


	// Check if SPI is working fine
	ch = NRF24_ReadCMD(CMD_R_REG | REG_RF_CH);
 8001914:	2005      	movs	r0, #5
 8001916:	f000 fa1d 	bl	8001d54 <NRF24_ReadCMD>
 800191a:	4603      	mov	r3, r0
 800191c:	71fb      	strb	r3, [r7, #7]
	if (ch != NRF24_CH) {
 800191e:	79fb      	ldrb	r3, [r7, #7]
 8001920:	2b28      	cmp	r3, #40	@ 0x28
 8001922:	d001      	beq.n	8001928 <NRF24_Config+0x50>
		return NRF24_ERROR;
 8001924:	2302      	movs	r3, #2
 8001926:	e015      	b.n	8001954 <NRF24_Config+0x7c>
	}

	// Clear the FIFO buffers and flags
	NRF24_WriteByte(CMD_FLUSH_TX); // This command doesn't need a data byte
 8001928:	20e1      	movs	r0, #225	@ 0xe1
 800192a:	f000 faaf 	bl	8001e8c <NRF24_WriteByte>
	NRF24_WriteByte(CMD_FLUSH_RX); // This command doesn't need a data byte
 800192e:	20e2      	movs	r0, #226	@ 0xe2
 8001930:	f000 faac 	bl	8001e8c <NRF24_WriteByte>

	// IRQ flag clean
	NRF24_WriteCMD(CMD_W_REG | REG_STATUS, (1<<RX_DR));
 8001934:	2140      	movs	r1, #64	@ 0x40
 8001936:	2027      	movs	r0, #39	@ 0x27
 8001938:	f000 f9e8 	bl	8001d0c <NRF24_WriteCMD>
	NRF24_WriteCMD(CMD_W_REG | REG_STATUS, (1<<TX_DS));
 800193c:	2120      	movs	r1, #32
 800193e:	2027      	movs	r0, #39	@ 0x27
 8001940:	f000 f9e4 	bl	8001d0c <NRF24_WriteCMD>
	NRF24_WriteCMD(CMD_W_REG | REG_STATUS, (1<<MAX_RT));
 8001944:	2110      	movs	r1, #16
 8001946:	2027      	movs	r0, #39	@ 0x27
 8001948:	f000 f9e0 	bl	8001d0c <NRF24_WriteCMD>


	// Enable Chip => Ready to receive data
	NRF24_Mode(NRF24_MODE_RX);
 800194c:	2000      	movs	r0, #0
 800194e:	f000 f895 	bl	8001a7c <NRF24_Mode>

	return NRF24_SUCCESS;
 8001952:	2300      	movs	r3, #0
}
 8001954:	4618      	mov	r0, r3
 8001956:	3708      	adds	r7, #8
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}

0800195c <NRF24_EnablePipeRX>:


uint8_t NRF24_EnablePipeRX(NR24Pipe_TypeDef pipe, uint8_t *rxAddr) {
 800195c:	b580      	push	{r7, lr}
 800195e:	b088      	sub	sp, #32
 8001960:	af00      	add	r7, sp, #0
 8001962:	4603      	mov	r3, r0
 8001964:	6039      	str	r1, [r7, #0]
 8001966:	71fb      	strb	r3, [r7, #7]
	uint8_t previousMode;
	uint8_t value;
	uint8_t data[NRF24_ADR_WIDTH];
	uint8_t REG_PLOAD_WIDTH[NRF24_NUM_PIPES]= {REG_RX_PW_P0, REG_RX_PW_P1, REG_RX_PW_P2, \
 8001968:	4a3c      	ldr	r2, [pc, #240]	@ (8001a5c <NRF24_EnablePipeRX+0x100>)
 800196a:	f107 0310 	add.w	r3, r7, #16
 800196e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001972:	6018      	str	r0, [r3, #0]
 8001974:	3304      	adds	r3, #4
 8001976:	8019      	strh	r1, [r3, #0]
											   REG_RX_PW_P3, REG_RX_PW_P4, REG_RX_PW_P5};

	uint8_t REG_RX_ADDR[NRF24_NUM_PIPES]= {REG_RX_ADDR_P0, REG_RX_ADDR_P1, REG_RX_ADDR_P2, \
 8001978:	4a39      	ldr	r2, [pc, #228]	@ (8001a60 <NRF24_EnablePipeRX+0x104>)
 800197a:	f107 0308 	add.w	r3, r7, #8
 800197e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001982:	6018      	str	r0, [r3, #0]
 8001984:	3304      	adds	r3, #4
 8001986:	8019      	strh	r1, [r3, #0]
										   REG_RX_ADDR_P3, REG_RX_ADDR_P4, REG_RX_ADDR_P5};

	// Get the current Mode
	previousMode = NRF24_GetMode();
 8001988:	f000 f86c 	bl	8001a64 <NRF24_GetMode>
 800198c:	4603      	mov	r3, r0
 800198e:	77fb      	strb	r3, [r7, #31]

	// Standby-I Mode
	NRF24_Mode(NRF24_MODE_STANDBYI);
 8001990:	2002      	movs	r0, #2
 8001992:	f000 f873 	bl	8001a7c <NRF24_Mode>


	// Enable the selected pipe
	value = NRF24_ReadCMD(CMD_R_REG | REG_EN_RXADDR);
 8001996:	2002      	movs	r0, #2
 8001998:	f000 f9dc 	bl	8001d54 <NRF24_ReadCMD>
 800199c:	4603      	mov	r3, r0
 800199e:	77bb      	strb	r3, [r7, #30]
	NRF24_WriteCMD(CMD_W_REG | REG_EN_RXADDR, value | (1<<pipe));
 80019a0:	79fb      	ldrb	r3, [r7, #7]
 80019a2:	2201      	movs	r2, #1
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	b25a      	sxtb	r2, r3
 80019aa:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	b25b      	sxtb	r3, r3
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	4619      	mov	r1, r3
 80019b6:	2022      	movs	r0, #34	@ 0x22
 80019b8:	f000 f9a8 	bl	8001d0c <NRF24_WriteCMD>
	// Enable AutoACK for the selected pipe
//	value = NRF24_ReadCMD(CMD_R_REG | REG_EN_AA);
//	NRF24_WriteCMD(CMD_W_REG | REG_EN_AA, value | (1<<pipe));

	// Set the PayLoad length
	NRF24_WriteCMD(CMD_W_REG | REG_PLOAD_WIDTH[pipe], NRF24_PLOAD_WIDTH);
 80019bc:	79fb      	ldrb	r3, [r7, #7]
 80019be:	3320      	adds	r3, #32
 80019c0:	443b      	add	r3, r7
 80019c2:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80019c6:	f043 0320 	orr.w	r3, r3, #32
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	2120      	movs	r1, #32
 80019ce:	4618      	mov	r0, r3
 80019d0:	f000 f99c 	bl	8001d0c <NRF24_WriteCMD>

	// Configure the address
	if (pipe == NRF24_PIPE0 || pipe == NRF24_PIPE1) {
 80019d4:	79fb      	ldrb	r3, [r7, #7]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d002      	beq.n	80019e0 <NRF24_EnablePipeRX+0x84>
 80019da:	79fb      	ldrb	r3, [r7, #7]
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d10d      	bne.n	80019fc <NRF24_EnablePipeRX+0xa0>
		// Write complete 5-byte addr
		NRF24_WriteLargeCMD(CMD_W_REG | REG_RX_ADDR[pipe], rxAddr, NRF24_ADR_WIDTH);
 80019e0:	79fb      	ldrb	r3, [r7, #7]
 80019e2:	3320      	adds	r3, #32
 80019e4:	443b      	add	r3, r7
 80019e6:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80019ea:	f043 0320 	orr.w	r3, r3, #32
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	2205      	movs	r2, #5
 80019f2:	6839      	ldr	r1, [r7, #0]
 80019f4:	4618      	mov	r0, r3
 80019f6:	f000 f9cd 	bl	8001d94 <NRF24_WriteLargeCMD>
 80019fa:	e026      	b.n	8001a4a <NRF24_EnablePipeRX+0xee>

	} else {
		// Update the 4 last bytes of addr P1 (Warning! it changes also the 4 last bytes of P1, P2, P3, P4, P5)
		// 4 last addr bytes of P1, P2, P3, P4, P5 must be the same
		NRF24_ReadLargeCMD(CMD_R_REG | REG_RX_ADDR_P1, data, NRF24_ADR_WIDTH);
 80019fc:	f107 0318 	add.w	r3, r7, #24
 8001a00:	2205      	movs	r2, #5
 8001a02:	4619      	mov	r1, r3
 8001a04:	200b      	movs	r0, #11
 8001a06:	f000 f9f5 	bl	8001df4 <NRF24_ReadLargeCMD>
		data[1] = rxAddr[1];
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	785b      	ldrb	r3, [r3, #1]
 8001a0e:	767b      	strb	r3, [r7, #25]
		data[2] = rxAddr[2];
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	789b      	ldrb	r3, [r3, #2]
 8001a14:	76bb      	strb	r3, [r7, #26]
		data[3] = rxAddr[3];
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	78db      	ldrb	r3, [r3, #3]
 8001a1a:	76fb      	strb	r3, [r7, #27]
		data[4] = rxAddr[4];
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	791b      	ldrb	r3, [r3, #4]
 8001a20:	773b      	strb	r3, [r7, #28]
		NRF24_WriteLargeCMD(CMD_W_REG | REG_RX_ADDR_P1, data, NRF24_ADR_WIDTH);
 8001a22:	f107 0318 	add.w	r3, r7, #24
 8001a26:	2205      	movs	r2, #5
 8001a28:	4619      	mov	r1, r3
 8001a2a:	202b      	movs	r0, #43	@ 0x2b
 8001a2c:	f000 f9b2 	bl	8001d94 <NRF24_WriteLargeCMD>


		// Store the first addr byte
		NRF24_WriteLargeCMD(CMD_W_REG | REG_RX_ADDR[pipe], &rxAddr[0], 1);
 8001a30:	79fb      	ldrb	r3, [r7, #7]
 8001a32:	3320      	adds	r3, #32
 8001a34:	443b      	add	r3, r7
 8001a36:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001a3a:	f043 0320 	orr.w	r3, r3, #32
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	2201      	movs	r2, #1
 8001a42:	6839      	ldr	r1, [r7, #0]
 8001a44:	4618      	mov	r0, r3
 8001a46:	f000 f9a5 	bl	8001d94 <NRF24_WriteLargeCMD>

	}

	// Go to previous mode
	NRF24_Mode(previousMode);
 8001a4a:	7ffb      	ldrb	r3, [r7, #31]
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f000 f815 	bl	8001a7c <NRF24_Mode>

	return NRF24_SUCCESS;
 8001a52:	2300      	movs	r3, #0
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3720      	adds	r7, #32
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	08006bf8 	.word	0x08006bf8
 8001a60:	08006c00 	.word	0x08006c00

08001a64 <NRF24_GetMode>:

	return NRF24_SUCCESS;
}


NR24Mode_TypeDef NRF24_GetMode(void) {
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
	return NRF24_currentMode;
 8001a68:	4b03      	ldr	r3, [pc, #12]	@ (8001a78 <NRF24_GetMode+0x14>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	200005ae 	.word	0x200005ae

08001a7c <NRF24_Mode>:

void NRF24_Mode(NR24Mode_TypeDef mode) {
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	4603      	mov	r3, r0
 8001a84:	71fb      	strb	r3, [r7, #7]

	if (NRF24_currentMode != mode) {
 8001a86:	4b41      	ldr	r3, [pc, #260]	@ (8001b8c <NRF24_Mode+0x110>)
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	79fa      	ldrb	r2, [r7, #7]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d079      	beq.n	8001b84 <NRF24_Mode+0x108>

		switch (mode) {
 8001a90:	79fb      	ldrb	r3, [r7, #7]
 8001a92:	2b03      	cmp	r3, #3
 8001a94:	d873      	bhi.n	8001b7e <NRF24_Mode+0x102>
 8001a96:	a201      	add	r2, pc, #4	@ (adr r2, 8001a9c <NRF24_Mode+0x20>)
 8001a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a9c:	08001af1 	.word	0x08001af1
 8001aa0:	08001b37 	.word	0x08001b37
 8001aa4:	08001ac5 	.word	0x08001ac5
 8001aa8:	08001aad 	.word	0x08001aad

			// Power down mode
			case NRF24_MODE_POWERDOWN:
				NRF24_CE(0);
 8001aac:	2200      	movs	r2, #0
 8001aae:	2110      	movs	r1, #16
 8001ab0:	4837      	ldr	r0, [pc, #220]	@ (8001b90 <NRF24_Mode+0x114>)
 8001ab2:	f001 fbef 	bl	8003294 <HAL_GPIO_WritePin>
				NRF24_WriteCMD(CMD_W_REG | REG_CONFIG, NRF24_confOptions |  (0<<PWR_UP) | (0<<PRIM_RX));
 8001ab6:	4b37      	ldr	r3, [pc, #220]	@ (8001b94 <NRF24_Mode+0x118>)
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	4619      	mov	r1, r3
 8001abc:	2020      	movs	r0, #32
 8001abe:	f000 f925 	bl	8001d0c <NRF24_WriteCMD>
				break;
 8001ac2:	e05c      	b.n	8001b7e <NRF24_Mode+0x102>

			// Standby-I mode
			case NRF24_MODE_STANDBYI:
				NRF24_CE(0);
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	2110      	movs	r1, #16
 8001ac8:	4831      	ldr	r0, [pc, #196]	@ (8001b90 <NRF24_Mode+0x114>)
 8001aca:	f001 fbe3 	bl	8003294 <HAL_GPIO_WritePin>

				if (NRF24_currentMode == NRF24_MODE_POWERDOWN){
 8001ace:	4b2f      	ldr	r3, [pc, #188]	@ (8001b8c <NRF24_Mode+0x110>)
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	2b03      	cmp	r3, #3
 8001ad4:	d152      	bne.n	8001b7c <NRF24_Mode+0x100>
					NRF24_WriteCMD(CMD_W_REG | REG_CONFIG, NRF24_confOptions |  (1<<PWR_UP) | (0<<PRIM_RX));
 8001ad6:	4b2f      	ldr	r3, [pc, #188]	@ (8001b94 <NRF24_Mode+0x118>)
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	f043 0302 	orr.w	r3, r3, #2
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	2020      	movs	r0, #32
 8001ae4:	f000 f912 	bl	8001d0c <NRF24_WriteCMD>
					HAL_Delay(2);
 8001ae8:	2002      	movs	r0, #2
 8001aea:	f000 fbeb 	bl	80022c4 <HAL_Delay>
				}
				break;
 8001aee:	e045      	b.n	8001b7c <NRF24_Mode+0x100>

			// RX mode
			case NRF24_MODE_RX:
				if (NRF24_currentMode != NRF24_MODE_POWERDOWN && NRF24_currentMode != NRF24_MODE_STANDBYI) {
 8001af0:	4b26      	ldr	r3, [pc, #152]	@ (8001b8c <NRF24_Mode+0x110>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	2b03      	cmp	r3, #3
 8001af6:	d008      	beq.n	8001b0a <NRF24_Mode+0x8e>
 8001af8:	4b24      	ldr	r3, [pc, #144]	@ (8001b8c <NRF24_Mode+0x110>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	d004      	beq.n	8001b0a <NRF24_Mode+0x8e>
					NRF24_CE(0);
 8001b00:	2200      	movs	r2, #0
 8001b02:	2110      	movs	r1, #16
 8001b04:	4822      	ldr	r0, [pc, #136]	@ (8001b90 <NRF24_Mode+0x114>)
 8001b06:	f001 fbc5 	bl	8003294 <HAL_GPIO_WritePin>
				}

				NRF24_WriteCMD(CMD_W_REG | REG_CONFIG, NRF24_confOptions |  (1<<PWR_UP) | (1<<PRIM_RX));
 8001b0a:	4b22      	ldr	r3, [pc, #136]	@ (8001b94 <NRF24_Mode+0x118>)
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	f043 0303 	orr.w	r3, r3, #3
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	4619      	mov	r1, r3
 8001b16:	2020      	movs	r0, #32
 8001b18:	f000 f8f8 	bl	8001d0c <NRF24_WriteCMD>

				if (NRF24_currentMode == NRF24_MODE_POWERDOWN) {
 8001b1c:	4b1b      	ldr	r3, [pc, #108]	@ (8001b8c <NRF24_Mode+0x110>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	2b03      	cmp	r3, #3
 8001b22:	d102      	bne.n	8001b2a <NRF24_Mode+0xae>
					HAL_Delay(5); // Wait some time to wake up from power down
 8001b24:	2005      	movs	r0, #5
 8001b26:	f000 fbcd 	bl	80022c4 <HAL_Delay>
				}

				NRF24_CE(1);
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	2110      	movs	r1, #16
 8001b2e:	4818      	ldr	r0, [pc, #96]	@ (8001b90 <NRF24_Mode+0x114>)
 8001b30:	f001 fbb0 	bl	8003294 <HAL_GPIO_WritePin>
				break;
 8001b34:	e023      	b.n	8001b7e <NRF24_Mode+0x102>

			// TX mode
			case NRF24_MODE_TX:

				if (NRF24_currentMode != NRF24_MODE_POWERDOWN && NRF24_currentMode != NRF24_MODE_STANDBYI) {
 8001b36:	4b15      	ldr	r3, [pc, #84]	@ (8001b8c <NRF24_Mode+0x110>)
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	2b03      	cmp	r3, #3
 8001b3c:	d008      	beq.n	8001b50 <NRF24_Mode+0xd4>
 8001b3e:	4b13      	ldr	r3, [pc, #76]	@ (8001b8c <NRF24_Mode+0x110>)
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d004      	beq.n	8001b50 <NRF24_Mode+0xd4>
					NRF24_CE(0);
 8001b46:	2200      	movs	r2, #0
 8001b48:	2110      	movs	r1, #16
 8001b4a:	4811      	ldr	r0, [pc, #68]	@ (8001b90 <NRF24_Mode+0x114>)
 8001b4c:	f001 fba2 	bl	8003294 <HAL_GPIO_WritePin>
				}

				NRF24_WriteCMD(CMD_W_REG | REG_CONFIG, NRF24_confOptions |  (1<<PWR_UP) | (0<<PRIM_RX));
 8001b50:	4b10      	ldr	r3, [pc, #64]	@ (8001b94 <NRF24_Mode+0x118>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	f043 0302 	orr.w	r3, r3, #2
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	2020      	movs	r0, #32
 8001b5e:	f000 f8d5 	bl	8001d0c <NRF24_WriteCMD>

				if (NRF24_currentMode == NRF24_MODE_POWERDOWN) {
 8001b62:	4b0a      	ldr	r3, [pc, #40]	@ (8001b8c <NRF24_Mode+0x110>)
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	2b03      	cmp	r3, #3
 8001b68:	d102      	bne.n	8001b70 <NRF24_Mode+0xf4>
					HAL_Delay(5); // Wait some time to wake up from power down
 8001b6a:	2005      	movs	r0, #5
 8001b6c:	f000 fbaa 	bl	80022c4 <HAL_Delay>
				}

				NRF24_CE(1);
 8001b70:	2201      	movs	r2, #1
 8001b72:	2110      	movs	r1, #16
 8001b74:	4806      	ldr	r0, [pc, #24]	@ (8001b90 <NRF24_Mode+0x114>)
 8001b76:	f001 fb8d 	bl	8003294 <HAL_GPIO_WritePin>
				break;
 8001b7a:	e000      	b.n	8001b7e <NRF24_Mode+0x102>
				break;
 8001b7c:	bf00      	nop

		}

		// Update the flag to new mode
		NRF24_currentMode = mode;
 8001b7e:	4a03      	ldr	r2, [pc, #12]	@ (8001b8c <NRF24_Mode+0x110>)
 8001b80:	79fb      	ldrb	r3, [r7, #7]
 8001b82:	7013      	strb	r3, [r2, #0]
	}
}
 8001b84:	bf00      	nop
 8001b86:	3708      	adds	r7, #8
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	200005ae 	.word	0x200005ae
 8001b90:	40020000 	.word	0x40020000
 8001b94:	200005af 	.word	0x200005af

08001b98 <NRF24_isRecivData>:


uint8_t NRF24_isRecivData(NR24Pipe_TypeDef pipe) {
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	71fb      	strb	r3, [r7, #7]
	return NRF24_isRecivedData[pipe];
 8001ba2:	79fb      	ldrb	r3, [r7, #7]
 8001ba4:	4a03      	ldr	r2, [pc, #12]	@ (8001bb4 <NRF24_isRecivData+0x1c>)
 8001ba6:	5cd3      	ldrb	r3, [r2, r3]
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr
 8001bb4:	200005a8 	.word	0x200005a8

08001bb8 <NRF24_ReadData>:


uint8_t NRF24_ReadData(NR24Pipe_TypeDef pipe, uint8_t *data, uint8_t *len) {
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	607a      	str	r2, [r7, #4]
 8001bc4:	73fb      	strb	r3, [r7, #15]

	if (NRF24_isRecivedData[pipe] == RESET) return NRF24_ERROR;
 8001bc6:	7bfb      	ldrb	r3, [r7, #15]
 8001bc8:	4a0d      	ldr	r2, [pc, #52]	@ (8001c00 <NRF24_ReadData+0x48>)
 8001bca:	5cd3      	ldrb	r3, [r2, r3]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d101      	bne.n	8001bd4 <NRF24_ReadData+0x1c>
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	e011      	b.n	8001bf8 <NRF24_ReadData+0x40>

	// In this implementation always receives and sends 32-bit packet sizes (NRF24_PLOAD_WIDTH)
	*len = NRF24_PLOAD_WIDTH;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2220      	movs	r2, #32
 8001bd8:	701a      	strb	r2, [r3, #0]

	// Copy the buffer to the external array
	memcpy(data, &NRF24_RecivData[pipe][0], *len);
 8001bda:	7bfb      	ldrb	r3, [r7, #15]
 8001bdc:	015b      	lsls	r3, r3, #5
 8001bde:	4a09      	ldr	r2, [pc, #36]	@ (8001c04 <NRF24_ReadData+0x4c>)
 8001be0:	1899      	adds	r1, r3, r2
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	461a      	mov	r2, r3
 8001be8:	68b8      	ldr	r0, [r7, #8]
 8001bea:	f004 fa26 	bl	800603a <memcpy>


	// Releases the received data flag
	NRF24_isRecivedData[pipe] = RESET;
 8001bee:	7bfb      	ldrb	r3, [r7, #15]
 8001bf0:	4a03      	ldr	r2, [pc, #12]	@ (8001c00 <NRF24_ReadData+0x48>)
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	54d1      	strb	r1, [r2, r3]

	return NRF24_SUCCESS;
 8001bf6:	2300      	movs	r3, #0
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3710      	adds	r7, #16
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	200005a8 	.word	0x200005a8
 8001c04:	200004e8 	.word	0x200004e8

08001c08 <NRF24_CheckDataRX>:
 * 		1) read payload through SPI,
 * 		2) clear RX_DR IRQ,
 * 		3) read FIFO_STATUS to check if there are more payloads available in RX FIFO,
 * 		4) if there are more data in RX FIFO, repeat from 1
*/
void NRF24_CheckDataRX(void) {
 8001c08:	b5b0      	push	{r4, r5, r7, lr}
 8001c0a:	b08a      	sub	sp, #40	@ 0x28
 8001c0c:	af00      	add	r7, sp, #0
	uint8_t status, previousMode;
	uint8_t rxPipe;
	uint8_t rxBuffer[NRF24_PLOAD_WIDTH];

	// Read NRF24 status register
	status = NRF24_ReadStatus();
 8001c0e:	f000 f923 	bl	8001e58 <NRF24_ReadStatus>
 8001c12:	4603      	mov	r3, r0
 8001c14:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	// RX data received
	if(status & (1<<RX_DR)) {
 8001c18:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001c1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d04c      	beq.n	8001cbe <NRF24_CheckDataRX+0xb6>
//		BSP_LED_Toggle(LED_BLUE);

		// Get the current Mode
		previousMode = NRF24_GetMode();
 8001c24:	f7ff ff1e 	bl	8001a64 <NRF24_GetMode>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

		// Standby-I Mode
		NRF24_Mode(NRF24_MODE_STANDBYI);
 8001c2e:	2002      	movs	r0, #2
 8001c30:	f7ff ff24 	bl	8001a7c <NRF24_Mode>


		// Get the pipe number (bits 1 to 3 of status)
		rxPipe = (status >> 1) & 0b00000111;
 8001c34:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001c38:	085b      	lsrs	r3, r3, #1
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	f003 0307 	and.w	r3, r3, #7
 8001c40:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

		// Check if RX FIFO is empty
		while(rxPipe != 0x07) {
 8001c44:	e032      	b.n	8001cac <NRF24_CheckDataRX+0xa4>

			// Read RX payload
			NRF24_ReadLargeCMD(CMD_RD_RX_PLOAD, rxBuffer, NRF24_PLOAD_WIDTH);
 8001c46:	1d3b      	adds	r3, r7, #4
 8001c48:	2220      	movs	r2, #32
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	2061      	movs	r0, #97	@ 0x61
 8001c4e:	f000 f8d1 	bl	8001df4 <NRF24_ReadLargeCMD>


			// Copy the data to the external buffer if it is free
			if (NRF24_isRecivedData[rxPipe] == RESET) {
 8001c52:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001c56:	4a1c      	ldr	r2, [pc, #112]	@ (8001cc8 <NRF24_CheckDataRX+0xc0>)
 8001c58:	5cd3      	ldrb	r3, [r2, r3]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d115      	bne.n	8001c8a <NRF24_CheckDataRX+0x82>
				memcpy(&NRF24_RecivData[rxPipe][0], rxBuffer, NRF24_PLOAD_WIDTH);
 8001c5e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001c62:	015b      	lsls	r3, r3, #5
 8001c64:	4a19      	ldr	r2, [pc, #100]	@ (8001ccc <NRF24_CheckDataRX+0xc4>)
 8001c66:	4413      	add	r3, r2
 8001c68:	461d      	mov	r5, r3
 8001c6a:	1d3c      	adds	r4, r7, #4
 8001c6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c6e:	6028      	str	r0, [r5, #0]
 8001c70:	6069      	str	r1, [r5, #4]
 8001c72:	60aa      	str	r2, [r5, #8]
 8001c74:	60eb      	str	r3, [r5, #12]
 8001c76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c78:	6128      	str	r0, [r5, #16]
 8001c7a:	6169      	str	r1, [r5, #20]
 8001c7c:	61aa      	str	r2, [r5, #24]
 8001c7e:	61eb      	str	r3, [r5, #28]
				NRF24_isRecivedData[rxPipe] = SET;
 8001c80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001c84:	4a10      	ldr	r2, [pc, #64]	@ (8001cc8 <NRF24_CheckDataRX+0xc0>)
 8001c86:	2101      	movs	r1, #1
 8001c88:	54d1      	strb	r1, [r2, r3]
			}


			// Clear flag  RX_DR
			NRF24_WriteCMD(CMD_W_REG | REG_STATUS, (1<<RX_DR));
 8001c8a:	2140      	movs	r1, #64	@ 0x40
 8001c8c:	2027      	movs	r0, #39	@ 0x27
 8001c8e:	f000 f83d 	bl	8001d0c <NRF24_WriteCMD>


			// Read the status reg and get the next pipe number (bits 1 to 3 of status)
			// If it is 0x07 the RX FIFO is empty, oterwise it has the pipe number
			status = NRF24_ReadStatus();
 8001c92:	f000 f8e1 	bl	8001e58 <NRF24_ReadStatus>
 8001c96:	4603      	mov	r3, r0
 8001c98:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			rxPipe = (status >> 1) & 0b00000111;
 8001c9c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001ca0:	085b      	lsrs	r3, r3, #1
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	f003 0307 	and.w	r3, r3, #7
 8001ca8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		while(rxPipe != 0x07) {
 8001cac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001cb0:	2b07      	cmp	r3, #7
 8001cb2:	d1c8      	bne.n	8001c46 <NRF24_CheckDataRX+0x3e>
		}


		// Return previous mode;
		NRF24_Mode(previousMode);
 8001cb4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7ff fedf 	bl	8001a7c <NRF24_Mode>

	}

}
 8001cbe:	bf00      	nop
 8001cc0:	3728      	adds	r7, #40	@ 0x28
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bdb0      	pop	{r4, r5, r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	200005a8 	.word	0x200005a8
 8001ccc:	200004e8 	.word	0x200004e8

08001cd0 <NRF24_TransferByte>:
//------------------------------------------------------------------------------//
// BSP COMMUNICATION FUNCTIONS
//------------------------------------------------------------------------------//

// Clocks only one byte to target device and returns the received one
uint8_t NRF24_TransferByte(uint8_t data) {
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b086      	sub	sp, #24
 8001cd4:	af02      	add	r7, sp, #8
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	71fb      	strb	r3, [r7, #7]
	  uint8_t receivedbyte = 0;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	73fb      	strb	r3, [r7, #15]

	  // Send a Byte through the SPI peripheral
	  // and receives a byte at the same time (Full-Duplex)
	  if(HAL_SPI_TransmitReceive(hspi_nrf, (uint8_t*) &data, (uint8_t*) &receivedbyte, 1, NRF24_SEND_TIMEOUT) != HAL_OK) {
 8001cde:	4b0a      	ldr	r3, [pc, #40]	@ (8001d08 <NRF24_TransferByte+0x38>)
 8001ce0:	6818      	ldr	r0, [r3, #0]
 8001ce2:	f107 020f 	add.w	r2, r7, #15
 8001ce6:	1df9      	adds	r1, r7, #7
 8001ce8:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001cec:	9300      	str	r3, [sp, #0]
 8001cee:	2301      	movs	r3, #1
 8001cf0:	f002 f84b 	bl	8003d8a <HAL_SPI_TransmitReceive>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <NRF24_TransferByte+0x2e>
		  NRF24_SPI_Error();
 8001cfa:	f000 f8e1 	bl	8001ec0 <NRF24_SPI_Error>
	  }

	  return receivedbyte;
 8001cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3710      	adds	r7, #16
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	200004e4 	.word	0x200004e4

08001d0c <NRF24_WriteCMD>:

// Writes a value of a command (1 byte of cmd + 1 byte of data)
uint8_t NRF24_WriteCMD(uint8_t cmd, uint8_t value) {
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	4603      	mov	r3, r0
 8001d14:	460a      	mov	r2, r1
 8001d16:	71fb      	strb	r3, [r7, #7]
 8001d18:	4613      	mov	r3, r2
 8001d1a:	71bb      	strb	r3, [r7, #6]
	uint8_t status;
	NRF24_CSN(0);
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	2120      	movs	r1, #32
 8001d20:	480b      	ldr	r0, [pc, #44]	@ (8001d50 <NRF24_WriteCMD+0x44>)
 8001d22:	f001 fab7 	bl	8003294 <HAL_GPIO_WritePin>
	status = NRF24_TransferByte(cmd); // (The first byte returns always the value of the STATUS register)
 8001d26:	79fb      	ldrb	r3, [r7, #7]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff ffd1 	bl	8001cd0 <NRF24_TransferByte>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	73fb      	strb	r3, [r7, #15]
	NRF24_TransferByte(value);
 8001d32:	79bb      	ldrb	r3, [r7, #6]
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7ff ffcb 	bl	8001cd0 <NRF24_TransferByte>
	NRF24_CSN(1);
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	2120      	movs	r1, #32
 8001d3e:	4804      	ldr	r0, [pc, #16]	@ (8001d50 <NRF24_WriteCMD+0x44>)
 8001d40:	f001 faa8 	bl	8003294 <HAL_GPIO_WritePin>
	return status;
 8001d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3710      	adds	r7, #16
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	40020000 	.word	0x40020000

08001d54 <NRF24_ReadCMD>:

// Reads a value of a command (1 byte of cmd + 1 byte of data)
uint8_t NRF24_ReadCMD(uint8_t cmd) {
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	71fb      	strb	r3, [r7, #7]
	uint8_t value;
	NRF24_CSN(0);
 8001d5e:	2200      	movs	r2, #0
 8001d60:	2120      	movs	r1, #32
 8001d62:	480b      	ldr	r0, [pc, #44]	@ (8001d90 <NRF24_ReadCMD+0x3c>)
 8001d64:	f001 fa96 	bl	8003294 <HAL_GPIO_WritePin>
	NRF24_TransferByte(cmd);
 8001d68:	79fb      	ldrb	r3, [r7, #7]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7ff ffb0 	bl	8001cd0 <NRF24_TransferByte>
	value=NRF24_TransferByte(0xFF);
 8001d70:	20ff      	movs	r0, #255	@ 0xff
 8001d72:	f7ff ffad 	bl	8001cd0 <NRF24_TransferByte>
 8001d76:	4603      	mov	r3, r0
 8001d78:	73fb      	strb	r3, [r7, #15]
	NRF24_CSN(1);
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	2120      	movs	r1, #32
 8001d7e:	4804      	ldr	r0, [pc, #16]	@ (8001d90 <NRF24_ReadCMD+0x3c>)
 8001d80:	f001 fa88 	bl	8003294 <HAL_GPIO_WritePin>
	return value;
 8001d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3710      	adds	r7, #16
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	40020000 	.word	0x40020000

08001d94 <NRF24_WriteLargeCMD>:

// Writes an array of values of a command (1 byte of cmd + n bytes of data)
uint8_t NRF24_WriteLargeCMD(uint8_t cmd, uint8_t *pBuf, uint8_t bytes) {
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	6039      	str	r1, [r7, #0]
 8001d9e:	71fb      	strb	r3, [r7, #7]
 8001da0:	4613      	mov	r3, r2
 8001da2:	71bb      	strb	r3, [r7, #6]
	uint8_t status,byte_ctr;
	NRF24_CSN(0);
 8001da4:	2200      	movs	r2, #0
 8001da6:	2120      	movs	r1, #32
 8001da8:	4811      	ldr	r0, [pc, #68]	@ (8001df0 <NRF24_WriteLargeCMD+0x5c>)
 8001daa:	f001 fa73 	bl	8003294 <HAL_GPIO_WritePin>
	status = NRF24_TransferByte(cmd); // (The first byte returns always the value of the STATUS register)
 8001dae:	79fb      	ldrb	r3, [r7, #7]
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7ff ff8d 	bl	8001cd0 <NRF24_TransferByte>
 8001db6:	4603      	mov	r3, r0
 8001db8:	73bb      	strb	r3, [r7, #14]
	for(byte_ctr=0;byte_ctr<bytes;byte_ctr++)
 8001dba:	2300      	movs	r3, #0
 8001dbc:	73fb      	strb	r3, [r7, #15]
 8001dbe:	e009      	b.n	8001dd4 <NRF24_WriteLargeCMD+0x40>
		NRF24_TransferByte(*pBuf++);
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	1c5a      	adds	r2, r3, #1
 8001dc4:	603a      	str	r2, [r7, #0]
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7ff ff81 	bl	8001cd0 <NRF24_TransferByte>
	for(byte_ctr=0;byte_ctr<bytes;byte_ctr++)
 8001dce:	7bfb      	ldrb	r3, [r7, #15]
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	73fb      	strb	r3, [r7, #15]
 8001dd4:	7bfa      	ldrb	r2, [r7, #15]
 8001dd6:	79bb      	ldrb	r3, [r7, #6]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d3f1      	bcc.n	8001dc0 <NRF24_WriteLargeCMD+0x2c>
	NRF24_CSN(1);
 8001ddc:	2201      	movs	r2, #1
 8001dde:	2120      	movs	r1, #32
 8001de0:	4803      	ldr	r0, [pc, #12]	@ (8001df0 <NRF24_WriteLargeCMD+0x5c>)
 8001de2:	f001 fa57 	bl	8003294 <HAL_GPIO_WritePin>
	return(status);
 8001de6:	7bbb      	ldrb	r3, [r7, #14]
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3710      	adds	r7, #16
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	40020000 	.word	0x40020000

08001df4 <NRF24_ReadLargeCMD>:

// Reads an array of values of a command (1 byte of cmd + n bytes of data)
uint8_t NRF24_ReadLargeCMD(uint8_t cmd, uint8_t *pBuf, uint8_t bytes) {
 8001df4:	b590      	push	{r4, r7, lr}
 8001df6:	b085      	sub	sp, #20
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	6039      	str	r1, [r7, #0]
 8001dfe:	71fb      	strb	r3, [r7, #7]
 8001e00:	4613      	mov	r3, r2
 8001e02:	71bb      	strb	r3, [r7, #6]
	uint8_t status, byte_ctr;
	NRF24_CSN(0);
 8001e04:	2200      	movs	r2, #0
 8001e06:	2120      	movs	r1, #32
 8001e08:	4812      	ldr	r0, [pc, #72]	@ (8001e54 <NRF24_ReadLargeCMD+0x60>)
 8001e0a:	f001 fa43 	bl	8003294 <HAL_GPIO_WritePin>
	status = NRF24_TransferByte(cmd); // El primer byte retorna per defecte el valor del reg. STATUS
 8001e0e:	79fb      	ldrb	r3, [r7, #7]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7ff ff5d 	bl	8001cd0 <NRF24_TransferByte>
 8001e16:	4603      	mov	r3, r0
 8001e18:	73bb      	strb	r3, [r7, #14]
	for(byte_ctr=0; byte_ctr<bytes; byte_ctr++)
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	73fb      	strb	r3, [r7, #15]
 8001e1e:	e00a      	b.n	8001e36 <NRF24_ReadLargeCMD+0x42>
		pBuf[byte_ctr] = NRF24_TransferByte(0);
 8001e20:	7bfb      	ldrb	r3, [r7, #15]
 8001e22:	683a      	ldr	r2, [r7, #0]
 8001e24:	18d4      	adds	r4, r2, r3
 8001e26:	2000      	movs	r0, #0
 8001e28:	f7ff ff52 	bl	8001cd0 <NRF24_TransferByte>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	7023      	strb	r3, [r4, #0]
	for(byte_ctr=0; byte_ctr<bytes; byte_ctr++)
 8001e30:	7bfb      	ldrb	r3, [r7, #15]
 8001e32:	3301      	adds	r3, #1
 8001e34:	73fb      	strb	r3, [r7, #15]
 8001e36:	7bfa      	ldrb	r2, [r7, #15]
 8001e38:	79bb      	ldrb	r3, [r7, #6]
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d3f0      	bcc.n	8001e20 <NRF24_ReadLargeCMD+0x2c>
	NRF24_CSN(1);
 8001e3e:	2201      	movs	r2, #1
 8001e40:	2120      	movs	r1, #32
 8001e42:	4804      	ldr	r0, [pc, #16]	@ (8001e54 <NRF24_ReadLargeCMD+0x60>)
 8001e44:	f001 fa26 	bl	8003294 <HAL_GPIO_WritePin>
	return(status);
 8001e48:	7bbb      	ldrb	r3, [r7, #14]
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3714      	adds	r7, #20
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd90      	pop	{r4, r7, pc}
 8001e52:	bf00      	nop
 8001e54:	40020000 	.word	0x40020000

08001e58 <NRF24_ReadStatus>:

// Sends only one byte (no command = 0xFF) and returns the STATUS register value
uint8_t NRF24_ReadStatus(void) {
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
	uint8_t status;
	NRF24_CSN(0);
 8001e5e:	2200      	movs	r2, #0
 8001e60:	2120      	movs	r1, #32
 8001e62:	4809      	ldr	r0, [pc, #36]	@ (8001e88 <NRF24_ReadStatus+0x30>)
 8001e64:	f001 fa16 	bl	8003294 <HAL_GPIO_WritePin>
	status = NRF24_TransferByte(0xFF);
 8001e68:	20ff      	movs	r0, #255	@ 0xff
 8001e6a:	f7ff ff31 	bl	8001cd0 <NRF24_TransferByte>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	71fb      	strb	r3, [r7, #7]
	NRF24_CSN(1);
 8001e72:	2201      	movs	r2, #1
 8001e74:	2120      	movs	r1, #32
 8001e76:	4804      	ldr	r0, [pc, #16]	@ (8001e88 <NRF24_ReadStatus+0x30>)
 8001e78:	f001 fa0c 	bl	8003294 <HAL_GPIO_WritePin>
	return(status);
 8001e7c:	79fb      	ldrb	r3, [r7, #7]
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	40020000 	.word	0x40020000

08001e8c <NRF24_WriteByte>:


// Sends only one byte by SPI
void NRF24_WriteByte(uint8_t value) {
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	4603      	mov	r3, r0
 8001e94:	71fb      	strb	r3, [r7, #7]
	NRF24_CSN(0);
 8001e96:	2200      	movs	r2, #0
 8001e98:	2120      	movs	r1, #32
 8001e9a:	4808      	ldr	r0, [pc, #32]	@ (8001ebc <NRF24_WriteByte+0x30>)
 8001e9c:	f001 f9fa 	bl	8003294 <HAL_GPIO_WritePin>
	NRF24_TransferByte(value);
 8001ea0:	79fb      	ldrb	r3, [r7, #7]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7ff ff14 	bl	8001cd0 <NRF24_TransferByte>
	NRF24_CSN(1);
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	2120      	movs	r1, #32
 8001eac:	4803      	ldr	r0, [pc, #12]	@ (8001ebc <NRF24_WriteByte+0x30>)
 8001eae:	f001 f9f1 	bl	8003294 <HAL_GPIO_WritePin>
}
 8001eb2:	bf00      	nop
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	40020000 	.word	0x40020000

08001ec0 <NRF24_SPI_Error>:


// SPI Error treatment function.
static void NRF24_SPI_Error(void) {
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
	// De-initialize the SPI communication bus
	HAL_SPI_DeInit(hspi_nrf);
 8001ec4:	4b04      	ldr	r3, [pc, #16]	@ (8001ed8 <NRF24_SPI_Error+0x18>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f001 ff36 	bl	8003d3a <HAL_SPI_DeInit>

	// Re-Initialize the SPI communication bus
	NRF24_SPI_Init();
 8001ece:	f000 f805 	bl	8001edc <NRF24_SPI_Init>
}
 8001ed2:	bf00      	nop
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	200004e4 	.word	0x200004e4

08001edc <NRF24_SPI_Init>:


// SPI re-initialization after bus error
static void NRF24_SPI_Init(void) {
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
	//if(HAL_SPI_GetState(hspi_nrf) == HAL_SPI_STATE_RESET) {
		// SPI configuration
		hspi_nrf->Init.Mode = SPI_MODE_MASTER;
 8001ee0:	4b1a      	ldr	r3, [pc, #104]	@ (8001f4c <NRF24_SPI_Init+0x70>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001ee8:	605a      	str	r2, [r3, #4]
		hspi_nrf->Init.Direction = SPI_DIRECTION_2LINES;
 8001eea:	4b18      	ldr	r3, [pc, #96]	@ (8001f4c <NRF24_SPI_Init+0x70>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	609a      	str	r2, [r3, #8]
		hspi_nrf->Init.DataSize = SPI_DATASIZE_8BIT;
 8001ef2:	4b16      	ldr	r3, [pc, #88]	@ (8001f4c <NRF24_SPI_Init+0x70>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	60da      	str	r2, [r3, #12]
		hspi_nrf->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001efa:	4b14      	ldr	r3, [pc, #80]	@ (8001f4c <NRF24_SPI_Init+0x70>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	2200      	movs	r2, #0
 8001f00:	611a      	str	r2, [r3, #16]
		hspi_nrf->Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f02:	4b12      	ldr	r3, [pc, #72]	@ (8001f4c <NRF24_SPI_Init+0x70>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	2200      	movs	r2, #0
 8001f08:	615a      	str	r2, [r3, #20]
		hspi_nrf->Init.NSS = SPI_NSS_SOFT;
 8001f0a:	4b10      	ldr	r3, [pc, #64]	@ (8001f4c <NRF24_SPI_Init+0x70>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f12:	619a      	str	r2, [r3, #24]
		hspi_nrf->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001f14:	4b0d      	ldr	r3, [pc, #52]	@ (8001f4c <NRF24_SPI_Init+0x70>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2218      	movs	r2, #24
 8001f1a:	61da      	str	r2, [r3, #28]
		hspi_nrf->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f4c <NRF24_SPI_Init+0x70>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2200      	movs	r2, #0
 8001f22:	621a      	str	r2, [r3, #32]
		hspi_nrf->Init.TIMode = SPI_TIMODE_DISABLE;
 8001f24:	4b09      	ldr	r3, [pc, #36]	@ (8001f4c <NRF24_SPI_Init+0x70>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	625a      	str	r2, [r3, #36]	@ 0x24
		hspi_nrf->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f2c:	4b07      	ldr	r3, [pc, #28]	@ (8001f4c <NRF24_SPI_Init+0x70>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2200      	movs	r2, #0
 8001f32:	629a      	str	r2, [r3, #40]	@ 0x28
		hspi_nrf->Init.CRCPolynomial = 10;
 8001f34:	4b05      	ldr	r3, [pc, #20]	@ (8001f4c <NRF24_SPI_Init+0x70>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	220a      	movs	r2, #10
 8001f3a:	62da      	str	r2, [r3, #44]	@ 0x2c
		HAL_SPI_Init(hspi_nrf);
 8001f3c:	4b03      	ldr	r3, [pc, #12]	@ (8001f4c <NRF24_SPI_Init+0x70>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4618      	mov	r0, r3
 8001f42:	f001 fe71 	bl	8003c28 <HAL_SPI_Init>
	//}
}
 8001f46:	bf00      	nop
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	200004e4 	.word	0x200004e4

08001f50 <NRF24_IRQ_Callback>:
//------------------------------------------------------------------------------//
//------------------------------------------------------------------------------//

// Interrupt handler
// This function handles EXTI interrupt request.
void NRF24_IRQ_Callback(void) {
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
//	BSP_LED_Toggle(LED_RED);

#ifdef NRF24_RX_IRQ_MODE
	NRF24_CheckDataRX();
 8001f54:	f7ff fe58 	bl	8001c08 <NRF24_CheckDataRX>
#endif

}
 8001f58:	bf00      	nop
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <ParseDMXData>:
 */
#include "dmx_protocol.h"
#include "dmx512.h"
#include "led.h"

uint8_t ParseDMXData(const uint8_t* data, uint8_t length) {
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b08a      	sub	sp, #40	@ 0x28
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	460b      	mov	r3, r1
 8001f66:	70fb      	strb	r3, [r7, #3]
    if (length < 1 || data == NULL) return 0;
 8001f68:	78fb      	ldrb	r3, [r7, #3]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d002      	beq.n	8001f74 <ParseDMXData+0x18>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d101      	bne.n	8001f78 <ParseDMXData+0x1c>
 8001f74:	2300      	movs	r3, #0
 8001f76:	e12e      	b.n	80021d6 <ParseDMXData+0x27a>

	uint8_t cmdType = data[0];
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

	switch (cmdType) {
 8001f80:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001f84:	2b10      	cmp	r3, #16
 8001f86:	dc2b      	bgt.n	8001fe0 <ParseDMXData+0x84>
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	f2c0 8120 	blt.w	80021ce <ParseDMXData+0x272>
 8001f8e:	2b10      	cmp	r3, #16
 8001f90:	f200 811d 	bhi.w	80021ce <ParseDMXData+0x272>
 8001f94:	a201      	add	r2, pc, #4	@ (adr r2, 8001f9c <ParseDMXData+0x40>)
 8001f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f9a:	bf00      	nop
 8001f9c:	08001fe9 	.word	0x08001fe9
 8001fa0:	08002015 	.word	0x08002015
 8001fa4:	080020af 	.word	0x080020af
 8001fa8:	080021cf 	.word	0x080021cf
 8001fac:	080021cf 	.word	0x080021cf
 8001fb0:	080021cf 	.word	0x080021cf
 8001fb4:	080021cf 	.word	0x080021cf
 8001fb8:	080021cf 	.word	0x080021cf
 8001fbc:	080021cf 	.word	0x080021cf
 8001fc0:	080021cf 	.word	0x080021cf
 8001fc4:	080021cf 	.word	0x080021cf
 8001fc8:	080021cf 	.word	0x080021cf
 8001fcc:	080021cf 	.word	0x080021cf
 8001fd0:	080021cf 	.word	0x080021cf
 8001fd4:	080021cf 	.word	0x080021cf
 8001fd8:	080021cf 	.word	0x080021cf
 8001fdc:	0800213d 	.word	0x0800213d
 8001fe0:	2bff      	cmp	r3, #255	@ 0xff
 8001fe2:	f000 80f1 	beq.w	80021c8 <ParseDMXData+0x26c>
 8001fe6:	e0f2      	b.n	80021ce <ParseDMXData+0x272>
		case CMD_CONTROL:
			{
				if (length < 2) return 0;
 8001fe8:	78fb      	ldrb	r3, [r7, #3]
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d801      	bhi.n	8001ff2 <ParseDMXData+0x96>
 8001fee:	2300      	movs	r3, #0
 8001ff0:	e0f1      	b.n	80021d6 <ParseDMXData+0x27a>
				if (data[1] == 0) {
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d102      	bne.n	8002002 <ParseDMXData+0xa6>
//					HAL_GPIO_WritePin(LED4_GPIO_PORT, LED4_PIN, GPIO_PIN_RESET);
					DMX512_StopTask();
 8001ffc:	f7ff fa2a 	bl	8001454 <DMX512_StopTask>
				} else if (data[1] == 1) {
//					HAL_GPIO_WritePin(LED4_GPIO_PORT, LED4_PIN, GPIO_PIN_SET);
					DMX512_StartTask();
				}
			}
				break;
 8002000:	e0e7      	b.n	80021d2 <ParseDMXData+0x276>
				} else if (data[1] == 1) {
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	3301      	adds	r3, #1
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	2b01      	cmp	r3, #1
 800200a:	f040 80e2 	bne.w	80021d2 <ParseDMXData+0x276>
					DMX512_StartTask();
 800200e:	f7ff fa15 	bl	800143c <DMX512_StartTask>
				break;
 8002012:	e0de      	b.n	80021d2 <ParseDMXData+0x276>

		case CMD_SET_MULTIPLE_VALUES:
			{
				if (length < 2) return 0;
 8002014:	78fb      	ldrb	r3, [r7, #3]
 8002016:	2b01      	cmp	r3, #1
 8002018:	d801      	bhi.n	800201e <ParseDMXData+0xc2>
 800201a:	2300      	movs	r3, #0
 800201c:	e0db      	b.n	80021d6 <ParseDMXData+0x27a>
				uint8_t channelCount = data[1];
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	3301      	adds	r3, #1
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	74fb      	strb	r3, [r7, #19]
				if (length < 2 + (channelCount * 3)) return 0;
 8002026:	7cfa      	ldrb	r2, [r7, #19]
 8002028:	4613      	mov	r3, r2
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	4413      	add	r3, r2
 800202e:	1c5a      	adds	r2, r3, #1
 8002030:	78fb      	ldrb	r3, [r7, #3]
 8002032:	429a      	cmp	r2, r3
 8002034:	db01      	blt.n	800203a <ParseDMXData+0xde>
 8002036:	2300      	movs	r3, #0
 8002038:	e0cd      	b.n	80021d6 <ParseDMXData+0x27a>

				for (uint8_t i = 0; i < channelCount; i++) {
 800203a:	2300      	movs	r3, #0
 800203c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002040:	e02f      	b.n	80020a2 <ParseDMXData+0x146>
					uint8_t offset = 2 + i * 3;
 8002042:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002046:	461a      	mov	r2, r3
 8002048:	0052      	lsls	r2, r2, #1
 800204a:	4413      	add	r3, r2
 800204c:	b2db      	uxtb	r3, r3
 800204e:	3302      	adds	r3, #2
 8002050:	74bb      	strb	r3, [r7, #18]
					uint8_t value = data[offset];
 8002052:	7cbb      	ldrb	r3, [r7, #18]
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	4413      	add	r3, r2
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	747b      	strb	r3, [r7, #17]
					uint16_t channel = (data[offset + 1] << 8) | data[offset + 2];
 800205c:	7cbb      	ldrb	r3, [r7, #18]
 800205e:	3301      	adds	r3, #1
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	4413      	add	r3, r2
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	b21b      	sxth	r3, r3
 8002068:	021b      	lsls	r3, r3, #8
 800206a:	b21a      	sxth	r2, r3
 800206c:	7cbb      	ldrb	r3, [r7, #18]
 800206e:	3302      	adds	r3, #2
 8002070:	6879      	ldr	r1, [r7, #4]
 8002072:	440b      	add	r3, r1
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	b21b      	sxth	r3, r3
 8002078:	4313      	orrs	r3, r2
 800207a:	b21b      	sxth	r3, r3
 800207c:	81fb      	strh	r3, [r7, #14]
					if (channel >= 1 && channel <= 512) {
 800207e:	89fb      	ldrh	r3, [r7, #14]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d009      	beq.n	8002098 <ParseDMXData+0x13c>
 8002084:	89fb      	ldrh	r3, [r7, #14]
 8002086:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800208a:	d805      	bhi.n	8002098 <ParseDMXData+0x13c>
						DMX512_SetChannel(channel, value);
 800208c:	7c7a      	ldrb	r2, [r7, #17]
 800208e:	89fb      	ldrh	r3, [r7, #14]
 8002090:	4611      	mov	r1, r2
 8002092:	4618      	mov	r0, r3
 8002094:	f7ff f92a 	bl	80012ec <DMX512_SetChannel>
				for (uint8_t i = 0; i < channelCount; i++) {
 8002098:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800209c:	3301      	adds	r3, #1
 800209e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80020a2:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80020a6:	7cfb      	ldrb	r3, [r7, #19]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d3ca      	bcc.n	8002042 <ParseDMXData+0xe6>
					}
				}
			}
			break;
 80020ac:	e092      	b.n	80021d4 <ParseDMXData+0x278>

		case CMD_SET_CHANNELS:
			{
				if (length < 2) return 0;
 80020ae:	78fb      	ldrb	r3, [r7, #3]
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d801      	bhi.n	80020b8 <ParseDMXData+0x15c>
 80020b4:	2300      	movs	r3, #0
 80020b6:	e08e      	b.n	80021d6 <ParseDMXData+0x27a>
				uint8_t channelCount = data[1];
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	3301      	adds	r3, #1
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	75fb      	strb	r3, [r7, #23]
				uint8_t value = data[2];
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	3302      	adds	r3, #2
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	75bb      	strb	r3, [r7, #22]

				if (length < 2 + (channelCount * 2)) return 0;
 80020c8:	78fa      	ldrb	r2, [r7, #3]
 80020ca:	7dfb      	ldrb	r3, [r7, #23]
 80020cc:	3301      	adds	r3, #1
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	429a      	cmp	r2, r3
 80020d2:	da01      	bge.n	80020d8 <ParseDMXData+0x17c>
 80020d4:	2300      	movs	r3, #0
 80020d6:	e07e      	b.n	80021d6 <ParseDMXData+0x27a>

				for (uint8_t i = 0; i < channelCount; i++) {
 80020d8:	2300      	movs	r3, #0
 80020da:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80020de:	e027      	b.n	8002130 <ParseDMXData+0x1d4>
					uint16_t channel = (data[3 + (i*2)] << 8) | data[3 + (i*2) + 1];
 80020e0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	3303      	adds	r3, #3
 80020e8:	461a      	mov	r2, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4413      	add	r3, r2
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	b21b      	sxth	r3, r3
 80020f2:	021b      	lsls	r3, r3, #8
 80020f4:	b21a      	sxth	r2, r3
 80020f6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80020fa:	005b      	lsls	r3, r3, #1
 80020fc:	3304      	adds	r3, #4
 80020fe:	6879      	ldr	r1, [r7, #4]
 8002100:	440b      	add	r3, r1
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	b21b      	sxth	r3, r3
 8002106:	4313      	orrs	r3, r2
 8002108:	b21b      	sxth	r3, r3
 800210a:	82bb      	strh	r3, [r7, #20]
					if (channel >= 1 && channel <= 512) {
 800210c:	8abb      	ldrh	r3, [r7, #20]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d009      	beq.n	8002126 <ParseDMXData+0x1ca>
 8002112:	8abb      	ldrh	r3, [r7, #20]
 8002114:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002118:	d805      	bhi.n	8002126 <ParseDMXData+0x1ca>
						DMX512_SetChannel(channel, value);
 800211a:	7dba      	ldrb	r2, [r7, #22]
 800211c:	8abb      	ldrh	r3, [r7, #20]
 800211e:	4611      	mov	r1, r2
 8002120:	4618      	mov	r0, r3
 8002122:	f7ff f8e3 	bl	80012ec <DMX512_SetChannel>
				for (uint8_t i = 0; i < channelCount; i++) {
 8002126:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800212a:	3301      	adds	r3, #1
 800212c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8002130:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8002134:	7dfb      	ldrb	r3, [r7, #23]
 8002136:	429a      	cmp	r2, r3
 8002138:	d3d2      	bcc.n	80020e0 <ParseDMXData+0x184>
					}
				}
			}
			break;
 800213a:	e04b      	b.n	80021d4 <ParseDMXData+0x278>

		case CMD_SYNC:
			{
				uint8_t* dmx_buf = (uint8_t*)DMX512_GetBuffer();
 800213c:	f7ff f9a2 	bl	8001484 <DMX512_GetBuffer>
 8002140:	61f8      	str	r0, [r7, #28]
				if (length < 2) return 0;
 8002142:	78fb      	ldrb	r3, [r7, #3]
 8002144:	2b01      	cmp	r3, #1
 8002146:	d801      	bhi.n	800214c <ParseDMXData+0x1f0>
 8002148:	2300      	movs	r3, #0
 800214a:	e044      	b.n	80021d6 <ParseDMXData+0x27a>
			    uint8_t packet_num = data[1];
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	3301      	adds	r3, #1
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	76fb      	strb	r3, [r7, #27]
			    uint16_t start_channel = packet_num * 30 + 1;
 8002154:	7efb      	ldrb	r3, [r7, #27]
 8002156:	b29b      	uxth	r3, r3
 8002158:	461a      	mov	r2, r3
 800215a:	0112      	lsls	r2, r2, #4
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	b29b      	uxth	r3, r3
 8002162:	3301      	adds	r3, #1
 8002164:	833b      	strh	r3, [r7, #24]

			    uint8_t values_in_packet = length - 2;
 8002166:	78fb      	ldrb	r3, [r7, #3]
 8002168:	3b02      	subs	r3, #2
 800216a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			    if (start_channel + values_in_packet - 1 > 512) {
 800216e:	8b3a      	ldrh	r2, [r7, #24]
 8002170:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002174:	4413      	add	r3, r2
 8002176:	f240 2201 	movw	r2, #513	@ 0x201
 800217a:	4293      	cmp	r3, r2
 800217c:	dd05      	ble.n	800218a <ParseDMXData+0x22e>
			        values_in_packet = 512 - start_channel + 1;
 800217e:	8b3b      	ldrh	r3, [r7, #24]
 8002180:	b2db      	uxtb	r3, r3
 8002182:	f1c3 0301 	rsb	r3, r3, #1
 8002186:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			    }

			    for (uint8_t i = 0; i < values_in_packet; i++) {
 800218a:	2300      	movs	r3, #0
 800218c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8002190:	e013      	b.n	80021ba <ParseDMXData+0x25e>
			        dmx_buf[start_channel + i] = data[2 + i];
 8002192:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002196:	3302      	adds	r3, #2
 8002198:	461a      	mov	r2, r3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	441a      	add	r2, r3
 800219e:	8b39      	ldrh	r1, [r7, #24]
 80021a0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80021a4:	440b      	add	r3, r1
 80021a6:	4619      	mov	r1, r3
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	440b      	add	r3, r1
 80021ac:	7812      	ldrb	r2, [r2, #0]
 80021ae:	701a      	strb	r2, [r3, #0]
			    for (uint8_t i = 0; i < values_in_packet; i++) {
 80021b0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80021b4:	3301      	adds	r3, #1
 80021b6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 80021ba:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 80021be:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d3e5      	bcc.n	8002192 <ParseDMXData+0x236>
			    }
			}
			break;
 80021c6:	e005      	b.n	80021d4 <ParseDMXData+0x278>

		case CMD_RESET:
			{
			DMX512_ResetBuffer();
 80021c8:	f7ff f950 	bl	800146c <DMX512_ResetBuffer>
			}
			break;
 80021cc:	e002      	b.n	80021d4 <ParseDMXData+0x278>

		default:
			// Comando desconocido
			return 0;
 80021ce:	2300      	movs	r3, #0
 80021d0:	e001      	b.n	80021d6 <ParseDMXData+0x27a>
				break;
 80021d2:	bf00      	nop
	}
	return 1;
 80021d4:	2301      	movs	r3, #1
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3728      	adds	r7, #40	@ 0x28
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop

080021e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021e4:	4b0e      	ldr	r3, [pc, #56]	@ (8002220 <HAL_Init+0x40>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a0d      	ldr	r2, [pc, #52]	@ (8002220 <HAL_Init+0x40>)
 80021ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002220 <HAL_Init+0x40>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a0a      	ldr	r2, [pc, #40]	@ (8002220 <HAL_Init+0x40>)
 80021f6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80021fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021fc:	4b08      	ldr	r3, [pc, #32]	@ (8002220 <HAL_Init+0x40>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a07      	ldr	r2, [pc, #28]	@ (8002220 <HAL_Init+0x40>)
 8002202:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002206:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002208:	2003      	movs	r0, #3
 800220a:	f000 f94f 	bl	80024ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800220e:	200f      	movs	r0, #15
 8002210:	f000 f808 	bl	8002224 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002214:	f7fe fcda 	bl	8000bcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002218:	2300      	movs	r3, #0
}
 800221a:	4618      	mov	r0, r3
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	40023c00 	.word	0x40023c00

08002224 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800222c:	4b12      	ldr	r3, [pc, #72]	@ (8002278 <HAL_InitTick+0x54>)
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	4b12      	ldr	r3, [pc, #72]	@ (800227c <HAL_InitTick+0x58>)
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	4619      	mov	r1, r3
 8002236:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800223a:	fbb3 f3f1 	udiv	r3, r3, r1
 800223e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002242:	4618      	mov	r0, r3
 8002244:	f000 f967 	bl	8002516 <HAL_SYSTICK_Config>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e00e      	b.n	8002270 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2b0f      	cmp	r3, #15
 8002256:	d80a      	bhi.n	800226e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002258:	2200      	movs	r2, #0
 800225a:	6879      	ldr	r1, [r7, #4]
 800225c:	f04f 30ff 	mov.w	r0, #4294967295
 8002260:	f000 f92f 	bl	80024c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002264:	4a06      	ldr	r2, [pc, #24]	@ (8002280 <HAL_InitTick+0x5c>)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800226a:	2300      	movs	r3, #0
 800226c:	e000      	b.n	8002270 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
}
 8002270:	4618      	mov	r0, r3
 8002272:	3708      	adds	r7, #8
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	20000008 	.word	0x20000008
 800227c:	20000028 	.word	0x20000028
 8002280:	20000024 	.word	0x20000024

08002284 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002288:	4b06      	ldr	r3, [pc, #24]	@ (80022a4 <HAL_IncTick+0x20>)
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	461a      	mov	r2, r3
 800228e:	4b06      	ldr	r3, [pc, #24]	@ (80022a8 <HAL_IncTick+0x24>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4413      	add	r3, r2
 8002294:	4a04      	ldr	r2, [pc, #16]	@ (80022a8 <HAL_IncTick+0x24>)
 8002296:	6013      	str	r3, [r2, #0]
}
 8002298:	bf00      	nop
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	20000028 	.word	0x20000028
 80022a8:	200005b0 	.word	0x200005b0

080022ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  return uwTick;
 80022b0:	4b03      	ldr	r3, [pc, #12]	@ (80022c0 <HAL_GetTick+0x14>)
 80022b2:	681b      	ldr	r3, [r3, #0]
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	200005b0 	.word	0x200005b0

080022c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022cc:	f7ff ffee 	bl	80022ac <HAL_GetTick>
 80022d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022dc:	d005      	beq.n	80022ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022de:	4b0a      	ldr	r3, [pc, #40]	@ (8002308 <HAL_Delay+0x44>)
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	461a      	mov	r2, r3
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	4413      	add	r3, r2
 80022e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80022ea:	bf00      	nop
 80022ec:	f7ff ffde 	bl	80022ac <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d8f7      	bhi.n	80022ec <HAL_Delay+0x28>
  {
  }
}
 80022fc:	bf00      	nop
 80022fe:	bf00      	nop
 8002300:	3710      	adds	r7, #16
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	20000028 	.word	0x20000028

0800230c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800230c:	b480      	push	{r7}
 800230e:	b085      	sub	sp, #20
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f003 0307 	and.w	r3, r3, #7
 800231a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800231c:	4b0c      	ldr	r3, [pc, #48]	@ (8002350 <__NVIC_SetPriorityGrouping+0x44>)
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002322:	68ba      	ldr	r2, [r7, #8]
 8002324:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002328:	4013      	ands	r3, r2
 800232a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002334:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002338:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800233c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800233e:	4a04      	ldr	r2, [pc, #16]	@ (8002350 <__NVIC_SetPriorityGrouping+0x44>)
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	60d3      	str	r3, [r2, #12]
}
 8002344:	bf00      	nop
 8002346:	3714      	adds	r7, #20
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr
 8002350:	e000ed00 	.word	0xe000ed00

08002354 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002358:	4b04      	ldr	r3, [pc, #16]	@ (800236c <__NVIC_GetPriorityGrouping+0x18>)
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	0a1b      	lsrs	r3, r3, #8
 800235e:	f003 0307 	and.w	r3, r3, #7
}
 8002362:	4618      	mov	r0, r3
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr
 800236c:	e000ed00 	.word	0xe000ed00

08002370 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	4603      	mov	r3, r0
 8002378:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800237a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800237e:	2b00      	cmp	r3, #0
 8002380:	db0b      	blt.n	800239a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002382:	79fb      	ldrb	r3, [r7, #7]
 8002384:	f003 021f 	and.w	r2, r3, #31
 8002388:	4907      	ldr	r1, [pc, #28]	@ (80023a8 <__NVIC_EnableIRQ+0x38>)
 800238a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800238e:	095b      	lsrs	r3, r3, #5
 8002390:	2001      	movs	r0, #1
 8002392:	fa00 f202 	lsl.w	r2, r0, r2
 8002396:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800239a:	bf00      	nop
 800239c:	370c      	adds	r7, #12
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	e000e100 	.word	0xe000e100

080023ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	4603      	mov	r3, r0
 80023b4:	6039      	str	r1, [r7, #0]
 80023b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	db0a      	blt.n	80023d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	b2da      	uxtb	r2, r3
 80023c4:	490c      	ldr	r1, [pc, #48]	@ (80023f8 <__NVIC_SetPriority+0x4c>)
 80023c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ca:	0112      	lsls	r2, r2, #4
 80023cc:	b2d2      	uxtb	r2, r2
 80023ce:	440b      	add	r3, r1
 80023d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023d4:	e00a      	b.n	80023ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	b2da      	uxtb	r2, r3
 80023da:	4908      	ldr	r1, [pc, #32]	@ (80023fc <__NVIC_SetPriority+0x50>)
 80023dc:	79fb      	ldrb	r3, [r7, #7]
 80023de:	f003 030f 	and.w	r3, r3, #15
 80023e2:	3b04      	subs	r3, #4
 80023e4:	0112      	lsls	r2, r2, #4
 80023e6:	b2d2      	uxtb	r2, r2
 80023e8:	440b      	add	r3, r1
 80023ea:	761a      	strb	r2, [r3, #24]
}
 80023ec:	bf00      	nop
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr
 80023f8:	e000e100 	.word	0xe000e100
 80023fc:	e000ed00 	.word	0xe000ed00

08002400 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002400:	b480      	push	{r7}
 8002402:	b089      	sub	sp, #36	@ 0x24
 8002404:	af00      	add	r7, sp, #0
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	60b9      	str	r1, [r7, #8]
 800240a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f003 0307 	and.w	r3, r3, #7
 8002412:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	f1c3 0307 	rsb	r3, r3, #7
 800241a:	2b04      	cmp	r3, #4
 800241c:	bf28      	it	cs
 800241e:	2304      	movcs	r3, #4
 8002420:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	3304      	adds	r3, #4
 8002426:	2b06      	cmp	r3, #6
 8002428:	d902      	bls.n	8002430 <NVIC_EncodePriority+0x30>
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	3b03      	subs	r3, #3
 800242e:	e000      	b.n	8002432 <NVIC_EncodePriority+0x32>
 8002430:	2300      	movs	r3, #0
 8002432:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002434:	f04f 32ff 	mov.w	r2, #4294967295
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	fa02 f303 	lsl.w	r3, r2, r3
 800243e:	43da      	mvns	r2, r3
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	401a      	ands	r2, r3
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002448:	f04f 31ff 	mov.w	r1, #4294967295
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	fa01 f303 	lsl.w	r3, r1, r3
 8002452:	43d9      	mvns	r1, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002458:	4313      	orrs	r3, r2
         );
}
 800245a:	4618      	mov	r0, r3
 800245c:	3724      	adds	r7, #36	@ 0x24
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
	...

08002468 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	3b01      	subs	r3, #1
 8002474:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002478:	d301      	bcc.n	800247e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800247a:	2301      	movs	r3, #1
 800247c:	e00f      	b.n	800249e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800247e:	4a0a      	ldr	r2, [pc, #40]	@ (80024a8 <SysTick_Config+0x40>)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	3b01      	subs	r3, #1
 8002484:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002486:	210f      	movs	r1, #15
 8002488:	f04f 30ff 	mov.w	r0, #4294967295
 800248c:	f7ff ff8e 	bl	80023ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002490:	4b05      	ldr	r3, [pc, #20]	@ (80024a8 <SysTick_Config+0x40>)
 8002492:	2200      	movs	r2, #0
 8002494:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002496:	4b04      	ldr	r3, [pc, #16]	@ (80024a8 <SysTick_Config+0x40>)
 8002498:	2207      	movs	r2, #7
 800249a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3708      	adds	r7, #8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	e000e010 	.word	0xe000e010

080024ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f7ff ff29 	bl	800230c <__NVIC_SetPriorityGrouping>
}
 80024ba:	bf00      	nop
 80024bc:	3708      	adds	r7, #8
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024c2:	b580      	push	{r7, lr}
 80024c4:	b086      	sub	sp, #24
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	4603      	mov	r3, r0
 80024ca:	60b9      	str	r1, [r7, #8]
 80024cc:	607a      	str	r2, [r7, #4]
 80024ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024d0:	2300      	movs	r3, #0
 80024d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024d4:	f7ff ff3e 	bl	8002354 <__NVIC_GetPriorityGrouping>
 80024d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	68b9      	ldr	r1, [r7, #8]
 80024de:	6978      	ldr	r0, [r7, #20]
 80024e0:	f7ff ff8e 	bl	8002400 <NVIC_EncodePriority>
 80024e4:	4602      	mov	r2, r0
 80024e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024ea:	4611      	mov	r1, r2
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7ff ff5d 	bl	80023ac <__NVIC_SetPriority>
}
 80024f2:	bf00      	nop
 80024f4:	3718      	adds	r7, #24
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}

080024fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024fa:	b580      	push	{r7, lr}
 80024fc:	b082      	sub	sp, #8
 80024fe:	af00      	add	r7, sp, #0
 8002500:	4603      	mov	r3, r0
 8002502:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002504:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002508:	4618      	mov	r0, r3
 800250a:	f7ff ff31 	bl	8002370 <__NVIC_EnableIRQ>
}
 800250e:	bf00      	nop
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002516:	b580      	push	{r7, lr}
 8002518:	b082      	sub	sp, #8
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f7ff ffa2 	bl	8002468 <SysTick_Config>
 8002524:	4603      	mov	r3, r0
}
 8002526:	4618      	mov	r0, r3
 8002528:	3708      	adds	r7, #8
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
	...

08002530 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b086      	sub	sp, #24
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002538:	2300      	movs	r3, #0
 800253a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800253c:	f7ff feb6 	bl	80022ac <HAL_GetTick>
 8002540:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d101      	bne.n	800254c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e099      	b.n	8002680 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2202      	movs	r2, #2
 8002550:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f022 0201 	bic.w	r2, r2, #1
 800256a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800256c:	e00f      	b.n	800258e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800256e:	f7ff fe9d 	bl	80022ac <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	2b05      	cmp	r3, #5
 800257a:	d908      	bls.n	800258e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2220      	movs	r2, #32
 8002580:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2203      	movs	r2, #3
 8002586:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e078      	b.n	8002680 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0301 	and.w	r3, r3, #1
 8002598:	2b00      	cmp	r3, #0
 800259a:	d1e8      	bne.n	800256e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80025a4:	697a      	ldr	r2, [r7, #20]
 80025a6:	4b38      	ldr	r3, [pc, #224]	@ (8002688 <HAL_DMA_Init+0x158>)
 80025a8:	4013      	ands	r3, r2
 80025aa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	685a      	ldr	r2, [r3, #4]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	691b      	ldr	r3, [r3, #16]
 80025c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	699b      	ldr	r3, [r3, #24]
 80025cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6a1b      	ldr	r3, [r3, #32]
 80025d8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025da:	697a      	ldr	r2, [r7, #20]
 80025dc:	4313      	orrs	r3, r2
 80025de:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e4:	2b04      	cmp	r3, #4
 80025e6:	d107      	bne.n	80025f8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f0:	4313      	orrs	r3, r2
 80025f2:	697a      	ldr	r2, [r7, #20]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	697a      	ldr	r2, [r7, #20]
 80025fe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	695b      	ldr	r3, [r3, #20]
 8002606:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	f023 0307 	bic.w	r3, r3, #7
 800260e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002614:	697a      	ldr	r2, [r7, #20]
 8002616:	4313      	orrs	r3, r2
 8002618:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800261e:	2b04      	cmp	r3, #4
 8002620:	d117      	bne.n	8002652 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002626:	697a      	ldr	r2, [r7, #20]
 8002628:	4313      	orrs	r3, r2
 800262a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002630:	2b00      	cmp	r3, #0
 8002632:	d00e      	beq.n	8002652 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f000 fb01 	bl	8002c3c <DMA_CheckFifoParam>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d008      	beq.n	8002652 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2240      	movs	r2, #64	@ 0x40
 8002644:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2201      	movs	r2, #1
 800264a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800264e:	2301      	movs	r3, #1
 8002650:	e016      	b.n	8002680 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	697a      	ldr	r2, [r7, #20]
 8002658:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f000 fab8 	bl	8002bd0 <DMA_CalcBaseAndBitshift>
 8002660:	4603      	mov	r3, r0
 8002662:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002668:	223f      	movs	r2, #63	@ 0x3f
 800266a:	409a      	lsls	r2, r3
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2201      	movs	r2, #1
 800267a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800267e:	2300      	movs	r3, #0
}
 8002680:	4618      	mov	r0, r3
 8002682:	3718      	adds	r7, #24
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	f010803f 	.word	0xf010803f

0800268c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b086      	sub	sp, #24
 8002690:	af00      	add	r7, sp, #0
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	60b9      	str	r1, [r7, #8]
 8002696:	607a      	str	r2, [r7, #4]
 8002698:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800269a:	2300      	movs	r3, #0
 800269c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026a2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d101      	bne.n	80026b2 <HAL_DMA_Start_IT+0x26>
 80026ae:	2302      	movs	r3, #2
 80026b0:	e040      	b.n	8002734 <HAL_DMA_Start_IT+0xa8>
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2201      	movs	r2, #1
 80026b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d12f      	bne.n	8002726 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2202      	movs	r2, #2
 80026ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2200      	movs	r2, #0
 80026d2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	68b9      	ldr	r1, [r7, #8]
 80026da:	68f8      	ldr	r0, [r7, #12]
 80026dc:	f000 fa4a 	bl	8002b74 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026e4:	223f      	movs	r2, #63	@ 0x3f
 80026e6:	409a      	lsls	r2, r3
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f042 0216 	orr.w	r2, r2, #22
 80026fa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002700:	2b00      	cmp	r3, #0
 8002702:	d007      	beq.n	8002714 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f042 0208 	orr.w	r2, r2, #8
 8002712:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f042 0201 	orr.w	r2, r2, #1
 8002722:	601a      	str	r2, [r3, #0]
 8002724:	e005      	b.n	8002732 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2200      	movs	r2, #0
 800272a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800272e:	2302      	movs	r3, #2
 8002730:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002732:	7dfb      	ldrb	r3, [r7, #23]
}
 8002734:	4618      	mov	r0, r3
 8002736:	3718      	adds	r7, #24
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002748:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800274a:	f7ff fdaf 	bl	80022ac <HAL_GetTick>
 800274e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002756:	b2db      	uxtb	r3, r3
 8002758:	2b02      	cmp	r3, #2
 800275a:	d008      	beq.n	800276e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2280      	movs	r2, #128	@ 0x80
 8002760:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e052      	b.n	8002814 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f022 0216 	bic.w	r2, r2, #22
 800277c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	695a      	ldr	r2, [r3, #20]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800278c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002792:	2b00      	cmp	r3, #0
 8002794:	d103      	bne.n	800279e <HAL_DMA_Abort+0x62>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800279a:	2b00      	cmp	r3, #0
 800279c:	d007      	beq.n	80027ae <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f022 0208 	bic.w	r2, r2, #8
 80027ac:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f022 0201 	bic.w	r2, r2, #1
 80027bc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027be:	e013      	b.n	80027e8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027c0:	f7ff fd74 	bl	80022ac <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	2b05      	cmp	r3, #5
 80027cc:	d90c      	bls.n	80027e8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2220      	movs	r2, #32
 80027d2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2203      	movs	r2, #3
 80027d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80027e4:	2303      	movs	r3, #3
 80027e6:	e015      	b.n	8002814 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0301 	and.w	r3, r3, #1
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d1e4      	bne.n	80027c0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027fa:	223f      	movs	r2, #63	@ 0x3f
 80027fc:	409a      	lsls	r2, r3
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2201      	movs	r2, #1
 8002806:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002812:	2300      	movs	r3, #0
}
 8002814:	4618      	mov	r0, r3
 8002816:	3710      	adds	r7, #16
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}

0800281c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800282a:	b2db      	uxtb	r3, r3
 800282c:	2b02      	cmp	r3, #2
 800282e:	d004      	beq.n	800283a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2280      	movs	r2, #128	@ 0x80
 8002834:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e00c      	b.n	8002854 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2205      	movs	r2, #5
 800283e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f022 0201 	bic.w	r2, r2, #1
 8002850:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002852:	2300      	movs	r3, #0
}
 8002854:	4618      	mov	r0, r3
 8002856:	370c      	adds	r7, #12
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b086      	sub	sp, #24
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002868:	2300      	movs	r3, #0
 800286a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800286c:	4b8e      	ldr	r3, [pc, #568]	@ (8002aa8 <HAL_DMA_IRQHandler+0x248>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a8e      	ldr	r2, [pc, #568]	@ (8002aac <HAL_DMA_IRQHandler+0x24c>)
 8002872:	fba2 2303 	umull	r2, r3, r2, r3
 8002876:	0a9b      	lsrs	r3, r3, #10
 8002878:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800287e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800288a:	2208      	movs	r2, #8
 800288c:	409a      	lsls	r2, r3
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	4013      	ands	r3, r2
 8002892:	2b00      	cmp	r3, #0
 8002894:	d01a      	beq.n	80028cc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0304 	and.w	r3, r3, #4
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d013      	beq.n	80028cc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f022 0204 	bic.w	r2, r2, #4
 80028b2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028b8:	2208      	movs	r2, #8
 80028ba:	409a      	lsls	r2, r3
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028c4:	f043 0201 	orr.w	r2, r3, #1
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028d0:	2201      	movs	r2, #1
 80028d2:	409a      	lsls	r2, r3
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	4013      	ands	r3, r2
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d012      	beq.n	8002902 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	695b      	ldr	r3, [r3, #20]
 80028e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d00b      	beq.n	8002902 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028ee:	2201      	movs	r2, #1
 80028f0:	409a      	lsls	r2, r3
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028fa:	f043 0202 	orr.w	r2, r3, #2
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002906:	2204      	movs	r2, #4
 8002908:	409a      	lsls	r2, r3
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	4013      	ands	r3, r2
 800290e:	2b00      	cmp	r3, #0
 8002910:	d012      	beq.n	8002938 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0302 	and.w	r3, r3, #2
 800291c:	2b00      	cmp	r3, #0
 800291e:	d00b      	beq.n	8002938 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002924:	2204      	movs	r2, #4
 8002926:	409a      	lsls	r2, r3
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002930:	f043 0204 	orr.w	r2, r3, #4
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800293c:	2210      	movs	r2, #16
 800293e:	409a      	lsls	r2, r3
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	4013      	ands	r3, r2
 8002944:	2b00      	cmp	r3, #0
 8002946:	d043      	beq.n	80029d0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0308 	and.w	r3, r3, #8
 8002952:	2b00      	cmp	r3, #0
 8002954:	d03c      	beq.n	80029d0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800295a:	2210      	movs	r2, #16
 800295c:	409a      	lsls	r2, r3
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d018      	beq.n	80029a2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d108      	bne.n	8002990 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002982:	2b00      	cmp	r3, #0
 8002984:	d024      	beq.n	80029d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	4798      	blx	r3
 800298e:	e01f      	b.n	80029d0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002994:	2b00      	cmp	r3, #0
 8002996:	d01b      	beq.n	80029d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	4798      	blx	r3
 80029a0:	e016      	b.n	80029d0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d107      	bne.n	80029c0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f022 0208 	bic.w	r2, r2, #8
 80029be:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d003      	beq.n	80029d0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029d4:	2220      	movs	r2, #32
 80029d6:	409a      	lsls	r2, r3
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	4013      	ands	r3, r2
 80029dc:	2b00      	cmp	r3, #0
 80029de:	f000 808f 	beq.w	8002b00 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0310 	and.w	r3, r3, #16
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	f000 8087 	beq.w	8002b00 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029f6:	2220      	movs	r2, #32
 80029f8:	409a      	lsls	r2, r3
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	2b05      	cmp	r3, #5
 8002a08:	d136      	bne.n	8002a78 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f022 0216 	bic.w	r2, r2, #22
 8002a18:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	695a      	ldr	r2, [r3, #20]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002a28:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d103      	bne.n	8002a3a <HAL_DMA_IRQHandler+0x1da>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d007      	beq.n	8002a4a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f022 0208 	bic.w	r2, r2, #8
 8002a48:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a4e:	223f      	movs	r2, #63	@ 0x3f
 8002a50:	409a      	lsls	r2, r3
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2201      	movs	r2, #1
 8002a5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d07e      	beq.n	8002b6c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	4798      	blx	r3
        }
        return;
 8002a76:	e079      	b.n	8002b6c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d01d      	beq.n	8002ac2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d10d      	bne.n	8002ab0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d031      	beq.n	8002b00 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	4798      	blx	r3
 8002aa4:	e02c      	b.n	8002b00 <HAL_DMA_IRQHandler+0x2a0>
 8002aa6:	bf00      	nop
 8002aa8:	20000008 	.word	0x20000008
 8002aac:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d023      	beq.n	8002b00 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	4798      	blx	r3
 8002ac0:	e01e      	b.n	8002b00 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d10f      	bne.n	8002af0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f022 0210 	bic.w	r2, r2, #16
 8002ade:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d003      	beq.n	8002b00 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d032      	beq.n	8002b6e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b0c:	f003 0301 	and.w	r3, r3, #1
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d022      	beq.n	8002b5a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2205      	movs	r2, #5
 8002b18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f022 0201 	bic.w	r2, r2, #1
 8002b2a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	3301      	adds	r3, #1
 8002b30:	60bb      	str	r3, [r7, #8]
 8002b32:	697a      	ldr	r2, [r7, #20]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d307      	bcc.n	8002b48 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0301 	and.w	r3, r3, #1
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d1f2      	bne.n	8002b2c <HAL_DMA_IRQHandler+0x2cc>
 8002b46:	e000      	b.n	8002b4a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002b48:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d005      	beq.n	8002b6e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	4798      	blx	r3
 8002b6a:	e000      	b.n	8002b6e <HAL_DMA_IRQHandler+0x30e>
        return;
 8002b6c:	bf00      	nop
    }
  }
}
 8002b6e:	3718      	adds	r7, #24
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b085      	sub	sp, #20
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	607a      	str	r2, [r7, #4]
 8002b80:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002b90:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	683a      	ldr	r2, [r7, #0]
 8002b98:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	2b40      	cmp	r3, #64	@ 0x40
 8002ba0:	d108      	bne.n	8002bb4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	68ba      	ldr	r2, [r7, #8]
 8002bb0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002bb2:	e007      	b.n	8002bc4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	68ba      	ldr	r2, [r7, #8]
 8002bba:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	60da      	str	r2, [r3, #12]
}
 8002bc4:	bf00      	nop
 8002bc6:	3714      	adds	r7, #20
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b085      	sub	sp, #20
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	3b10      	subs	r3, #16
 8002be0:	4a14      	ldr	r2, [pc, #80]	@ (8002c34 <DMA_CalcBaseAndBitshift+0x64>)
 8002be2:	fba2 2303 	umull	r2, r3, r2, r3
 8002be6:	091b      	lsrs	r3, r3, #4
 8002be8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002bea:	4a13      	ldr	r2, [pc, #76]	@ (8002c38 <DMA_CalcBaseAndBitshift+0x68>)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	4413      	add	r3, r2
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2b03      	cmp	r3, #3
 8002bfc:	d909      	bls.n	8002c12 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002c06:	f023 0303 	bic.w	r3, r3, #3
 8002c0a:	1d1a      	adds	r2, r3, #4
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002c10:	e007      	b.n	8002c22 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002c1a:	f023 0303 	bic.w	r3, r3, #3
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3714      	adds	r7, #20
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
 8002c32:	bf00      	nop
 8002c34:	aaaaaaab 	.word	0xaaaaaaab
 8002c38:	08006c28 	.word	0x08006c28

08002c3c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b085      	sub	sp, #20
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c44:	2300      	movs	r3, #0
 8002c46:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c4c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	699b      	ldr	r3, [r3, #24]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d11f      	bne.n	8002c96 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	2b03      	cmp	r3, #3
 8002c5a:	d856      	bhi.n	8002d0a <DMA_CheckFifoParam+0xce>
 8002c5c:	a201      	add	r2, pc, #4	@ (adr r2, 8002c64 <DMA_CheckFifoParam+0x28>)
 8002c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c62:	bf00      	nop
 8002c64:	08002c75 	.word	0x08002c75
 8002c68:	08002c87 	.word	0x08002c87
 8002c6c:	08002c75 	.word	0x08002c75
 8002c70:	08002d0b 	.word	0x08002d0b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c78:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d046      	beq.n	8002d0e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c84:	e043      	b.n	8002d0e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c8a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002c8e:	d140      	bne.n	8002d12 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c94:	e03d      	b.n	8002d12 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c9e:	d121      	bne.n	8002ce4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	2b03      	cmp	r3, #3
 8002ca4:	d837      	bhi.n	8002d16 <DMA_CheckFifoParam+0xda>
 8002ca6:	a201      	add	r2, pc, #4	@ (adr r2, 8002cac <DMA_CheckFifoParam+0x70>)
 8002ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cac:	08002cbd 	.word	0x08002cbd
 8002cb0:	08002cc3 	.word	0x08002cc3
 8002cb4:	08002cbd 	.word	0x08002cbd
 8002cb8:	08002cd5 	.word	0x08002cd5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	73fb      	strb	r3, [r7, #15]
      break;
 8002cc0:	e030      	b.n	8002d24 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cc6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d025      	beq.n	8002d1a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cd2:	e022      	b.n	8002d1a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cd8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002cdc:	d11f      	bne.n	8002d1e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002ce2:	e01c      	b.n	8002d1e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d903      	bls.n	8002cf2 <DMA_CheckFifoParam+0xb6>
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	2b03      	cmp	r3, #3
 8002cee:	d003      	beq.n	8002cf8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002cf0:	e018      	b.n	8002d24 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	73fb      	strb	r3, [r7, #15]
      break;
 8002cf6:	e015      	b.n	8002d24 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cfc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d00e      	beq.n	8002d22 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	73fb      	strb	r3, [r7, #15]
      break;
 8002d08:	e00b      	b.n	8002d22 <DMA_CheckFifoParam+0xe6>
      break;
 8002d0a:	bf00      	nop
 8002d0c:	e00a      	b.n	8002d24 <DMA_CheckFifoParam+0xe8>
      break;
 8002d0e:	bf00      	nop
 8002d10:	e008      	b.n	8002d24 <DMA_CheckFifoParam+0xe8>
      break;
 8002d12:	bf00      	nop
 8002d14:	e006      	b.n	8002d24 <DMA_CheckFifoParam+0xe8>
      break;
 8002d16:	bf00      	nop
 8002d18:	e004      	b.n	8002d24 <DMA_CheckFifoParam+0xe8>
      break;
 8002d1a:	bf00      	nop
 8002d1c:	e002      	b.n	8002d24 <DMA_CheckFifoParam+0xe8>
      break;   
 8002d1e:	bf00      	nop
 8002d20:	e000      	b.n	8002d24 <DMA_CheckFifoParam+0xe8>
      break;
 8002d22:	bf00      	nop
    }
  } 
  
  return status; 
 8002d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3714      	adds	r7, #20
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
 8002d32:	bf00      	nop

08002d34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b089      	sub	sp, #36	@ 0x24
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d42:	2300      	movs	r3, #0
 8002d44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d46:	2300      	movs	r3, #0
 8002d48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	61fb      	str	r3, [r7, #28]
 8002d4e:	e16b      	b.n	8003028 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d50:	2201      	movs	r2, #1
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	fa02 f303 	lsl.w	r3, r2, r3
 8002d58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	697a      	ldr	r2, [r7, #20]
 8002d60:	4013      	ands	r3, r2
 8002d62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d64:	693a      	ldr	r2, [r7, #16]
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	f040 815a 	bne.w	8003022 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	f003 0303 	and.w	r3, r3, #3
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d005      	beq.n	8002d86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d130      	bne.n	8002de8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	005b      	lsls	r3, r3, #1
 8002d90:	2203      	movs	r2, #3
 8002d92:	fa02 f303 	lsl.w	r3, r2, r3
 8002d96:	43db      	mvns	r3, r3
 8002d98:	69ba      	ldr	r2, [r7, #24]
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	68da      	ldr	r2, [r3, #12]
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	005b      	lsls	r3, r3, #1
 8002da6:	fa02 f303 	lsl.w	r3, r2, r3
 8002daa:	69ba      	ldr	r2, [r7, #24]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	69ba      	ldr	r2, [r7, #24]
 8002db4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc4:	43db      	mvns	r3, r3
 8002dc6:	69ba      	ldr	r2, [r7, #24]
 8002dc8:	4013      	ands	r3, r2
 8002dca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	091b      	lsrs	r3, r3, #4
 8002dd2:	f003 0201 	and.w	r2, r3, #1
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ddc:	69ba      	ldr	r2, [r7, #24]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	69ba      	ldr	r2, [r7, #24]
 8002de6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f003 0303 	and.w	r3, r3, #3
 8002df0:	2b03      	cmp	r3, #3
 8002df2:	d017      	beq.n	8002e24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	005b      	lsls	r3, r3, #1
 8002dfe:	2203      	movs	r2, #3
 8002e00:	fa02 f303 	lsl.w	r3, r2, r3
 8002e04:	43db      	mvns	r3, r3
 8002e06:	69ba      	ldr	r2, [r7, #24]
 8002e08:	4013      	ands	r3, r2
 8002e0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	689a      	ldr	r2, [r3, #8]
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	005b      	lsls	r3, r3, #1
 8002e14:	fa02 f303 	lsl.w	r3, r2, r3
 8002e18:	69ba      	ldr	r2, [r7, #24]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	69ba      	ldr	r2, [r7, #24]
 8002e22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f003 0303 	and.w	r3, r3, #3
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d123      	bne.n	8002e78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	08da      	lsrs	r2, r3, #3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	3208      	adds	r2, #8
 8002e38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	f003 0307 	and.w	r3, r3, #7
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	220f      	movs	r2, #15
 8002e48:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4c:	43db      	mvns	r3, r3
 8002e4e:	69ba      	ldr	r2, [r7, #24]
 8002e50:	4013      	ands	r3, r2
 8002e52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	691a      	ldr	r2, [r3, #16]
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	f003 0307 	and.w	r3, r3, #7
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	fa02 f303 	lsl.w	r3, r2, r3
 8002e64:	69ba      	ldr	r2, [r7, #24]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	08da      	lsrs	r2, r3, #3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	3208      	adds	r2, #8
 8002e72:	69b9      	ldr	r1, [r7, #24]
 8002e74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	005b      	lsls	r3, r3, #1
 8002e82:	2203      	movs	r2, #3
 8002e84:	fa02 f303 	lsl.w	r3, r2, r3
 8002e88:	43db      	mvns	r3, r3
 8002e8a:	69ba      	ldr	r2, [r7, #24]
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f003 0203 	and.w	r2, r3, #3
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	005b      	lsls	r3, r3, #1
 8002e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea0:	69ba      	ldr	r2, [r7, #24]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	69ba      	ldr	r2, [r7, #24]
 8002eaa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	f000 80b4 	beq.w	8003022 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eba:	2300      	movs	r3, #0
 8002ebc:	60fb      	str	r3, [r7, #12]
 8002ebe:	4b60      	ldr	r3, [pc, #384]	@ (8003040 <HAL_GPIO_Init+0x30c>)
 8002ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ec2:	4a5f      	ldr	r2, [pc, #380]	@ (8003040 <HAL_GPIO_Init+0x30c>)
 8002ec4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ec8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002eca:	4b5d      	ldr	r3, [pc, #372]	@ (8003040 <HAL_GPIO_Init+0x30c>)
 8002ecc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ece:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ed2:	60fb      	str	r3, [r7, #12]
 8002ed4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ed6:	4a5b      	ldr	r2, [pc, #364]	@ (8003044 <HAL_GPIO_Init+0x310>)
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	089b      	lsrs	r3, r3, #2
 8002edc:	3302      	adds	r3, #2
 8002ede:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	f003 0303 	and.w	r3, r3, #3
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	220f      	movs	r2, #15
 8002eee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef2:	43db      	mvns	r3, r3
 8002ef4:	69ba      	ldr	r2, [r7, #24]
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a52      	ldr	r2, [pc, #328]	@ (8003048 <HAL_GPIO_Init+0x314>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d02b      	beq.n	8002f5a <HAL_GPIO_Init+0x226>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a51      	ldr	r2, [pc, #324]	@ (800304c <HAL_GPIO_Init+0x318>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d025      	beq.n	8002f56 <HAL_GPIO_Init+0x222>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a50      	ldr	r2, [pc, #320]	@ (8003050 <HAL_GPIO_Init+0x31c>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d01f      	beq.n	8002f52 <HAL_GPIO_Init+0x21e>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a4f      	ldr	r2, [pc, #316]	@ (8003054 <HAL_GPIO_Init+0x320>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d019      	beq.n	8002f4e <HAL_GPIO_Init+0x21a>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a4e      	ldr	r2, [pc, #312]	@ (8003058 <HAL_GPIO_Init+0x324>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d013      	beq.n	8002f4a <HAL_GPIO_Init+0x216>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a4d      	ldr	r2, [pc, #308]	@ (800305c <HAL_GPIO_Init+0x328>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d00d      	beq.n	8002f46 <HAL_GPIO_Init+0x212>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a4c      	ldr	r2, [pc, #304]	@ (8003060 <HAL_GPIO_Init+0x32c>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d007      	beq.n	8002f42 <HAL_GPIO_Init+0x20e>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a4b      	ldr	r2, [pc, #300]	@ (8003064 <HAL_GPIO_Init+0x330>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d101      	bne.n	8002f3e <HAL_GPIO_Init+0x20a>
 8002f3a:	2307      	movs	r3, #7
 8002f3c:	e00e      	b.n	8002f5c <HAL_GPIO_Init+0x228>
 8002f3e:	2308      	movs	r3, #8
 8002f40:	e00c      	b.n	8002f5c <HAL_GPIO_Init+0x228>
 8002f42:	2306      	movs	r3, #6
 8002f44:	e00a      	b.n	8002f5c <HAL_GPIO_Init+0x228>
 8002f46:	2305      	movs	r3, #5
 8002f48:	e008      	b.n	8002f5c <HAL_GPIO_Init+0x228>
 8002f4a:	2304      	movs	r3, #4
 8002f4c:	e006      	b.n	8002f5c <HAL_GPIO_Init+0x228>
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e004      	b.n	8002f5c <HAL_GPIO_Init+0x228>
 8002f52:	2302      	movs	r3, #2
 8002f54:	e002      	b.n	8002f5c <HAL_GPIO_Init+0x228>
 8002f56:	2301      	movs	r3, #1
 8002f58:	e000      	b.n	8002f5c <HAL_GPIO_Init+0x228>
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	69fa      	ldr	r2, [r7, #28]
 8002f5e:	f002 0203 	and.w	r2, r2, #3
 8002f62:	0092      	lsls	r2, r2, #2
 8002f64:	4093      	lsls	r3, r2
 8002f66:	69ba      	ldr	r2, [r7, #24]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f6c:	4935      	ldr	r1, [pc, #212]	@ (8003044 <HAL_GPIO_Init+0x310>)
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	089b      	lsrs	r3, r3, #2
 8002f72:	3302      	adds	r3, #2
 8002f74:	69ba      	ldr	r2, [r7, #24]
 8002f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f7a:	4b3b      	ldr	r3, [pc, #236]	@ (8003068 <HAL_GPIO_Init+0x334>)
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	43db      	mvns	r3, r3
 8002f84:	69ba      	ldr	r2, [r7, #24]
 8002f86:	4013      	ands	r3, r2
 8002f88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d003      	beq.n	8002f9e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002f96:	69ba      	ldr	r2, [r7, #24]
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f9e:	4a32      	ldr	r2, [pc, #200]	@ (8003068 <HAL_GPIO_Init+0x334>)
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002fa4:	4b30      	ldr	r3, [pc, #192]	@ (8003068 <HAL_GPIO_Init+0x334>)
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	43db      	mvns	r3, r3
 8002fae:	69ba      	ldr	r2, [r7, #24]
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d003      	beq.n	8002fc8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002fc0:	69ba      	ldr	r2, [r7, #24]
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002fc8:	4a27      	ldr	r2, [pc, #156]	@ (8003068 <HAL_GPIO_Init+0x334>)
 8002fca:	69bb      	ldr	r3, [r7, #24]
 8002fcc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002fce:	4b26      	ldr	r3, [pc, #152]	@ (8003068 <HAL_GPIO_Init+0x334>)
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	43db      	mvns	r3, r3
 8002fd8:	69ba      	ldr	r2, [r7, #24]
 8002fda:	4013      	ands	r3, r2
 8002fdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d003      	beq.n	8002ff2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002fea:	69ba      	ldr	r2, [r7, #24]
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ff2:	4a1d      	ldr	r2, [pc, #116]	@ (8003068 <HAL_GPIO_Init+0x334>)
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ff8:	4b1b      	ldr	r3, [pc, #108]	@ (8003068 <HAL_GPIO_Init+0x334>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	43db      	mvns	r3, r3
 8003002:	69ba      	ldr	r2, [r7, #24]
 8003004:	4013      	ands	r3, r2
 8003006:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d003      	beq.n	800301c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003014:	69ba      	ldr	r2, [r7, #24]
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	4313      	orrs	r3, r2
 800301a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800301c:	4a12      	ldr	r2, [pc, #72]	@ (8003068 <HAL_GPIO_Init+0x334>)
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	3301      	adds	r3, #1
 8003026:	61fb      	str	r3, [r7, #28]
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	2b0f      	cmp	r3, #15
 800302c:	f67f ae90 	bls.w	8002d50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003030:	bf00      	nop
 8003032:	bf00      	nop
 8003034:	3724      	adds	r7, #36	@ 0x24
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr
 800303e:	bf00      	nop
 8003040:	40023800 	.word	0x40023800
 8003044:	40013800 	.word	0x40013800
 8003048:	40020000 	.word	0x40020000
 800304c:	40020400 	.word	0x40020400
 8003050:	40020800 	.word	0x40020800
 8003054:	40020c00 	.word	0x40020c00
 8003058:	40021000 	.word	0x40021000
 800305c:	40021400 	.word	0x40021400
 8003060:	40021800 	.word	0x40021800
 8003064:	40021c00 	.word	0x40021c00
 8003068:	40013c00 	.word	0x40013c00

0800306c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800306c:	b480      	push	{r7}
 800306e:	b087      	sub	sp, #28
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003076:	2300      	movs	r3, #0
 8003078:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800307a:	2300      	movs	r3, #0
 800307c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800307e:	2300      	movs	r3, #0
 8003080:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003082:	2300      	movs	r3, #0
 8003084:	617b      	str	r3, [r7, #20]
 8003086:	e0cd      	b.n	8003224 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003088:	2201      	movs	r2, #1
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	fa02 f303 	lsl.w	r3, r2, r3
 8003090:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003092:	683a      	ldr	r2, [r7, #0]
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	4013      	ands	r3, r2
 8003098:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800309a:	68fa      	ldr	r2, [r7, #12]
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	429a      	cmp	r2, r3
 80030a0:	f040 80bd 	bne.w	800321e <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80030a4:	4a65      	ldr	r2, [pc, #404]	@ (800323c <HAL_GPIO_DeInit+0x1d0>)
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	089b      	lsrs	r3, r3, #2
 80030aa:	3302      	adds	r3, #2
 80030ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030b0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	f003 0303 	and.w	r3, r3, #3
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	220f      	movs	r2, #15
 80030bc:	fa02 f303 	lsl.w	r3, r2, r3
 80030c0:	68ba      	ldr	r2, [r7, #8]
 80030c2:	4013      	ands	r3, r2
 80030c4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a5d      	ldr	r2, [pc, #372]	@ (8003240 <HAL_GPIO_DeInit+0x1d4>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d02b      	beq.n	8003126 <HAL_GPIO_DeInit+0xba>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a5c      	ldr	r2, [pc, #368]	@ (8003244 <HAL_GPIO_DeInit+0x1d8>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d025      	beq.n	8003122 <HAL_GPIO_DeInit+0xb6>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a5b      	ldr	r2, [pc, #364]	@ (8003248 <HAL_GPIO_DeInit+0x1dc>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d01f      	beq.n	800311e <HAL_GPIO_DeInit+0xb2>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a5a      	ldr	r2, [pc, #360]	@ (800324c <HAL_GPIO_DeInit+0x1e0>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d019      	beq.n	800311a <HAL_GPIO_DeInit+0xae>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a59      	ldr	r2, [pc, #356]	@ (8003250 <HAL_GPIO_DeInit+0x1e4>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d013      	beq.n	8003116 <HAL_GPIO_DeInit+0xaa>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a58      	ldr	r2, [pc, #352]	@ (8003254 <HAL_GPIO_DeInit+0x1e8>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d00d      	beq.n	8003112 <HAL_GPIO_DeInit+0xa6>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a57      	ldr	r2, [pc, #348]	@ (8003258 <HAL_GPIO_DeInit+0x1ec>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d007      	beq.n	800310e <HAL_GPIO_DeInit+0xa2>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a56      	ldr	r2, [pc, #344]	@ (800325c <HAL_GPIO_DeInit+0x1f0>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d101      	bne.n	800310a <HAL_GPIO_DeInit+0x9e>
 8003106:	2307      	movs	r3, #7
 8003108:	e00e      	b.n	8003128 <HAL_GPIO_DeInit+0xbc>
 800310a:	2308      	movs	r3, #8
 800310c:	e00c      	b.n	8003128 <HAL_GPIO_DeInit+0xbc>
 800310e:	2306      	movs	r3, #6
 8003110:	e00a      	b.n	8003128 <HAL_GPIO_DeInit+0xbc>
 8003112:	2305      	movs	r3, #5
 8003114:	e008      	b.n	8003128 <HAL_GPIO_DeInit+0xbc>
 8003116:	2304      	movs	r3, #4
 8003118:	e006      	b.n	8003128 <HAL_GPIO_DeInit+0xbc>
 800311a:	2303      	movs	r3, #3
 800311c:	e004      	b.n	8003128 <HAL_GPIO_DeInit+0xbc>
 800311e:	2302      	movs	r3, #2
 8003120:	e002      	b.n	8003128 <HAL_GPIO_DeInit+0xbc>
 8003122:	2301      	movs	r3, #1
 8003124:	e000      	b.n	8003128 <HAL_GPIO_DeInit+0xbc>
 8003126:	2300      	movs	r3, #0
 8003128:	697a      	ldr	r2, [r7, #20]
 800312a:	f002 0203 	and.w	r2, r2, #3
 800312e:	0092      	lsls	r2, r2, #2
 8003130:	4093      	lsls	r3, r2
 8003132:	68ba      	ldr	r2, [r7, #8]
 8003134:	429a      	cmp	r2, r3
 8003136:	d132      	bne.n	800319e <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003138:	4b49      	ldr	r3, [pc, #292]	@ (8003260 <HAL_GPIO_DeInit+0x1f4>)
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	43db      	mvns	r3, r3
 8003140:	4947      	ldr	r1, [pc, #284]	@ (8003260 <HAL_GPIO_DeInit+0x1f4>)
 8003142:	4013      	ands	r3, r2
 8003144:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003146:	4b46      	ldr	r3, [pc, #280]	@ (8003260 <HAL_GPIO_DeInit+0x1f4>)
 8003148:	685a      	ldr	r2, [r3, #4]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	43db      	mvns	r3, r3
 800314e:	4944      	ldr	r1, [pc, #272]	@ (8003260 <HAL_GPIO_DeInit+0x1f4>)
 8003150:	4013      	ands	r3, r2
 8003152:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003154:	4b42      	ldr	r3, [pc, #264]	@ (8003260 <HAL_GPIO_DeInit+0x1f4>)
 8003156:	68da      	ldr	r2, [r3, #12]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	43db      	mvns	r3, r3
 800315c:	4940      	ldr	r1, [pc, #256]	@ (8003260 <HAL_GPIO_DeInit+0x1f4>)
 800315e:	4013      	ands	r3, r2
 8003160:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003162:	4b3f      	ldr	r3, [pc, #252]	@ (8003260 <HAL_GPIO_DeInit+0x1f4>)
 8003164:	689a      	ldr	r2, [r3, #8]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	43db      	mvns	r3, r3
 800316a:	493d      	ldr	r1, [pc, #244]	@ (8003260 <HAL_GPIO_DeInit+0x1f4>)
 800316c:	4013      	ands	r3, r2
 800316e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	f003 0303 	and.w	r3, r3, #3
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	220f      	movs	r2, #15
 800317a:	fa02 f303 	lsl.w	r3, r2, r3
 800317e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003180:	4a2e      	ldr	r2, [pc, #184]	@ (800323c <HAL_GPIO_DeInit+0x1d0>)
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	089b      	lsrs	r3, r3, #2
 8003186:	3302      	adds	r3, #2
 8003188:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	43da      	mvns	r2, r3
 8003190:	482a      	ldr	r0, [pc, #168]	@ (800323c <HAL_GPIO_DeInit+0x1d0>)
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	089b      	lsrs	r3, r3, #2
 8003196:	400a      	ands	r2, r1
 8003198:	3302      	adds	r3, #2
 800319a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	005b      	lsls	r3, r3, #1
 80031a6:	2103      	movs	r1, #3
 80031a8:	fa01 f303 	lsl.w	r3, r1, r3
 80031ac:	43db      	mvns	r3, r3
 80031ae:	401a      	ands	r2, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	08da      	lsrs	r2, r3, #3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	3208      	adds	r2, #8
 80031bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	f003 0307 	and.w	r3, r3, #7
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	220f      	movs	r2, #15
 80031ca:	fa02 f303 	lsl.w	r3, r2, r3
 80031ce:	43db      	mvns	r3, r3
 80031d0:	697a      	ldr	r2, [r7, #20]
 80031d2:	08d2      	lsrs	r2, r2, #3
 80031d4:	4019      	ands	r1, r3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	3208      	adds	r2, #8
 80031da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	68da      	ldr	r2, [r3, #12]
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	005b      	lsls	r3, r3, #1
 80031e6:	2103      	movs	r1, #3
 80031e8:	fa01 f303 	lsl.w	r3, r1, r3
 80031ec:	43db      	mvns	r3, r3
 80031ee:	401a      	ands	r2, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685a      	ldr	r2, [r3, #4]
 80031f8:	2101      	movs	r1, #1
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003200:	43db      	mvns	r3, r3
 8003202:	401a      	ands	r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	689a      	ldr	r2, [r3, #8]
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	005b      	lsls	r3, r3, #1
 8003210:	2103      	movs	r1, #3
 8003212:	fa01 f303 	lsl.w	r3, r1, r3
 8003216:	43db      	mvns	r3, r3
 8003218:	401a      	ands	r2, r3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	3301      	adds	r3, #1
 8003222:	617b      	str	r3, [r7, #20]
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	2b0f      	cmp	r3, #15
 8003228:	f67f af2e 	bls.w	8003088 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800322c:	bf00      	nop
 800322e:	bf00      	nop
 8003230:	371c      	adds	r7, #28
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop
 800323c:	40013800 	.word	0x40013800
 8003240:	40020000 	.word	0x40020000
 8003244:	40020400 	.word	0x40020400
 8003248:	40020800 	.word	0x40020800
 800324c:	40020c00 	.word	0x40020c00
 8003250:	40021000 	.word	0x40021000
 8003254:	40021400 	.word	0x40021400
 8003258:	40021800 	.word	0x40021800
 800325c:	40021c00 	.word	0x40021c00
 8003260:	40013c00 	.word	0x40013c00

08003264 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003264:	b480      	push	{r7}
 8003266:	b085      	sub	sp, #20
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	460b      	mov	r3, r1
 800326e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	691a      	ldr	r2, [r3, #16]
 8003274:	887b      	ldrh	r3, [r7, #2]
 8003276:	4013      	ands	r3, r2
 8003278:	2b00      	cmp	r3, #0
 800327a:	d002      	beq.n	8003282 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800327c:	2301      	movs	r3, #1
 800327e:	73fb      	strb	r3, [r7, #15]
 8003280:	e001      	b.n	8003286 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003282:	2300      	movs	r3, #0
 8003284:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003286:	7bfb      	ldrb	r3, [r7, #15]
}
 8003288:	4618      	mov	r0, r3
 800328a:	3714      	adds	r7, #20
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr

08003294 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	460b      	mov	r3, r1
 800329e:	807b      	strh	r3, [r7, #2]
 80032a0:	4613      	mov	r3, r2
 80032a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032a4:	787b      	ldrb	r3, [r7, #1]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d003      	beq.n	80032b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032aa:	887a      	ldrh	r2, [r7, #2]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80032b0:	e003      	b.n	80032ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80032b2:	887b      	ldrh	r3, [r7, #2]
 80032b4:	041a      	lsls	r2, r3, #16
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	619a      	str	r2, [r3, #24]
}
 80032ba:	bf00      	nop
 80032bc:	370c      	adds	r7, #12
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr
	...

080032c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b082      	sub	sp, #8
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	4603      	mov	r3, r0
 80032d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80032d2:	4b08      	ldr	r3, [pc, #32]	@ (80032f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032d4:	695a      	ldr	r2, [r3, #20]
 80032d6:	88fb      	ldrh	r3, [r7, #6]
 80032d8:	4013      	ands	r3, r2
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d006      	beq.n	80032ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80032de:	4a05      	ldr	r2, [pc, #20]	@ (80032f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032e0:	88fb      	ldrh	r3, [r7, #6]
 80032e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80032e4:	88fb      	ldrh	r3, [r7, #6]
 80032e6:	4618      	mov	r0, r3
 80032e8:	f7fd f9d2 	bl	8000690 <HAL_GPIO_EXTI_Callback>
  }
}
 80032ec:	bf00      	nop
 80032ee:	3708      	adds	r7, #8
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	40013c00 	.word	0x40013c00

080032f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b086      	sub	sp, #24
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d101      	bne.n	800330a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e267      	b.n	80037da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0301 	and.w	r3, r3, #1
 8003312:	2b00      	cmp	r3, #0
 8003314:	d075      	beq.n	8003402 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003316:	4b88      	ldr	r3, [pc, #544]	@ (8003538 <HAL_RCC_OscConfig+0x240>)
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	f003 030c 	and.w	r3, r3, #12
 800331e:	2b04      	cmp	r3, #4
 8003320:	d00c      	beq.n	800333c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003322:	4b85      	ldr	r3, [pc, #532]	@ (8003538 <HAL_RCC_OscConfig+0x240>)
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800332a:	2b08      	cmp	r3, #8
 800332c:	d112      	bne.n	8003354 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800332e:	4b82      	ldr	r3, [pc, #520]	@ (8003538 <HAL_RCC_OscConfig+0x240>)
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003336:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800333a:	d10b      	bne.n	8003354 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800333c:	4b7e      	ldr	r3, [pc, #504]	@ (8003538 <HAL_RCC_OscConfig+0x240>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d05b      	beq.n	8003400 <HAL_RCC_OscConfig+0x108>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d157      	bne.n	8003400 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e242      	b.n	80037da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800335c:	d106      	bne.n	800336c <HAL_RCC_OscConfig+0x74>
 800335e:	4b76      	ldr	r3, [pc, #472]	@ (8003538 <HAL_RCC_OscConfig+0x240>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a75      	ldr	r2, [pc, #468]	@ (8003538 <HAL_RCC_OscConfig+0x240>)
 8003364:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003368:	6013      	str	r3, [r2, #0]
 800336a:	e01d      	b.n	80033a8 <HAL_RCC_OscConfig+0xb0>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003374:	d10c      	bne.n	8003390 <HAL_RCC_OscConfig+0x98>
 8003376:	4b70      	ldr	r3, [pc, #448]	@ (8003538 <HAL_RCC_OscConfig+0x240>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a6f      	ldr	r2, [pc, #444]	@ (8003538 <HAL_RCC_OscConfig+0x240>)
 800337c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003380:	6013      	str	r3, [r2, #0]
 8003382:	4b6d      	ldr	r3, [pc, #436]	@ (8003538 <HAL_RCC_OscConfig+0x240>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a6c      	ldr	r2, [pc, #432]	@ (8003538 <HAL_RCC_OscConfig+0x240>)
 8003388:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800338c:	6013      	str	r3, [r2, #0]
 800338e:	e00b      	b.n	80033a8 <HAL_RCC_OscConfig+0xb0>
 8003390:	4b69      	ldr	r3, [pc, #420]	@ (8003538 <HAL_RCC_OscConfig+0x240>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a68      	ldr	r2, [pc, #416]	@ (8003538 <HAL_RCC_OscConfig+0x240>)
 8003396:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800339a:	6013      	str	r3, [r2, #0]
 800339c:	4b66      	ldr	r3, [pc, #408]	@ (8003538 <HAL_RCC_OscConfig+0x240>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a65      	ldr	r2, [pc, #404]	@ (8003538 <HAL_RCC_OscConfig+0x240>)
 80033a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d013      	beq.n	80033d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033b0:	f7fe ff7c 	bl	80022ac <HAL_GetTick>
 80033b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033b6:	e008      	b.n	80033ca <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033b8:	f7fe ff78 	bl	80022ac <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	2b64      	cmp	r3, #100	@ 0x64
 80033c4:	d901      	bls.n	80033ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e207      	b.n	80037da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ca:	4b5b      	ldr	r3, [pc, #364]	@ (8003538 <HAL_RCC_OscConfig+0x240>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d0f0      	beq.n	80033b8 <HAL_RCC_OscConfig+0xc0>
 80033d6:	e014      	b.n	8003402 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033d8:	f7fe ff68 	bl	80022ac <HAL_GetTick>
 80033dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033de:	e008      	b.n	80033f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033e0:	f7fe ff64 	bl	80022ac <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	2b64      	cmp	r3, #100	@ 0x64
 80033ec:	d901      	bls.n	80033f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e1f3      	b.n	80037da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033f2:	4b51      	ldr	r3, [pc, #324]	@ (8003538 <HAL_RCC_OscConfig+0x240>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d1f0      	bne.n	80033e0 <HAL_RCC_OscConfig+0xe8>
 80033fe:	e000      	b.n	8003402 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003400:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0302 	and.w	r3, r3, #2
 800340a:	2b00      	cmp	r3, #0
 800340c:	d063      	beq.n	80034d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800340e:	4b4a      	ldr	r3, [pc, #296]	@ (8003538 <HAL_RCC_OscConfig+0x240>)
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	f003 030c 	and.w	r3, r3, #12
 8003416:	2b00      	cmp	r3, #0
 8003418:	d00b      	beq.n	8003432 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800341a:	4b47      	ldr	r3, [pc, #284]	@ (8003538 <HAL_RCC_OscConfig+0x240>)
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003422:	2b08      	cmp	r3, #8
 8003424:	d11c      	bne.n	8003460 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003426:	4b44      	ldr	r3, [pc, #272]	@ (8003538 <HAL_RCC_OscConfig+0x240>)
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d116      	bne.n	8003460 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003432:	4b41      	ldr	r3, [pc, #260]	@ (8003538 <HAL_RCC_OscConfig+0x240>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0302 	and.w	r3, r3, #2
 800343a:	2b00      	cmp	r3, #0
 800343c:	d005      	beq.n	800344a <HAL_RCC_OscConfig+0x152>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	2b01      	cmp	r3, #1
 8003444:	d001      	beq.n	800344a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e1c7      	b.n	80037da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800344a:	4b3b      	ldr	r3, [pc, #236]	@ (8003538 <HAL_RCC_OscConfig+0x240>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	691b      	ldr	r3, [r3, #16]
 8003456:	00db      	lsls	r3, r3, #3
 8003458:	4937      	ldr	r1, [pc, #220]	@ (8003538 <HAL_RCC_OscConfig+0x240>)
 800345a:	4313      	orrs	r3, r2
 800345c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800345e:	e03a      	b.n	80034d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d020      	beq.n	80034aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003468:	4b34      	ldr	r3, [pc, #208]	@ (800353c <HAL_RCC_OscConfig+0x244>)
 800346a:	2201      	movs	r2, #1
 800346c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800346e:	f7fe ff1d 	bl	80022ac <HAL_GetTick>
 8003472:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003474:	e008      	b.n	8003488 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003476:	f7fe ff19 	bl	80022ac <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	2b02      	cmp	r3, #2
 8003482:	d901      	bls.n	8003488 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	e1a8      	b.n	80037da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003488:	4b2b      	ldr	r3, [pc, #172]	@ (8003538 <HAL_RCC_OscConfig+0x240>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0302 	and.w	r3, r3, #2
 8003490:	2b00      	cmp	r3, #0
 8003492:	d0f0      	beq.n	8003476 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003494:	4b28      	ldr	r3, [pc, #160]	@ (8003538 <HAL_RCC_OscConfig+0x240>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	691b      	ldr	r3, [r3, #16]
 80034a0:	00db      	lsls	r3, r3, #3
 80034a2:	4925      	ldr	r1, [pc, #148]	@ (8003538 <HAL_RCC_OscConfig+0x240>)
 80034a4:	4313      	orrs	r3, r2
 80034a6:	600b      	str	r3, [r1, #0]
 80034a8:	e015      	b.n	80034d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034aa:	4b24      	ldr	r3, [pc, #144]	@ (800353c <HAL_RCC_OscConfig+0x244>)
 80034ac:	2200      	movs	r2, #0
 80034ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b0:	f7fe fefc 	bl	80022ac <HAL_GetTick>
 80034b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034b6:	e008      	b.n	80034ca <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034b8:	f7fe fef8 	bl	80022ac <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d901      	bls.n	80034ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e187      	b.n	80037da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034ca:	4b1b      	ldr	r3, [pc, #108]	@ (8003538 <HAL_RCC_OscConfig+0x240>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0302 	and.w	r3, r3, #2
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d1f0      	bne.n	80034b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0308 	and.w	r3, r3, #8
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d036      	beq.n	8003550 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	695b      	ldr	r3, [r3, #20]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d016      	beq.n	8003518 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034ea:	4b15      	ldr	r3, [pc, #84]	@ (8003540 <HAL_RCC_OscConfig+0x248>)
 80034ec:	2201      	movs	r2, #1
 80034ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034f0:	f7fe fedc 	bl	80022ac <HAL_GetTick>
 80034f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034f6:	e008      	b.n	800350a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034f8:	f7fe fed8 	bl	80022ac <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	2b02      	cmp	r3, #2
 8003504:	d901      	bls.n	800350a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e167      	b.n	80037da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800350a:	4b0b      	ldr	r3, [pc, #44]	@ (8003538 <HAL_RCC_OscConfig+0x240>)
 800350c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800350e:	f003 0302 	and.w	r3, r3, #2
 8003512:	2b00      	cmp	r3, #0
 8003514:	d0f0      	beq.n	80034f8 <HAL_RCC_OscConfig+0x200>
 8003516:	e01b      	b.n	8003550 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003518:	4b09      	ldr	r3, [pc, #36]	@ (8003540 <HAL_RCC_OscConfig+0x248>)
 800351a:	2200      	movs	r2, #0
 800351c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800351e:	f7fe fec5 	bl	80022ac <HAL_GetTick>
 8003522:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003524:	e00e      	b.n	8003544 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003526:	f7fe fec1 	bl	80022ac <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	2b02      	cmp	r3, #2
 8003532:	d907      	bls.n	8003544 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003534:	2303      	movs	r3, #3
 8003536:	e150      	b.n	80037da <HAL_RCC_OscConfig+0x4e2>
 8003538:	40023800 	.word	0x40023800
 800353c:	42470000 	.word	0x42470000
 8003540:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003544:	4b88      	ldr	r3, [pc, #544]	@ (8003768 <HAL_RCC_OscConfig+0x470>)
 8003546:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003548:	f003 0302 	and.w	r3, r3, #2
 800354c:	2b00      	cmp	r3, #0
 800354e:	d1ea      	bne.n	8003526 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0304 	and.w	r3, r3, #4
 8003558:	2b00      	cmp	r3, #0
 800355a:	f000 8097 	beq.w	800368c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800355e:	2300      	movs	r3, #0
 8003560:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003562:	4b81      	ldr	r3, [pc, #516]	@ (8003768 <HAL_RCC_OscConfig+0x470>)
 8003564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003566:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d10f      	bne.n	800358e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800356e:	2300      	movs	r3, #0
 8003570:	60bb      	str	r3, [r7, #8]
 8003572:	4b7d      	ldr	r3, [pc, #500]	@ (8003768 <HAL_RCC_OscConfig+0x470>)
 8003574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003576:	4a7c      	ldr	r2, [pc, #496]	@ (8003768 <HAL_RCC_OscConfig+0x470>)
 8003578:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800357c:	6413      	str	r3, [r2, #64]	@ 0x40
 800357e:	4b7a      	ldr	r3, [pc, #488]	@ (8003768 <HAL_RCC_OscConfig+0x470>)
 8003580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003582:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003586:	60bb      	str	r3, [r7, #8]
 8003588:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800358a:	2301      	movs	r3, #1
 800358c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800358e:	4b77      	ldr	r3, [pc, #476]	@ (800376c <HAL_RCC_OscConfig+0x474>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003596:	2b00      	cmp	r3, #0
 8003598:	d118      	bne.n	80035cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800359a:	4b74      	ldr	r3, [pc, #464]	@ (800376c <HAL_RCC_OscConfig+0x474>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a73      	ldr	r2, [pc, #460]	@ (800376c <HAL_RCC_OscConfig+0x474>)
 80035a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035a6:	f7fe fe81 	bl	80022ac <HAL_GetTick>
 80035aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ac:	e008      	b.n	80035c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035ae:	f7fe fe7d 	bl	80022ac <HAL_GetTick>
 80035b2:	4602      	mov	r2, r0
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	d901      	bls.n	80035c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80035bc:	2303      	movs	r3, #3
 80035be:	e10c      	b.n	80037da <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035c0:	4b6a      	ldr	r3, [pc, #424]	@ (800376c <HAL_RCC_OscConfig+0x474>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d0f0      	beq.n	80035ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d106      	bne.n	80035e2 <HAL_RCC_OscConfig+0x2ea>
 80035d4:	4b64      	ldr	r3, [pc, #400]	@ (8003768 <HAL_RCC_OscConfig+0x470>)
 80035d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035d8:	4a63      	ldr	r2, [pc, #396]	@ (8003768 <HAL_RCC_OscConfig+0x470>)
 80035da:	f043 0301 	orr.w	r3, r3, #1
 80035de:	6713      	str	r3, [r2, #112]	@ 0x70
 80035e0:	e01c      	b.n	800361c <HAL_RCC_OscConfig+0x324>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	2b05      	cmp	r3, #5
 80035e8:	d10c      	bne.n	8003604 <HAL_RCC_OscConfig+0x30c>
 80035ea:	4b5f      	ldr	r3, [pc, #380]	@ (8003768 <HAL_RCC_OscConfig+0x470>)
 80035ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035ee:	4a5e      	ldr	r2, [pc, #376]	@ (8003768 <HAL_RCC_OscConfig+0x470>)
 80035f0:	f043 0304 	orr.w	r3, r3, #4
 80035f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80035f6:	4b5c      	ldr	r3, [pc, #368]	@ (8003768 <HAL_RCC_OscConfig+0x470>)
 80035f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035fa:	4a5b      	ldr	r2, [pc, #364]	@ (8003768 <HAL_RCC_OscConfig+0x470>)
 80035fc:	f043 0301 	orr.w	r3, r3, #1
 8003600:	6713      	str	r3, [r2, #112]	@ 0x70
 8003602:	e00b      	b.n	800361c <HAL_RCC_OscConfig+0x324>
 8003604:	4b58      	ldr	r3, [pc, #352]	@ (8003768 <HAL_RCC_OscConfig+0x470>)
 8003606:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003608:	4a57      	ldr	r2, [pc, #348]	@ (8003768 <HAL_RCC_OscConfig+0x470>)
 800360a:	f023 0301 	bic.w	r3, r3, #1
 800360e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003610:	4b55      	ldr	r3, [pc, #340]	@ (8003768 <HAL_RCC_OscConfig+0x470>)
 8003612:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003614:	4a54      	ldr	r2, [pc, #336]	@ (8003768 <HAL_RCC_OscConfig+0x470>)
 8003616:	f023 0304 	bic.w	r3, r3, #4
 800361a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d015      	beq.n	8003650 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003624:	f7fe fe42 	bl	80022ac <HAL_GetTick>
 8003628:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800362a:	e00a      	b.n	8003642 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800362c:	f7fe fe3e 	bl	80022ac <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	f241 3288 	movw	r2, #5000	@ 0x1388
 800363a:	4293      	cmp	r3, r2
 800363c:	d901      	bls.n	8003642 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e0cb      	b.n	80037da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003642:	4b49      	ldr	r3, [pc, #292]	@ (8003768 <HAL_RCC_OscConfig+0x470>)
 8003644:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003646:	f003 0302 	and.w	r3, r3, #2
 800364a:	2b00      	cmp	r3, #0
 800364c:	d0ee      	beq.n	800362c <HAL_RCC_OscConfig+0x334>
 800364e:	e014      	b.n	800367a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003650:	f7fe fe2c 	bl	80022ac <HAL_GetTick>
 8003654:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003656:	e00a      	b.n	800366e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003658:	f7fe fe28 	bl	80022ac <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003666:	4293      	cmp	r3, r2
 8003668:	d901      	bls.n	800366e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e0b5      	b.n	80037da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800366e:	4b3e      	ldr	r3, [pc, #248]	@ (8003768 <HAL_RCC_OscConfig+0x470>)
 8003670:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003672:	f003 0302 	and.w	r3, r3, #2
 8003676:	2b00      	cmp	r3, #0
 8003678:	d1ee      	bne.n	8003658 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800367a:	7dfb      	ldrb	r3, [r7, #23]
 800367c:	2b01      	cmp	r3, #1
 800367e:	d105      	bne.n	800368c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003680:	4b39      	ldr	r3, [pc, #228]	@ (8003768 <HAL_RCC_OscConfig+0x470>)
 8003682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003684:	4a38      	ldr	r2, [pc, #224]	@ (8003768 <HAL_RCC_OscConfig+0x470>)
 8003686:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800368a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	699b      	ldr	r3, [r3, #24]
 8003690:	2b00      	cmp	r3, #0
 8003692:	f000 80a1 	beq.w	80037d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003696:	4b34      	ldr	r3, [pc, #208]	@ (8003768 <HAL_RCC_OscConfig+0x470>)
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	f003 030c 	and.w	r3, r3, #12
 800369e:	2b08      	cmp	r3, #8
 80036a0:	d05c      	beq.n	800375c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	699b      	ldr	r3, [r3, #24]
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d141      	bne.n	800372e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036aa:	4b31      	ldr	r3, [pc, #196]	@ (8003770 <HAL_RCC_OscConfig+0x478>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036b0:	f7fe fdfc 	bl	80022ac <HAL_GetTick>
 80036b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036b6:	e008      	b.n	80036ca <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036b8:	f7fe fdf8 	bl	80022ac <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d901      	bls.n	80036ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e087      	b.n	80037da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ca:	4b27      	ldr	r3, [pc, #156]	@ (8003768 <HAL_RCC_OscConfig+0x470>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d1f0      	bne.n	80036b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	69da      	ldr	r2, [r3, #28]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a1b      	ldr	r3, [r3, #32]
 80036de:	431a      	orrs	r2, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036e4:	019b      	lsls	r3, r3, #6
 80036e6:	431a      	orrs	r2, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036ec:	085b      	lsrs	r3, r3, #1
 80036ee:	3b01      	subs	r3, #1
 80036f0:	041b      	lsls	r3, r3, #16
 80036f2:	431a      	orrs	r2, r3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036f8:	061b      	lsls	r3, r3, #24
 80036fa:	491b      	ldr	r1, [pc, #108]	@ (8003768 <HAL_RCC_OscConfig+0x470>)
 80036fc:	4313      	orrs	r3, r2
 80036fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003700:	4b1b      	ldr	r3, [pc, #108]	@ (8003770 <HAL_RCC_OscConfig+0x478>)
 8003702:	2201      	movs	r2, #1
 8003704:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003706:	f7fe fdd1 	bl	80022ac <HAL_GetTick>
 800370a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800370c:	e008      	b.n	8003720 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800370e:	f7fe fdcd 	bl	80022ac <HAL_GetTick>
 8003712:	4602      	mov	r2, r0
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	2b02      	cmp	r3, #2
 800371a:	d901      	bls.n	8003720 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800371c:	2303      	movs	r3, #3
 800371e:	e05c      	b.n	80037da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003720:	4b11      	ldr	r3, [pc, #68]	@ (8003768 <HAL_RCC_OscConfig+0x470>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003728:	2b00      	cmp	r3, #0
 800372a:	d0f0      	beq.n	800370e <HAL_RCC_OscConfig+0x416>
 800372c:	e054      	b.n	80037d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800372e:	4b10      	ldr	r3, [pc, #64]	@ (8003770 <HAL_RCC_OscConfig+0x478>)
 8003730:	2200      	movs	r2, #0
 8003732:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003734:	f7fe fdba 	bl	80022ac <HAL_GetTick>
 8003738:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800373a:	e008      	b.n	800374e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800373c:	f7fe fdb6 	bl	80022ac <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	2b02      	cmp	r3, #2
 8003748:	d901      	bls.n	800374e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e045      	b.n	80037da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800374e:	4b06      	ldr	r3, [pc, #24]	@ (8003768 <HAL_RCC_OscConfig+0x470>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1f0      	bne.n	800373c <HAL_RCC_OscConfig+0x444>
 800375a:	e03d      	b.n	80037d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	699b      	ldr	r3, [r3, #24]
 8003760:	2b01      	cmp	r3, #1
 8003762:	d107      	bne.n	8003774 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e038      	b.n	80037da <HAL_RCC_OscConfig+0x4e2>
 8003768:	40023800 	.word	0x40023800
 800376c:	40007000 	.word	0x40007000
 8003770:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003774:	4b1b      	ldr	r3, [pc, #108]	@ (80037e4 <HAL_RCC_OscConfig+0x4ec>)
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	699b      	ldr	r3, [r3, #24]
 800377e:	2b01      	cmp	r3, #1
 8003780:	d028      	beq.n	80037d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800378c:	429a      	cmp	r2, r3
 800378e:	d121      	bne.n	80037d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800379a:	429a      	cmp	r2, r3
 800379c:	d11a      	bne.n	80037d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800379e:	68fa      	ldr	r2, [r7, #12]
 80037a0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80037a4:	4013      	ands	r3, r2
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80037aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d111      	bne.n	80037d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037ba:	085b      	lsrs	r3, r3, #1
 80037bc:	3b01      	subs	r3, #1
 80037be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d107      	bne.n	80037d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d001      	beq.n	80037d8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e000      	b.n	80037da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80037d8:	2300      	movs	r3, #0
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3718      	adds	r7, #24
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	40023800 	.word	0x40023800

080037e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d101      	bne.n	80037fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e0cc      	b.n	8003996 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037fc:	4b68      	ldr	r3, [pc, #416]	@ (80039a0 <HAL_RCC_ClockConfig+0x1b8>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0307 	and.w	r3, r3, #7
 8003804:	683a      	ldr	r2, [r7, #0]
 8003806:	429a      	cmp	r2, r3
 8003808:	d90c      	bls.n	8003824 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800380a:	4b65      	ldr	r3, [pc, #404]	@ (80039a0 <HAL_RCC_ClockConfig+0x1b8>)
 800380c:	683a      	ldr	r2, [r7, #0]
 800380e:	b2d2      	uxtb	r2, r2
 8003810:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003812:	4b63      	ldr	r3, [pc, #396]	@ (80039a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0307 	and.w	r3, r3, #7
 800381a:	683a      	ldr	r2, [r7, #0]
 800381c:	429a      	cmp	r2, r3
 800381e:	d001      	beq.n	8003824 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e0b8      	b.n	8003996 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0302 	and.w	r3, r3, #2
 800382c:	2b00      	cmp	r3, #0
 800382e:	d020      	beq.n	8003872 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0304 	and.w	r3, r3, #4
 8003838:	2b00      	cmp	r3, #0
 800383a:	d005      	beq.n	8003848 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800383c:	4b59      	ldr	r3, [pc, #356]	@ (80039a4 <HAL_RCC_ClockConfig+0x1bc>)
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	4a58      	ldr	r2, [pc, #352]	@ (80039a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003842:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003846:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0308 	and.w	r3, r3, #8
 8003850:	2b00      	cmp	r3, #0
 8003852:	d005      	beq.n	8003860 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003854:	4b53      	ldr	r3, [pc, #332]	@ (80039a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	4a52      	ldr	r2, [pc, #328]	@ (80039a4 <HAL_RCC_ClockConfig+0x1bc>)
 800385a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800385e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003860:	4b50      	ldr	r3, [pc, #320]	@ (80039a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	494d      	ldr	r1, [pc, #308]	@ (80039a4 <HAL_RCC_ClockConfig+0x1bc>)
 800386e:	4313      	orrs	r3, r2
 8003870:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0301 	and.w	r3, r3, #1
 800387a:	2b00      	cmp	r3, #0
 800387c:	d044      	beq.n	8003908 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	2b01      	cmp	r3, #1
 8003884:	d107      	bne.n	8003896 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003886:	4b47      	ldr	r3, [pc, #284]	@ (80039a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d119      	bne.n	80038c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e07f      	b.n	8003996 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	2b02      	cmp	r3, #2
 800389c:	d003      	beq.n	80038a6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038a2:	2b03      	cmp	r3, #3
 80038a4:	d107      	bne.n	80038b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038a6:	4b3f      	ldr	r3, [pc, #252]	@ (80039a4 <HAL_RCC_ClockConfig+0x1bc>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d109      	bne.n	80038c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e06f      	b.n	8003996 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038b6:	4b3b      	ldr	r3, [pc, #236]	@ (80039a4 <HAL_RCC_ClockConfig+0x1bc>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 0302 	and.w	r3, r3, #2
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d101      	bne.n	80038c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e067      	b.n	8003996 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038c6:	4b37      	ldr	r3, [pc, #220]	@ (80039a4 <HAL_RCC_ClockConfig+0x1bc>)
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	f023 0203 	bic.w	r2, r3, #3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	4934      	ldr	r1, [pc, #208]	@ (80039a4 <HAL_RCC_ClockConfig+0x1bc>)
 80038d4:	4313      	orrs	r3, r2
 80038d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038d8:	f7fe fce8 	bl	80022ac <HAL_GetTick>
 80038dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038de:	e00a      	b.n	80038f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038e0:	f7fe fce4 	bl	80022ac <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d901      	bls.n	80038f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e04f      	b.n	8003996 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038f6:	4b2b      	ldr	r3, [pc, #172]	@ (80039a4 <HAL_RCC_ClockConfig+0x1bc>)
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f003 020c 	and.w	r2, r3, #12
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	429a      	cmp	r2, r3
 8003906:	d1eb      	bne.n	80038e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003908:	4b25      	ldr	r3, [pc, #148]	@ (80039a0 <HAL_RCC_ClockConfig+0x1b8>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0307 	and.w	r3, r3, #7
 8003910:	683a      	ldr	r2, [r7, #0]
 8003912:	429a      	cmp	r2, r3
 8003914:	d20c      	bcs.n	8003930 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003916:	4b22      	ldr	r3, [pc, #136]	@ (80039a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003918:	683a      	ldr	r2, [r7, #0]
 800391a:	b2d2      	uxtb	r2, r2
 800391c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800391e:	4b20      	ldr	r3, [pc, #128]	@ (80039a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0307 	and.w	r3, r3, #7
 8003926:	683a      	ldr	r2, [r7, #0]
 8003928:	429a      	cmp	r2, r3
 800392a:	d001      	beq.n	8003930 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e032      	b.n	8003996 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0304 	and.w	r3, r3, #4
 8003938:	2b00      	cmp	r3, #0
 800393a:	d008      	beq.n	800394e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800393c:	4b19      	ldr	r3, [pc, #100]	@ (80039a4 <HAL_RCC_ClockConfig+0x1bc>)
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	4916      	ldr	r1, [pc, #88]	@ (80039a4 <HAL_RCC_ClockConfig+0x1bc>)
 800394a:	4313      	orrs	r3, r2
 800394c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0308 	and.w	r3, r3, #8
 8003956:	2b00      	cmp	r3, #0
 8003958:	d009      	beq.n	800396e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800395a:	4b12      	ldr	r3, [pc, #72]	@ (80039a4 <HAL_RCC_ClockConfig+0x1bc>)
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	00db      	lsls	r3, r3, #3
 8003968:	490e      	ldr	r1, [pc, #56]	@ (80039a4 <HAL_RCC_ClockConfig+0x1bc>)
 800396a:	4313      	orrs	r3, r2
 800396c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800396e:	f000 f821 	bl	80039b4 <HAL_RCC_GetSysClockFreq>
 8003972:	4602      	mov	r2, r0
 8003974:	4b0b      	ldr	r3, [pc, #44]	@ (80039a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	091b      	lsrs	r3, r3, #4
 800397a:	f003 030f 	and.w	r3, r3, #15
 800397e:	490a      	ldr	r1, [pc, #40]	@ (80039a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003980:	5ccb      	ldrb	r3, [r1, r3]
 8003982:	fa22 f303 	lsr.w	r3, r2, r3
 8003986:	4a09      	ldr	r2, [pc, #36]	@ (80039ac <HAL_RCC_ClockConfig+0x1c4>)
 8003988:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800398a:	4b09      	ldr	r3, [pc, #36]	@ (80039b0 <HAL_RCC_ClockConfig+0x1c8>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4618      	mov	r0, r3
 8003990:	f7fe fc48 	bl	8002224 <HAL_InitTick>

  return HAL_OK;
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3710      	adds	r7, #16
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	40023c00 	.word	0x40023c00
 80039a4:	40023800 	.word	0x40023800
 80039a8:	08006c08 	.word	0x08006c08
 80039ac:	20000008 	.word	0x20000008
 80039b0:	20000024 	.word	0x20000024

080039b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039b8:	b094      	sub	sp, #80	@ 0x50
 80039ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80039bc:	2300      	movs	r3, #0
 80039be:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80039c0:	2300      	movs	r3, #0
 80039c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80039c4:	2300      	movs	r3, #0
 80039c6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80039c8:	2300      	movs	r3, #0
 80039ca:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039cc:	4b79      	ldr	r3, [pc, #484]	@ (8003bb4 <HAL_RCC_GetSysClockFreq+0x200>)
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	f003 030c 	and.w	r3, r3, #12
 80039d4:	2b08      	cmp	r3, #8
 80039d6:	d00d      	beq.n	80039f4 <HAL_RCC_GetSysClockFreq+0x40>
 80039d8:	2b08      	cmp	r3, #8
 80039da:	f200 80e1 	bhi.w	8003ba0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d002      	beq.n	80039e8 <HAL_RCC_GetSysClockFreq+0x34>
 80039e2:	2b04      	cmp	r3, #4
 80039e4:	d003      	beq.n	80039ee <HAL_RCC_GetSysClockFreq+0x3a>
 80039e6:	e0db      	b.n	8003ba0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039e8:	4b73      	ldr	r3, [pc, #460]	@ (8003bb8 <HAL_RCC_GetSysClockFreq+0x204>)
 80039ea:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80039ec:	e0db      	b.n	8003ba6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039ee:	4b73      	ldr	r3, [pc, #460]	@ (8003bbc <HAL_RCC_GetSysClockFreq+0x208>)
 80039f0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80039f2:	e0d8      	b.n	8003ba6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039f4:	4b6f      	ldr	r3, [pc, #444]	@ (8003bb4 <HAL_RCC_GetSysClockFreq+0x200>)
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80039fc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039fe:	4b6d      	ldr	r3, [pc, #436]	@ (8003bb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d063      	beq.n	8003ad2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a0a:	4b6a      	ldr	r3, [pc, #424]	@ (8003bb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	099b      	lsrs	r3, r3, #6
 8003a10:	2200      	movs	r2, #0
 8003a12:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003a14:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003a16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a1c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a1e:	2300      	movs	r3, #0
 8003a20:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a22:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003a26:	4622      	mov	r2, r4
 8003a28:	462b      	mov	r3, r5
 8003a2a:	f04f 0000 	mov.w	r0, #0
 8003a2e:	f04f 0100 	mov.w	r1, #0
 8003a32:	0159      	lsls	r1, r3, #5
 8003a34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a38:	0150      	lsls	r0, r2, #5
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	460b      	mov	r3, r1
 8003a3e:	4621      	mov	r1, r4
 8003a40:	1a51      	subs	r1, r2, r1
 8003a42:	6139      	str	r1, [r7, #16]
 8003a44:	4629      	mov	r1, r5
 8003a46:	eb63 0301 	sbc.w	r3, r3, r1
 8003a4a:	617b      	str	r3, [r7, #20]
 8003a4c:	f04f 0200 	mov.w	r2, #0
 8003a50:	f04f 0300 	mov.w	r3, #0
 8003a54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a58:	4659      	mov	r1, fp
 8003a5a:	018b      	lsls	r3, r1, #6
 8003a5c:	4651      	mov	r1, sl
 8003a5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a62:	4651      	mov	r1, sl
 8003a64:	018a      	lsls	r2, r1, #6
 8003a66:	4651      	mov	r1, sl
 8003a68:	ebb2 0801 	subs.w	r8, r2, r1
 8003a6c:	4659      	mov	r1, fp
 8003a6e:	eb63 0901 	sbc.w	r9, r3, r1
 8003a72:	f04f 0200 	mov.w	r2, #0
 8003a76:	f04f 0300 	mov.w	r3, #0
 8003a7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a86:	4690      	mov	r8, r2
 8003a88:	4699      	mov	r9, r3
 8003a8a:	4623      	mov	r3, r4
 8003a8c:	eb18 0303 	adds.w	r3, r8, r3
 8003a90:	60bb      	str	r3, [r7, #8]
 8003a92:	462b      	mov	r3, r5
 8003a94:	eb49 0303 	adc.w	r3, r9, r3
 8003a98:	60fb      	str	r3, [r7, #12]
 8003a9a:	f04f 0200 	mov.w	r2, #0
 8003a9e:	f04f 0300 	mov.w	r3, #0
 8003aa2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003aa6:	4629      	mov	r1, r5
 8003aa8:	024b      	lsls	r3, r1, #9
 8003aaa:	4621      	mov	r1, r4
 8003aac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ab0:	4621      	mov	r1, r4
 8003ab2:	024a      	lsls	r2, r1, #9
 8003ab4:	4610      	mov	r0, r2
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003aba:	2200      	movs	r2, #0
 8003abc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003abe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003ac0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003ac4:	f7fc fbd4 	bl	8000270 <__aeabi_uldivmod>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	460b      	mov	r3, r1
 8003acc:	4613      	mov	r3, r2
 8003ace:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ad0:	e058      	b.n	8003b84 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ad2:	4b38      	ldr	r3, [pc, #224]	@ (8003bb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	099b      	lsrs	r3, r3, #6
 8003ad8:	2200      	movs	r2, #0
 8003ada:	4618      	mov	r0, r3
 8003adc:	4611      	mov	r1, r2
 8003ade:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003ae2:	623b      	str	r3, [r7, #32]
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ae8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003aec:	4642      	mov	r2, r8
 8003aee:	464b      	mov	r3, r9
 8003af0:	f04f 0000 	mov.w	r0, #0
 8003af4:	f04f 0100 	mov.w	r1, #0
 8003af8:	0159      	lsls	r1, r3, #5
 8003afa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003afe:	0150      	lsls	r0, r2, #5
 8003b00:	4602      	mov	r2, r0
 8003b02:	460b      	mov	r3, r1
 8003b04:	4641      	mov	r1, r8
 8003b06:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b0a:	4649      	mov	r1, r9
 8003b0c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b10:	f04f 0200 	mov.w	r2, #0
 8003b14:	f04f 0300 	mov.w	r3, #0
 8003b18:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003b1c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003b20:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003b24:	ebb2 040a 	subs.w	r4, r2, sl
 8003b28:	eb63 050b 	sbc.w	r5, r3, fp
 8003b2c:	f04f 0200 	mov.w	r2, #0
 8003b30:	f04f 0300 	mov.w	r3, #0
 8003b34:	00eb      	lsls	r3, r5, #3
 8003b36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b3a:	00e2      	lsls	r2, r4, #3
 8003b3c:	4614      	mov	r4, r2
 8003b3e:	461d      	mov	r5, r3
 8003b40:	4643      	mov	r3, r8
 8003b42:	18e3      	adds	r3, r4, r3
 8003b44:	603b      	str	r3, [r7, #0]
 8003b46:	464b      	mov	r3, r9
 8003b48:	eb45 0303 	adc.w	r3, r5, r3
 8003b4c:	607b      	str	r3, [r7, #4]
 8003b4e:	f04f 0200 	mov.w	r2, #0
 8003b52:	f04f 0300 	mov.w	r3, #0
 8003b56:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b5a:	4629      	mov	r1, r5
 8003b5c:	028b      	lsls	r3, r1, #10
 8003b5e:	4621      	mov	r1, r4
 8003b60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b64:	4621      	mov	r1, r4
 8003b66:	028a      	lsls	r2, r1, #10
 8003b68:	4610      	mov	r0, r2
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b6e:	2200      	movs	r2, #0
 8003b70:	61bb      	str	r3, [r7, #24]
 8003b72:	61fa      	str	r2, [r7, #28]
 8003b74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b78:	f7fc fb7a 	bl	8000270 <__aeabi_uldivmod>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	460b      	mov	r3, r1
 8003b80:	4613      	mov	r3, r2
 8003b82:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003b84:	4b0b      	ldr	r3, [pc, #44]	@ (8003bb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	0c1b      	lsrs	r3, r3, #16
 8003b8a:	f003 0303 	and.w	r3, r3, #3
 8003b8e:	3301      	adds	r3, #1
 8003b90:	005b      	lsls	r3, r3, #1
 8003b92:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003b94:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003b96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b9c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003b9e:	e002      	b.n	8003ba6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ba0:	4b05      	ldr	r3, [pc, #20]	@ (8003bb8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003ba2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003ba4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ba6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3750      	adds	r7, #80	@ 0x50
 8003bac:	46bd      	mov	sp, r7
 8003bae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003bb2:	bf00      	nop
 8003bb4:	40023800 	.word	0x40023800
 8003bb8:	00f42400 	.word	0x00f42400
 8003bbc:	007a1200 	.word	0x007a1200

08003bc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bc4:	4b03      	ldr	r3, [pc, #12]	@ (8003bd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr
 8003bd2:	bf00      	nop
 8003bd4:	20000008 	.word	0x20000008

08003bd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003bdc:	f7ff fff0 	bl	8003bc0 <HAL_RCC_GetHCLKFreq>
 8003be0:	4602      	mov	r2, r0
 8003be2:	4b05      	ldr	r3, [pc, #20]	@ (8003bf8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	0a9b      	lsrs	r3, r3, #10
 8003be8:	f003 0307 	and.w	r3, r3, #7
 8003bec:	4903      	ldr	r1, [pc, #12]	@ (8003bfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bee:	5ccb      	ldrb	r3, [r1, r3]
 8003bf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	40023800 	.word	0x40023800
 8003bfc:	08006c18 	.word	0x08006c18

08003c00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c04:	f7ff ffdc 	bl	8003bc0 <HAL_RCC_GetHCLKFreq>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	4b05      	ldr	r3, [pc, #20]	@ (8003c20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	0b5b      	lsrs	r3, r3, #13
 8003c10:	f003 0307 	and.w	r3, r3, #7
 8003c14:	4903      	ldr	r1, [pc, #12]	@ (8003c24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c16:	5ccb      	ldrb	r3, [r1, r3]
 8003c18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	40023800 	.word	0x40023800
 8003c24:	08006c18 	.word	0x08006c18

08003c28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b082      	sub	sp, #8
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d101      	bne.n	8003c3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e07b      	b.n	8003d32 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d108      	bne.n	8003c54 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c4a:	d009      	beq.n	8003c60 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	61da      	str	r2, [r3, #28]
 8003c52:	e005      	b.n	8003c60 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d106      	bne.n	8003c80 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f7fc ffce 	bl	8000c1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2202      	movs	r2, #2
 8003c84:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c96:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003ca8:	431a      	orrs	r2, r3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003cb2:	431a      	orrs	r2, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	691b      	ldr	r3, [r3, #16]
 8003cb8:	f003 0302 	and.w	r3, r3, #2
 8003cbc:	431a      	orrs	r2, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	695b      	ldr	r3, [r3, #20]
 8003cc2:	f003 0301 	and.w	r3, r3, #1
 8003cc6:	431a      	orrs	r2, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	699b      	ldr	r3, [r3, #24]
 8003ccc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003cd0:	431a      	orrs	r2, r3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	69db      	ldr	r3, [r3, #28]
 8003cd6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003cda:	431a      	orrs	r2, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a1b      	ldr	r3, [r3, #32]
 8003ce0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ce4:	ea42 0103 	orr.w	r1, r2, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cec:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	430a      	orrs	r2, r1
 8003cf6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	699b      	ldr	r3, [r3, #24]
 8003cfc:	0c1b      	lsrs	r3, r3, #16
 8003cfe:	f003 0104 	and.w	r1, r3, #4
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d06:	f003 0210 	and.w	r2, r3, #16
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	430a      	orrs	r2, r1
 8003d10:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	69da      	ldr	r2, [r3, #28]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d20:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003d30:	2300      	movs	r3, #0
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3708      	adds	r7, #8
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}

08003d3a <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8003d3a:	b580      	push	{r7, lr}
 8003d3c:	b082      	sub	sp, #8
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d101      	bne.n	8003d4c <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e01a      	b.n	8003d82 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2202      	movs	r2, #2
 8003d50:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d62:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f7fc ffc1 	bl	8000cec <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8003d80:	2300      	movs	r3, #0
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3708      	adds	r7, #8
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}

08003d8a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003d8a:	b580      	push	{r7, lr}
 8003d8c:	b08a      	sub	sp, #40	@ 0x28
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	60f8      	str	r0, [r7, #12]
 8003d92:	60b9      	str	r1, [r7, #8]
 8003d94:	607a      	str	r2, [r7, #4]
 8003d96:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d9c:	f7fe fa86 	bl	80022ac <HAL_GetTick>
 8003da0:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003da8:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003db0:	887b      	ldrh	r3, [r7, #2]
 8003db2:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003db4:	7ffb      	ldrb	r3, [r7, #31]
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d00c      	beq.n	8003dd4 <HAL_SPI_TransmitReceive+0x4a>
 8003dba:	69bb      	ldr	r3, [r7, #24]
 8003dbc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003dc0:	d106      	bne.n	8003dd0 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d102      	bne.n	8003dd0 <HAL_SPI_TransmitReceive+0x46>
 8003dca:	7ffb      	ldrb	r3, [r7, #31]
 8003dcc:	2b04      	cmp	r3, #4
 8003dce:	d001      	beq.n	8003dd4 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8003dd0:	2302      	movs	r3, #2
 8003dd2:	e17f      	b.n	80040d4 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d005      	beq.n	8003de6 <HAL_SPI_TransmitReceive+0x5c>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d002      	beq.n	8003de6 <HAL_SPI_TransmitReceive+0x5c>
 8003de0:	887b      	ldrh	r3, [r7, #2]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d101      	bne.n	8003dea <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e174      	b.n	80040d4 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d101      	bne.n	8003df8 <HAL_SPI_TransmitReceive+0x6e>
 8003df4:	2302      	movs	r3, #2
 8003df6:	e16d      	b.n	80040d4 <HAL_SPI_TransmitReceive+0x34a>
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	2b04      	cmp	r3, #4
 8003e0a:	d003      	beq.n	8003e14 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2205      	movs	r2, #5
 8003e10:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2200      	movs	r2, #0
 8003e18:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	887a      	ldrh	r2, [r7, #2]
 8003e24:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	887a      	ldrh	r2, [r7, #2]
 8003e2a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	68ba      	ldr	r2, [r7, #8]
 8003e30:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	887a      	ldrh	r2, [r7, #2]
 8003e36:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	887a      	ldrh	r2, [r7, #2]
 8003e3c:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2200      	movs	r2, #0
 8003e42:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2200      	movs	r2, #0
 8003e48:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e54:	2b40      	cmp	r3, #64	@ 0x40
 8003e56:	d007      	beq.n	8003e68 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003e66:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e70:	d17e      	bne.n	8003f70 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d002      	beq.n	8003e80 <HAL_SPI_TransmitReceive+0xf6>
 8003e7a:	8afb      	ldrh	r3, [r7, #22]
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d16c      	bne.n	8003f5a <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e84:	881a      	ldrh	r2, [r3, #0]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e90:	1c9a      	adds	r2, r3, #2
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	3b01      	subs	r3, #1
 8003e9e:	b29a      	uxth	r2, r3
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ea4:	e059      	b.n	8003f5a <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	f003 0302 	and.w	r3, r3, #2
 8003eb0:	2b02      	cmp	r3, #2
 8003eb2:	d11b      	bne.n	8003eec <HAL_SPI_TransmitReceive+0x162>
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d016      	beq.n	8003eec <HAL_SPI_TransmitReceive+0x162>
 8003ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d113      	bne.n	8003eec <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ec8:	881a      	ldrh	r2, [r3, #0]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ed4:	1c9a      	adds	r2, r3, #2
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	3b01      	subs	r3, #1
 8003ee2:	b29a      	uxth	r2, r3
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	f003 0301 	and.w	r3, r3, #1
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d119      	bne.n	8003f2e <HAL_SPI_TransmitReceive+0x1a4>
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d014      	beq.n	8003f2e <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	68da      	ldr	r2, [r3, #12]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f0e:	b292      	uxth	r2, r2
 8003f10:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f16:	1c9a      	adds	r2, r3, #2
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	3b01      	subs	r3, #1
 8003f24:	b29a      	uxth	r2, r3
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003f2e:	f7fe f9bd 	bl	80022ac <HAL_GetTick>
 8003f32:	4602      	mov	r2, r0
 8003f34:	6a3b      	ldr	r3, [r7, #32]
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d80d      	bhi.n	8003f5a <HAL_SPI_TransmitReceive+0x1d0>
 8003f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f44:	d009      	beq.n	8003f5a <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2201      	movs	r2, #1
 8003f4a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2200      	movs	r2, #0
 8003f52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e0bc      	b.n	80040d4 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d1a0      	bne.n	8003ea6 <HAL_SPI_TransmitReceive+0x11c>
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d19b      	bne.n	8003ea6 <HAL_SPI_TransmitReceive+0x11c>
 8003f6e:	e082      	b.n	8004076 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d002      	beq.n	8003f7e <HAL_SPI_TransmitReceive+0x1f4>
 8003f78:	8afb      	ldrh	r3, [r7, #22]
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d171      	bne.n	8004062 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	330c      	adds	r3, #12
 8003f88:	7812      	ldrb	r2, [r2, #0]
 8003f8a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f90:	1c5a      	adds	r2, r3, #1
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	3b01      	subs	r3, #1
 8003f9e:	b29a      	uxth	r2, r3
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003fa4:	e05d      	b.n	8004062 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	f003 0302 	and.w	r3, r3, #2
 8003fb0:	2b02      	cmp	r3, #2
 8003fb2:	d11c      	bne.n	8003fee <HAL_SPI_TransmitReceive+0x264>
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d017      	beq.n	8003fee <HAL_SPI_TransmitReceive+0x264>
 8003fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d114      	bne.n	8003fee <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	330c      	adds	r3, #12
 8003fce:	7812      	ldrb	r2, [r2, #0]
 8003fd0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fd6:	1c5a      	adds	r2, r3, #1
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	3b01      	subs	r3, #1
 8003fe4:	b29a      	uxth	r2, r3
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003fea:	2300      	movs	r3, #0
 8003fec:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	f003 0301 	and.w	r3, r3, #1
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d119      	bne.n	8004030 <HAL_SPI_TransmitReceive+0x2a6>
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004000:	b29b      	uxth	r3, r3
 8004002:	2b00      	cmp	r3, #0
 8004004:	d014      	beq.n	8004030 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	68da      	ldr	r2, [r3, #12]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004010:	b2d2      	uxtb	r2, r2
 8004012:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004018:	1c5a      	adds	r2, r3, #1
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004022:	b29b      	uxth	r3, r3
 8004024:	3b01      	subs	r3, #1
 8004026:	b29a      	uxth	r2, r3
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800402c:	2301      	movs	r3, #1
 800402e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004030:	f7fe f93c 	bl	80022ac <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	6a3b      	ldr	r3, [r7, #32]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800403c:	429a      	cmp	r2, r3
 800403e:	d803      	bhi.n	8004048 <HAL_SPI_TransmitReceive+0x2be>
 8004040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004046:	d102      	bne.n	800404e <HAL_SPI_TransmitReceive+0x2c4>
 8004048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800404a:	2b00      	cmp	r3, #0
 800404c:	d109      	bne.n	8004062 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2201      	movs	r2, #1
 8004052:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2200      	movs	r2, #0
 800405a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	e038      	b.n	80040d4 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004066:	b29b      	uxth	r3, r3
 8004068:	2b00      	cmp	r3, #0
 800406a:	d19c      	bne.n	8003fa6 <HAL_SPI_TransmitReceive+0x21c>
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004070:	b29b      	uxth	r3, r3
 8004072:	2b00      	cmp	r3, #0
 8004074:	d197      	bne.n	8003fa6 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004076:	6a3a      	ldr	r2, [r7, #32]
 8004078:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800407a:	68f8      	ldr	r0, [r7, #12]
 800407c:	f000 f8b6 	bl	80041ec <SPI_EndRxTxTransaction>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d008      	beq.n	8004098 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2220      	movs	r2, #32
 800408a:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2200      	movs	r2, #0
 8004090:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e01d      	b.n	80040d4 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d10a      	bne.n	80040b6 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80040a0:	2300      	movs	r3, #0
 80040a2:	613b      	str	r3, [r7, #16]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	68db      	ldr	r3, [r3, #12]
 80040aa:	613b      	str	r3, [r7, #16]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	613b      	str	r3, [r7, #16]
 80040b4:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2201      	movs	r2, #1
 80040ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2200      	movs	r2, #0
 80040c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d001      	beq.n	80040d2 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e000      	b.n	80040d4 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80040d2:	2300      	movs	r3, #0
  }
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3728      	adds	r7, #40	@ 0x28
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b088      	sub	sp, #32
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	60b9      	str	r1, [r7, #8]
 80040e6:	603b      	str	r3, [r7, #0]
 80040e8:	4613      	mov	r3, r2
 80040ea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80040ec:	f7fe f8de 	bl	80022ac <HAL_GetTick>
 80040f0:	4602      	mov	r2, r0
 80040f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040f4:	1a9b      	subs	r3, r3, r2
 80040f6:	683a      	ldr	r2, [r7, #0]
 80040f8:	4413      	add	r3, r2
 80040fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80040fc:	f7fe f8d6 	bl	80022ac <HAL_GetTick>
 8004100:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004102:	4b39      	ldr	r3, [pc, #228]	@ (80041e8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	015b      	lsls	r3, r3, #5
 8004108:	0d1b      	lsrs	r3, r3, #20
 800410a:	69fa      	ldr	r2, [r7, #28]
 800410c:	fb02 f303 	mul.w	r3, r2, r3
 8004110:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004112:	e054      	b.n	80041be <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800411a:	d050      	beq.n	80041be <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800411c:	f7fe f8c6 	bl	80022ac <HAL_GetTick>
 8004120:	4602      	mov	r2, r0
 8004122:	69bb      	ldr	r3, [r7, #24]
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	69fa      	ldr	r2, [r7, #28]
 8004128:	429a      	cmp	r2, r3
 800412a:	d902      	bls.n	8004132 <SPI_WaitFlagStateUntilTimeout+0x56>
 800412c:	69fb      	ldr	r3, [r7, #28]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d13d      	bne.n	80041ae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	685a      	ldr	r2, [r3, #4]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004140:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800414a:	d111      	bne.n	8004170 <SPI_WaitFlagStateUntilTimeout+0x94>
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004154:	d004      	beq.n	8004160 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800415e:	d107      	bne.n	8004170 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800416e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004174:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004178:	d10f      	bne.n	800419a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004188:	601a      	str	r2, [r3, #0]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004198:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2201      	movs	r2, #1
 800419e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2200      	movs	r2, #0
 80041a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	e017      	b.n	80041de <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d101      	bne.n	80041b8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80041b4:	2300      	movs	r3, #0
 80041b6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	3b01      	subs	r3, #1
 80041bc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	689a      	ldr	r2, [r3, #8]
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	4013      	ands	r3, r2
 80041c8:	68ba      	ldr	r2, [r7, #8]
 80041ca:	429a      	cmp	r2, r3
 80041cc:	bf0c      	ite	eq
 80041ce:	2301      	moveq	r3, #1
 80041d0:	2300      	movne	r3, #0
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	461a      	mov	r2, r3
 80041d6:	79fb      	ldrb	r3, [r7, #7]
 80041d8:	429a      	cmp	r2, r3
 80041da:	d19b      	bne.n	8004114 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80041dc:	2300      	movs	r3, #0
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3720      	adds	r7, #32
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	20000008 	.word	0x20000008

080041ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b088      	sub	sp, #32
 80041f0:	af02      	add	r7, sp, #8
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	60b9      	str	r1, [r7, #8]
 80041f6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	9300      	str	r3, [sp, #0]
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	2201      	movs	r2, #1
 8004200:	2102      	movs	r1, #2
 8004202:	68f8      	ldr	r0, [r7, #12]
 8004204:	f7ff ff6a 	bl	80040dc <SPI_WaitFlagStateUntilTimeout>
 8004208:	4603      	mov	r3, r0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d007      	beq.n	800421e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004212:	f043 0220 	orr.w	r2, r3, #32
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800421a:	2303      	movs	r3, #3
 800421c:	e032      	b.n	8004284 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800421e:	4b1b      	ldr	r3, [pc, #108]	@ (800428c <SPI_EndRxTxTransaction+0xa0>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a1b      	ldr	r2, [pc, #108]	@ (8004290 <SPI_EndRxTxTransaction+0xa4>)
 8004224:	fba2 2303 	umull	r2, r3, r2, r3
 8004228:	0d5b      	lsrs	r3, r3, #21
 800422a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800422e:	fb02 f303 	mul.w	r3, r2, r3
 8004232:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800423c:	d112      	bne.n	8004264 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	9300      	str	r3, [sp, #0]
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	2200      	movs	r2, #0
 8004246:	2180      	movs	r1, #128	@ 0x80
 8004248:	68f8      	ldr	r0, [r7, #12]
 800424a:	f7ff ff47 	bl	80040dc <SPI_WaitFlagStateUntilTimeout>
 800424e:	4603      	mov	r3, r0
 8004250:	2b00      	cmp	r3, #0
 8004252:	d016      	beq.n	8004282 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004258:	f043 0220 	orr.w	r2, r3, #32
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004260:	2303      	movs	r3, #3
 8004262:	e00f      	b.n	8004284 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d00a      	beq.n	8004280 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	3b01      	subs	r3, #1
 800426e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800427a:	2b80      	cmp	r3, #128	@ 0x80
 800427c:	d0f2      	beq.n	8004264 <SPI_EndRxTxTransaction+0x78>
 800427e:	e000      	b.n	8004282 <SPI_EndRxTxTransaction+0x96>
        break;
 8004280:	bf00      	nop
  }

  return HAL_OK;
 8004282:	2300      	movs	r3, #0
}
 8004284:	4618      	mov	r0, r3
 8004286:	3718      	adds	r7, #24
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}
 800428c:	20000008 	.word	0x20000008
 8004290:	165e9f81 	.word	0x165e9f81

08004294 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b082      	sub	sp, #8
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d101      	bne.n	80042a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e041      	b.n	800432a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d106      	bne.n	80042c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f7fc fd3a 	bl	8000d34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2202      	movs	r2, #2
 80042c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	3304      	adds	r3, #4
 80042d0:	4619      	mov	r1, r3
 80042d2:	4610      	mov	r0, r2
 80042d4:	f000 f9e6 	bl	80046a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2201      	movs	r2, #1
 8004314:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	3708      	adds	r7, #8
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
	...

08004334 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004334:	b480      	push	{r7}
 8004336:	b085      	sub	sp, #20
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004342:	b2db      	uxtb	r3, r3
 8004344:	2b01      	cmp	r3, #1
 8004346:	d001      	beq.n	800434c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e04e      	b.n	80043ea <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2202      	movs	r2, #2
 8004350:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	68da      	ldr	r2, [r3, #12]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f042 0201 	orr.w	r2, r2, #1
 8004362:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a23      	ldr	r2, [pc, #140]	@ (80043f8 <HAL_TIM_Base_Start_IT+0xc4>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d022      	beq.n	80043b4 <HAL_TIM_Base_Start_IT+0x80>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004376:	d01d      	beq.n	80043b4 <HAL_TIM_Base_Start_IT+0x80>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a1f      	ldr	r2, [pc, #124]	@ (80043fc <HAL_TIM_Base_Start_IT+0xc8>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d018      	beq.n	80043b4 <HAL_TIM_Base_Start_IT+0x80>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a1e      	ldr	r2, [pc, #120]	@ (8004400 <HAL_TIM_Base_Start_IT+0xcc>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d013      	beq.n	80043b4 <HAL_TIM_Base_Start_IT+0x80>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a1c      	ldr	r2, [pc, #112]	@ (8004404 <HAL_TIM_Base_Start_IT+0xd0>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d00e      	beq.n	80043b4 <HAL_TIM_Base_Start_IT+0x80>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a1b      	ldr	r2, [pc, #108]	@ (8004408 <HAL_TIM_Base_Start_IT+0xd4>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d009      	beq.n	80043b4 <HAL_TIM_Base_Start_IT+0x80>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a19      	ldr	r2, [pc, #100]	@ (800440c <HAL_TIM_Base_Start_IT+0xd8>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d004      	beq.n	80043b4 <HAL_TIM_Base_Start_IT+0x80>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a18      	ldr	r2, [pc, #96]	@ (8004410 <HAL_TIM_Base_Start_IT+0xdc>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d111      	bne.n	80043d8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	f003 0307 	and.w	r3, r3, #7
 80043be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2b06      	cmp	r3, #6
 80043c4:	d010      	beq.n	80043e8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f042 0201 	orr.w	r2, r2, #1
 80043d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043d6:	e007      	b.n	80043e8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f042 0201 	orr.w	r2, r2, #1
 80043e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3714      	adds	r7, #20
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop
 80043f8:	40010000 	.word	0x40010000
 80043fc:	40000400 	.word	0x40000400
 8004400:	40000800 	.word	0x40000800
 8004404:	40000c00 	.word	0x40000c00
 8004408:	40010400 	.word	0x40010400
 800440c:	40014000 	.word	0x40014000
 8004410:	40001800 	.word	0x40001800

08004414 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	68da      	ldr	r2, [r3, #12]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f022 0201 	bic.w	r2, r2, #1
 800442a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	6a1a      	ldr	r2, [r3, #32]
 8004432:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004436:	4013      	ands	r3, r2
 8004438:	2b00      	cmp	r3, #0
 800443a:	d10f      	bne.n	800445c <HAL_TIM_Base_Stop_IT+0x48>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	6a1a      	ldr	r2, [r3, #32]
 8004442:	f240 4344 	movw	r3, #1092	@ 0x444
 8004446:	4013      	ands	r3, r2
 8004448:	2b00      	cmp	r3, #0
 800444a:	d107      	bne.n	800445c <HAL_TIM_Base_Stop_IT+0x48>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f022 0201 	bic.w	r2, r2, #1
 800445a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8004464:	2300      	movs	r3, #0
}
 8004466:	4618      	mov	r0, r3
 8004468:	370c      	adds	r7, #12
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr

08004472 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004472:	b580      	push	{r7, lr}
 8004474:	b084      	sub	sp, #16
 8004476:	af00      	add	r7, sp, #0
 8004478:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	691b      	ldr	r3, [r3, #16]
 8004488:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	f003 0302 	and.w	r3, r3, #2
 8004490:	2b00      	cmp	r3, #0
 8004492:	d020      	beq.n	80044d6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f003 0302 	and.w	r3, r3, #2
 800449a:	2b00      	cmp	r3, #0
 800449c:	d01b      	beq.n	80044d6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f06f 0202 	mvn.w	r2, #2
 80044a6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	699b      	ldr	r3, [r3, #24]
 80044b4:	f003 0303 	and.w	r3, r3, #3
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d003      	beq.n	80044c4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f000 f8d2 	bl	8004666 <HAL_TIM_IC_CaptureCallback>
 80044c2:	e005      	b.n	80044d0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f000 f8c4 	bl	8004652 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f000 f8d5 	bl	800467a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	f003 0304 	and.w	r3, r3, #4
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d020      	beq.n	8004522 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f003 0304 	and.w	r3, r3, #4
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d01b      	beq.n	8004522 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f06f 0204 	mvn.w	r2, #4
 80044f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2202      	movs	r2, #2
 80044f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	699b      	ldr	r3, [r3, #24]
 8004500:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004504:	2b00      	cmp	r3, #0
 8004506:	d003      	beq.n	8004510 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f000 f8ac 	bl	8004666 <HAL_TIM_IC_CaptureCallback>
 800450e:	e005      	b.n	800451c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f000 f89e 	bl	8004652 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f000 f8af 	bl	800467a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2200      	movs	r2, #0
 8004520:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	f003 0308 	and.w	r3, r3, #8
 8004528:	2b00      	cmp	r3, #0
 800452a:	d020      	beq.n	800456e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f003 0308 	and.w	r3, r3, #8
 8004532:	2b00      	cmp	r3, #0
 8004534:	d01b      	beq.n	800456e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f06f 0208 	mvn.w	r2, #8
 800453e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2204      	movs	r2, #4
 8004544:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	69db      	ldr	r3, [r3, #28]
 800454c:	f003 0303 	and.w	r3, r3, #3
 8004550:	2b00      	cmp	r3, #0
 8004552:	d003      	beq.n	800455c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f000 f886 	bl	8004666 <HAL_TIM_IC_CaptureCallback>
 800455a:	e005      	b.n	8004568 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f000 f878 	bl	8004652 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 f889 	bl	800467a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	f003 0310 	and.w	r3, r3, #16
 8004574:	2b00      	cmp	r3, #0
 8004576:	d020      	beq.n	80045ba <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f003 0310 	and.w	r3, r3, #16
 800457e:	2b00      	cmp	r3, #0
 8004580:	d01b      	beq.n	80045ba <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f06f 0210 	mvn.w	r2, #16
 800458a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2208      	movs	r2, #8
 8004590:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	69db      	ldr	r3, [r3, #28]
 8004598:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800459c:	2b00      	cmp	r3, #0
 800459e:	d003      	beq.n	80045a8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f000 f860 	bl	8004666 <HAL_TIM_IC_CaptureCallback>
 80045a6:	e005      	b.n	80045b4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f000 f852 	bl	8004652 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 f863 	bl	800467a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	f003 0301 	and.w	r3, r3, #1
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d00c      	beq.n	80045de <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f003 0301 	and.w	r3, r3, #1
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d007      	beq.n	80045de <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f06f 0201 	mvn.w	r2, #1
 80045d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f7fc f8ab 	bl	8000734 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d00c      	beq.n	8004602 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d007      	beq.n	8004602 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80045fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f000 f983 	bl	8004908 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004608:	2b00      	cmp	r3, #0
 800460a:	d00c      	beq.n	8004626 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004612:	2b00      	cmp	r3, #0
 8004614:	d007      	beq.n	8004626 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800461e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f000 f834 	bl	800468e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	f003 0320 	and.w	r3, r3, #32
 800462c:	2b00      	cmp	r3, #0
 800462e:	d00c      	beq.n	800464a <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f003 0320 	and.w	r3, r3, #32
 8004636:	2b00      	cmp	r3, #0
 8004638:	d007      	beq.n	800464a <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f06f 0220 	mvn.w	r2, #32
 8004642:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f000 f955 	bl	80048f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800464a:	bf00      	nop
 800464c:	3710      	adds	r7, #16
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}

08004652 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004652:	b480      	push	{r7}
 8004654:	b083      	sub	sp, #12
 8004656:	af00      	add	r7, sp, #0
 8004658:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800465a:	bf00      	nop
 800465c:	370c      	adds	r7, #12
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr

08004666 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004666:	b480      	push	{r7}
 8004668:	b083      	sub	sp, #12
 800466a:	af00      	add	r7, sp, #0
 800466c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800466e:	bf00      	nop
 8004670:	370c      	adds	r7, #12
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr

0800467a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800467a:	b480      	push	{r7}
 800467c:	b083      	sub	sp, #12
 800467e:	af00      	add	r7, sp, #0
 8004680:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004682:	bf00      	nop
 8004684:	370c      	adds	r7, #12
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr

0800468e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800468e:	b480      	push	{r7}
 8004690:	b083      	sub	sp, #12
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004696:	bf00      	nop
 8004698:	370c      	adds	r7, #12
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr
	...

080046a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b085      	sub	sp, #20
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	4a46      	ldr	r2, [pc, #280]	@ (80047d0 <TIM_Base_SetConfig+0x12c>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d013      	beq.n	80046e4 <TIM_Base_SetConfig+0x40>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046c2:	d00f      	beq.n	80046e4 <TIM_Base_SetConfig+0x40>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	4a43      	ldr	r2, [pc, #268]	@ (80047d4 <TIM_Base_SetConfig+0x130>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d00b      	beq.n	80046e4 <TIM_Base_SetConfig+0x40>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	4a42      	ldr	r2, [pc, #264]	@ (80047d8 <TIM_Base_SetConfig+0x134>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d007      	beq.n	80046e4 <TIM_Base_SetConfig+0x40>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	4a41      	ldr	r2, [pc, #260]	@ (80047dc <TIM_Base_SetConfig+0x138>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d003      	beq.n	80046e4 <TIM_Base_SetConfig+0x40>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	4a40      	ldr	r2, [pc, #256]	@ (80047e0 <TIM_Base_SetConfig+0x13c>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d108      	bne.n	80046f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	68fa      	ldr	r2, [r7, #12]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a35      	ldr	r2, [pc, #212]	@ (80047d0 <TIM_Base_SetConfig+0x12c>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d02b      	beq.n	8004756 <TIM_Base_SetConfig+0xb2>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004704:	d027      	beq.n	8004756 <TIM_Base_SetConfig+0xb2>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a32      	ldr	r2, [pc, #200]	@ (80047d4 <TIM_Base_SetConfig+0x130>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d023      	beq.n	8004756 <TIM_Base_SetConfig+0xb2>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a31      	ldr	r2, [pc, #196]	@ (80047d8 <TIM_Base_SetConfig+0x134>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d01f      	beq.n	8004756 <TIM_Base_SetConfig+0xb2>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a30      	ldr	r2, [pc, #192]	@ (80047dc <TIM_Base_SetConfig+0x138>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d01b      	beq.n	8004756 <TIM_Base_SetConfig+0xb2>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a2f      	ldr	r2, [pc, #188]	@ (80047e0 <TIM_Base_SetConfig+0x13c>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d017      	beq.n	8004756 <TIM_Base_SetConfig+0xb2>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4a2e      	ldr	r2, [pc, #184]	@ (80047e4 <TIM_Base_SetConfig+0x140>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d013      	beq.n	8004756 <TIM_Base_SetConfig+0xb2>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4a2d      	ldr	r2, [pc, #180]	@ (80047e8 <TIM_Base_SetConfig+0x144>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d00f      	beq.n	8004756 <TIM_Base_SetConfig+0xb2>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a2c      	ldr	r2, [pc, #176]	@ (80047ec <TIM_Base_SetConfig+0x148>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d00b      	beq.n	8004756 <TIM_Base_SetConfig+0xb2>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4a2b      	ldr	r2, [pc, #172]	@ (80047f0 <TIM_Base_SetConfig+0x14c>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d007      	beq.n	8004756 <TIM_Base_SetConfig+0xb2>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a2a      	ldr	r2, [pc, #168]	@ (80047f4 <TIM_Base_SetConfig+0x150>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d003      	beq.n	8004756 <TIM_Base_SetConfig+0xb2>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a29      	ldr	r2, [pc, #164]	@ (80047f8 <TIM_Base_SetConfig+0x154>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d108      	bne.n	8004768 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800475c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	68fa      	ldr	r2, [r7, #12]
 8004764:	4313      	orrs	r3, r2
 8004766:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	695b      	ldr	r3, [r3, #20]
 8004772:	4313      	orrs	r3, r2
 8004774:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	68fa      	ldr	r2, [r7, #12]
 800477a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	689a      	ldr	r2, [r3, #8]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	4a10      	ldr	r2, [pc, #64]	@ (80047d0 <TIM_Base_SetConfig+0x12c>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d003      	beq.n	800479c <TIM_Base_SetConfig+0xf8>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	4a12      	ldr	r2, [pc, #72]	@ (80047e0 <TIM_Base_SetConfig+0x13c>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d103      	bne.n	80047a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	691a      	ldr	r2, [r3, #16]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	f003 0301 	and.w	r3, r3, #1
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d105      	bne.n	80047c2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	691b      	ldr	r3, [r3, #16]
 80047ba:	f023 0201 	bic.w	r2, r3, #1
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	611a      	str	r2, [r3, #16]
  }
}
 80047c2:	bf00      	nop
 80047c4:	3714      	adds	r7, #20
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr
 80047ce:	bf00      	nop
 80047d0:	40010000 	.word	0x40010000
 80047d4:	40000400 	.word	0x40000400
 80047d8:	40000800 	.word	0x40000800
 80047dc:	40000c00 	.word	0x40000c00
 80047e0:	40010400 	.word	0x40010400
 80047e4:	40014000 	.word	0x40014000
 80047e8:	40014400 	.word	0x40014400
 80047ec:	40014800 	.word	0x40014800
 80047f0:	40001800 	.word	0x40001800
 80047f4:	40001c00 	.word	0x40001c00
 80047f8:	40002000 	.word	0x40002000

080047fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b085      	sub	sp, #20
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800480c:	2b01      	cmp	r3, #1
 800480e:	d101      	bne.n	8004814 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004810:	2302      	movs	r3, #2
 8004812:	e05a      	b.n	80048ca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2202      	movs	r2, #2
 8004820:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800483a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	68fa      	ldr	r2, [r7, #12]
 8004842:	4313      	orrs	r3, r2
 8004844:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	68fa      	ldr	r2, [r7, #12]
 800484c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a21      	ldr	r2, [pc, #132]	@ (80048d8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d022      	beq.n	800489e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004860:	d01d      	beq.n	800489e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a1d      	ldr	r2, [pc, #116]	@ (80048dc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d018      	beq.n	800489e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a1b      	ldr	r2, [pc, #108]	@ (80048e0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d013      	beq.n	800489e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a1a      	ldr	r2, [pc, #104]	@ (80048e4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d00e      	beq.n	800489e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a18      	ldr	r2, [pc, #96]	@ (80048e8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d009      	beq.n	800489e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a17      	ldr	r2, [pc, #92]	@ (80048ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d004      	beq.n	800489e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a15      	ldr	r2, [pc, #84]	@ (80048f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d10c      	bne.n	80048b8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80048a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	68ba      	ldr	r2, [r7, #8]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	68ba      	ldr	r2, [r7, #8]
 80048b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2201      	movs	r2, #1
 80048bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80048c8:	2300      	movs	r3, #0
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3714      	adds	r7, #20
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr
 80048d6:	bf00      	nop
 80048d8:	40010000 	.word	0x40010000
 80048dc:	40000400 	.word	0x40000400
 80048e0:	40000800 	.word	0x40000800
 80048e4:	40000c00 	.word	0x40000c00
 80048e8:	40010400 	.word	0x40010400
 80048ec:	40014000 	.word	0x40014000
 80048f0:	40001800 	.word	0x40001800

080048f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b083      	sub	sp, #12
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80048fc:	bf00      	nop
 80048fe:	370c      	adds	r7, #12
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr

08004908 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004910:	bf00      	nop
 8004912:	370c      	adds	r7, #12
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr

0800491c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b082      	sub	sp, #8
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d101      	bne.n	800492e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e042      	b.n	80049b4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004934:	b2db      	uxtb	r3, r3
 8004936:	2b00      	cmp	r3, #0
 8004938:	d106      	bne.n	8004948 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f7fc fa1e 	bl	8000d84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2224      	movs	r2, #36	@ 0x24
 800494c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	68da      	ldr	r2, [r3, #12]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800495e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f000 fea7 	bl	80056b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	691a      	ldr	r2, [r3, #16]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004974:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	695a      	ldr	r2, [r3, #20]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004984:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	68da      	ldr	r2, [r3, #12]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004994:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2220      	movs	r2, #32
 80049a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2220      	movs	r2, #32
 80049a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80049b2:	2300      	movs	r3, #0
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3708      	adds	r7, #8
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}

080049bc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b08a      	sub	sp, #40	@ 0x28
 80049c0:	af02      	add	r7, sp, #8
 80049c2:	60f8      	str	r0, [r7, #12]
 80049c4:	60b9      	str	r1, [r7, #8]
 80049c6:	603b      	str	r3, [r7, #0]
 80049c8:	4613      	mov	r3, r2
 80049ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80049cc:	2300      	movs	r3, #0
 80049ce:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	2b20      	cmp	r3, #32
 80049da:	d175      	bne.n	8004ac8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d002      	beq.n	80049e8 <HAL_UART_Transmit+0x2c>
 80049e2:	88fb      	ldrh	r3, [r7, #6]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d101      	bne.n	80049ec <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	e06e      	b.n	8004aca <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2200      	movs	r2, #0
 80049f0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2221      	movs	r2, #33	@ 0x21
 80049f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80049fa:	f7fd fc57 	bl	80022ac <HAL_GetTick>
 80049fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	88fa      	ldrh	r2, [r7, #6]
 8004a04:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	88fa      	ldrh	r2, [r7, #6]
 8004a0a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a14:	d108      	bne.n	8004a28 <HAL_UART_Transmit+0x6c>
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d104      	bne.n	8004a28 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	61bb      	str	r3, [r7, #24]
 8004a26:	e003      	b.n	8004a30 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004a30:	e02e      	b.n	8004a90 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	9300      	str	r3, [sp, #0]
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	2180      	movs	r1, #128	@ 0x80
 8004a3c:	68f8      	ldr	r0, [r7, #12]
 8004a3e:	f000 fc1a 	bl	8005276 <UART_WaitOnFlagUntilTimeout>
 8004a42:	4603      	mov	r3, r0
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d005      	beq.n	8004a54 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2220      	movs	r2, #32
 8004a4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004a50:	2303      	movs	r3, #3
 8004a52:	e03a      	b.n	8004aca <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004a54:	69fb      	ldr	r3, [r7, #28]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d10b      	bne.n	8004a72 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	881b      	ldrh	r3, [r3, #0]
 8004a5e:	461a      	mov	r2, r3
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a68:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004a6a:	69bb      	ldr	r3, [r7, #24]
 8004a6c:	3302      	adds	r3, #2
 8004a6e:	61bb      	str	r3, [r7, #24]
 8004a70:	e007      	b.n	8004a82 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a72:	69fb      	ldr	r3, [r7, #28]
 8004a74:	781a      	ldrb	r2, [r3, #0]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004a7c:	69fb      	ldr	r3, [r7, #28]
 8004a7e:	3301      	adds	r3, #1
 8004a80:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	3b01      	subs	r3, #1
 8004a8a:	b29a      	uxth	r2, r3
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d1cb      	bne.n	8004a32 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	9300      	str	r3, [sp, #0]
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	2140      	movs	r1, #64	@ 0x40
 8004aa4:	68f8      	ldr	r0, [r7, #12]
 8004aa6:	f000 fbe6 	bl	8005276 <UART_WaitOnFlagUntilTimeout>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d005      	beq.n	8004abc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2220      	movs	r2, #32
 8004ab4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004ab8:	2303      	movs	r3, #3
 8004aba:	e006      	b.n	8004aca <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2220      	movs	r2, #32
 8004ac0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	e000      	b.n	8004aca <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004ac8:	2302      	movs	r3, #2
  }
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3720      	adds	r7, #32
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
	...

08004ad4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b08c      	sub	sp, #48	@ 0x30
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	60f8      	str	r0, [r7, #12]
 8004adc:	60b9      	str	r1, [r7, #8]
 8004ade:	4613      	mov	r3, r2
 8004ae0:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	2b20      	cmp	r3, #32
 8004aec:	d156      	bne.n	8004b9c <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d002      	beq.n	8004afa <HAL_UART_Transmit_DMA+0x26>
 8004af4:	88fb      	ldrh	r3, [r7, #6]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d101      	bne.n	8004afe <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e04f      	b.n	8004b9e <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8004afe:	68ba      	ldr	r2, [r7, #8]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	88fa      	ldrh	r2, [r7, #6]
 8004b08:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	88fa      	ldrh	r2, [r7, #6]
 8004b0e:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2200      	movs	r2, #0
 8004b14:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2221      	movs	r2, #33	@ 0x21
 8004b1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b22:	4a21      	ldr	r2, [pc, #132]	@ (8004ba8 <HAL_UART_Transmit_DMA+0xd4>)
 8004b24:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b2a:	4a20      	ldr	r2, [pc, #128]	@ (8004bac <HAL_UART_Transmit_DMA+0xd8>)
 8004b2c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b32:	4a1f      	ldr	r2, [pc, #124]	@ (8004bb0 <HAL_UART_Transmit_DMA+0xdc>)
 8004b34:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8004b3e:	f107 0308 	add.w	r3, r7, #8
 8004b42:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8004b48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b4a:	6819      	ldr	r1, [r3, #0]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	3304      	adds	r3, #4
 8004b52:	461a      	mov	r2, r3
 8004b54:	88fb      	ldrh	r3, [r7, #6]
 8004b56:	f7fd fd99 	bl	800268c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004b62:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	3314      	adds	r3, #20
 8004b6a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b6c:	69bb      	ldr	r3, [r7, #24]
 8004b6e:	e853 3f00 	ldrex	r3, [r3]
 8004b72:	617b      	str	r3, [r7, #20]
   return(result);
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b7a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	3314      	adds	r3, #20
 8004b82:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004b84:	627a      	str	r2, [r7, #36]	@ 0x24
 8004b86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b88:	6a39      	ldr	r1, [r7, #32]
 8004b8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b8c:	e841 2300 	strex	r3, r2, [r1]
 8004b90:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d1e5      	bne.n	8004b64 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	e000      	b.n	8004b9e <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8004b9c:	2302      	movs	r3, #2
  }
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3730      	adds	r7, #48	@ 0x30
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	0800512d 	.word	0x0800512d
 8004bac:	080051c7 	.word	0x080051c7
 8004bb0:	080051e3 	.word	0x080051e3

08004bb4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b0ba      	sub	sp, #232	@ 0xe8
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	695b      	ldr	r3, [r3, #20]
 8004bd6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004be0:	2300      	movs	r3, #0
 8004be2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004be6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004bea:	f003 030f 	and.w	r3, r3, #15
 8004bee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004bf2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d10f      	bne.n	8004c1a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004bfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004bfe:	f003 0320 	and.w	r3, r3, #32
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d009      	beq.n	8004c1a <HAL_UART_IRQHandler+0x66>
 8004c06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c0a:	f003 0320 	and.w	r3, r3, #32
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d003      	beq.n	8004c1a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f000 fc8f 	bl	8005536 <UART_Receive_IT>
      return;
 8004c18:	e25b      	b.n	80050d2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004c1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	f000 80de 	beq.w	8004de0 <HAL_UART_IRQHandler+0x22c>
 8004c24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004c28:	f003 0301 	and.w	r3, r3, #1
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d106      	bne.n	8004c3e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004c30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c34:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	f000 80d1 	beq.w	8004de0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004c3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c42:	f003 0301 	and.w	r3, r3, #1
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d00b      	beq.n	8004c62 <HAL_UART_IRQHandler+0xae>
 8004c4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d005      	beq.n	8004c62 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c5a:	f043 0201 	orr.w	r2, r3, #1
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c66:	f003 0304 	and.w	r3, r3, #4
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d00b      	beq.n	8004c86 <HAL_UART_IRQHandler+0xd2>
 8004c6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004c72:	f003 0301 	and.w	r3, r3, #1
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d005      	beq.n	8004c86 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c7e:	f043 0202 	orr.w	r2, r3, #2
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c8a:	f003 0302 	and.w	r3, r3, #2
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d00b      	beq.n	8004caa <HAL_UART_IRQHandler+0xf6>
 8004c92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004c96:	f003 0301 	and.w	r3, r3, #1
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d005      	beq.n	8004caa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ca2:	f043 0204 	orr.w	r2, r3, #4
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004caa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cae:	f003 0308 	and.w	r3, r3, #8
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d011      	beq.n	8004cda <HAL_UART_IRQHandler+0x126>
 8004cb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004cba:	f003 0320 	and.w	r3, r3, #32
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d105      	bne.n	8004cce <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004cc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004cc6:	f003 0301 	and.w	r3, r3, #1
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d005      	beq.n	8004cda <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cd2:	f043 0208 	orr.w	r2, r3, #8
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	f000 81f2 	beq.w	80050c8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004ce4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ce8:	f003 0320 	and.w	r3, r3, #32
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d008      	beq.n	8004d02 <HAL_UART_IRQHandler+0x14e>
 8004cf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004cf4:	f003 0320 	and.w	r3, r3, #32
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d002      	beq.n	8004d02 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f000 fc1a 	bl	8005536 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	695b      	ldr	r3, [r3, #20]
 8004d08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d0c:	2b40      	cmp	r3, #64	@ 0x40
 8004d0e:	bf0c      	ite	eq
 8004d10:	2301      	moveq	r3, #1
 8004d12:	2300      	movne	r3, #0
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d1e:	f003 0308 	and.w	r3, r3, #8
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d103      	bne.n	8004d2e <HAL_UART_IRQHandler+0x17a>
 8004d26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d04f      	beq.n	8004dce <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f000 fb22 	bl	8005378 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	695b      	ldr	r3, [r3, #20]
 8004d3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d3e:	2b40      	cmp	r3, #64	@ 0x40
 8004d40:	d141      	bne.n	8004dc6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	3314      	adds	r3, #20
 8004d48:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004d50:	e853 3f00 	ldrex	r3, [r3]
 8004d54:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004d58:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004d5c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d60:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	3314      	adds	r3, #20
 8004d6a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004d6e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004d72:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d76:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004d7a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004d7e:	e841 2300 	strex	r3, r2, [r1]
 8004d82:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004d86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d1d9      	bne.n	8004d42 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d013      	beq.n	8004dbe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d9a:	4a7e      	ldr	r2, [pc, #504]	@ (8004f94 <HAL_UART_IRQHandler+0x3e0>)
 8004d9c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004da2:	4618      	mov	r0, r3
 8004da4:	f7fd fd3a 	bl	800281c <HAL_DMA_Abort_IT>
 8004da8:	4603      	mov	r3, r0
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d016      	beq.n	8004ddc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004db2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004db8:	4610      	mov	r0, r2
 8004dba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dbc:	e00e      	b.n	8004ddc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f000 f99e 	bl	8005100 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dc4:	e00a      	b.n	8004ddc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 f99a 	bl	8005100 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dcc:	e006      	b.n	8004ddc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f000 f996 	bl	8005100 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004dda:	e175      	b.n	80050c8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ddc:	bf00      	nop
    return;
 8004dde:	e173      	b.n	80050c8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	f040 814f 	bne.w	8005088 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004dea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dee:	f003 0310 	and.w	r3, r3, #16
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	f000 8148 	beq.w	8005088 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004df8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004dfc:	f003 0310 	and.w	r3, r3, #16
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	f000 8141 	beq.w	8005088 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e06:	2300      	movs	r3, #0
 8004e08:	60bb      	str	r3, [r7, #8]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	60bb      	str	r3, [r7, #8]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	60bb      	str	r3, [r7, #8]
 8004e1a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	695b      	ldr	r3, [r3, #20]
 8004e22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e26:	2b40      	cmp	r3, #64	@ 0x40
 8004e28:	f040 80b6 	bne.w	8004f98 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004e38:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	f000 8145 	beq.w	80050cc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004e46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	f080 813e 	bcs.w	80050cc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004e56:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e5c:	69db      	ldr	r3, [r3, #28]
 8004e5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e62:	f000 8088 	beq.w	8004f76 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	330c      	adds	r3, #12
 8004e6c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e70:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004e74:	e853 3f00 	ldrex	r3, [r3]
 8004e78:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004e7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004e80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e84:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	330c      	adds	r3, #12
 8004e8e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004e92:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004e96:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e9a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004e9e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004ea2:	e841 2300 	strex	r3, r2, [r1]
 8004ea6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004eaa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d1d9      	bne.n	8004e66 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	3314      	adds	r3, #20
 8004eb8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ebc:	e853 3f00 	ldrex	r3, [r3]
 8004ec0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004ec2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004ec4:	f023 0301 	bic.w	r3, r3, #1
 8004ec8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	3314      	adds	r3, #20
 8004ed2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004ed6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004eda:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004edc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004ede:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004ee2:	e841 2300 	strex	r3, r2, [r1]
 8004ee6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004ee8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d1e1      	bne.n	8004eb2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	3314      	adds	r3, #20
 8004ef4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004ef8:	e853 3f00 	ldrex	r3, [r3]
 8004efc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004efe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004f00:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f04:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	3314      	adds	r3, #20
 8004f0e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004f12:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004f14:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f16:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004f18:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004f1a:	e841 2300 	strex	r3, r2, [r1]
 8004f1e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004f20:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d1e3      	bne.n	8004eee <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2220      	movs	r2, #32
 8004f2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2200      	movs	r2, #0
 8004f32:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	330c      	adds	r3, #12
 8004f3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f3e:	e853 3f00 	ldrex	r3, [r3]
 8004f42:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004f44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f46:	f023 0310 	bic.w	r3, r3, #16
 8004f4a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	330c      	adds	r3, #12
 8004f54:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004f58:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004f5a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f5c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004f5e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004f60:	e841 2300 	strex	r3, r2, [r1]
 8004f64:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004f66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d1e3      	bne.n	8004f34 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f70:	4618      	mov	r0, r3
 8004f72:	f7fd fbe3 	bl	800273c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2202      	movs	r2, #2
 8004f7a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	1ad3      	subs	r3, r2, r3
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	4619      	mov	r1, r3
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f000 f8c1 	bl	8005114 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004f92:	e09b      	b.n	80050cc <HAL_UART_IRQHandler+0x518>
 8004f94:	0800543f 	.word	0x0800543f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	1ad3      	subs	r3, r2, r3
 8004fa4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	f000 808e 	beq.w	80050d0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004fb4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	f000 8089 	beq.w	80050d0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	330c      	adds	r3, #12
 8004fc4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fc8:	e853 3f00 	ldrex	r3, [r3]
 8004fcc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004fce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fd0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004fd4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	330c      	adds	r3, #12
 8004fde:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004fe2:	647a      	str	r2, [r7, #68]	@ 0x44
 8004fe4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004fe8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004fea:	e841 2300 	strex	r3, r2, [r1]
 8004fee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004ff0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d1e3      	bne.n	8004fbe <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	3314      	adds	r3, #20
 8004ffc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005000:	e853 3f00 	ldrex	r3, [r3]
 8005004:	623b      	str	r3, [r7, #32]
   return(result);
 8005006:	6a3b      	ldr	r3, [r7, #32]
 8005008:	f023 0301 	bic.w	r3, r3, #1
 800500c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	3314      	adds	r3, #20
 8005016:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800501a:	633a      	str	r2, [r7, #48]	@ 0x30
 800501c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800501e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005020:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005022:	e841 2300 	strex	r3, r2, [r1]
 8005026:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005028:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800502a:	2b00      	cmp	r3, #0
 800502c:	d1e3      	bne.n	8004ff6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2220      	movs	r2, #32
 8005032:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2200      	movs	r2, #0
 800503a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	330c      	adds	r3, #12
 8005042:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	e853 3f00 	ldrex	r3, [r3]
 800504a:	60fb      	str	r3, [r7, #12]
   return(result);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f023 0310 	bic.w	r3, r3, #16
 8005052:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	330c      	adds	r3, #12
 800505c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005060:	61fa      	str	r2, [r7, #28]
 8005062:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005064:	69b9      	ldr	r1, [r7, #24]
 8005066:	69fa      	ldr	r2, [r7, #28]
 8005068:	e841 2300 	strex	r3, r2, [r1]
 800506c:	617b      	str	r3, [r7, #20]
   return(result);
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d1e3      	bne.n	800503c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2202      	movs	r2, #2
 8005078:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800507a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800507e:	4619      	mov	r1, r3
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f000 f847 	bl	8005114 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005086:	e023      	b.n	80050d0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005088:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800508c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005090:	2b00      	cmp	r3, #0
 8005092:	d009      	beq.n	80050a8 <HAL_UART_IRQHandler+0x4f4>
 8005094:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005098:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800509c:	2b00      	cmp	r3, #0
 800509e:	d003      	beq.n	80050a8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f000 f9e0 	bl	8005466 <UART_Transmit_IT>
    return;
 80050a6:	e014      	b.n	80050d2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80050a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d00e      	beq.n	80050d2 <HAL_UART_IRQHandler+0x51e>
 80050b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d008      	beq.n	80050d2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f000 fa20 	bl	8005506 <UART_EndTransmit_IT>
    return;
 80050c6:	e004      	b.n	80050d2 <HAL_UART_IRQHandler+0x51e>
    return;
 80050c8:	bf00      	nop
 80050ca:	e002      	b.n	80050d2 <HAL_UART_IRQHandler+0x51e>
      return;
 80050cc:	bf00      	nop
 80050ce:	e000      	b.n	80050d2 <HAL_UART_IRQHandler+0x51e>
      return;
 80050d0:	bf00      	nop
  }
}
 80050d2:	37e8      	adds	r7, #232	@ 0xe8
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}

080050d8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80050d8:	b480      	push	{r7}
 80050da:	b083      	sub	sp, #12
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80050e0:	bf00      	nop
 80050e2:	370c      	adds	r7, #12
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr

080050ec <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b083      	sub	sp, #12
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80050f4:	bf00      	nop
 80050f6:	370c      	adds	r7, #12
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr

08005100 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005100:	b480      	push	{r7}
 8005102:	b083      	sub	sp, #12
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005108:	bf00      	nop
 800510a:	370c      	adds	r7, #12
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr

08005114 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005114:	b480      	push	{r7}
 8005116:	b083      	sub	sp, #12
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	460b      	mov	r3, r1
 800511e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005120:	bf00      	nop
 8005122:	370c      	adds	r7, #12
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr

0800512c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b090      	sub	sp, #64	@ 0x40
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005138:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005144:	2b00      	cmp	r3, #0
 8005146:	d137      	bne.n	80051b8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8005148:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800514a:	2200      	movs	r2, #0
 800514c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800514e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	3314      	adds	r3, #20
 8005154:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005158:	e853 3f00 	ldrex	r3, [r3]
 800515c:	623b      	str	r3, [r7, #32]
   return(result);
 800515e:	6a3b      	ldr	r3, [r7, #32]
 8005160:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005164:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005166:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	3314      	adds	r3, #20
 800516c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800516e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005170:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005172:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005174:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005176:	e841 2300 	strex	r3, r2, [r1]
 800517a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800517c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800517e:	2b00      	cmp	r3, #0
 8005180:	d1e5      	bne.n	800514e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005182:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	330c      	adds	r3, #12
 8005188:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	e853 3f00 	ldrex	r3, [r3]
 8005190:	60fb      	str	r3, [r7, #12]
   return(result);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005198:	637b      	str	r3, [r7, #52]	@ 0x34
 800519a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	330c      	adds	r3, #12
 80051a0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80051a2:	61fa      	str	r2, [r7, #28]
 80051a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a6:	69b9      	ldr	r1, [r7, #24]
 80051a8:	69fa      	ldr	r2, [r7, #28]
 80051aa:	e841 2300 	strex	r3, r2, [r1]
 80051ae:	617b      	str	r3, [r7, #20]
   return(result);
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d1e5      	bne.n	8005182 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80051b6:	e002      	b.n	80051be <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80051b8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80051ba:	f7fb fac6 	bl	800074a <HAL_UART_TxCpltCallback>
}
 80051be:	bf00      	nop
 80051c0:	3740      	adds	r7, #64	@ 0x40
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}

080051c6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80051c6:	b580      	push	{r7, lr}
 80051c8:	b084      	sub	sp, #16
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051d2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80051d4:	68f8      	ldr	r0, [r7, #12]
 80051d6:	f7ff ff7f 	bl	80050d8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051da:	bf00      	nop
 80051dc:	3710      	adds	r7, #16
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}

080051e2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80051e2:	b580      	push	{r7, lr}
 80051e4:	b084      	sub	sp, #16
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80051ea:	2300      	movs	r3, #0
 80051ec:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051f2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	695b      	ldr	r3, [r3, #20]
 80051fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051fe:	2b80      	cmp	r3, #128	@ 0x80
 8005200:	bf0c      	ite	eq
 8005202:	2301      	moveq	r3, #1
 8005204:	2300      	movne	r3, #0
 8005206:	b2db      	uxtb	r3, r3
 8005208:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005210:	b2db      	uxtb	r3, r3
 8005212:	2b21      	cmp	r3, #33	@ 0x21
 8005214:	d108      	bne.n	8005228 <UART_DMAError+0x46>
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d005      	beq.n	8005228 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	2200      	movs	r2, #0
 8005220:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8005222:	68b8      	ldr	r0, [r7, #8]
 8005224:	f000 f880 	bl	8005328 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	695b      	ldr	r3, [r3, #20]
 800522e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005232:	2b40      	cmp	r3, #64	@ 0x40
 8005234:	bf0c      	ite	eq
 8005236:	2301      	moveq	r3, #1
 8005238:	2300      	movne	r3, #0
 800523a:	b2db      	uxtb	r3, r3
 800523c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005244:	b2db      	uxtb	r3, r3
 8005246:	2b22      	cmp	r3, #34	@ 0x22
 8005248:	d108      	bne.n	800525c <UART_DMAError+0x7a>
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d005      	beq.n	800525c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	2200      	movs	r2, #0
 8005254:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8005256:	68b8      	ldr	r0, [r7, #8]
 8005258:	f000 f88e 	bl	8005378 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005260:	f043 0210 	orr.w	r2, r3, #16
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005268:	68b8      	ldr	r0, [r7, #8]
 800526a:	f7ff ff49 	bl	8005100 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800526e:	bf00      	nop
 8005270:	3710      	adds	r7, #16
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}

08005276 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005276:	b580      	push	{r7, lr}
 8005278:	b086      	sub	sp, #24
 800527a:	af00      	add	r7, sp, #0
 800527c:	60f8      	str	r0, [r7, #12]
 800527e:	60b9      	str	r1, [r7, #8]
 8005280:	603b      	str	r3, [r7, #0]
 8005282:	4613      	mov	r3, r2
 8005284:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005286:	e03b      	b.n	8005300 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005288:	6a3b      	ldr	r3, [r7, #32]
 800528a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800528e:	d037      	beq.n	8005300 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005290:	f7fd f80c 	bl	80022ac <HAL_GetTick>
 8005294:	4602      	mov	r2, r0
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	1ad3      	subs	r3, r2, r3
 800529a:	6a3a      	ldr	r2, [r7, #32]
 800529c:	429a      	cmp	r2, r3
 800529e:	d302      	bcc.n	80052a6 <UART_WaitOnFlagUntilTimeout+0x30>
 80052a0:	6a3b      	ldr	r3, [r7, #32]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d101      	bne.n	80052aa <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80052a6:	2303      	movs	r3, #3
 80052a8:	e03a      	b.n	8005320 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	68db      	ldr	r3, [r3, #12]
 80052b0:	f003 0304 	and.w	r3, r3, #4
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d023      	beq.n	8005300 <UART_WaitOnFlagUntilTimeout+0x8a>
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	2b80      	cmp	r3, #128	@ 0x80
 80052bc:	d020      	beq.n	8005300 <UART_WaitOnFlagUntilTimeout+0x8a>
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	2b40      	cmp	r3, #64	@ 0x40
 80052c2:	d01d      	beq.n	8005300 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 0308 	and.w	r3, r3, #8
 80052ce:	2b08      	cmp	r3, #8
 80052d0:	d116      	bne.n	8005300 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80052d2:	2300      	movs	r3, #0
 80052d4:	617b      	str	r3, [r7, #20]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	617b      	str	r3, [r7, #20]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	617b      	str	r3, [r7, #20]
 80052e6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80052e8:	68f8      	ldr	r0, [r7, #12]
 80052ea:	f000 f845 	bl	8005378 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2208      	movs	r2, #8
 80052f2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2200      	movs	r2, #0
 80052f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	e00f      	b.n	8005320 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	4013      	ands	r3, r2
 800530a:	68ba      	ldr	r2, [r7, #8]
 800530c:	429a      	cmp	r2, r3
 800530e:	bf0c      	ite	eq
 8005310:	2301      	moveq	r3, #1
 8005312:	2300      	movne	r3, #0
 8005314:	b2db      	uxtb	r3, r3
 8005316:	461a      	mov	r2, r3
 8005318:	79fb      	ldrb	r3, [r7, #7]
 800531a:	429a      	cmp	r2, r3
 800531c:	d0b4      	beq.n	8005288 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800531e:	2300      	movs	r3, #0
}
 8005320:	4618      	mov	r0, r3
 8005322:	3718      	adds	r7, #24
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}

08005328 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005328:	b480      	push	{r7}
 800532a:	b089      	sub	sp, #36	@ 0x24
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	330c      	adds	r3, #12
 8005336:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	e853 3f00 	ldrex	r3, [r3]
 800533e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005346:	61fb      	str	r3, [r7, #28]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	330c      	adds	r3, #12
 800534e:	69fa      	ldr	r2, [r7, #28]
 8005350:	61ba      	str	r2, [r7, #24]
 8005352:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005354:	6979      	ldr	r1, [r7, #20]
 8005356:	69ba      	ldr	r2, [r7, #24]
 8005358:	e841 2300 	strex	r3, r2, [r1]
 800535c:	613b      	str	r3, [r7, #16]
   return(result);
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d1e5      	bne.n	8005330 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2220      	movs	r2, #32
 8005368:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800536c:	bf00      	nop
 800536e:	3724      	adds	r7, #36	@ 0x24
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr

08005378 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005378:	b480      	push	{r7}
 800537a:	b095      	sub	sp, #84	@ 0x54
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	330c      	adds	r3, #12
 8005386:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005388:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800538a:	e853 3f00 	ldrex	r3, [r3]
 800538e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005392:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005396:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	330c      	adds	r3, #12
 800539e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80053a0:	643a      	str	r2, [r7, #64]	@ 0x40
 80053a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053a4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80053a6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80053a8:	e841 2300 	strex	r3, r2, [r1]
 80053ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80053ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d1e5      	bne.n	8005380 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	3314      	adds	r3, #20
 80053ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053bc:	6a3b      	ldr	r3, [r7, #32]
 80053be:	e853 3f00 	ldrex	r3, [r3]
 80053c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80053c4:	69fb      	ldr	r3, [r7, #28]
 80053c6:	f023 0301 	bic.w	r3, r3, #1
 80053ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	3314      	adds	r3, #20
 80053d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80053d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80053d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80053da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053dc:	e841 2300 	strex	r3, r2, [r1]
 80053e0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80053e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d1e5      	bne.n	80053b4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d119      	bne.n	8005424 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	330c      	adds	r3, #12
 80053f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	e853 3f00 	ldrex	r3, [r3]
 80053fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	f023 0310 	bic.w	r3, r3, #16
 8005406:	647b      	str	r3, [r7, #68]	@ 0x44
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	330c      	adds	r3, #12
 800540e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005410:	61ba      	str	r2, [r7, #24]
 8005412:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005414:	6979      	ldr	r1, [r7, #20]
 8005416:	69ba      	ldr	r2, [r7, #24]
 8005418:	e841 2300 	strex	r3, r2, [r1]
 800541c:	613b      	str	r3, [r7, #16]
   return(result);
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d1e5      	bne.n	80053f0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2220      	movs	r2, #32
 8005428:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005432:	bf00      	nop
 8005434:	3754      	adds	r7, #84	@ 0x54
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr

0800543e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800543e:	b580      	push	{r7, lr}
 8005440:	b084      	sub	sp, #16
 8005442:	af00      	add	r7, sp, #0
 8005444:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800544a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2200      	movs	r2, #0
 8005450:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2200      	movs	r2, #0
 8005456:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005458:	68f8      	ldr	r0, [r7, #12]
 800545a:	f7ff fe51 	bl	8005100 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800545e:	bf00      	nop
 8005460:	3710      	adds	r7, #16
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}

08005466 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005466:	b480      	push	{r7}
 8005468:	b085      	sub	sp, #20
 800546a:	af00      	add	r7, sp, #0
 800546c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005474:	b2db      	uxtb	r3, r3
 8005476:	2b21      	cmp	r3, #33	@ 0x21
 8005478:	d13e      	bne.n	80054f8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005482:	d114      	bne.n	80054ae <UART_Transmit_IT+0x48>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	691b      	ldr	r3, [r3, #16]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d110      	bne.n	80054ae <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6a1b      	ldr	r3, [r3, #32]
 8005490:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	881b      	ldrh	r3, [r3, #0]
 8005496:	461a      	mov	r2, r3
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054a0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6a1b      	ldr	r3, [r3, #32]
 80054a6:	1c9a      	adds	r2, r3, #2
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	621a      	str	r2, [r3, #32]
 80054ac:	e008      	b.n	80054c0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6a1b      	ldr	r3, [r3, #32]
 80054b2:	1c59      	adds	r1, r3, #1
 80054b4:	687a      	ldr	r2, [r7, #4]
 80054b6:	6211      	str	r1, [r2, #32]
 80054b8:	781a      	ldrb	r2, [r3, #0]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80054c4:	b29b      	uxth	r3, r3
 80054c6:	3b01      	subs	r3, #1
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	4619      	mov	r1, r3
 80054ce:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d10f      	bne.n	80054f4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	68da      	ldr	r2, [r3, #12]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80054e2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	68da      	ldr	r2, [r3, #12]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80054f2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80054f4:	2300      	movs	r3, #0
 80054f6:	e000      	b.n	80054fa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80054f8:	2302      	movs	r3, #2
  }
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3714      	adds	r7, #20
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr

08005506 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005506:	b580      	push	{r7, lr}
 8005508:	b082      	sub	sp, #8
 800550a:	af00      	add	r7, sp, #0
 800550c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	68da      	ldr	r2, [r3, #12]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800551c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2220      	movs	r2, #32
 8005522:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f7fb f90f 	bl	800074a <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800552c:	2300      	movs	r3, #0
}
 800552e:	4618      	mov	r0, r3
 8005530:	3708      	adds	r7, #8
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}

08005536 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005536:	b580      	push	{r7, lr}
 8005538:	b08c      	sub	sp, #48	@ 0x30
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005544:	b2db      	uxtb	r3, r3
 8005546:	2b22      	cmp	r3, #34	@ 0x22
 8005548:	f040 80ae 	bne.w	80056a8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005554:	d117      	bne.n	8005586 <UART_Receive_IT+0x50>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	691b      	ldr	r3, [r3, #16]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d113      	bne.n	8005586 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800555e:	2300      	movs	r3, #0
 8005560:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005566:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	b29b      	uxth	r3, r3
 8005570:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005574:	b29a      	uxth	r2, r3
 8005576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005578:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800557e:	1c9a      	adds	r2, r3, #2
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	629a      	str	r2, [r3, #40]	@ 0x28
 8005584:	e026      	b.n	80055d4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800558a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800558c:	2300      	movs	r3, #0
 800558e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005598:	d007      	beq.n	80055aa <UART_Receive_IT+0x74>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d10a      	bne.n	80055b8 <UART_Receive_IT+0x82>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	691b      	ldr	r3, [r3, #16]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d106      	bne.n	80055b8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	b2da      	uxtb	r2, r3
 80055b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055b4:	701a      	strb	r2, [r3, #0]
 80055b6:	e008      	b.n	80055ca <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80055c4:	b2da      	uxtb	r2, r3
 80055c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055c8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055ce:	1c5a      	adds	r2, r3, #1
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80055d8:	b29b      	uxth	r3, r3
 80055da:	3b01      	subs	r3, #1
 80055dc:	b29b      	uxth	r3, r3
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	4619      	mov	r1, r3
 80055e2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d15d      	bne.n	80056a4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	68da      	ldr	r2, [r3, #12]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f022 0220 	bic.w	r2, r2, #32
 80055f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	68da      	ldr	r2, [r3, #12]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005606:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	695a      	ldr	r2, [r3, #20]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f022 0201 	bic.w	r2, r2, #1
 8005616:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2220      	movs	r2, #32
 800561c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2200      	movs	r2, #0
 8005624:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800562a:	2b01      	cmp	r3, #1
 800562c:	d135      	bne.n	800569a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2200      	movs	r2, #0
 8005632:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	330c      	adds	r3, #12
 800563a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	e853 3f00 	ldrex	r3, [r3]
 8005642:	613b      	str	r3, [r7, #16]
   return(result);
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	f023 0310 	bic.w	r3, r3, #16
 800564a:	627b      	str	r3, [r7, #36]	@ 0x24
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	330c      	adds	r3, #12
 8005652:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005654:	623a      	str	r2, [r7, #32]
 8005656:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005658:	69f9      	ldr	r1, [r7, #28]
 800565a:	6a3a      	ldr	r2, [r7, #32]
 800565c:	e841 2300 	strex	r3, r2, [r1]
 8005660:	61bb      	str	r3, [r7, #24]
   return(result);
 8005662:	69bb      	ldr	r3, [r7, #24]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d1e5      	bne.n	8005634 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f003 0310 	and.w	r3, r3, #16
 8005672:	2b10      	cmp	r3, #16
 8005674:	d10a      	bne.n	800568c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005676:	2300      	movs	r3, #0
 8005678:	60fb      	str	r3, [r7, #12]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	60fb      	str	r3, [r7, #12]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	60fb      	str	r3, [r7, #12]
 800568a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005690:	4619      	mov	r1, r3
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f7ff fd3e 	bl	8005114 <HAL_UARTEx_RxEventCallback>
 8005698:	e002      	b.n	80056a0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f7ff fd26 	bl	80050ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80056a0:	2300      	movs	r3, #0
 80056a2:	e002      	b.n	80056aa <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80056a4:	2300      	movs	r3, #0
 80056a6:	e000      	b.n	80056aa <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80056a8:	2302      	movs	r3, #2
  }
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3730      	adds	r7, #48	@ 0x30
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
	...

080056b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056b8:	b0c0      	sub	sp, #256	@ 0x100
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	691b      	ldr	r3, [r3, #16]
 80056c8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80056cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056d0:	68d9      	ldr	r1, [r3, #12]
 80056d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	ea40 0301 	orr.w	r3, r0, r1
 80056dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80056de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056e2:	689a      	ldr	r2, [r3, #8]
 80056e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056e8:	691b      	ldr	r3, [r3, #16]
 80056ea:	431a      	orrs	r2, r3
 80056ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056f0:	695b      	ldr	r3, [r3, #20]
 80056f2:	431a      	orrs	r2, r3
 80056f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056f8:	69db      	ldr	r3, [r3, #28]
 80056fa:	4313      	orrs	r3, r2
 80056fc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800570c:	f021 010c 	bic.w	r1, r1, #12
 8005710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800571a:	430b      	orrs	r3, r1
 800571c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800571e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	695b      	ldr	r3, [r3, #20]
 8005726:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800572a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800572e:	6999      	ldr	r1, [r3, #24]
 8005730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	ea40 0301 	orr.w	r3, r0, r1
 800573a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800573c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	4b8f      	ldr	r3, [pc, #572]	@ (8005980 <UART_SetConfig+0x2cc>)
 8005744:	429a      	cmp	r2, r3
 8005746:	d005      	beq.n	8005754 <UART_SetConfig+0xa0>
 8005748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	4b8d      	ldr	r3, [pc, #564]	@ (8005984 <UART_SetConfig+0x2d0>)
 8005750:	429a      	cmp	r2, r3
 8005752:	d104      	bne.n	800575e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005754:	f7fe fa54 	bl	8003c00 <HAL_RCC_GetPCLK2Freq>
 8005758:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800575c:	e003      	b.n	8005766 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800575e:	f7fe fa3b 	bl	8003bd8 <HAL_RCC_GetPCLK1Freq>
 8005762:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800576a:	69db      	ldr	r3, [r3, #28]
 800576c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005770:	f040 810c 	bne.w	800598c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005774:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005778:	2200      	movs	r2, #0
 800577a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800577e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005782:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005786:	4622      	mov	r2, r4
 8005788:	462b      	mov	r3, r5
 800578a:	1891      	adds	r1, r2, r2
 800578c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800578e:	415b      	adcs	r3, r3
 8005790:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005792:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005796:	4621      	mov	r1, r4
 8005798:	eb12 0801 	adds.w	r8, r2, r1
 800579c:	4629      	mov	r1, r5
 800579e:	eb43 0901 	adc.w	r9, r3, r1
 80057a2:	f04f 0200 	mov.w	r2, #0
 80057a6:	f04f 0300 	mov.w	r3, #0
 80057aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80057ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80057b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80057b6:	4690      	mov	r8, r2
 80057b8:	4699      	mov	r9, r3
 80057ba:	4623      	mov	r3, r4
 80057bc:	eb18 0303 	adds.w	r3, r8, r3
 80057c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80057c4:	462b      	mov	r3, r5
 80057c6:	eb49 0303 	adc.w	r3, r9, r3
 80057ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80057ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80057da:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80057de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80057e2:	460b      	mov	r3, r1
 80057e4:	18db      	adds	r3, r3, r3
 80057e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80057e8:	4613      	mov	r3, r2
 80057ea:	eb42 0303 	adc.w	r3, r2, r3
 80057ee:	657b      	str	r3, [r7, #84]	@ 0x54
 80057f0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80057f4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80057f8:	f7fa fd3a 	bl	8000270 <__aeabi_uldivmod>
 80057fc:	4602      	mov	r2, r0
 80057fe:	460b      	mov	r3, r1
 8005800:	4b61      	ldr	r3, [pc, #388]	@ (8005988 <UART_SetConfig+0x2d4>)
 8005802:	fba3 2302 	umull	r2, r3, r3, r2
 8005806:	095b      	lsrs	r3, r3, #5
 8005808:	011c      	lsls	r4, r3, #4
 800580a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800580e:	2200      	movs	r2, #0
 8005810:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005814:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005818:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800581c:	4642      	mov	r2, r8
 800581e:	464b      	mov	r3, r9
 8005820:	1891      	adds	r1, r2, r2
 8005822:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005824:	415b      	adcs	r3, r3
 8005826:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005828:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800582c:	4641      	mov	r1, r8
 800582e:	eb12 0a01 	adds.w	sl, r2, r1
 8005832:	4649      	mov	r1, r9
 8005834:	eb43 0b01 	adc.w	fp, r3, r1
 8005838:	f04f 0200 	mov.w	r2, #0
 800583c:	f04f 0300 	mov.w	r3, #0
 8005840:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005844:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005848:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800584c:	4692      	mov	sl, r2
 800584e:	469b      	mov	fp, r3
 8005850:	4643      	mov	r3, r8
 8005852:	eb1a 0303 	adds.w	r3, sl, r3
 8005856:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800585a:	464b      	mov	r3, r9
 800585c:	eb4b 0303 	adc.w	r3, fp, r3
 8005860:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	2200      	movs	r2, #0
 800586c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005870:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005874:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005878:	460b      	mov	r3, r1
 800587a:	18db      	adds	r3, r3, r3
 800587c:	643b      	str	r3, [r7, #64]	@ 0x40
 800587e:	4613      	mov	r3, r2
 8005880:	eb42 0303 	adc.w	r3, r2, r3
 8005884:	647b      	str	r3, [r7, #68]	@ 0x44
 8005886:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800588a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800588e:	f7fa fcef 	bl	8000270 <__aeabi_uldivmod>
 8005892:	4602      	mov	r2, r0
 8005894:	460b      	mov	r3, r1
 8005896:	4611      	mov	r1, r2
 8005898:	4b3b      	ldr	r3, [pc, #236]	@ (8005988 <UART_SetConfig+0x2d4>)
 800589a:	fba3 2301 	umull	r2, r3, r3, r1
 800589e:	095b      	lsrs	r3, r3, #5
 80058a0:	2264      	movs	r2, #100	@ 0x64
 80058a2:	fb02 f303 	mul.w	r3, r2, r3
 80058a6:	1acb      	subs	r3, r1, r3
 80058a8:	00db      	lsls	r3, r3, #3
 80058aa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80058ae:	4b36      	ldr	r3, [pc, #216]	@ (8005988 <UART_SetConfig+0x2d4>)
 80058b0:	fba3 2302 	umull	r2, r3, r3, r2
 80058b4:	095b      	lsrs	r3, r3, #5
 80058b6:	005b      	lsls	r3, r3, #1
 80058b8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80058bc:	441c      	add	r4, r3
 80058be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058c2:	2200      	movs	r2, #0
 80058c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80058c8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80058cc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80058d0:	4642      	mov	r2, r8
 80058d2:	464b      	mov	r3, r9
 80058d4:	1891      	adds	r1, r2, r2
 80058d6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80058d8:	415b      	adcs	r3, r3
 80058da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80058dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80058e0:	4641      	mov	r1, r8
 80058e2:	1851      	adds	r1, r2, r1
 80058e4:	6339      	str	r1, [r7, #48]	@ 0x30
 80058e6:	4649      	mov	r1, r9
 80058e8:	414b      	adcs	r3, r1
 80058ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80058ec:	f04f 0200 	mov.w	r2, #0
 80058f0:	f04f 0300 	mov.w	r3, #0
 80058f4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80058f8:	4659      	mov	r1, fp
 80058fa:	00cb      	lsls	r3, r1, #3
 80058fc:	4651      	mov	r1, sl
 80058fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005902:	4651      	mov	r1, sl
 8005904:	00ca      	lsls	r2, r1, #3
 8005906:	4610      	mov	r0, r2
 8005908:	4619      	mov	r1, r3
 800590a:	4603      	mov	r3, r0
 800590c:	4642      	mov	r2, r8
 800590e:	189b      	adds	r3, r3, r2
 8005910:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005914:	464b      	mov	r3, r9
 8005916:	460a      	mov	r2, r1
 8005918:	eb42 0303 	adc.w	r3, r2, r3
 800591c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800592c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005930:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005934:	460b      	mov	r3, r1
 8005936:	18db      	adds	r3, r3, r3
 8005938:	62bb      	str	r3, [r7, #40]	@ 0x28
 800593a:	4613      	mov	r3, r2
 800593c:	eb42 0303 	adc.w	r3, r2, r3
 8005940:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005942:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005946:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800594a:	f7fa fc91 	bl	8000270 <__aeabi_uldivmod>
 800594e:	4602      	mov	r2, r0
 8005950:	460b      	mov	r3, r1
 8005952:	4b0d      	ldr	r3, [pc, #52]	@ (8005988 <UART_SetConfig+0x2d4>)
 8005954:	fba3 1302 	umull	r1, r3, r3, r2
 8005958:	095b      	lsrs	r3, r3, #5
 800595a:	2164      	movs	r1, #100	@ 0x64
 800595c:	fb01 f303 	mul.w	r3, r1, r3
 8005960:	1ad3      	subs	r3, r2, r3
 8005962:	00db      	lsls	r3, r3, #3
 8005964:	3332      	adds	r3, #50	@ 0x32
 8005966:	4a08      	ldr	r2, [pc, #32]	@ (8005988 <UART_SetConfig+0x2d4>)
 8005968:	fba2 2303 	umull	r2, r3, r2, r3
 800596c:	095b      	lsrs	r3, r3, #5
 800596e:	f003 0207 	and.w	r2, r3, #7
 8005972:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4422      	add	r2, r4
 800597a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800597c:	e106      	b.n	8005b8c <UART_SetConfig+0x4d8>
 800597e:	bf00      	nop
 8005980:	40011000 	.word	0x40011000
 8005984:	40011400 	.word	0x40011400
 8005988:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800598c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005990:	2200      	movs	r2, #0
 8005992:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005996:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800599a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800599e:	4642      	mov	r2, r8
 80059a0:	464b      	mov	r3, r9
 80059a2:	1891      	adds	r1, r2, r2
 80059a4:	6239      	str	r1, [r7, #32]
 80059a6:	415b      	adcs	r3, r3
 80059a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80059aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80059ae:	4641      	mov	r1, r8
 80059b0:	1854      	adds	r4, r2, r1
 80059b2:	4649      	mov	r1, r9
 80059b4:	eb43 0501 	adc.w	r5, r3, r1
 80059b8:	f04f 0200 	mov.w	r2, #0
 80059bc:	f04f 0300 	mov.w	r3, #0
 80059c0:	00eb      	lsls	r3, r5, #3
 80059c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80059c6:	00e2      	lsls	r2, r4, #3
 80059c8:	4614      	mov	r4, r2
 80059ca:	461d      	mov	r5, r3
 80059cc:	4643      	mov	r3, r8
 80059ce:	18e3      	adds	r3, r4, r3
 80059d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80059d4:	464b      	mov	r3, r9
 80059d6:	eb45 0303 	adc.w	r3, r5, r3
 80059da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80059de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80059ea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80059ee:	f04f 0200 	mov.w	r2, #0
 80059f2:	f04f 0300 	mov.w	r3, #0
 80059f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80059fa:	4629      	mov	r1, r5
 80059fc:	008b      	lsls	r3, r1, #2
 80059fe:	4621      	mov	r1, r4
 8005a00:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a04:	4621      	mov	r1, r4
 8005a06:	008a      	lsls	r2, r1, #2
 8005a08:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005a0c:	f7fa fc30 	bl	8000270 <__aeabi_uldivmod>
 8005a10:	4602      	mov	r2, r0
 8005a12:	460b      	mov	r3, r1
 8005a14:	4b60      	ldr	r3, [pc, #384]	@ (8005b98 <UART_SetConfig+0x4e4>)
 8005a16:	fba3 2302 	umull	r2, r3, r3, r2
 8005a1a:	095b      	lsrs	r3, r3, #5
 8005a1c:	011c      	lsls	r4, r3, #4
 8005a1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a22:	2200      	movs	r2, #0
 8005a24:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005a28:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005a2c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005a30:	4642      	mov	r2, r8
 8005a32:	464b      	mov	r3, r9
 8005a34:	1891      	adds	r1, r2, r2
 8005a36:	61b9      	str	r1, [r7, #24]
 8005a38:	415b      	adcs	r3, r3
 8005a3a:	61fb      	str	r3, [r7, #28]
 8005a3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a40:	4641      	mov	r1, r8
 8005a42:	1851      	adds	r1, r2, r1
 8005a44:	6139      	str	r1, [r7, #16]
 8005a46:	4649      	mov	r1, r9
 8005a48:	414b      	adcs	r3, r1
 8005a4a:	617b      	str	r3, [r7, #20]
 8005a4c:	f04f 0200 	mov.w	r2, #0
 8005a50:	f04f 0300 	mov.w	r3, #0
 8005a54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005a58:	4659      	mov	r1, fp
 8005a5a:	00cb      	lsls	r3, r1, #3
 8005a5c:	4651      	mov	r1, sl
 8005a5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a62:	4651      	mov	r1, sl
 8005a64:	00ca      	lsls	r2, r1, #3
 8005a66:	4610      	mov	r0, r2
 8005a68:	4619      	mov	r1, r3
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	4642      	mov	r2, r8
 8005a6e:	189b      	adds	r3, r3, r2
 8005a70:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005a74:	464b      	mov	r3, r9
 8005a76:	460a      	mov	r2, r1
 8005a78:	eb42 0303 	adc.w	r3, r2, r3
 8005a7c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	2200      	movs	r2, #0
 8005a88:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005a8a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005a8c:	f04f 0200 	mov.w	r2, #0
 8005a90:	f04f 0300 	mov.w	r3, #0
 8005a94:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005a98:	4649      	mov	r1, r9
 8005a9a:	008b      	lsls	r3, r1, #2
 8005a9c:	4641      	mov	r1, r8
 8005a9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005aa2:	4641      	mov	r1, r8
 8005aa4:	008a      	lsls	r2, r1, #2
 8005aa6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005aaa:	f7fa fbe1 	bl	8000270 <__aeabi_uldivmod>
 8005aae:	4602      	mov	r2, r0
 8005ab0:	460b      	mov	r3, r1
 8005ab2:	4611      	mov	r1, r2
 8005ab4:	4b38      	ldr	r3, [pc, #224]	@ (8005b98 <UART_SetConfig+0x4e4>)
 8005ab6:	fba3 2301 	umull	r2, r3, r3, r1
 8005aba:	095b      	lsrs	r3, r3, #5
 8005abc:	2264      	movs	r2, #100	@ 0x64
 8005abe:	fb02 f303 	mul.w	r3, r2, r3
 8005ac2:	1acb      	subs	r3, r1, r3
 8005ac4:	011b      	lsls	r3, r3, #4
 8005ac6:	3332      	adds	r3, #50	@ 0x32
 8005ac8:	4a33      	ldr	r2, [pc, #204]	@ (8005b98 <UART_SetConfig+0x4e4>)
 8005aca:	fba2 2303 	umull	r2, r3, r2, r3
 8005ace:	095b      	lsrs	r3, r3, #5
 8005ad0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005ad4:	441c      	add	r4, r3
 8005ad6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ada:	2200      	movs	r2, #0
 8005adc:	673b      	str	r3, [r7, #112]	@ 0x70
 8005ade:	677a      	str	r2, [r7, #116]	@ 0x74
 8005ae0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005ae4:	4642      	mov	r2, r8
 8005ae6:	464b      	mov	r3, r9
 8005ae8:	1891      	adds	r1, r2, r2
 8005aea:	60b9      	str	r1, [r7, #8]
 8005aec:	415b      	adcs	r3, r3
 8005aee:	60fb      	str	r3, [r7, #12]
 8005af0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005af4:	4641      	mov	r1, r8
 8005af6:	1851      	adds	r1, r2, r1
 8005af8:	6039      	str	r1, [r7, #0]
 8005afa:	4649      	mov	r1, r9
 8005afc:	414b      	adcs	r3, r1
 8005afe:	607b      	str	r3, [r7, #4]
 8005b00:	f04f 0200 	mov.w	r2, #0
 8005b04:	f04f 0300 	mov.w	r3, #0
 8005b08:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005b0c:	4659      	mov	r1, fp
 8005b0e:	00cb      	lsls	r3, r1, #3
 8005b10:	4651      	mov	r1, sl
 8005b12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b16:	4651      	mov	r1, sl
 8005b18:	00ca      	lsls	r2, r1, #3
 8005b1a:	4610      	mov	r0, r2
 8005b1c:	4619      	mov	r1, r3
 8005b1e:	4603      	mov	r3, r0
 8005b20:	4642      	mov	r2, r8
 8005b22:	189b      	adds	r3, r3, r2
 8005b24:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005b26:	464b      	mov	r3, r9
 8005b28:	460a      	mov	r2, r1
 8005b2a:	eb42 0303 	adc.w	r3, r2, r3
 8005b2e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	663b      	str	r3, [r7, #96]	@ 0x60
 8005b3a:	667a      	str	r2, [r7, #100]	@ 0x64
 8005b3c:	f04f 0200 	mov.w	r2, #0
 8005b40:	f04f 0300 	mov.w	r3, #0
 8005b44:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005b48:	4649      	mov	r1, r9
 8005b4a:	008b      	lsls	r3, r1, #2
 8005b4c:	4641      	mov	r1, r8
 8005b4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b52:	4641      	mov	r1, r8
 8005b54:	008a      	lsls	r2, r1, #2
 8005b56:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005b5a:	f7fa fb89 	bl	8000270 <__aeabi_uldivmod>
 8005b5e:	4602      	mov	r2, r0
 8005b60:	460b      	mov	r3, r1
 8005b62:	4b0d      	ldr	r3, [pc, #52]	@ (8005b98 <UART_SetConfig+0x4e4>)
 8005b64:	fba3 1302 	umull	r1, r3, r3, r2
 8005b68:	095b      	lsrs	r3, r3, #5
 8005b6a:	2164      	movs	r1, #100	@ 0x64
 8005b6c:	fb01 f303 	mul.w	r3, r1, r3
 8005b70:	1ad3      	subs	r3, r2, r3
 8005b72:	011b      	lsls	r3, r3, #4
 8005b74:	3332      	adds	r3, #50	@ 0x32
 8005b76:	4a08      	ldr	r2, [pc, #32]	@ (8005b98 <UART_SetConfig+0x4e4>)
 8005b78:	fba2 2303 	umull	r2, r3, r2, r3
 8005b7c:	095b      	lsrs	r3, r3, #5
 8005b7e:	f003 020f 	and.w	r2, r3, #15
 8005b82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4422      	add	r2, r4
 8005b8a:	609a      	str	r2, [r3, #8]
}
 8005b8c:	bf00      	nop
 8005b8e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005b92:	46bd      	mov	sp, r7
 8005b94:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b98:	51eb851f 	.word	0x51eb851f

08005b9c <std>:
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	b510      	push	{r4, lr}
 8005ba0:	4604      	mov	r4, r0
 8005ba2:	e9c0 3300 	strd	r3, r3, [r0]
 8005ba6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005baa:	6083      	str	r3, [r0, #8]
 8005bac:	8181      	strh	r1, [r0, #12]
 8005bae:	6643      	str	r3, [r0, #100]	@ 0x64
 8005bb0:	81c2      	strh	r2, [r0, #14]
 8005bb2:	6183      	str	r3, [r0, #24]
 8005bb4:	4619      	mov	r1, r3
 8005bb6:	2208      	movs	r2, #8
 8005bb8:	305c      	adds	r0, #92	@ 0x5c
 8005bba:	f000 f9ba 	bl	8005f32 <memset>
 8005bbe:	4b0d      	ldr	r3, [pc, #52]	@ (8005bf4 <std+0x58>)
 8005bc0:	6263      	str	r3, [r4, #36]	@ 0x24
 8005bc2:	4b0d      	ldr	r3, [pc, #52]	@ (8005bf8 <std+0x5c>)
 8005bc4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005bc6:	4b0d      	ldr	r3, [pc, #52]	@ (8005bfc <std+0x60>)
 8005bc8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005bca:	4b0d      	ldr	r3, [pc, #52]	@ (8005c00 <std+0x64>)
 8005bcc:	6323      	str	r3, [r4, #48]	@ 0x30
 8005bce:	4b0d      	ldr	r3, [pc, #52]	@ (8005c04 <std+0x68>)
 8005bd0:	6224      	str	r4, [r4, #32]
 8005bd2:	429c      	cmp	r4, r3
 8005bd4:	d006      	beq.n	8005be4 <std+0x48>
 8005bd6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005bda:	4294      	cmp	r4, r2
 8005bdc:	d002      	beq.n	8005be4 <std+0x48>
 8005bde:	33d0      	adds	r3, #208	@ 0xd0
 8005be0:	429c      	cmp	r4, r3
 8005be2:	d105      	bne.n	8005bf0 <std+0x54>
 8005be4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005be8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bec:	f000 ba1a 	b.w	8006024 <__retarget_lock_init_recursive>
 8005bf0:	bd10      	pop	{r4, pc}
 8005bf2:	bf00      	nop
 8005bf4:	08005ead 	.word	0x08005ead
 8005bf8:	08005ecf 	.word	0x08005ecf
 8005bfc:	08005f07 	.word	0x08005f07
 8005c00:	08005f2b 	.word	0x08005f2b
 8005c04:	200005b4 	.word	0x200005b4

08005c08 <stdio_exit_handler>:
 8005c08:	4a02      	ldr	r2, [pc, #8]	@ (8005c14 <stdio_exit_handler+0xc>)
 8005c0a:	4903      	ldr	r1, [pc, #12]	@ (8005c18 <stdio_exit_handler+0x10>)
 8005c0c:	4803      	ldr	r0, [pc, #12]	@ (8005c1c <stdio_exit_handler+0x14>)
 8005c0e:	f000 b869 	b.w	8005ce4 <_fwalk_sglue>
 8005c12:	bf00      	nop
 8005c14:	2000002c 	.word	0x2000002c
 8005c18:	080068fd 	.word	0x080068fd
 8005c1c:	2000003c 	.word	0x2000003c

08005c20 <cleanup_stdio>:
 8005c20:	6841      	ldr	r1, [r0, #4]
 8005c22:	4b0c      	ldr	r3, [pc, #48]	@ (8005c54 <cleanup_stdio+0x34>)
 8005c24:	4299      	cmp	r1, r3
 8005c26:	b510      	push	{r4, lr}
 8005c28:	4604      	mov	r4, r0
 8005c2a:	d001      	beq.n	8005c30 <cleanup_stdio+0x10>
 8005c2c:	f000 fe66 	bl	80068fc <_fflush_r>
 8005c30:	68a1      	ldr	r1, [r4, #8]
 8005c32:	4b09      	ldr	r3, [pc, #36]	@ (8005c58 <cleanup_stdio+0x38>)
 8005c34:	4299      	cmp	r1, r3
 8005c36:	d002      	beq.n	8005c3e <cleanup_stdio+0x1e>
 8005c38:	4620      	mov	r0, r4
 8005c3a:	f000 fe5f 	bl	80068fc <_fflush_r>
 8005c3e:	68e1      	ldr	r1, [r4, #12]
 8005c40:	4b06      	ldr	r3, [pc, #24]	@ (8005c5c <cleanup_stdio+0x3c>)
 8005c42:	4299      	cmp	r1, r3
 8005c44:	d004      	beq.n	8005c50 <cleanup_stdio+0x30>
 8005c46:	4620      	mov	r0, r4
 8005c48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c4c:	f000 be56 	b.w	80068fc <_fflush_r>
 8005c50:	bd10      	pop	{r4, pc}
 8005c52:	bf00      	nop
 8005c54:	200005b4 	.word	0x200005b4
 8005c58:	2000061c 	.word	0x2000061c
 8005c5c:	20000684 	.word	0x20000684

08005c60 <global_stdio_init.part.0>:
 8005c60:	b510      	push	{r4, lr}
 8005c62:	4b0b      	ldr	r3, [pc, #44]	@ (8005c90 <global_stdio_init.part.0+0x30>)
 8005c64:	4c0b      	ldr	r4, [pc, #44]	@ (8005c94 <global_stdio_init.part.0+0x34>)
 8005c66:	4a0c      	ldr	r2, [pc, #48]	@ (8005c98 <global_stdio_init.part.0+0x38>)
 8005c68:	601a      	str	r2, [r3, #0]
 8005c6a:	4620      	mov	r0, r4
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	2104      	movs	r1, #4
 8005c70:	f7ff ff94 	bl	8005b9c <std>
 8005c74:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005c78:	2201      	movs	r2, #1
 8005c7a:	2109      	movs	r1, #9
 8005c7c:	f7ff ff8e 	bl	8005b9c <std>
 8005c80:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005c84:	2202      	movs	r2, #2
 8005c86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c8a:	2112      	movs	r1, #18
 8005c8c:	f7ff bf86 	b.w	8005b9c <std>
 8005c90:	200006ec 	.word	0x200006ec
 8005c94:	200005b4 	.word	0x200005b4
 8005c98:	08005c09 	.word	0x08005c09

08005c9c <__sfp_lock_acquire>:
 8005c9c:	4801      	ldr	r0, [pc, #4]	@ (8005ca4 <__sfp_lock_acquire+0x8>)
 8005c9e:	f000 b9c2 	b.w	8006026 <__retarget_lock_acquire_recursive>
 8005ca2:	bf00      	nop
 8005ca4:	200006f5 	.word	0x200006f5

08005ca8 <__sfp_lock_release>:
 8005ca8:	4801      	ldr	r0, [pc, #4]	@ (8005cb0 <__sfp_lock_release+0x8>)
 8005caa:	f000 b9bd 	b.w	8006028 <__retarget_lock_release_recursive>
 8005cae:	bf00      	nop
 8005cb0:	200006f5 	.word	0x200006f5

08005cb4 <__sinit>:
 8005cb4:	b510      	push	{r4, lr}
 8005cb6:	4604      	mov	r4, r0
 8005cb8:	f7ff fff0 	bl	8005c9c <__sfp_lock_acquire>
 8005cbc:	6a23      	ldr	r3, [r4, #32]
 8005cbe:	b11b      	cbz	r3, 8005cc8 <__sinit+0x14>
 8005cc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005cc4:	f7ff bff0 	b.w	8005ca8 <__sfp_lock_release>
 8005cc8:	4b04      	ldr	r3, [pc, #16]	@ (8005cdc <__sinit+0x28>)
 8005cca:	6223      	str	r3, [r4, #32]
 8005ccc:	4b04      	ldr	r3, [pc, #16]	@ (8005ce0 <__sinit+0x2c>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d1f5      	bne.n	8005cc0 <__sinit+0xc>
 8005cd4:	f7ff ffc4 	bl	8005c60 <global_stdio_init.part.0>
 8005cd8:	e7f2      	b.n	8005cc0 <__sinit+0xc>
 8005cda:	bf00      	nop
 8005cdc:	08005c21 	.word	0x08005c21
 8005ce0:	200006ec 	.word	0x200006ec

08005ce4 <_fwalk_sglue>:
 8005ce4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ce8:	4607      	mov	r7, r0
 8005cea:	4688      	mov	r8, r1
 8005cec:	4614      	mov	r4, r2
 8005cee:	2600      	movs	r6, #0
 8005cf0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005cf4:	f1b9 0901 	subs.w	r9, r9, #1
 8005cf8:	d505      	bpl.n	8005d06 <_fwalk_sglue+0x22>
 8005cfa:	6824      	ldr	r4, [r4, #0]
 8005cfc:	2c00      	cmp	r4, #0
 8005cfe:	d1f7      	bne.n	8005cf0 <_fwalk_sglue+0xc>
 8005d00:	4630      	mov	r0, r6
 8005d02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d06:	89ab      	ldrh	r3, [r5, #12]
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d907      	bls.n	8005d1c <_fwalk_sglue+0x38>
 8005d0c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005d10:	3301      	adds	r3, #1
 8005d12:	d003      	beq.n	8005d1c <_fwalk_sglue+0x38>
 8005d14:	4629      	mov	r1, r5
 8005d16:	4638      	mov	r0, r7
 8005d18:	47c0      	blx	r8
 8005d1a:	4306      	orrs	r6, r0
 8005d1c:	3568      	adds	r5, #104	@ 0x68
 8005d1e:	e7e9      	b.n	8005cf4 <_fwalk_sglue+0x10>

08005d20 <iprintf>:
 8005d20:	b40f      	push	{r0, r1, r2, r3}
 8005d22:	b507      	push	{r0, r1, r2, lr}
 8005d24:	4906      	ldr	r1, [pc, #24]	@ (8005d40 <iprintf+0x20>)
 8005d26:	ab04      	add	r3, sp, #16
 8005d28:	6808      	ldr	r0, [r1, #0]
 8005d2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d2e:	6881      	ldr	r1, [r0, #8]
 8005d30:	9301      	str	r3, [sp, #4]
 8005d32:	f000 fabb 	bl	80062ac <_vfiprintf_r>
 8005d36:	b003      	add	sp, #12
 8005d38:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d3c:	b004      	add	sp, #16
 8005d3e:	4770      	bx	lr
 8005d40:	20000038 	.word	0x20000038

08005d44 <setvbuf>:
 8005d44:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005d48:	461d      	mov	r5, r3
 8005d4a:	4b57      	ldr	r3, [pc, #348]	@ (8005ea8 <setvbuf+0x164>)
 8005d4c:	681f      	ldr	r7, [r3, #0]
 8005d4e:	4604      	mov	r4, r0
 8005d50:	460e      	mov	r6, r1
 8005d52:	4690      	mov	r8, r2
 8005d54:	b127      	cbz	r7, 8005d60 <setvbuf+0x1c>
 8005d56:	6a3b      	ldr	r3, [r7, #32]
 8005d58:	b913      	cbnz	r3, 8005d60 <setvbuf+0x1c>
 8005d5a:	4638      	mov	r0, r7
 8005d5c:	f7ff ffaa 	bl	8005cb4 <__sinit>
 8005d60:	f1b8 0f02 	cmp.w	r8, #2
 8005d64:	d006      	beq.n	8005d74 <setvbuf+0x30>
 8005d66:	f1b8 0f01 	cmp.w	r8, #1
 8005d6a:	f200 809a 	bhi.w	8005ea2 <setvbuf+0x15e>
 8005d6e:	2d00      	cmp	r5, #0
 8005d70:	f2c0 8097 	blt.w	8005ea2 <setvbuf+0x15e>
 8005d74:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005d76:	07d9      	lsls	r1, r3, #31
 8005d78:	d405      	bmi.n	8005d86 <setvbuf+0x42>
 8005d7a:	89a3      	ldrh	r3, [r4, #12]
 8005d7c:	059a      	lsls	r2, r3, #22
 8005d7e:	d402      	bmi.n	8005d86 <setvbuf+0x42>
 8005d80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005d82:	f000 f950 	bl	8006026 <__retarget_lock_acquire_recursive>
 8005d86:	4621      	mov	r1, r4
 8005d88:	4638      	mov	r0, r7
 8005d8a:	f000 fdb7 	bl	80068fc <_fflush_r>
 8005d8e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005d90:	b141      	cbz	r1, 8005da4 <setvbuf+0x60>
 8005d92:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005d96:	4299      	cmp	r1, r3
 8005d98:	d002      	beq.n	8005da0 <setvbuf+0x5c>
 8005d9a:	4638      	mov	r0, r7
 8005d9c:	f000 f95c 	bl	8006058 <_free_r>
 8005da0:	2300      	movs	r3, #0
 8005da2:	6363      	str	r3, [r4, #52]	@ 0x34
 8005da4:	2300      	movs	r3, #0
 8005da6:	61a3      	str	r3, [r4, #24]
 8005da8:	6063      	str	r3, [r4, #4]
 8005daa:	89a3      	ldrh	r3, [r4, #12]
 8005dac:	061b      	lsls	r3, r3, #24
 8005dae:	d503      	bpl.n	8005db8 <setvbuf+0x74>
 8005db0:	6921      	ldr	r1, [r4, #16]
 8005db2:	4638      	mov	r0, r7
 8005db4:	f000 f950 	bl	8006058 <_free_r>
 8005db8:	89a3      	ldrh	r3, [r4, #12]
 8005dba:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8005dbe:	f023 0303 	bic.w	r3, r3, #3
 8005dc2:	f1b8 0f02 	cmp.w	r8, #2
 8005dc6:	81a3      	strh	r3, [r4, #12]
 8005dc8:	d061      	beq.n	8005e8e <setvbuf+0x14a>
 8005dca:	ab01      	add	r3, sp, #4
 8005dcc:	466a      	mov	r2, sp
 8005dce:	4621      	mov	r1, r4
 8005dd0:	4638      	mov	r0, r7
 8005dd2:	f000 fdbb 	bl	800694c <__swhatbuf_r>
 8005dd6:	89a3      	ldrh	r3, [r4, #12]
 8005dd8:	4318      	orrs	r0, r3
 8005dda:	81a0      	strh	r0, [r4, #12]
 8005ddc:	bb2d      	cbnz	r5, 8005e2a <setvbuf+0xe6>
 8005dde:	9d00      	ldr	r5, [sp, #0]
 8005de0:	4628      	mov	r0, r5
 8005de2:	f000 f983 	bl	80060ec <malloc>
 8005de6:	4606      	mov	r6, r0
 8005de8:	2800      	cmp	r0, #0
 8005dea:	d152      	bne.n	8005e92 <setvbuf+0x14e>
 8005dec:	f8dd 9000 	ldr.w	r9, [sp]
 8005df0:	45a9      	cmp	r9, r5
 8005df2:	d140      	bne.n	8005e76 <setvbuf+0x132>
 8005df4:	f04f 35ff 	mov.w	r5, #4294967295
 8005df8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005dfc:	f043 0202 	orr.w	r2, r3, #2
 8005e00:	81a2      	strh	r2, [r4, #12]
 8005e02:	2200      	movs	r2, #0
 8005e04:	60a2      	str	r2, [r4, #8]
 8005e06:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8005e0a:	6022      	str	r2, [r4, #0]
 8005e0c:	6122      	str	r2, [r4, #16]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	6162      	str	r2, [r4, #20]
 8005e12:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005e14:	07d6      	lsls	r6, r2, #31
 8005e16:	d404      	bmi.n	8005e22 <setvbuf+0xde>
 8005e18:	0598      	lsls	r0, r3, #22
 8005e1a:	d402      	bmi.n	8005e22 <setvbuf+0xde>
 8005e1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005e1e:	f000 f903 	bl	8006028 <__retarget_lock_release_recursive>
 8005e22:	4628      	mov	r0, r5
 8005e24:	b003      	add	sp, #12
 8005e26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005e2a:	2e00      	cmp	r6, #0
 8005e2c:	d0d8      	beq.n	8005de0 <setvbuf+0x9c>
 8005e2e:	6a3b      	ldr	r3, [r7, #32]
 8005e30:	b913      	cbnz	r3, 8005e38 <setvbuf+0xf4>
 8005e32:	4638      	mov	r0, r7
 8005e34:	f7ff ff3e 	bl	8005cb4 <__sinit>
 8005e38:	f1b8 0f01 	cmp.w	r8, #1
 8005e3c:	bf08      	it	eq
 8005e3e:	89a3      	ldrheq	r3, [r4, #12]
 8005e40:	6026      	str	r6, [r4, #0]
 8005e42:	bf04      	itt	eq
 8005e44:	f043 0301 	orreq.w	r3, r3, #1
 8005e48:	81a3      	strheq	r3, [r4, #12]
 8005e4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e4e:	f013 0208 	ands.w	r2, r3, #8
 8005e52:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8005e56:	d01e      	beq.n	8005e96 <setvbuf+0x152>
 8005e58:	07d9      	lsls	r1, r3, #31
 8005e5a:	bf41      	itttt	mi
 8005e5c:	2200      	movmi	r2, #0
 8005e5e:	426d      	negmi	r5, r5
 8005e60:	60a2      	strmi	r2, [r4, #8]
 8005e62:	61a5      	strmi	r5, [r4, #24]
 8005e64:	bf58      	it	pl
 8005e66:	60a5      	strpl	r5, [r4, #8]
 8005e68:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005e6a:	07d2      	lsls	r2, r2, #31
 8005e6c:	d401      	bmi.n	8005e72 <setvbuf+0x12e>
 8005e6e:	059b      	lsls	r3, r3, #22
 8005e70:	d513      	bpl.n	8005e9a <setvbuf+0x156>
 8005e72:	2500      	movs	r5, #0
 8005e74:	e7d5      	b.n	8005e22 <setvbuf+0xde>
 8005e76:	4648      	mov	r0, r9
 8005e78:	f000 f938 	bl	80060ec <malloc>
 8005e7c:	4606      	mov	r6, r0
 8005e7e:	2800      	cmp	r0, #0
 8005e80:	d0b8      	beq.n	8005df4 <setvbuf+0xb0>
 8005e82:	89a3      	ldrh	r3, [r4, #12]
 8005e84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e88:	81a3      	strh	r3, [r4, #12]
 8005e8a:	464d      	mov	r5, r9
 8005e8c:	e7cf      	b.n	8005e2e <setvbuf+0xea>
 8005e8e:	2500      	movs	r5, #0
 8005e90:	e7b2      	b.n	8005df8 <setvbuf+0xb4>
 8005e92:	46a9      	mov	r9, r5
 8005e94:	e7f5      	b.n	8005e82 <setvbuf+0x13e>
 8005e96:	60a2      	str	r2, [r4, #8]
 8005e98:	e7e6      	b.n	8005e68 <setvbuf+0x124>
 8005e9a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005e9c:	f000 f8c4 	bl	8006028 <__retarget_lock_release_recursive>
 8005ea0:	e7e7      	b.n	8005e72 <setvbuf+0x12e>
 8005ea2:	f04f 35ff 	mov.w	r5, #4294967295
 8005ea6:	e7bc      	b.n	8005e22 <setvbuf+0xde>
 8005ea8:	20000038 	.word	0x20000038

08005eac <__sread>:
 8005eac:	b510      	push	{r4, lr}
 8005eae:	460c      	mov	r4, r1
 8005eb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005eb4:	f000 f868 	bl	8005f88 <_read_r>
 8005eb8:	2800      	cmp	r0, #0
 8005eba:	bfab      	itete	ge
 8005ebc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005ebe:	89a3      	ldrhlt	r3, [r4, #12]
 8005ec0:	181b      	addge	r3, r3, r0
 8005ec2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005ec6:	bfac      	ite	ge
 8005ec8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005eca:	81a3      	strhlt	r3, [r4, #12]
 8005ecc:	bd10      	pop	{r4, pc}

08005ece <__swrite>:
 8005ece:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ed2:	461f      	mov	r7, r3
 8005ed4:	898b      	ldrh	r3, [r1, #12]
 8005ed6:	05db      	lsls	r3, r3, #23
 8005ed8:	4605      	mov	r5, r0
 8005eda:	460c      	mov	r4, r1
 8005edc:	4616      	mov	r6, r2
 8005ede:	d505      	bpl.n	8005eec <__swrite+0x1e>
 8005ee0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ee4:	2302      	movs	r3, #2
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	f000 f83c 	bl	8005f64 <_lseek_r>
 8005eec:	89a3      	ldrh	r3, [r4, #12]
 8005eee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ef2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005ef6:	81a3      	strh	r3, [r4, #12]
 8005ef8:	4632      	mov	r2, r6
 8005efa:	463b      	mov	r3, r7
 8005efc:	4628      	mov	r0, r5
 8005efe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f02:	f000 b853 	b.w	8005fac <_write_r>

08005f06 <__sseek>:
 8005f06:	b510      	push	{r4, lr}
 8005f08:	460c      	mov	r4, r1
 8005f0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f0e:	f000 f829 	bl	8005f64 <_lseek_r>
 8005f12:	1c43      	adds	r3, r0, #1
 8005f14:	89a3      	ldrh	r3, [r4, #12]
 8005f16:	bf15      	itete	ne
 8005f18:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005f1a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005f1e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005f22:	81a3      	strheq	r3, [r4, #12]
 8005f24:	bf18      	it	ne
 8005f26:	81a3      	strhne	r3, [r4, #12]
 8005f28:	bd10      	pop	{r4, pc}

08005f2a <__sclose>:
 8005f2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f2e:	f000 b809 	b.w	8005f44 <_close_r>

08005f32 <memset>:
 8005f32:	4402      	add	r2, r0
 8005f34:	4603      	mov	r3, r0
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d100      	bne.n	8005f3c <memset+0xa>
 8005f3a:	4770      	bx	lr
 8005f3c:	f803 1b01 	strb.w	r1, [r3], #1
 8005f40:	e7f9      	b.n	8005f36 <memset+0x4>
	...

08005f44 <_close_r>:
 8005f44:	b538      	push	{r3, r4, r5, lr}
 8005f46:	4d06      	ldr	r5, [pc, #24]	@ (8005f60 <_close_r+0x1c>)
 8005f48:	2300      	movs	r3, #0
 8005f4a:	4604      	mov	r4, r0
 8005f4c:	4608      	mov	r0, r1
 8005f4e:	602b      	str	r3, [r5, #0]
 8005f50:	f7fb f879 	bl	8001046 <_close>
 8005f54:	1c43      	adds	r3, r0, #1
 8005f56:	d102      	bne.n	8005f5e <_close_r+0x1a>
 8005f58:	682b      	ldr	r3, [r5, #0]
 8005f5a:	b103      	cbz	r3, 8005f5e <_close_r+0x1a>
 8005f5c:	6023      	str	r3, [r4, #0]
 8005f5e:	bd38      	pop	{r3, r4, r5, pc}
 8005f60:	200006f0 	.word	0x200006f0

08005f64 <_lseek_r>:
 8005f64:	b538      	push	{r3, r4, r5, lr}
 8005f66:	4d07      	ldr	r5, [pc, #28]	@ (8005f84 <_lseek_r+0x20>)
 8005f68:	4604      	mov	r4, r0
 8005f6a:	4608      	mov	r0, r1
 8005f6c:	4611      	mov	r1, r2
 8005f6e:	2200      	movs	r2, #0
 8005f70:	602a      	str	r2, [r5, #0]
 8005f72:	461a      	mov	r2, r3
 8005f74:	f7fb f88e 	bl	8001094 <_lseek>
 8005f78:	1c43      	adds	r3, r0, #1
 8005f7a:	d102      	bne.n	8005f82 <_lseek_r+0x1e>
 8005f7c:	682b      	ldr	r3, [r5, #0]
 8005f7e:	b103      	cbz	r3, 8005f82 <_lseek_r+0x1e>
 8005f80:	6023      	str	r3, [r4, #0]
 8005f82:	bd38      	pop	{r3, r4, r5, pc}
 8005f84:	200006f0 	.word	0x200006f0

08005f88 <_read_r>:
 8005f88:	b538      	push	{r3, r4, r5, lr}
 8005f8a:	4d07      	ldr	r5, [pc, #28]	@ (8005fa8 <_read_r+0x20>)
 8005f8c:	4604      	mov	r4, r0
 8005f8e:	4608      	mov	r0, r1
 8005f90:	4611      	mov	r1, r2
 8005f92:	2200      	movs	r2, #0
 8005f94:	602a      	str	r2, [r5, #0]
 8005f96:	461a      	mov	r2, r3
 8005f98:	f7fb f81c 	bl	8000fd4 <_read>
 8005f9c:	1c43      	adds	r3, r0, #1
 8005f9e:	d102      	bne.n	8005fa6 <_read_r+0x1e>
 8005fa0:	682b      	ldr	r3, [r5, #0]
 8005fa2:	b103      	cbz	r3, 8005fa6 <_read_r+0x1e>
 8005fa4:	6023      	str	r3, [r4, #0]
 8005fa6:	bd38      	pop	{r3, r4, r5, pc}
 8005fa8:	200006f0 	.word	0x200006f0

08005fac <_write_r>:
 8005fac:	b538      	push	{r3, r4, r5, lr}
 8005fae:	4d07      	ldr	r5, [pc, #28]	@ (8005fcc <_write_r+0x20>)
 8005fb0:	4604      	mov	r4, r0
 8005fb2:	4608      	mov	r0, r1
 8005fb4:	4611      	mov	r1, r2
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	602a      	str	r2, [r5, #0]
 8005fba:	461a      	mov	r2, r3
 8005fbc:	f7fb f827 	bl	800100e <_write>
 8005fc0:	1c43      	adds	r3, r0, #1
 8005fc2:	d102      	bne.n	8005fca <_write_r+0x1e>
 8005fc4:	682b      	ldr	r3, [r5, #0]
 8005fc6:	b103      	cbz	r3, 8005fca <_write_r+0x1e>
 8005fc8:	6023      	str	r3, [r4, #0]
 8005fca:	bd38      	pop	{r3, r4, r5, pc}
 8005fcc:	200006f0 	.word	0x200006f0

08005fd0 <__errno>:
 8005fd0:	4b01      	ldr	r3, [pc, #4]	@ (8005fd8 <__errno+0x8>)
 8005fd2:	6818      	ldr	r0, [r3, #0]
 8005fd4:	4770      	bx	lr
 8005fd6:	bf00      	nop
 8005fd8:	20000038 	.word	0x20000038

08005fdc <__libc_init_array>:
 8005fdc:	b570      	push	{r4, r5, r6, lr}
 8005fde:	4d0d      	ldr	r5, [pc, #52]	@ (8006014 <__libc_init_array+0x38>)
 8005fe0:	4c0d      	ldr	r4, [pc, #52]	@ (8006018 <__libc_init_array+0x3c>)
 8005fe2:	1b64      	subs	r4, r4, r5
 8005fe4:	10a4      	asrs	r4, r4, #2
 8005fe6:	2600      	movs	r6, #0
 8005fe8:	42a6      	cmp	r6, r4
 8005fea:	d109      	bne.n	8006000 <__libc_init_array+0x24>
 8005fec:	4d0b      	ldr	r5, [pc, #44]	@ (800601c <__libc_init_array+0x40>)
 8005fee:	4c0c      	ldr	r4, [pc, #48]	@ (8006020 <__libc_init_array+0x44>)
 8005ff0:	f000 fdd4 	bl	8006b9c <_init>
 8005ff4:	1b64      	subs	r4, r4, r5
 8005ff6:	10a4      	asrs	r4, r4, #2
 8005ff8:	2600      	movs	r6, #0
 8005ffa:	42a6      	cmp	r6, r4
 8005ffc:	d105      	bne.n	800600a <__libc_init_array+0x2e>
 8005ffe:	bd70      	pop	{r4, r5, r6, pc}
 8006000:	f855 3b04 	ldr.w	r3, [r5], #4
 8006004:	4798      	blx	r3
 8006006:	3601      	adds	r6, #1
 8006008:	e7ee      	b.n	8005fe8 <__libc_init_array+0xc>
 800600a:	f855 3b04 	ldr.w	r3, [r5], #4
 800600e:	4798      	blx	r3
 8006010:	3601      	adds	r6, #1
 8006012:	e7f2      	b.n	8005ffa <__libc_init_array+0x1e>
 8006014:	08006c6c 	.word	0x08006c6c
 8006018:	08006c6c 	.word	0x08006c6c
 800601c:	08006c6c 	.word	0x08006c6c
 8006020:	08006c70 	.word	0x08006c70

08006024 <__retarget_lock_init_recursive>:
 8006024:	4770      	bx	lr

08006026 <__retarget_lock_acquire_recursive>:
 8006026:	4770      	bx	lr

08006028 <__retarget_lock_release_recursive>:
 8006028:	4770      	bx	lr

0800602a <strcpy>:
 800602a:	4603      	mov	r3, r0
 800602c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006030:	f803 2b01 	strb.w	r2, [r3], #1
 8006034:	2a00      	cmp	r2, #0
 8006036:	d1f9      	bne.n	800602c <strcpy+0x2>
 8006038:	4770      	bx	lr

0800603a <memcpy>:
 800603a:	440a      	add	r2, r1
 800603c:	4291      	cmp	r1, r2
 800603e:	f100 33ff 	add.w	r3, r0, #4294967295
 8006042:	d100      	bne.n	8006046 <memcpy+0xc>
 8006044:	4770      	bx	lr
 8006046:	b510      	push	{r4, lr}
 8006048:	f811 4b01 	ldrb.w	r4, [r1], #1
 800604c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006050:	4291      	cmp	r1, r2
 8006052:	d1f9      	bne.n	8006048 <memcpy+0xe>
 8006054:	bd10      	pop	{r4, pc}
	...

08006058 <_free_r>:
 8006058:	b538      	push	{r3, r4, r5, lr}
 800605a:	4605      	mov	r5, r0
 800605c:	2900      	cmp	r1, #0
 800605e:	d041      	beq.n	80060e4 <_free_r+0x8c>
 8006060:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006064:	1f0c      	subs	r4, r1, #4
 8006066:	2b00      	cmp	r3, #0
 8006068:	bfb8      	it	lt
 800606a:	18e4      	addlt	r4, r4, r3
 800606c:	f000 f8e8 	bl	8006240 <__malloc_lock>
 8006070:	4a1d      	ldr	r2, [pc, #116]	@ (80060e8 <_free_r+0x90>)
 8006072:	6813      	ldr	r3, [r2, #0]
 8006074:	b933      	cbnz	r3, 8006084 <_free_r+0x2c>
 8006076:	6063      	str	r3, [r4, #4]
 8006078:	6014      	str	r4, [r2, #0]
 800607a:	4628      	mov	r0, r5
 800607c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006080:	f000 b8e4 	b.w	800624c <__malloc_unlock>
 8006084:	42a3      	cmp	r3, r4
 8006086:	d908      	bls.n	800609a <_free_r+0x42>
 8006088:	6820      	ldr	r0, [r4, #0]
 800608a:	1821      	adds	r1, r4, r0
 800608c:	428b      	cmp	r3, r1
 800608e:	bf01      	itttt	eq
 8006090:	6819      	ldreq	r1, [r3, #0]
 8006092:	685b      	ldreq	r3, [r3, #4]
 8006094:	1809      	addeq	r1, r1, r0
 8006096:	6021      	streq	r1, [r4, #0]
 8006098:	e7ed      	b.n	8006076 <_free_r+0x1e>
 800609a:	461a      	mov	r2, r3
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	b10b      	cbz	r3, 80060a4 <_free_r+0x4c>
 80060a0:	42a3      	cmp	r3, r4
 80060a2:	d9fa      	bls.n	800609a <_free_r+0x42>
 80060a4:	6811      	ldr	r1, [r2, #0]
 80060a6:	1850      	adds	r0, r2, r1
 80060a8:	42a0      	cmp	r0, r4
 80060aa:	d10b      	bne.n	80060c4 <_free_r+0x6c>
 80060ac:	6820      	ldr	r0, [r4, #0]
 80060ae:	4401      	add	r1, r0
 80060b0:	1850      	adds	r0, r2, r1
 80060b2:	4283      	cmp	r3, r0
 80060b4:	6011      	str	r1, [r2, #0]
 80060b6:	d1e0      	bne.n	800607a <_free_r+0x22>
 80060b8:	6818      	ldr	r0, [r3, #0]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	6053      	str	r3, [r2, #4]
 80060be:	4408      	add	r0, r1
 80060c0:	6010      	str	r0, [r2, #0]
 80060c2:	e7da      	b.n	800607a <_free_r+0x22>
 80060c4:	d902      	bls.n	80060cc <_free_r+0x74>
 80060c6:	230c      	movs	r3, #12
 80060c8:	602b      	str	r3, [r5, #0]
 80060ca:	e7d6      	b.n	800607a <_free_r+0x22>
 80060cc:	6820      	ldr	r0, [r4, #0]
 80060ce:	1821      	adds	r1, r4, r0
 80060d0:	428b      	cmp	r3, r1
 80060d2:	bf04      	itt	eq
 80060d4:	6819      	ldreq	r1, [r3, #0]
 80060d6:	685b      	ldreq	r3, [r3, #4]
 80060d8:	6063      	str	r3, [r4, #4]
 80060da:	bf04      	itt	eq
 80060dc:	1809      	addeq	r1, r1, r0
 80060de:	6021      	streq	r1, [r4, #0]
 80060e0:	6054      	str	r4, [r2, #4]
 80060e2:	e7ca      	b.n	800607a <_free_r+0x22>
 80060e4:	bd38      	pop	{r3, r4, r5, pc}
 80060e6:	bf00      	nop
 80060e8:	200006fc 	.word	0x200006fc

080060ec <malloc>:
 80060ec:	4b02      	ldr	r3, [pc, #8]	@ (80060f8 <malloc+0xc>)
 80060ee:	4601      	mov	r1, r0
 80060f0:	6818      	ldr	r0, [r3, #0]
 80060f2:	f000 b825 	b.w	8006140 <_malloc_r>
 80060f6:	bf00      	nop
 80060f8:	20000038 	.word	0x20000038

080060fc <sbrk_aligned>:
 80060fc:	b570      	push	{r4, r5, r6, lr}
 80060fe:	4e0f      	ldr	r6, [pc, #60]	@ (800613c <sbrk_aligned+0x40>)
 8006100:	460c      	mov	r4, r1
 8006102:	6831      	ldr	r1, [r6, #0]
 8006104:	4605      	mov	r5, r0
 8006106:	b911      	cbnz	r1, 800610e <sbrk_aligned+0x12>
 8006108:	f000 fd38 	bl	8006b7c <_sbrk_r>
 800610c:	6030      	str	r0, [r6, #0]
 800610e:	4621      	mov	r1, r4
 8006110:	4628      	mov	r0, r5
 8006112:	f000 fd33 	bl	8006b7c <_sbrk_r>
 8006116:	1c43      	adds	r3, r0, #1
 8006118:	d103      	bne.n	8006122 <sbrk_aligned+0x26>
 800611a:	f04f 34ff 	mov.w	r4, #4294967295
 800611e:	4620      	mov	r0, r4
 8006120:	bd70      	pop	{r4, r5, r6, pc}
 8006122:	1cc4      	adds	r4, r0, #3
 8006124:	f024 0403 	bic.w	r4, r4, #3
 8006128:	42a0      	cmp	r0, r4
 800612a:	d0f8      	beq.n	800611e <sbrk_aligned+0x22>
 800612c:	1a21      	subs	r1, r4, r0
 800612e:	4628      	mov	r0, r5
 8006130:	f000 fd24 	bl	8006b7c <_sbrk_r>
 8006134:	3001      	adds	r0, #1
 8006136:	d1f2      	bne.n	800611e <sbrk_aligned+0x22>
 8006138:	e7ef      	b.n	800611a <sbrk_aligned+0x1e>
 800613a:	bf00      	nop
 800613c:	200006f8 	.word	0x200006f8

08006140 <_malloc_r>:
 8006140:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006144:	1ccd      	adds	r5, r1, #3
 8006146:	f025 0503 	bic.w	r5, r5, #3
 800614a:	3508      	adds	r5, #8
 800614c:	2d0c      	cmp	r5, #12
 800614e:	bf38      	it	cc
 8006150:	250c      	movcc	r5, #12
 8006152:	2d00      	cmp	r5, #0
 8006154:	4606      	mov	r6, r0
 8006156:	db01      	blt.n	800615c <_malloc_r+0x1c>
 8006158:	42a9      	cmp	r1, r5
 800615a:	d904      	bls.n	8006166 <_malloc_r+0x26>
 800615c:	230c      	movs	r3, #12
 800615e:	6033      	str	r3, [r6, #0]
 8006160:	2000      	movs	r0, #0
 8006162:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006166:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800623c <_malloc_r+0xfc>
 800616a:	f000 f869 	bl	8006240 <__malloc_lock>
 800616e:	f8d8 3000 	ldr.w	r3, [r8]
 8006172:	461c      	mov	r4, r3
 8006174:	bb44      	cbnz	r4, 80061c8 <_malloc_r+0x88>
 8006176:	4629      	mov	r1, r5
 8006178:	4630      	mov	r0, r6
 800617a:	f7ff ffbf 	bl	80060fc <sbrk_aligned>
 800617e:	1c43      	adds	r3, r0, #1
 8006180:	4604      	mov	r4, r0
 8006182:	d158      	bne.n	8006236 <_malloc_r+0xf6>
 8006184:	f8d8 4000 	ldr.w	r4, [r8]
 8006188:	4627      	mov	r7, r4
 800618a:	2f00      	cmp	r7, #0
 800618c:	d143      	bne.n	8006216 <_malloc_r+0xd6>
 800618e:	2c00      	cmp	r4, #0
 8006190:	d04b      	beq.n	800622a <_malloc_r+0xea>
 8006192:	6823      	ldr	r3, [r4, #0]
 8006194:	4639      	mov	r1, r7
 8006196:	4630      	mov	r0, r6
 8006198:	eb04 0903 	add.w	r9, r4, r3
 800619c:	f000 fcee 	bl	8006b7c <_sbrk_r>
 80061a0:	4581      	cmp	r9, r0
 80061a2:	d142      	bne.n	800622a <_malloc_r+0xea>
 80061a4:	6821      	ldr	r1, [r4, #0]
 80061a6:	1a6d      	subs	r5, r5, r1
 80061a8:	4629      	mov	r1, r5
 80061aa:	4630      	mov	r0, r6
 80061ac:	f7ff ffa6 	bl	80060fc <sbrk_aligned>
 80061b0:	3001      	adds	r0, #1
 80061b2:	d03a      	beq.n	800622a <_malloc_r+0xea>
 80061b4:	6823      	ldr	r3, [r4, #0]
 80061b6:	442b      	add	r3, r5
 80061b8:	6023      	str	r3, [r4, #0]
 80061ba:	f8d8 3000 	ldr.w	r3, [r8]
 80061be:	685a      	ldr	r2, [r3, #4]
 80061c0:	bb62      	cbnz	r2, 800621c <_malloc_r+0xdc>
 80061c2:	f8c8 7000 	str.w	r7, [r8]
 80061c6:	e00f      	b.n	80061e8 <_malloc_r+0xa8>
 80061c8:	6822      	ldr	r2, [r4, #0]
 80061ca:	1b52      	subs	r2, r2, r5
 80061cc:	d420      	bmi.n	8006210 <_malloc_r+0xd0>
 80061ce:	2a0b      	cmp	r2, #11
 80061d0:	d917      	bls.n	8006202 <_malloc_r+0xc2>
 80061d2:	1961      	adds	r1, r4, r5
 80061d4:	42a3      	cmp	r3, r4
 80061d6:	6025      	str	r5, [r4, #0]
 80061d8:	bf18      	it	ne
 80061da:	6059      	strne	r1, [r3, #4]
 80061dc:	6863      	ldr	r3, [r4, #4]
 80061de:	bf08      	it	eq
 80061e0:	f8c8 1000 	streq.w	r1, [r8]
 80061e4:	5162      	str	r2, [r4, r5]
 80061e6:	604b      	str	r3, [r1, #4]
 80061e8:	4630      	mov	r0, r6
 80061ea:	f000 f82f 	bl	800624c <__malloc_unlock>
 80061ee:	f104 000b 	add.w	r0, r4, #11
 80061f2:	1d23      	adds	r3, r4, #4
 80061f4:	f020 0007 	bic.w	r0, r0, #7
 80061f8:	1ac2      	subs	r2, r0, r3
 80061fa:	bf1c      	itt	ne
 80061fc:	1a1b      	subne	r3, r3, r0
 80061fe:	50a3      	strne	r3, [r4, r2]
 8006200:	e7af      	b.n	8006162 <_malloc_r+0x22>
 8006202:	6862      	ldr	r2, [r4, #4]
 8006204:	42a3      	cmp	r3, r4
 8006206:	bf0c      	ite	eq
 8006208:	f8c8 2000 	streq.w	r2, [r8]
 800620c:	605a      	strne	r2, [r3, #4]
 800620e:	e7eb      	b.n	80061e8 <_malloc_r+0xa8>
 8006210:	4623      	mov	r3, r4
 8006212:	6864      	ldr	r4, [r4, #4]
 8006214:	e7ae      	b.n	8006174 <_malloc_r+0x34>
 8006216:	463c      	mov	r4, r7
 8006218:	687f      	ldr	r7, [r7, #4]
 800621a:	e7b6      	b.n	800618a <_malloc_r+0x4a>
 800621c:	461a      	mov	r2, r3
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	42a3      	cmp	r3, r4
 8006222:	d1fb      	bne.n	800621c <_malloc_r+0xdc>
 8006224:	2300      	movs	r3, #0
 8006226:	6053      	str	r3, [r2, #4]
 8006228:	e7de      	b.n	80061e8 <_malloc_r+0xa8>
 800622a:	230c      	movs	r3, #12
 800622c:	6033      	str	r3, [r6, #0]
 800622e:	4630      	mov	r0, r6
 8006230:	f000 f80c 	bl	800624c <__malloc_unlock>
 8006234:	e794      	b.n	8006160 <_malloc_r+0x20>
 8006236:	6005      	str	r5, [r0, #0]
 8006238:	e7d6      	b.n	80061e8 <_malloc_r+0xa8>
 800623a:	bf00      	nop
 800623c:	200006fc 	.word	0x200006fc

08006240 <__malloc_lock>:
 8006240:	4801      	ldr	r0, [pc, #4]	@ (8006248 <__malloc_lock+0x8>)
 8006242:	f7ff bef0 	b.w	8006026 <__retarget_lock_acquire_recursive>
 8006246:	bf00      	nop
 8006248:	200006f4 	.word	0x200006f4

0800624c <__malloc_unlock>:
 800624c:	4801      	ldr	r0, [pc, #4]	@ (8006254 <__malloc_unlock+0x8>)
 800624e:	f7ff beeb 	b.w	8006028 <__retarget_lock_release_recursive>
 8006252:	bf00      	nop
 8006254:	200006f4 	.word	0x200006f4

08006258 <__sfputc_r>:
 8006258:	6893      	ldr	r3, [r2, #8]
 800625a:	3b01      	subs	r3, #1
 800625c:	2b00      	cmp	r3, #0
 800625e:	b410      	push	{r4}
 8006260:	6093      	str	r3, [r2, #8]
 8006262:	da08      	bge.n	8006276 <__sfputc_r+0x1e>
 8006264:	6994      	ldr	r4, [r2, #24]
 8006266:	42a3      	cmp	r3, r4
 8006268:	db01      	blt.n	800626e <__sfputc_r+0x16>
 800626a:	290a      	cmp	r1, #10
 800626c:	d103      	bne.n	8006276 <__sfputc_r+0x1e>
 800626e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006272:	f000 bbcd 	b.w	8006a10 <__swbuf_r>
 8006276:	6813      	ldr	r3, [r2, #0]
 8006278:	1c58      	adds	r0, r3, #1
 800627a:	6010      	str	r0, [r2, #0]
 800627c:	7019      	strb	r1, [r3, #0]
 800627e:	4608      	mov	r0, r1
 8006280:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006284:	4770      	bx	lr

08006286 <__sfputs_r>:
 8006286:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006288:	4606      	mov	r6, r0
 800628a:	460f      	mov	r7, r1
 800628c:	4614      	mov	r4, r2
 800628e:	18d5      	adds	r5, r2, r3
 8006290:	42ac      	cmp	r4, r5
 8006292:	d101      	bne.n	8006298 <__sfputs_r+0x12>
 8006294:	2000      	movs	r0, #0
 8006296:	e007      	b.n	80062a8 <__sfputs_r+0x22>
 8006298:	f814 1b01 	ldrb.w	r1, [r4], #1
 800629c:	463a      	mov	r2, r7
 800629e:	4630      	mov	r0, r6
 80062a0:	f7ff ffda 	bl	8006258 <__sfputc_r>
 80062a4:	1c43      	adds	r3, r0, #1
 80062a6:	d1f3      	bne.n	8006290 <__sfputs_r+0xa>
 80062a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080062ac <_vfiprintf_r>:
 80062ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062b0:	460d      	mov	r5, r1
 80062b2:	b09d      	sub	sp, #116	@ 0x74
 80062b4:	4614      	mov	r4, r2
 80062b6:	4698      	mov	r8, r3
 80062b8:	4606      	mov	r6, r0
 80062ba:	b118      	cbz	r0, 80062c4 <_vfiprintf_r+0x18>
 80062bc:	6a03      	ldr	r3, [r0, #32]
 80062be:	b90b      	cbnz	r3, 80062c4 <_vfiprintf_r+0x18>
 80062c0:	f7ff fcf8 	bl	8005cb4 <__sinit>
 80062c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80062c6:	07d9      	lsls	r1, r3, #31
 80062c8:	d405      	bmi.n	80062d6 <_vfiprintf_r+0x2a>
 80062ca:	89ab      	ldrh	r3, [r5, #12]
 80062cc:	059a      	lsls	r2, r3, #22
 80062ce:	d402      	bmi.n	80062d6 <_vfiprintf_r+0x2a>
 80062d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80062d2:	f7ff fea8 	bl	8006026 <__retarget_lock_acquire_recursive>
 80062d6:	89ab      	ldrh	r3, [r5, #12]
 80062d8:	071b      	lsls	r3, r3, #28
 80062da:	d501      	bpl.n	80062e0 <_vfiprintf_r+0x34>
 80062dc:	692b      	ldr	r3, [r5, #16]
 80062de:	b99b      	cbnz	r3, 8006308 <_vfiprintf_r+0x5c>
 80062e0:	4629      	mov	r1, r5
 80062e2:	4630      	mov	r0, r6
 80062e4:	f000 fbd2 	bl	8006a8c <__swsetup_r>
 80062e8:	b170      	cbz	r0, 8006308 <_vfiprintf_r+0x5c>
 80062ea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80062ec:	07dc      	lsls	r4, r3, #31
 80062ee:	d504      	bpl.n	80062fa <_vfiprintf_r+0x4e>
 80062f0:	f04f 30ff 	mov.w	r0, #4294967295
 80062f4:	b01d      	add	sp, #116	@ 0x74
 80062f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062fa:	89ab      	ldrh	r3, [r5, #12]
 80062fc:	0598      	lsls	r0, r3, #22
 80062fe:	d4f7      	bmi.n	80062f0 <_vfiprintf_r+0x44>
 8006300:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006302:	f7ff fe91 	bl	8006028 <__retarget_lock_release_recursive>
 8006306:	e7f3      	b.n	80062f0 <_vfiprintf_r+0x44>
 8006308:	2300      	movs	r3, #0
 800630a:	9309      	str	r3, [sp, #36]	@ 0x24
 800630c:	2320      	movs	r3, #32
 800630e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006312:	f8cd 800c 	str.w	r8, [sp, #12]
 8006316:	2330      	movs	r3, #48	@ 0x30
 8006318:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80064c8 <_vfiprintf_r+0x21c>
 800631c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006320:	f04f 0901 	mov.w	r9, #1
 8006324:	4623      	mov	r3, r4
 8006326:	469a      	mov	sl, r3
 8006328:	f813 2b01 	ldrb.w	r2, [r3], #1
 800632c:	b10a      	cbz	r2, 8006332 <_vfiprintf_r+0x86>
 800632e:	2a25      	cmp	r2, #37	@ 0x25
 8006330:	d1f9      	bne.n	8006326 <_vfiprintf_r+0x7a>
 8006332:	ebba 0b04 	subs.w	fp, sl, r4
 8006336:	d00b      	beq.n	8006350 <_vfiprintf_r+0xa4>
 8006338:	465b      	mov	r3, fp
 800633a:	4622      	mov	r2, r4
 800633c:	4629      	mov	r1, r5
 800633e:	4630      	mov	r0, r6
 8006340:	f7ff ffa1 	bl	8006286 <__sfputs_r>
 8006344:	3001      	adds	r0, #1
 8006346:	f000 80a7 	beq.w	8006498 <_vfiprintf_r+0x1ec>
 800634a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800634c:	445a      	add	r2, fp
 800634e:	9209      	str	r2, [sp, #36]	@ 0x24
 8006350:	f89a 3000 	ldrb.w	r3, [sl]
 8006354:	2b00      	cmp	r3, #0
 8006356:	f000 809f 	beq.w	8006498 <_vfiprintf_r+0x1ec>
 800635a:	2300      	movs	r3, #0
 800635c:	f04f 32ff 	mov.w	r2, #4294967295
 8006360:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006364:	f10a 0a01 	add.w	sl, sl, #1
 8006368:	9304      	str	r3, [sp, #16]
 800636a:	9307      	str	r3, [sp, #28]
 800636c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006370:	931a      	str	r3, [sp, #104]	@ 0x68
 8006372:	4654      	mov	r4, sl
 8006374:	2205      	movs	r2, #5
 8006376:	f814 1b01 	ldrb.w	r1, [r4], #1
 800637a:	4853      	ldr	r0, [pc, #332]	@ (80064c8 <_vfiprintf_r+0x21c>)
 800637c:	f7f9 ff28 	bl	80001d0 <memchr>
 8006380:	9a04      	ldr	r2, [sp, #16]
 8006382:	b9d8      	cbnz	r0, 80063bc <_vfiprintf_r+0x110>
 8006384:	06d1      	lsls	r1, r2, #27
 8006386:	bf44      	itt	mi
 8006388:	2320      	movmi	r3, #32
 800638a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800638e:	0713      	lsls	r3, r2, #28
 8006390:	bf44      	itt	mi
 8006392:	232b      	movmi	r3, #43	@ 0x2b
 8006394:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006398:	f89a 3000 	ldrb.w	r3, [sl]
 800639c:	2b2a      	cmp	r3, #42	@ 0x2a
 800639e:	d015      	beq.n	80063cc <_vfiprintf_r+0x120>
 80063a0:	9a07      	ldr	r2, [sp, #28]
 80063a2:	4654      	mov	r4, sl
 80063a4:	2000      	movs	r0, #0
 80063a6:	f04f 0c0a 	mov.w	ip, #10
 80063aa:	4621      	mov	r1, r4
 80063ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80063b0:	3b30      	subs	r3, #48	@ 0x30
 80063b2:	2b09      	cmp	r3, #9
 80063b4:	d94b      	bls.n	800644e <_vfiprintf_r+0x1a2>
 80063b6:	b1b0      	cbz	r0, 80063e6 <_vfiprintf_r+0x13a>
 80063b8:	9207      	str	r2, [sp, #28]
 80063ba:	e014      	b.n	80063e6 <_vfiprintf_r+0x13a>
 80063bc:	eba0 0308 	sub.w	r3, r0, r8
 80063c0:	fa09 f303 	lsl.w	r3, r9, r3
 80063c4:	4313      	orrs	r3, r2
 80063c6:	9304      	str	r3, [sp, #16]
 80063c8:	46a2      	mov	sl, r4
 80063ca:	e7d2      	b.n	8006372 <_vfiprintf_r+0xc6>
 80063cc:	9b03      	ldr	r3, [sp, #12]
 80063ce:	1d19      	adds	r1, r3, #4
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	9103      	str	r1, [sp, #12]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	bfbb      	ittet	lt
 80063d8:	425b      	neglt	r3, r3
 80063da:	f042 0202 	orrlt.w	r2, r2, #2
 80063de:	9307      	strge	r3, [sp, #28]
 80063e0:	9307      	strlt	r3, [sp, #28]
 80063e2:	bfb8      	it	lt
 80063e4:	9204      	strlt	r2, [sp, #16]
 80063e6:	7823      	ldrb	r3, [r4, #0]
 80063e8:	2b2e      	cmp	r3, #46	@ 0x2e
 80063ea:	d10a      	bne.n	8006402 <_vfiprintf_r+0x156>
 80063ec:	7863      	ldrb	r3, [r4, #1]
 80063ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80063f0:	d132      	bne.n	8006458 <_vfiprintf_r+0x1ac>
 80063f2:	9b03      	ldr	r3, [sp, #12]
 80063f4:	1d1a      	adds	r2, r3, #4
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	9203      	str	r2, [sp, #12]
 80063fa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80063fe:	3402      	adds	r4, #2
 8006400:	9305      	str	r3, [sp, #20]
 8006402:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80064d8 <_vfiprintf_r+0x22c>
 8006406:	7821      	ldrb	r1, [r4, #0]
 8006408:	2203      	movs	r2, #3
 800640a:	4650      	mov	r0, sl
 800640c:	f7f9 fee0 	bl	80001d0 <memchr>
 8006410:	b138      	cbz	r0, 8006422 <_vfiprintf_r+0x176>
 8006412:	9b04      	ldr	r3, [sp, #16]
 8006414:	eba0 000a 	sub.w	r0, r0, sl
 8006418:	2240      	movs	r2, #64	@ 0x40
 800641a:	4082      	lsls	r2, r0
 800641c:	4313      	orrs	r3, r2
 800641e:	3401      	adds	r4, #1
 8006420:	9304      	str	r3, [sp, #16]
 8006422:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006426:	4829      	ldr	r0, [pc, #164]	@ (80064cc <_vfiprintf_r+0x220>)
 8006428:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800642c:	2206      	movs	r2, #6
 800642e:	f7f9 fecf 	bl	80001d0 <memchr>
 8006432:	2800      	cmp	r0, #0
 8006434:	d03f      	beq.n	80064b6 <_vfiprintf_r+0x20a>
 8006436:	4b26      	ldr	r3, [pc, #152]	@ (80064d0 <_vfiprintf_r+0x224>)
 8006438:	bb1b      	cbnz	r3, 8006482 <_vfiprintf_r+0x1d6>
 800643a:	9b03      	ldr	r3, [sp, #12]
 800643c:	3307      	adds	r3, #7
 800643e:	f023 0307 	bic.w	r3, r3, #7
 8006442:	3308      	adds	r3, #8
 8006444:	9303      	str	r3, [sp, #12]
 8006446:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006448:	443b      	add	r3, r7
 800644a:	9309      	str	r3, [sp, #36]	@ 0x24
 800644c:	e76a      	b.n	8006324 <_vfiprintf_r+0x78>
 800644e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006452:	460c      	mov	r4, r1
 8006454:	2001      	movs	r0, #1
 8006456:	e7a8      	b.n	80063aa <_vfiprintf_r+0xfe>
 8006458:	2300      	movs	r3, #0
 800645a:	3401      	adds	r4, #1
 800645c:	9305      	str	r3, [sp, #20]
 800645e:	4619      	mov	r1, r3
 8006460:	f04f 0c0a 	mov.w	ip, #10
 8006464:	4620      	mov	r0, r4
 8006466:	f810 2b01 	ldrb.w	r2, [r0], #1
 800646a:	3a30      	subs	r2, #48	@ 0x30
 800646c:	2a09      	cmp	r2, #9
 800646e:	d903      	bls.n	8006478 <_vfiprintf_r+0x1cc>
 8006470:	2b00      	cmp	r3, #0
 8006472:	d0c6      	beq.n	8006402 <_vfiprintf_r+0x156>
 8006474:	9105      	str	r1, [sp, #20]
 8006476:	e7c4      	b.n	8006402 <_vfiprintf_r+0x156>
 8006478:	fb0c 2101 	mla	r1, ip, r1, r2
 800647c:	4604      	mov	r4, r0
 800647e:	2301      	movs	r3, #1
 8006480:	e7f0      	b.n	8006464 <_vfiprintf_r+0x1b8>
 8006482:	ab03      	add	r3, sp, #12
 8006484:	9300      	str	r3, [sp, #0]
 8006486:	462a      	mov	r2, r5
 8006488:	4b12      	ldr	r3, [pc, #72]	@ (80064d4 <_vfiprintf_r+0x228>)
 800648a:	a904      	add	r1, sp, #16
 800648c:	4630      	mov	r0, r6
 800648e:	f3af 8000 	nop.w
 8006492:	4607      	mov	r7, r0
 8006494:	1c78      	adds	r0, r7, #1
 8006496:	d1d6      	bne.n	8006446 <_vfiprintf_r+0x19a>
 8006498:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800649a:	07d9      	lsls	r1, r3, #31
 800649c:	d405      	bmi.n	80064aa <_vfiprintf_r+0x1fe>
 800649e:	89ab      	ldrh	r3, [r5, #12]
 80064a0:	059a      	lsls	r2, r3, #22
 80064a2:	d402      	bmi.n	80064aa <_vfiprintf_r+0x1fe>
 80064a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80064a6:	f7ff fdbf 	bl	8006028 <__retarget_lock_release_recursive>
 80064aa:	89ab      	ldrh	r3, [r5, #12]
 80064ac:	065b      	lsls	r3, r3, #25
 80064ae:	f53f af1f 	bmi.w	80062f0 <_vfiprintf_r+0x44>
 80064b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80064b4:	e71e      	b.n	80062f4 <_vfiprintf_r+0x48>
 80064b6:	ab03      	add	r3, sp, #12
 80064b8:	9300      	str	r3, [sp, #0]
 80064ba:	462a      	mov	r2, r5
 80064bc:	4b05      	ldr	r3, [pc, #20]	@ (80064d4 <_vfiprintf_r+0x228>)
 80064be:	a904      	add	r1, sp, #16
 80064c0:	4630      	mov	r0, r6
 80064c2:	f000 f879 	bl	80065b8 <_printf_i>
 80064c6:	e7e4      	b.n	8006492 <_vfiprintf_r+0x1e6>
 80064c8:	08006c30 	.word	0x08006c30
 80064cc:	08006c3a 	.word	0x08006c3a
 80064d0:	00000000 	.word	0x00000000
 80064d4:	08006287 	.word	0x08006287
 80064d8:	08006c36 	.word	0x08006c36

080064dc <_printf_common>:
 80064dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064e0:	4616      	mov	r6, r2
 80064e2:	4698      	mov	r8, r3
 80064e4:	688a      	ldr	r2, [r1, #8]
 80064e6:	690b      	ldr	r3, [r1, #16]
 80064e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80064ec:	4293      	cmp	r3, r2
 80064ee:	bfb8      	it	lt
 80064f0:	4613      	movlt	r3, r2
 80064f2:	6033      	str	r3, [r6, #0]
 80064f4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80064f8:	4607      	mov	r7, r0
 80064fa:	460c      	mov	r4, r1
 80064fc:	b10a      	cbz	r2, 8006502 <_printf_common+0x26>
 80064fe:	3301      	adds	r3, #1
 8006500:	6033      	str	r3, [r6, #0]
 8006502:	6823      	ldr	r3, [r4, #0]
 8006504:	0699      	lsls	r1, r3, #26
 8006506:	bf42      	ittt	mi
 8006508:	6833      	ldrmi	r3, [r6, #0]
 800650a:	3302      	addmi	r3, #2
 800650c:	6033      	strmi	r3, [r6, #0]
 800650e:	6825      	ldr	r5, [r4, #0]
 8006510:	f015 0506 	ands.w	r5, r5, #6
 8006514:	d106      	bne.n	8006524 <_printf_common+0x48>
 8006516:	f104 0a19 	add.w	sl, r4, #25
 800651a:	68e3      	ldr	r3, [r4, #12]
 800651c:	6832      	ldr	r2, [r6, #0]
 800651e:	1a9b      	subs	r3, r3, r2
 8006520:	42ab      	cmp	r3, r5
 8006522:	dc26      	bgt.n	8006572 <_printf_common+0x96>
 8006524:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006528:	6822      	ldr	r2, [r4, #0]
 800652a:	3b00      	subs	r3, #0
 800652c:	bf18      	it	ne
 800652e:	2301      	movne	r3, #1
 8006530:	0692      	lsls	r2, r2, #26
 8006532:	d42b      	bmi.n	800658c <_printf_common+0xb0>
 8006534:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006538:	4641      	mov	r1, r8
 800653a:	4638      	mov	r0, r7
 800653c:	47c8      	blx	r9
 800653e:	3001      	adds	r0, #1
 8006540:	d01e      	beq.n	8006580 <_printf_common+0xa4>
 8006542:	6823      	ldr	r3, [r4, #0]
 8006544:	6922      	ldr	r2, [r4, #16]
 8006546:	f003 0306 	and.w	r3, r3, #6
 800654a:	2b04      	cmp	r3, #4
 800654c:	bf02      	ittt	eq
 800654e:	68e5      	ldreq	r5, [r4, #12]
 8006550:	6833      	ldreq	r3, [r6, #0]
 8006552:	1aed      	subeq	r5, r5, r3
 8006554:	68a3      	ldr	r3, [r4, #8]
 8006556:	bf0c      	ite	eq
 8006558:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800655c:	2500      	movne	r5, #0
 800655e:	4293      	cmp	r3, r2
 8006560:	bfc4      	itt	gt
 8006562:	1a9b      	subgt	r3, r3, r2
 8006564:	18ed      	addgt	r5, r5, r3
 8006566:	2600      	movs	r6, #0
 8006568:	341a      	adds	r4, #26
 800656a:	42b5      	cmp	r5, r6
 800656c:	d11a      	bne.n	80065a4 <_printf_common+0xc8>
 800656e:	2000      	movs	r0, #0
 8006570:	e008      	b.n	8006584 <_printf_common+0xa8>
 8006572:	2301      	movs	r3, #1
 8006574:	4652      	mov	r2, sl
 8006576:	4641      	mov	r1, r8
 8006578:	4638      	mov	r0, r7
 800657a:	47c8      	blx	r9
 800657c:	3001      	adds	r0, #1
 800657e:	d103      	bne.n	8006588 <_printf_common+0xac>
 8006580:	f04f 30ff 	mov.w	r0, #4294967295
 8006584:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006588:	3501      	adds	r5, #1
 800658a:	e7c6      	b.n	800651a <_printf_common+0x3e>
 800658c:	18e1      	adds	r1, r4, r3
 800658e:	1c5a      	adds	r2, r3, #1
 8006590:	2030      	movs	r0, #48	@ 0x30
 8006592:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006596:	4422      	add	r2, r4
 8006598:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800659c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80065a0:	3302      	adds	r3, #2
 80065a2:	e7c7      	b.n	8006534 <_printf_common+0x58>
 80065a4:	2301      	movs	r3, #1
 80065a6:	4622      	mov	r2, r4
 80065a8:	4641      	mov	r1, r8
 80065aa:	4638      	mov	r0, r7
 80065ac:	47c8      	blx	r9
 80065ae:	3001      	adds	r0, #1
 80065b0:	d0e6      	beq.n	8006580 <_printf_common+0xa4>
 80065b2:	3601      	adds	r6, #1
 80065b4:	e7d9      	b.n	800656a <_printf_common+0x8e>
	...

080065b8 <_printf_i>:
 80065b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80065bc:	7e0f      	ldrb	r7, [r1, #24]
 80065be:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80065c0:	2f78      	cmp	r7, #120	@ 0x78
 80065c2:	4691      	mov	r9, r2
 80065c4:	4680      	mov	r8, r0
 80065c6:	460c      	mov	r4, r1
 80065c8:	469a      	mov	sl, r3
 80065ca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80065ce:	d807      	bhi.n	80065e0 <_printf_i+0x28>
 80065d0:	2f62      	cmp	r7, #98	@ 0x62
 80065d2:	d80a      	bhi.n	80065ea <_printf_i+0x32>
 80065d4:	2f00      	cmp	r7, #0
 80065d6:	f000 80d1 	beq.w	800677c <_printf_i+0x1c4>
 80065da:	2f58      	cmp	r7, #88	@ 0x58
 80065dc:	f000 80b8 	beq.w	8006750 <_printf_i+0x198>
 80065e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80065e4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80065e8:	e03a      	b.n	8006660 <_printf_i+0xa8>
 80065ea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80065ee:	2b15      	cmp	r3, #21
 80065f0:	d8f6      	bhi.n	80065e0 <_printf_i+0x28>
 80065f2:	a101      	add	r1, pc, #4	@ (adr r1, 80065f8 <_printf_i+0x40>)
 80065f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80065f8:	08006651 	.word	0x08006651
 80065fc:	08006665 	.word	0x08006665
 8006600:	080065e1 	.word	0x080065e1
 8006604:	080065e1 	.word	0x080065e1
 8006608:	080065e1 	.word	0x080065e1
 800660c:	080065e1 	.word	0x080065e1
 8006610:	08006665 	.word	0x08006665
 8006614:	080065e1 	.word	0x080065e1
 8006618:	080065e1 	.word	0x080065e1
 800661c:	080065e1 	.word	0x080065e1
 8006620:	080065e1 	.word	0x080065e1
 8006624:	08006763 	.word	0x08006763
 8006628:	0800668f 	.word	0x0800668f
 800662c:	0800671d 	.word	0x0800671d
 8006630:	080065e1 	.word	0x080065e1
 8006634:	080065e1 	.word	0x080065e1
 8006638:	08006785 	.word	0x08006785
 800663c:	080065e1 	.word	0x080065e1
 8006640:	0800668f 	.word	0x0800668f
 8006644:	080065e1 	.word	0x080065e1
 8006648:	080065e1 	.word	0x080065e1
 800664c:	08006725 	.word	0x08006725
 8006650:	6833      	ldr	r3, [r6, #0]
 8006652:	1d1a      	adds	r2, r3, #4
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	6032      	str	r2, [r6, #0]
 8006658:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800665c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006660:	2301      	movs	r3, #1
 8006662:	e09c      	b.n	800679e <_printf_i+0x1e6>
 8006664:	6833      	ldr	r3, [r6, #0]
 8006666:	6820      	ldr	r0, [r4, #0]
 8006668:	1d19      	adds	r1, r3, #4
 800666a:	6031      	str	r1, [r6, #0]
 800666c:	0606      	lsls	r6, r0, #24
 800666e:	d501      	bpl.n	8006674 <_printf_i+0xbc>
 8006670:	681d      	ldr	r5, [r3, #0]
 8006672:	e003      	b.n	800667c <_printf_i+0xc4>
 8006674:	0645      	lsls	r5, r0, #25
 8006676:	d5fb      	bpl.n	8006670 <_printf_i+0xb8>
 8006678:	f9b3 5000 	ldrsh.w	r5, [r3]
 800667c:	2d00      	cmp	r5, #0
 800667e:	da03      	bge.n	8006688 <_printf_i+0xd0>
 8006680:	232d      	movs	r3, #45	@ 0x2d
 8006682:	426d      	negs	r5, r5
 8006684:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006688:	4858      	ldr	r0, [pc, #352]	@ (80067ec <_printf_i+0x234>)
 800668a:	230a      	movs	r3, #10
 800668c:	e011      	b.n	80066b2 <_printf_i+0xfa>
 800668e:	6821      	ldr	r1, [r4, #0]
 8006690:	6833      	ldr	r3, [r6, #0]
 8006692:	0608      	lsls	r0, r1, #24
 8006694:	f853 5b04 	ldr.w	r5, [r3], #4
 8006698:	d402      	bmi.n	80066a0 <_printf_i+0xe8>
 800669a:	0649      	lsls	r1, r1, #25
 800669c:	bf48      	it	mi
 800669e:	b2ad      	uxthmi	r5, r5
 80066a0:	2f6f      	cmp	r7, #111	@ 0x6f
 80066a2:	4852      	ldr	r0, [pc, #328]	@ (80067ec <_printf_i+0x234>)
 80066a4:	6033      	str	r3, [r6, #0]
 80066a6:	bf14      	ite	ne
 80066a8:	230a      	movne	r3, #10
 80066aa:	2308      	moveq	r3, #8
 80066ac:	2100      	movs	r1, #0
 80066ae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80066b2:	6866      	ldr	r6, [r4, #4]
 80066b4:	60a6      	str	r6, [r4, #8]
 80066b6:	2e00      	cmp	r6, #0
 80066b8:	db05      	blt.n	80066c6 <_printf_i+0x10e>
 80066ba:	6821      	ldr	r1, [r4, #0]
 80066bc:	432e      	orrs	r6, r5
 80066be:	f021 0104 	bic.w	r1, r1, #4
 80066c2:	6021      	str	r1, [r4, #0]
 80066c4:	d04b      	beq.n	800675e <_printf_i+0x1a6>
 80066c6:	4616      	mov	r6, r2
 80066c8:	fbb5 f1f3 	udiv	r1, r5, r3
 80066cc:	fb03 5711 	mls	r7, r3, r1, r5
 80066d0:	5dc7      	ldrb	r7, [r0, r7]
 80066d2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80066d6:	462f      	mov	r7, r5
 80066d8:	42bb      	cmp	r3, r7
 80066da:	460d      	mov	r5, r1
 80066dc:	d9f4      	bls.n	80066c8 <_printf_i+0x110>
 80066de:	2b08      	cmp	r3, #8
 80066e0:	d10b      	bne.n	80066fa <_printf_i+0x142>
 80066e2:	6823      	ldr	r3, [r4, #0]
 80066e4:	07df      	lsls	r7, r3, #31
 80066e6:	d508      	bpl.n	80066fa <_printf_i+0x142>
 80066e8:	6923      	ldr	r3, [r4, #16]
 80066ea:	6861      	ldr	r1, [r4, #4]
 80066ec:	4299      	cmp	r1, r3
 80066ee:	bfde      	ittt	le
 80066f0:	2330      	movle	r3, #48	@ 0x30
 80066f2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80066f6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80066fa:	1b92      	subs	r2, r2, r6
 80066fc:	6122      	str	r2, [r4, #16]
 80066fe:	f8cd a000 	str.w	sl, [sp]
 8006702:	464b      	mov	r3, r9
 8006704:	aa03      	add	r2, sp, #12
 8006706:	4621      	mov	r1, r4
 8006708:	4640      	mov	r0, r8
 800670a:	f7ff fee7 	bl	80064dc <_printf_common>
 800670e:	3001      	adds	r0, #1
 8006710:	d14a      	bne.n	80067a8 <_printf_i+0x1f0>
 8006712:	f04f 30ff 	mov.w	r0, #4294967295
 8006716:	b004      	add	sp, #16
 8006718:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800671c:	6823      	ldr	r3, [r4, #0]
 800671e:	f043 0320 	orr.w	r3, r3, #32
 8006722:	6023      	str	r3, [r4, #0]
 8006724:	4832      	ldr	r0, [pc, #200]	@ (80067f0 <_printf_i+0x238>)
 8006726:	2778      	movs	r7, #120	@ 0x78
 8006728:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800672c:	6823      	ldr	r3, [r4, #0]
 800672e:	6831      	ldr	r1, [r6, #0]
 8006730:	061f      	lsls	r7, r3, #24
 8006732:	f851 5b04 	ldr.w	r5, [r1], #4
 8006736:	d402      	bmi.n	800673e <_printf_i+0x186>
 8006738:	065f      	lsls	r7, r3, #25
 800673a:	bf48      	it	mi
 800673c:	b2ad      	uxthmi	r5, r5
 800673e:	6031      	str	r1, [r6, #0]
 8006740:	07d9      	lsls	r1, r3, #31
 8006742:	bf44      	itt	mi
 8006744:	f043 0320 	orrmi.w	r3, r3, #32
 8006748:	6023      	strmi	r3, [r4, #0]
 800674a:	b11d      	cbz	r5, 8006754 <_printf_i+0x19c>
 800674c:	2310      	movs	r3, #16
 800674e:	e7ad      	b.n	80066ac <_printf_i+0xf4>
 8006750:	4826      	ldr	r0, [pc, #152]	@ (80067ec <_printf_i+0x234>)
 8006752:	e7e9      	b.n	8006728 <_printf_i+0x170>
 8006754:	6823      	ldr	r3, [r4, #0]
 8006756:	f023 0320 	bic.w	r3, r3, #32
 800675a:	6023      	str	r3, [r4, #0]
 800675c:	e7f6      	b.n	800674c <_printf_i+0x194>
 800675e:	4616      	mov	r6, r2
 8006760:	e7bd      	b.n	80066de <_printf_i+0x126>
 8006762:	6833      	ldr	r3, [r6, #0]
 8006764:	6825      	ldr	r5, [r4, #0]
 8006766:	6961      	ldr	r1, [r4, #20]
 8006768:	1d18      	adds	r0, r3, #4
 800676a:	6030      	str	r0, [r6, #0]
 800676c:	062e      	lsls	r6, r5, #24
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	d501      	bpl.n	8006776 <_printf_i+0x1be>
 8006772:	6019      	str	r1, [r3, #0]
 8006774:	e002      	b.n	800677c <_printf_i+0x1c4>
 8006776:	0668      	lsls	r0, r5, #25
 8006778:	d5fb      	bpl.n	8006772 <_printf_i+0x1ba>
 800677a:	8019      	strh	r1, [r3, #0]
 800677c:	2300      	movs	r3, #0
 800677e:	6123      	str	r3, [r4, #16]
 8006780:	4616      	mov	r6, r2
 8006782:	e7bc      	b.n	80066fe <_printf_i+0x146>
 8006784:	6833      	ldr	r3, [r6, #0]
 8006786:	1d1a      	adds	r2, r3, #4
 8006788:	6032      	str	r2, [r6, #0]
 800678a:	681e      	ldr	r6, [r3, #0]
 800678c:	6862      	ldr	r2, [r4, #4]
 800678e:	2100      	movs	r1, #0
 8006790:	4630      	mov	r0, r6
 8006792:	f7f9 fd1d 	bl	80001d0 <memchr>
 8006796:	b108      	cbz	r0, 800679c <_printf_i+0x1e4>
 8006798:	1b80      	subs	r0, r0, r6
 800679a:	6060      	str	r0, [r4, #4]
 800679c:	6863      	ldr	r3, [r4, #4]
 800679e:	6123      	str	r3, [r4, #16]
 80067a0:	2300      	movs	r3, #0
 80067a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80067a6:	e7aa      	b.n	80066fe <_printf_i+0x146>
 80067a8:	6923      	ldr	r3, [r4, #16]
 80067aa:	4632      	mov	r2, r6
 80067ac:	4649      	mov	r1, r9
 80067ae:	4640      	mov	r0, r8
 80067b0:	47d0      	blx	sl
 80067b2:	3001      	adds	r0, #1
 80067b4:	d0ad      	beq.n	8006712 <_printf_i+0x15a>
 80067b6:	6823      	ldr	r3, [r4, #0]
 80067b8:	079b      	lsls	r3, r3, #30
 80067ba:	d413      	bmi.n	80067e4 <_printf_i+0x22c>
 80067bc:	68e0      	ldr	r0, [r4, #12]
 80067be:	9b03      	ldr	r3, [sp, #12]
 80067c0:	4298      	cmp	r0, r3
 80067c2:	bfb8      	it	lt
 80067c4:	4618      	movlt	r0, r3
 80067c6:	e7a6      	b.n	8006716 <_printf_i+0x15e>
 80067c8:	2301      	movs	r3, #1
 80067ca:	4632      	mov	r2, r6
 80067cc:	4649      	mov	r1, r9
 80067ce:	4640      	mov	r0, r8
 80067d0:	47d0      	blx	sl
 80067d2:	3001      	adds	r0, #1
 80067d4:	d09d      	beq.n	8006712 <_printf_i+0x15a>
 80067d6:	3501      	adds	r5, #1
 80067d8:	68e3      	ldr	r3, [r4, #12]
 80067da:	9903      	ldr	r1, [sp, #12]
 80067dc:	1a5b      	subs	r3, r3, r1
 80067de:	42ab      	cmp	r3, r5
 80067e0:	dcf2      	bgt.n	80067c8 <_printf_i+0x210>
 80067e2:	e7eb      	b.n	80067bc <_printf_i+0x204>
 80067e4:	2500      	movs	r5, #0
 80067e6:	f104 0619 	add.w	r6, r4, #25
 80067ea:	e7f5      	b.n	80067d8 <_printf_i+0x220>
 80067ec:	08006c41 	.word	0x08006c41
 80067f0:	08006c52 	.word	0x08006c52

080067f4 <__sflush_r>:
 80067f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80067f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067fc:	0716      	lsls	r6, r2, #28
 80067fe:	4605      	mov	r5, r0
 8006800:	460c      	mov	r4, r1
 8006802:	d454      	bmi.n	80068ae <__sflush_r+0xba>
 8006804:	684b      	ldr	r3, [r1, #4]
 8006806:	2b00      	cmp	r3, #0
 8006808:	dc02      	bgt.n	8006810 <__sflush_r+0x1c>
 800680a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800680c:	2b00      	cmp	r3, #0
 800680e:	dd48      	ble.n	80068a2 <__sflush_r+0xae>
 8006810:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006812:	2e00      	cmp	r6, #0
 8006814:	d045      	beq.n	80068a2 <__sflush_r+0xae>
 8006816:	2300      	movs	r3, #0
 8006818:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800681c:	682f      	ldr	r7, [r5, #0]
 800681e:	6a21      	ldr	r1, [r4, #32]
 8006820:	602b      	str	r3, [r5, #0]
 8006822:	d030      	beq.n	8006886 <__sflush_r+0x92>
 8006824:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006826:	89a3      	ldrh	r3, [r4, #12]
 8006828:	0759      	lsls	r1, r3, #29
 800682a:	d505      	bpl.n	8006838 <__sflush_r+0x44>
 800682c:	6863      	ldr	r3, [r4, #4]
 800682e:	1ad2      	subs	r2, r2, r3
 8006830:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006832:	b10b      	cbz	r3, 8006838 <__sflush_r+0x44>
 8006834:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006836:	1ad2      	subs	r2, r2, r3
 8006838:	2300      	movs	r3, #0
 800683a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800683c:	6a21      	ldr	r1, [r4, #32]
 800683e:	4628      	mov	r0, r5
 8006840:	47b0      	blx	r6
 8006842:	1c43      	adds	r3, r0, #1
 8006844:	89a3      	ldrh	r3, [r4, #12]
 8006846:	d106      	bne.n	8006856 <__sflush_r+0x62>
 8006848:	6829      	ldr	r1, [r5, #0]
 800684a:	291d      	cmp	r1, #29
 800684c:	d82b      	bhi.n	80068a6 <__sflush_r+0xb2>
 800684e:	4a2a      	ldr	r2, [pc, #168]	@ (80068f8 <__sflush_r+0x104>)
 8006850:	40ca      	lsrs	r2, r1
 8006852:	07d6      	lsls	r6, r2, #31
 8006854:	d527      	bpl.n	80068a6 <__sflush_r+0xb2>
 8006856:	2200      	movs	r2, #0
 8006858:	6062      	str	r2, [r4, #4]
 800685a:	04d9      	lsls	r1, r3, #19
 800685c:	6922      	ldr	r2, [r4, #16]
 800685e:	6022      	str	r2, [r4, #0]
 8006860:	d504      	bpl.n	800686c <__sflush_r+0x78>
 8006862:	1c42      	adds	r2, r0, #1
 8006864:	d101      	bne.n	800686a <__sflush_r+0x76>
 8006866:	682b      	ldr	r3, [r5, #0]
 8006868:	b903      	cbnz	r3, 800686c <__sflush_r+0x78>
 800686a:	6560      	str	r0, [r4, #84]	@ 0x54
 800686c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800686e:	602f      	str	r7, [r5, #0]
 8006870:	b1b9      	cbz	r1, 80068a2 <__sflush_r+0xae>
 8006872:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006876:	4299      	cmp	r1, r3
 8006878:	d002      	beq.n	8006880 <__sflush_r+0x8c>
 800687a:	4628      	mov	r0, r5
 800687c:	f7ff fbec 	bl	8006058 <_free_r>
 8006880:	2300      	movs	r3, #0
 8006882:	6363      	str	r3, [r4, #52]	@ 0x34
 8006884:	e00d      	b.n	80068a2 <__sflush_r+0xae>
 8006886:	2301      	movs	r3, #1
 8006888:	4628      	mov	r0, r5
 800688a:	47b0      	blx	r6
 800688c:	4602      	mov	r2, r0
 800688e:	1c50      	adds	r0, r2, #1
 8006890:	d1c9      	bne.n	8006826 <__sflush_r+0x32>
 8006892:	682b      	ldr	r3, [r5, #0]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d0c6      	beq.n	8006826 <__sflush_r+0x32>
 8006898:	2b1d      	cmp	r3, #29
 800689a:	d001      	beq.n	80068a0 <__sflush_r+0xac>
 800689c:	2b16      	cmp	r3, #22
 800689e:	d11e      	bne.n	80068de <__sflush_r+0xea>
 80068a0:	602f      	str	r7, [r5, #0]
 80068a2:	2000      	movs	r0, #0
 80068a4:	e022      	b.n	80068ec <__sflush_r+0xf8>
 80068a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80068aa:	b21b      	sxth	r3, r3
 80068ac:	e01b      	b.n	80068e6 <__sflush_r+0xf2>
 80068ae:	690f      	ldr	r7, [r1, #16]
 80068b0:	2f00      	cmp	r7, #0
 80068b2:	d0f6      	beq.n	80068a2 <__sflush_r+0xae>
 80068b4:	0793      	lsls	r3, r2, #30
 80068b6:	680e      	ldr	r6, [r1, #0]
 80068b8:	bf08      	it	eq
 80068ba:	694b      	ldreq	r3, [r1, #20]
 80068bc:	600f      	str	r7, [r1, #0]
 80068be:	bf18      	it	ne
 80068c0:	2300      	movne	r3, #0
 80068c2:	eba6 0807 	sub.w	r8, r6, r7
 80068c6:	608b      	str	r3, [r1, #8]
 80068c8:	f1b8 0f00 	cmp.w	r8, #0
 80068cc:	dde9      	ble.n	80068a2 <__sflush_r+0xae>
 80068ce:	6a21      	ldr	r1, [r4, #32]
 80068d0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80068d2:	4643      	mov	r3, r8
 80068d4:	463a      	mov	r2, r7
 80068d6:	4628      	mov	r0, r5
 80068d8:	47b0      	blx	r6
 80068da:	2800      	cmp	r0, #0
 80068dc:	dc08      	bgt.n	80068f0 <__sflush_r+0xfc>
 80068de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80068e6:	81a3      	strh	r3, [r4, #12]
 80068e8:	f04f 30ff 	mov.w	r0, #4294967295
 80068ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068f0:	4407      	add	r7, r0
 80068f2:	eba8 0800 	sub.w	r8, r8, r0
 80068f6:	e7e7      	b.n	80068c8 <__sflush_r+0xd4>
 80068f8:	20400001 	.word	0x20400001

080068fc <_fflush_r>:
 80068fc:	b538      	push	{r3, r4, r5, lr}
 80068fe:	690b      	ldr	r3, [r1, #16]
 8006900:	4605      	mov	r5, r0
 8006902:	460c      	mov	r4, r1
 8006904:	b913      	cbnz	r3, 800690c <_fflush_r+0x10>
 8006906:	2500      	movs	r5, #0
 8006908:	4628      	mov	r0, r5
 800690a:	bd38      	pop	{r3, r4, r5, pc}
 800690c:	b118      	cbz	r0, 8006916 <_fflush_r+0x1a>
 800690e:	6a03      	ldr	r3, [r0, #32]
 8006910:	b90b      	cbnz	r3, 8006916 <_fflush_r+0x1a>
 8006912:	f7ff f9cf 	bl	8005cb4 <__sinit>
 8006916:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d0f3      	beq.n	8006906 <_fflush_r+0xa>
 800691e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006920:	07d0      	lsls	r0, r2, #31
 8006922:	d404      	bmi.n	800692e <_fflush_r+0x32>
 8006924:	0599      	lsls	r1, r3, #22
 8006926:	d402      	bmi.n	800692e <_fflush_r+0x32>
 8006928:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800692a:	f7ff fb7c 	bl	8006026 <__retarget_lock_acquire_recursive>
 800692e:	4628      	mov	r0, r5
 8006930:	4621      	mov	r1, r4
 8006932:	f7ff ff5f 	bl	80067f4 <__sflush_r>
 8006936:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006938:	07da      	lsls	r2, r3, #31
 800693a:	4605      	mov	r5, r0
 800693c:	d4e4      	bmi.n	8006908 <_fflush_r+0xc>
 800693e:	89a3      	ldrh	r3, [r4, #12]
 8006940:	059b      	lsls	r3, r3, #22
 8006942:	d4e1      	bmi.n	8006908 <_fflush_r+0xc>
 8006944:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006946:	f7ff fb6f 	bl	8006028 <__retarget_lock_release_recursive>
 800694a:	e7dd      	b.n	8006908 <_fflush_r+0xc>

0800694c <__swhatbuf_r>:
 800694c:	b570      	push	{r4, r5, r6, lr}
 800694e:	460c      	mov	r4, r1
 8006950:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006954:	2900      	cmp	r1, #0
 8006956:	b096      	sub	sp, #88	@ 0x58
 8006958:	4615      	mov	r5, r2
 800695a:	461e      	mov	r6, r3
 800695c:	da0d      	bge.n	800697a <__swhatbuf_r+0x2e>
 800695e:	89a3      	ldrh	r3, [r4, #12]
 8006960:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006964:	f04f 0100 	mov.w	r1, #0
 8006968:	bf14      	ite	ne
 800696a:	2340      	movne	r3, #64	@ 0x40
 800696c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006970:	2000      	movs	r0, #0
 8006972:	6031      	str	r1, [r6, #0]
 8006974:	602b      	str	r3, [r5, #0]
 8006976:	b016      	add	sp, #88	@ 0x58
 8006978:	bd70      	pop	{r4, r5, r6, pc}
 800697a:	466a      	mov	r2, sp
 800697c:	f000 f8dc 	bl	8006b38 <_fstat_r>
 8006980:	2800      	cmp	r0, #0
 8006982:	dbec      	blt.n	800695e <__swhatbuf_r+0x12>
 8006984:	9901      	ldr	r1, [sp, #4]
 8006986:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800698a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800698e:	4259      	negs	r1, r3
 8006990:	4159      	adcs	r1, r3
 8006992:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006996:	e7eb      	b.n	8006970 <__swhatbuf_r+0x24>

08006998 <__smakebuf_r>:
 8006998:	898b      	ldrh	r3, [r1, #12]
 800699a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800699c:	079d      	lsls	r5, r3, #30
 800699e:	4606      	mov	r6, r0
 80069a0:	460c      	mov	r4, r1
 80069a2:	d507      	bpl.n	80069b4 <__smakebuf_r+0x1c>
 80069a4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80069a8:	6023      	str	r3, [r4, #0]
 80069aa:	6123      	str	r3, [r4, #16]
 80069ac:	2301      	movs	r3, #1
 80069ae:	6163      	str	r3, [r4, #20]
 80069b0:	b003      	add	sp, #12
 80069b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069b4:	ab01      	add	r3, sp, #4
 80069b6:	466a      	mov	r2, sp
 80069b8:	f7ff ffc8 	bl	800694c <__swhatbuf_r>
 80069bc:	9f00      	ldr	r7, [sp, #0]
 80069be:	4605      	mov	r5, r0
 80069c0:	4639      	mov	r1, r7
 80069c2:	4630      	mov	r0, r6
 80069c4:	f7ff fbbc 	bl	8006140 <_malloc_r>
 80069c8:	b948      	cbnz	r0, 80069de <__smakebuf_r+0x46>
 80069ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069ce:	059a      	lsls	r2, r3, #22
 80069d0:	d4ee      	bmi.n	80069b0 <__smakebuf_r+0x18>
 80069d2:	f023 0303 	bic.w	r3, r3, #3
 80069d6:	f043 0302 	orr.w	r3, r3, #2
 80069da:	81a3      	strh	r3, [r4, #12]
 80069dc:	e7e2      	b.n	80069a4 <__smakebuf_r+0xc>
 80069de:	89a3      	ldrh	r3, [r4, #12]
 80069e0:	6020      	str	r0, [r4, #0]
 80069e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069e6:	81a3      	strh	r3, [r4, #12]
 80069e8:	9b01      	ldr	r3, [sp, #4]
 80069ea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80069ee:	b15b      	cbz	r3, 8006a08 <__smakebuf_r+0x70>
 80069f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80069f4:	4630      	mov	r0, r6
 80069f6:	f000 f8b1 	bl	8006b5c <_isatty_r>
 80069fa:	b128      	cbz	r0, 8006a08 <__smakebuf_r+0x70>
 80069fc:	89a3      	ldrh	r3, [r4, #12]
 80069fe:	f023 0303 	bic.w	r3, r3, #3
 8006a02:	f043 0301 	orr.w	r3, r3, #1
 8006a06:	81a3      	strh	r3, [r4, #12]
 8006a08:	89a3      	ldrh	r3, [r4, #12]
 8006a0a:	431d      	orrs	r5, r3
 8006a0c:	81a5      	strh	r5, [r4, #12]
 8006a0e:	e7cf      	b.n	80069b0 <__smakebuf_r+0x18>

08006a10 <__swbuf_r>:
 8006a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a12:	460e      	mov	r6, r1
 8006a14:	4614      	mov	r4, r2
 8006a16:	4605      	mov	r5, r0
 8006a18:	b118      	cbz	r0, 8006a22 <__swbuf_r+0x12>
 8006a1a:	6a03      	ldr	r3, [r0, #32]
 8006a1c:	b90b      	cbnz	r3, 8006a22 <__swbuf_r+0x12>
 8006a1e:	f7ff f949 	bl	8005cb4 <__sinit>
 8006a22:	69a3      	ldr	r3, [r4, #24]
 8006a24:	60a3      	str	r3, [r4, #8]
 8006a26:	89a3      	ldrh	r3, [r4, #12]
 8006a28:	071a      	lsls	r2, r3, #28
 8006a2a:	d501      	bpl.n	8006a30 <__swbuf_r+0x20>
 8006a2c:	6923      	ldr	r3, [r4, #16]
 8006a2e:	b943      	cbnz	r3, 8006a42 <__swbuf_r+0x32>
 8006a30:	4621      	mov	r1, r4
 8006a32:	4628      	mov	r0, r5
 8006a34:	f000 f82a 	bl	8006a8c <__swsetup_r>
 8006a38:	b118      	cbz	r0, 8006a42 <__swbuf_r+0x32>
 8006a3a:	f04f 37ff 	mov.w	r7, #4294967295
 8006a3e:	4638      	mov	r0, r7
 8006a40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a42:	6823      	ldr	r3, [r4, #0]
 8006a44:	6922      	ldr	r2, [r4, #16]
 8006a46:	1a98      	subs	r0, r3, r2
 8006a48:	6963      	ldr	r3, [r4, #20]
 8006a4a:	b2f6      	uxtb	r6, r6
 8006a4c:	4283      	cmp	r3, r0
 8006a4e:	4637      	mov	r7, r6
 8006a50:	dc05      	bgt.n	8006a5e <__swbuf_r+0x4e>
 8006a52:	4621      	mov	r1, r4
 8006a54:	4628      	mov	r0, r5
 8006a56:	f7ff ff51 	bl	80068fc <_fflush_r>
 8006a5a:	2800      	cmp	r0, #0
 8006a5c:	d1ed      	bne.n	8006a3a <__swbuf_r+0x2a>
 8006a5e:	68a3      	ldr	r3, [r4, #8]
 8006a60:	3b01      	subs	r3, #1
 8006a62:	60a3      	str	r3, [r4, #8]
 8006a64:	6823      	ldr	r3, [r4, #0]
 8006a66:	1c5a      	adds	r2, r3, #1
 8006a68:	6022      	str	r2, [r4, #0]
 8006a6a:	701e      	strb	r6, [r3, #0]
 8006a6c:	6962      	ldr	r2, [r4, #20]
 8006a6e:	1c43      	adds	r3, r0, #1
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d004      	beq.n	8006a7e <__swbuf_r+0x6e>
 8006a74:	89a3      	ldrh	r3, [r4, #12]
 8006a76:	07db      	lsls	r3, r3, #31
 8006a78:	d5e1      	bpl.n	8006a3e <__swbuf_r+0x2e>
 8006a7a:	2e0a      	cmp	r6, #10
 8006a7c:	d1df      	bne.n	8006a3e <__swbuf_r+0x2e>
 8006a7e:	4621      	mov	r1, r4
 8006a80:	4628      	mov	r0, r5
 8006a82:	f7ff ff3b 	bl	80068fc <_fflush_r>
 8006a86:	2800      	cmp	r0, #0
 8006a88:	d0d9      	beq.n	8006a3e <__swbuf_r+0x2e>
 8006a8a:	e7d6      	b.n	8006a3a <__swbuf_r+0x2a>

08006a8c <__swsetup_r>:
 8006a8c:	b538      	push	{r3, r4, r5, lr}
 8006a8e:	4b29      	ldr	r3, [pc, #164]	@ (8006b34 <__swsetup_r+0xa8>)
 8006a90:	4605      	mov	r5, r0
 8006a92:	6818      	ldr	r0, [r3, #0]
 8006a94:	460c      	mov	r4, r1
 8006a96:	b118      	cbz	r0, 8006aa0 <__swsetup_r+0x14>
 8006a98:	6a03      	ldr	r3, [r0, #32]
 8006a9a:	b90b      	cbnz	r3, 8006aa0 <__swsetup_r+0x14>
 8006a9c:	f7ff f90a 	bl	8005cb4 <__sinit>
 8006aa0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006aa4:	0719      	lsls	r1, r3, #28
 8006aa6:	d422      	bmi.n	8006aee <__swsetup_r+0x62>
 8006aa8:	06da      	lsls	r2, r3, #27
 8006aaa:	d407      	bmi.n	8006abc <__swsetup_r+0x30>
 8006aac:	2209      	movs	r2, #9
 8006aae:	602a      	str	r2, [r5, #0]
 8006ab0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ab4:	81a3      	strh	r3, [r4, #12]
 8006ab6:	f04f 30ff 	mov.w	r0, #4294967295
 8006aba:	e033      	b.n	8006b24 <__swsetup_r+0x98>
 8006abc:	0758      	lsls	r0, r3, #29
 8006abe:	d512      	bpl.n	8006ae6 <__swsetup_r+0x5a>
 8006ac0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006ac2:	b141      	cbz	r1, 8006ad6 <__swsetup_r+0x4a>
 8006ac4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006ac8:	4299      	cmp	r1, r3
 8006aca:	d002      	beq.n	8006ad2 <__swsetup_r+0x46>
 8006acc:	4628      	mov	r0, r5
 8006ace:	f7ff fac3 	bl	8006058 <_free_r>
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	6363      	str	r3, [r4, #52]	@ 0x34
 8006ad6:	89a3      	ldrh	r3, [r4, #12]
 8006ad8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006adc:	81a3      	strh	r3, [r4, #12]
 8006ade:	2300      	movs	r3, #0
 8006ae0:	6063      	str	r3, [r4, #4]
 8006ae2:	6923      	ldr	r3, [r4, #16]
 8006ae4:	6023      	str	r3, [r4, #0]
 8006ae6:	89a3      	ldrh	r3, [r4, #12]
 8006ae8:	f043 0308 	orr.w	r3, r3, #8
 8006aec:	81a3      	strh	r3, [r4, #12]
 8006aee:	6923      	ldr	r3, [r4, #16]
 8006af0:	b94b      	cbnz	r3, 8006b06 <__swsetup_r+0x7a>
 8006af2:	89a3      	ldrh	r3, [r4, #12]
 8006af4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006af8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006afc:	d003      	beq.n	8006b06 <__swsetup_r+0x7a>
 8006afe:	4621      	mov	r1, r4
 8006b00:	4628      	mov	r0, r5
 8006b02:	f7ff ff49 	bl	8006998 <__smakebuf_r>
 8006b06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b0a:	f013 0201 	ands.w	r2, r3, #1
 8006b0e:	d00a      	beq.n	8006b26 <__swsetup_r+0x9a>
 8006b10:	2200      	movs	r2, #0
 8006b12:	60a2      	str	r2, [r4, #8]
 8006b14:	6962      	ldr	r2, [r4, #20]
 8006b16:	4252      	negs	r2, r2
 8006b18:	61a2      	str	r2, [r4, #24]
 8006b1a:	6922      	ldr	r2, [r4, #16]
 8006b1c:	b942      	cbnz	r2, 8006b30 <__swsetup_r+0xa4>
 8006b1e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006b22:	d1c5      	bne.n	8006ab0 <__swsetup_r+0x24>
 8006b24:	bd38      	pop	{r3, r4, r5, pc}
 8006b26:	0799      	lsls	r1, r3, #30
 8006b28:	bf58      	it	pl
 8006b2a:	6962      	ldrpl	r2, [r4, #20]
 8006b2c:	60a2      	str	r2, [r4, #8]
 8006b2e:	e7f4      	b.n	8006b1a <__swsetup_r+0x8e>
 8006b30:	2000      	movs	r0, #0
 8006b32:	e7f7      	b.n	8006b24 <__swsetup_r+0x98>
 8006b34:	20000038 	.word	0x20000038

08006b38 <_fstat_r>:
 8006b38:	b538      	push	{r3, r4, r5, lr}
 8006b3a:	4d07      	ldr	r5, [pc, #28]	@ (8006b58 <_fstat_r+0x20>)
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	4604      	mov	r4, r0
 8006b40:	4608      	mov	r0, r1
 8006b42:	4611      	mov	r1, r2
 8006b44:	602b      	str	r3, [r5, #0]
 8006b46:	f7fa fa8a 	bl	800105e <_fstat>
 8006b4a:	1c43      	adds	r3, r0, #1
 8006b4c:	d102      	bne.n	8006b54 <_fstat_r+0x1c>
 8006b4e:	682b      	ldr	r3, [r5, #0]
 8006b50:	b103      	cbz	r3, 8006b54 <_fstat_r+0x1c>
 8006b52:	6023      	str	r3, [r4, #0]
 8006b54:	bd38      	pop	{r3, r4, r5, pc}
 8006b56:	bf00      	nop
 8006b58:	200006f0 	.word	0x200006f0

08006b5c <_isatty_r>:
 8006b5c:	b538      	push	{r3, r4, r5, lr}
 8006b5e:	4d06      	ldr	r5, [pc, #24]	@ (8006b78 <_isatty_r+0x1c>)
 8006b60:	2300      	movs	r3, #0
 8006b62:	4604      	mov	r4, r0
 8006b64:	4608      	mov	r0, r1
 8006b66:	602b      	str	r3, [r5, #0]
 8006b68:	f7fa fa89 	bl	800107e <_isatty>
 8006b6c:	1c43      	adds	r3, r0, #1
 8006b6e:	d102      	bne.n	8006b76 <_isatty_r+0x1a>
 8006b70:	682b      	ldr	r3, [r5, #0]
 8006b72:	b103      	cbz	r3, 8006b76 <_isatty_r+0x1a>
 8006b74:	6023      	str	r3, [r4, #0]
 8006b76:	bd38      	pop	{r3, r4, r5, pc}
 8006b78:	200006f0 	.word	0x200006f0

08006b7c <_sbrk_r>:
 8006b7c:	b538      	push	{r3, r4, r5, lr}
 8006b7e:	4d06      	ldr	r5, [pc, #24]	@ (8006b98 <_sbrk_r+0x1c>)
 8006b80:	2300      	movs	r3, #0
 8006b82:	4604      	mov	r4, r0
 8006b84:	4608      	mov	r0, r1
 8006b86:	602b      	str	r3, [r5, #0]
 8006b88:	f7fa fa92 	bl	80010b0 <_sbrk>
 8006b8c:	1c43      	adds	r3, r0, #1
 8006b8e:	d102      	bne.n	8006b96 <_sbrk_r+0x1a>
 8006b90:	682b      	ldr	r3, [r5, #0]
 8006b92:	b103      	cbz	r3, 8006b96 <_sbrk_r+0x1a>
 8006b94:	6023      	str	r3, [r4, #0]
 8006b96:	bd38      	pop	{r3, r4, r5, pc}
 8006b98:	200006f0 	.word	0x200006f0

08006b9c <_init>:
 8006b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b9e:	bf00      	nop
 8006ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ba2:	bc08      	pop	{r3}
 8006ba4:	469e      	mov	lr, r3
 8006ba6:	4770      	bx	lr

08006ba8 <_fini>:
 8006ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006baa:	bf00      	nop
 8006bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bae:	bc08      	pop	{r3}
 8006bb0:	469e      	mov	lr, r3
 8006bb2:	4770      	bx	lr
